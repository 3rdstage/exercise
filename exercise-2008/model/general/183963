format 66
"sql" // src::javax::sql
  revision 3
  modified_by 27 "3rdstage"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "javax/sql"
  java_package "javax.sql"
  classview 178843 "sql"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 1094043 "ConnectionEvent"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<P>An <code>Event</code> object that provides information about the
source of a connection-related event.  <code>ConnectionEvent</code>
objects are generated when an application closes a pooled connection
and when an error occurs.  The <code>ConnectionEvent</code> object
contains two kinds of information:
<UL>
  <LI>The pooled connection closed by the application
  <LI>In the case of an error event, the <code>SQLException</code>
      about to be thrown to the application
</UL>

@since 1.4"
      classrelation 2228635 // <generalisation>
	relation 2228635 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2228635 // <generalisation>
	  b parent class_ref 147355 // EventObject
      end

      operation 8750235 "ConnectionEvent"
	public explicit_return_type ""
	nparams 1
	  param inout name "con" type class_ref 1094171 // PooledConnection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<P>Constructs a <code>ConnectionEvent</code> object initialized with
the given <code>PooledConnection</code> object. <code>SQLException</code>
defaults to <code>null</code>.

@param con the pooled connection that is the source of the event"
      end

      operation 8750363 "ConnectionEvent"
	public explicit_return_type ""
	nparams 2
	  param inout name "con" type class_ref 1094171 // PooledConnection
	  param inout name "ex" type class_ref 979995 // SQLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<P>Constructs a <code>ConnectionEvent</code> object initialized with
the given <code>PooledConnection</code> object and 
<code>SQLException</code> object.

@param con the pooled connection that is the source of the event
@param ex the SQLException about to be thrown to the application"
      end

      operation 8750491 "getSQLException"
	public return_type class_ref 979995 // SQLException
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<P>Retrieves the <code>SQLException</code> for this
<code>ConnectionEvent</code> object. May be <code>null</code>.

@return the SQLException about to be thrown or <code>null</code>"
      end

      classrelation 2228763 // ex (<unidirectional association>)
	relation 2228763 --->
	  a role_name "ex" init_value "=  null" private
	    comment "
The <code>SQLException</code> that the driver will throw to the
application when an error occurs and the pooled connection is no
longer usable.
@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2228763 // ex (<unidirectional association>)
	  b parent class_ref 979995 // SQLException
      end

      attribute 3157147 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value "=  -4843217645290030002L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Private serial version unique ID to ensure serialization
compatibility.
"
      end
    end

    class 1094171 "PooledConnection"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An object that provides hooks for connection pool management.  
A <code>PooledConnection</code> object
represents a physical connection to a data source.  The connection
can be recycled rather than being closed when an application is
finished with it, thus reducing the number of connections that
need to be made.
<P>
An application programmer does not use the <code>PooledConnection</code>
interface directly; rather, it is used by a middle tier infrastructure
that manages the pooling of connections.
<P>
When an application calls the method <code>DataSource.getConnection</code>,
it gets back a <code>Connection</code> object.  If connection pooling is
being done, that <code>Connection</code> object is actually a handle to
a <code>PooledConnection</code> object, which is a physical connection.
<P>
The connection pool manager, typically the application server, maintains
a pool of <code>PooledConnection</code> objects.  If there is a
<code>PooledConnection</code> object available in the pool, the
connection pool manager returns a <code>Connection</code> object that
is a handle to that physical connection.
If no <code>PooledConnection</code> object is available, the 
connection pool manager calls the <code>PooledConnection</code>
method <code>getConnection</code> to create a new physical connection and
returns a handle to it.
<P>
When an application closes a connection, it calls the <code>Connection</code>
method <code>close</code>. When connection pooling is being done,
the connection pool manager is notified because it has registered itself as
a <code>ConnectionEventListener</code> object using the 
<code>ConnectionPool</code> method <code>addConnectionEventListener</code>.
The connection pool manager deactivates the handle to
the <code>PooledConnection</code> object and  returns the 
<code>PooledConnection</code> object to the pool of connections so that
it can be used again.  Thus, when an application closes its connection,
the underlying physical connection is recycled rather than being closed.
<P>
The physical connection is not closed until the connection pool manager
calls the <code>PooledConnection</code> method <code>close</code>.
This method is generally called to have an orderly shutdown of the server or
if a fatal error has made the connection unusable.

@since 1.4 "
      operation 8752411 "getConnection"
	public return_type class_ref 981019 // Connection
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates and returns a <code>Connection</code> object that is a handle
for the physical connection that
this <code>PooledConnection</code> object represents.
The connection pool manager calls this method when an application has
called the method <code>DataSource.getConnection</code> and there are
no <code>PooledConnection</code> objects available. See the
{@link PooledConnection interface description} for more information.

@return  a <code>Connection</code> object that is a handle to
         this <code>PooledConnection</code> object
@exception SQLException if a database access error occurs"
      end

      operation 8752539 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes the physical connection that this <code>PooledConnection</code>
object represents.  An application never calls this method directly;
it is called by the connection pool module, or manager.
<P>
See the {@link PooledConnection interface description} for more 
information.

@exception SQLException if a database access error occurs"
      end

      operation 8752667 "addConnectionEventListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 1094299 // ConnectionEventListener
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers the given event listener so that it will be notified
when an event occurs on this <code>PooledConnection</code> object.

@param listener a component, usually the connection pool manager,
       that has implemented the
       <code>ConnectionEventListener</code> interface and wants to be
       notified when the connection is closed or has an error
@see #removeConnectionEventListener"
      end

      operation 8752795 "removeConnectionEventListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 1094299 // ConnectionEventListener
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the given event listener from the list of components that
will be notified when an event occurs on this
<code>PooledConnection</code> object.

@param listener a component, usually the connection pool manager,
       that has implemented the
       <code>ConnectionEventListener</code> interface and 
       been registered with this <code>PooledConnection</code> object as 
       a listener
@see #addConnectionEventListener"
      end
    end

    class 1094299 "ConnectionEventListener"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<P>
An object that registers to be notified of events generated by a 
<code>PooledConnection</code> object.
<P>
The <code>ConnectionEventListener</code> interface is implemented by a
connection pooling component.  A connection pooling component will
usually be provided by a JDBC driver vendor or another system software
vendor.  A JDBC driver notifies a <code>ConnectionEventListener</code>
object when an application is finished using a pooled connection with
which the listener has registered.  The notification 
occurs after the application calls the method <code>close</code> on
its representation of a <code>PooledConnection</code> object.  A 
<code>ConnectionEventListener</code> is also notified when a
connection error occurs due to the fact that the <code>PooledConnection</code>
is unfit for future use---the server has crashed, for example. 
The listener is notified by the JDBC driver just before the driver throws an
<code>SQLException</code> to the application using the 
<code>PooledConnection</code> object.

@since 1.4"
      classrelation 2228891 // <generalisation>
	relation 2228891 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2228891 // <generalisation>
	  b parent class_ref 147099 // EventListener
      end

      operation 8750619 "connectionClosed"
	public explicit_return_type "void"
	nparams 1
	  param inout name "event" type class_ref 1094043 // ConnectionEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Notifies this <code>ConnectionEventListener</code> that
the application has called the method <code>close</code> on its
representation of a pooled connection.

@param event an event object describing the source of 
the event"
      end

      operation 8750747 "connectionErrorOccurred"
	public explicit_return_type "void"
	nparams 1
	  param inout name "event" type class_ref 1094043 // ConnectionEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Notifies this <code>ConnectionEventListener</code> that
a fatal error has occurred and the pooled connection can
no longer be used.  The driver makes this notification just
before it throws the application the <code>SQLException</code>
contained in the given <code>ConnectionEvent</code> object.

@param event an event object describing the source of 
the event and containing the <code>SQLException</code> that the
driver is about to throw"
      end
    end

    class 1094427 "ConnectionPoolDataSource"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A factory for <code>PooledConnection</code>
objects.  An object that implements this interface will typically be
registered with a naming service that is based on the
Java<sup><font size=-2>TM</font></sup> Naming and Directory Interface
(JNDI).

@since 1.4"
      operation 8750875 "getPooledConnection"
	public return_type class_ref 1094171 // PooledConnection
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to establish a physical database connection that can
be used as a pooled connection.

@return  a <code>PooledConnection</code> object that is a physical
        connection to the database that this
        <code>ConnectionPoolDataSource</code> object represents
@exception SQLException if a database access error occurs"
      end

      operation 8751003 "getPooledConnection"
	public return_type class_ref 1094171 // PooledConnection
	nparams 2
	  param in name "user" explicit_type "String"
	  param in name "password" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to establish a physical database connection that can
be used as a pooled connection.

@param user the database user on whose behalf the connection is being made
@param password the user's password
@return  a <code>PooledConnection</code> object that is a physical
        connection to the database that this
        <code>ConnectionPoolDataSource</code> object represents
@exception SQLException if a database access error occurs"
      end

      operation 8751131 "getLogWriter"
	public return_type class_ref 221595 // PrintWriter
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the log writer for this <code>ConnectionPoolDataSource</code>
object.  
<p>The log writer is a character output stream to which all logging
and tracing messages for this <code>ConnectionPoolDataSource</code> object
are printed.  This includes messages printed by the methods of this
object, messages printed by methods of other objects manufactured
by this object, and so on.  Messages printed to a data source-
specific log writer are not printed to the log writer associated
with the <code>java.sql.DriverManager</code> class.  When a data
source object is created, the log writer is initially null; in other 
words, the default is for logging to be disabled.

@return the log writer for this  <code>ConnectionPoolDataSource</code> 
        object or <code>null</code> if logging is disabled
@exception SQLException if a database access error occurs  
@see #setLogWriter"
      end

      operation 8751259 "setLogWriter"
	public explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 221595 // PrintWriter
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the log writer for this <code>ConnectionPoolDataSource</code>
object to the given <code>java.io.PrintWriter</code> object.  

<p>The log writer is a character output stream to which all logging
and tracing messages for this <code>ConnectionPoolDataSource</code>
object are printed.  This includes messages printed by the methods of this
object, messages printed by methods of other objects manufactured
by this object, and so on.  Messages printed to a data source-
specific log writer are not printed to the log writer associated
with the <code>java.sql.Drivermanager</code> class.  When a data
source object is created, the log writer is initially null; in other 
words, the default is for logging to be disabled.

@param out the new log writer; <code>null</code> to disable logging
@exception SQLException if a database access error occurs  
@see #getLogWriter"
      end

      operation 8751387 "setLoginTimeout"
	public explicit_return_type "void"
	nparams 1
	  param in name "seconds" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the maximum time in seconds that this 
<code>ConnectionPoolDataSource</code> object will wait
while attempting to connect to a database.  A value of zero
specifies that the timeout is the default system timeout 
if there is one; otherwise, it specifies that there is no timeout.
When a <code>ConnectionPoolDataSource</code> object is created,
the login timeout is initially zero.

@param seconds the data source login time limit
@exception SQLException if a database access error occurs.
@see #getLoginTimeout"
      end

      operation 8751515 "getLoginTimeout"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the maximum time in seconds that this 
<code>ConnectionPoolDataSource</code> object will wait
while attempting to connect to a database.  A value of zero
means that the timeout is the default system timeout 
if there is one; otherwise, it means that there is no timeout.
When a <code>DataSource</code> object is created, its login timeout is
initially zero.

@return the data source login time limit
@exception SQLException if a database access error occurs.
@see #setLoginTimeout"
      end
    end

    class 1094555 "DataSource"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<p>A factory for connections to the physical data source that this
<code>DataSource</code> object represents.  An alternative to the
<code>DriverManager</code> facility, a <code>DataSource</code> object
is the preferred means of getting a connection. An object that implements
the <code>DataSource</code> interface will typically be
registered with a naming service based on the 
Java<sup><font size=-2>TM</font></sup> Naming and Directory (JNDI) API.
<P>
The <code>DataSource</code> interface is implemented by a driver vendor.
There are three types of implementations:
<OL>
  <LI>Basic implementation -- produces a standard <code>Connection</code> 
      object
  <LI>Connection pooling implementation -- produces a <code>Connection</code>
      object that will automatically participate in connection pooling.  This
      implementation works with a middle-tier connection pooling manager.
  <LI>Distributed transaction implementation -- produces a
      <code>Connection</code> object that may be used for distributed
      transactions and almost always participates in connection pooling. 
      This implementation works with a middle-tier 
      transaction manager and almost always with a connection 
      pooling manager.
</OL>
<P>
A <code>DataSource</code> object has properties that can be modified
when necessary.  For example, if the data source is moved to a different
server, the property for the server can be changed.  The benefit is that
because the data source's properties can be changed, any code accessing
that data source does not need to be changed.
<P>
A driver that is accessed via a <code>DataSource</code> object does not 
register itself with the <code>DriverManager</code>.  Rather, a
<code>DataSource</code> object is retrieved though a lookup operation
and then used to create a <code>Connection</code> object.  With a basic
implementation, the connection obtained through a <code>DataSource</code>
object is identical to a connection obtained through the
<code>DriverManager</code> facility.

@since 1.4"
      operation 8751643 "getConnection"
	public return_type class_ref 981019 // Connection
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Attempts to establish a connection with the data source that
this <code>DataSource</code> object represents.

@return  a connection to the data source
@exception SQLException if a database access error occurs"
      end

      operation 8751771 "getConnection"
	public return_type class_ref 981019 // Connection
	nparams 2
	  param in name "username" explicit_type "String"
	  param in name "password" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Attempts to establish a connection with the data source that
this <code>DataSource</code> object represents.

@param username the database user on whose behalf the connection is 
 being made
@param password the user's password
@return  a connection to the data source
@exception SQLException if a database access error occurs"
      end

      operation 8751899 "getLogWriter"
	public return_type class_ref 221595 // PrintWriter
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Retrieves the log writer for this <code>DataSource</code>
object.

<p>The log writer is a character output stream to which all logging
and tracing messages for this data source will be
printed.  This includes messages printed by the methods of this
object, messages printed by methods of other objects manufactured
by this object, and so on.  Messages printed to a data source
specific log writer are not printed to the log writer associated
with the <code>java.sql.Drivermanager</code> class.  When a
<code>DataSource</code> object is
created, the log writer is initially null; in other words, the
default is for logging to be disabled.

@return the log writer for this data source or null if
       logging is disabled
@exception SQLException if a database access error occurs  
@see #setLogWriter"
      end

      operation 8752027 "setLogWriter"
	public explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 221595 // PrintWriter
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Sets the log writer for this <code>DataSource</code>
object to the given <code>java.io.PrintWriter</code> object.

<p>The log writer is a character output stream to which all logging
and tracing messages for this data source will be
printed.  This includes messages printed by the methods of this
object, messages printed by methods of other objects manufactured
by this object, and so on.  Messages printed to a data source-
specific log writer are not printed to the log writer associated
with the <code>java.sql.Drivermanager</code> class. When a 
<code>DataSource</code> object is created the log writer is
initially null; in other words, the default is for logging to be
disabled.

@param out the new log writer; to disable logging, set to null
@exception SQLException if a database access error occurs  
@see #getLogWriter"
      end

      operation 8752155 "setLoginTimeout"
	public explicit_return_type "void"
	nparams 1
	  param in name "seconds" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Sets the maximum time in seconds that this data source will wait
while attempting to connect to a database.  A value of zero
specifies that the timeout is the default system timeout 
if there is one; otherwise, it specifies that there is no timeout.
When a <code>DataSource</code> object is created, the login timeout is
initially zero.

@param seconds the data source login time limit
@exception SQLException if a database access error occurs.
@see #getLoginTimeout"
      end

      operation 8752283 "getLoginTimeout"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the maximum time in seconds that this data source can wait
while attempting to connect to a database.  A value of zero
means that the timeout is the default system timeout 
if there is one; otherwise, it means that there is no timeout.
When a <code>DataSource</code> object is created, the login timeout is
initially zero.

@return the data source login time limit
@exception SQLException if a database access error occurs.
@see #setLoginTimeout"
      end
    end

    class 1094683 "RowSet"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The interface that adds support to the JDBC API for the
JavaBeans<sup><font size=-2>TM</font></sup> component model.
A rowset, which can be used as a JavaBeans component in
a visual Bean development environment, can be created and
configured at design time and executed at run time.  
<P>
The <code>RowSet</code>
interface provides a set of JavaBeans properties that allow a <code>RowSet</code>
instance to be configured to connect to a JDBC data source and read
some data from the data source.  A group of setter methods (<code>setInt</code>,
<code>setBytes</code>, <code>setString</code>, and so on)
provide a way to pass input parameters to a rowset's command property.
This command is the SQL query the rowset uses when it gets its data from
a relational database, which is generally the case.
<P>
The <code>RowSet</code>
interface supports JavaBeans events, allowing other components in an
application to be notified when an event occurs on a rowset,
such as a change in its value.

<P>The <code>RowSet</code> interface is unique in that it is intended to be
implemented using the rest of the JDBC API.  In other words, a
<code>RowSet</code> implementation is a layer of software that executes \"on top\"
of a JDBC driver.  Implementations of the <code>RowSet</code> interface can
be provided by anyone, including JDBC driver vendors who want to
provide a <code>RowSet</code> implementation as part of their JDBC products. 
<P>
A <code>RowSet</code> object may make a connection with a data source and
maintain that connection throughout its life cycle, in which case it is
called a <i>connected</i> rowset.  A rowset may also make a connection with
a data source, get data from it, and then close the connection. Such a rowset
is called a <i>disconnected</i> rowset.  A disconnected rowset may make
changes to its data while it is disconnected and then send the changes back
to the original source of the data, but it must reestablish a connection to do so.
<P>
A disconnected rowset may have a reader (a <code>RowSetReader</code> object)
and a writer (a <code>RowSetWriter</code> object) associated with it.
The reader may be implemented in many different ways to populate a rowset
with data, including getting data from a non-relational data source. The
writer can also be implemented in many different ways to propagate changes
made to the rowset's data back to the underlying data source.
<P>
Rowsets are easy to use.  The <code>RowSet</code> interface extends the standard
<code>java.sql.ResultSet</code> interface.  The <code>RowSetMetaData</code>
interface extends the <code>java.sql.ResultSetMetaData</code> interface.
Thus, developers familiar
with the JDBC API will have to learn a minimal number of new APIs to
use rowsets.  In addition, third-party software tools that work with
JDBC <code>ResultSet</code> objects will also easily be made to work with rowsets.

@since 1.4"
      classrelation 2229019 // <generalisation>
	relation 2229019 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2229019 // <generalisation>
	  b parent class_ref 980123 // ResultSet
      end

      operation 8752923 "getUrl"
	public explicit_return_type "String"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------
 Properties 
-----------------------------------------------------------------------
-----------------------------------------------------------------------
 The following properties may be used to create a Connection.
-----------------------------------------------------------------------
 
Retrieves the url property this <code>RowSet</code> object will use to
create a connection if it uses the <code>DriverManager</code>
instead of a <code>DataSource</code> object to establish the connection.
The default value is <code>null</code>.

@return a string url
@exception SQLException if a database access error occurs
@see #setUrl"
      end

      operation 8753051 "setUrl"
	public explicit_return_type "void"
	nparams 1
	  param in name "url" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the URL this <code>RowSet</code> object will use when it uses the
<code>DriverManager</code> to create a connection.

Setting this property is optional.  If a URL is used, a JDBC driver
that accepts the URL must be loaded by the application before the
rowset is used to connect to a database.  The rowset will use the URL
internally to create a database connection when reading or writing
data.  Either a URL or a data source name is used to create a
connection, whichever was specified most recently.

@param url a string value; may be <code>null</code>
@exception SQLException if a database access error occurs
@see #getUrl"
      end

      operation 8753179 "getDataSourceName"
	public explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the logical name that identifies the data source for this
<code>RowSet</code> object.  Users should set
either the url property or the data source name property.  The rowset will use
the property that was set more recently to get a connection.

@return a data source name
@see #setDataSourceName
@see #setUrl"
      end

      operation 8753307 "setDataSourceName"
	public explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the data source name property for this <code>RowSet</code> object to the 
given <code>String</code>.
<P>
The value of the data source name property can be used to do a lookup of
a <code>DataSource</code> object that has been registered with a naming
service.  After being retrieved, the <code>DataSource</code> object can be
used to create a connection to the data source that it represents.

@param name the logical name of the data source for this <code>RowSet</code>
       object
@exception SQLException if a database access error occurs
@see #getDataSourceName"
      end

      operation 8753435 "getUsername"
	public explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the username used to create a database connection for this
<code>RowSet</code> object.  
The username property is set at run time before calling the method 
<code>execute</code>.  It is 
not usually part of the serialized state of a <code>RowSet</code> object.

@return the username property
@see #setUsername"
      end

      operation 8753563 "setUsername"
	public explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the username property for this <code>RowSet</code> object to the 
given <code>String</code>.

@param name a user name
@exception SQLException if a database access error occurs
@see #getUsername"
      end

      operation 8753691 "getPassword"
	public explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the password used to create a database connection. 
The password property is set at run time before calling the method
<code>execute</code>.  It is not usually part of the serialized state 
of a <code>RowSet</code> object.

@return the password for making a database connection
@see #setPassword"
      end

      operation 8753819 "setPassword"
	public explicit_return_type "void"
	nparams 1
	  param in name "password" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the database password for this <code>RowSet</code> object to
the given <code>String</code>.

@param password the password string
@exception SQLException if a database access error occurs
@see #getPassword"
      end

      operation 8753947 "getTransactionIsolation"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the transaction isolation level set for this
<code>RowSet</code> object.

@return the transaction isolation level; one of
     <code>Connection.TRANSACTION_READ_UNCOMMITTED</code>,
     <code>Connection.TRANSACTION_READ_COMMITTED</code>,
     <code>Connection.TRANSACTION_REPEATABLE_READ</code>, or
     <code>Connection.TRANSACTION_SERIALIZABLE</code>
@see #setTransactionIsolation"
      end

      operation 8754075 "setTransactionIsolation"
	public explicit_return_type "void"
	nparams 1
	  param in name "level" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the transaction isolation level for this <code>RowSet</code> obejct.

@param level the transaction isolation level; one of
     <code>Connection.TRANSACTION_READ_UNCOMMITTED</code>,
     <code>Connection.TRANSACTION_READ_COMMITTED</code>,
     <code>Connection.TRANSACTION_REPEATABLE_READ</code>, or
     <code>Connection.TRANSACTION_SERIALIZABLE</code>
@exception SQLException if a database access error occurs
@see #getTransactionIsolation"
      end

      operation 8754203 "getTypeMap"
	public return_type class_ref 136603 // Map
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String,Class<?>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the <code>Map</code> object associated with this
<code>RowSet</code> object, which specifies the custom mapping
of SQL user-defined types, if any.  The default is for the
type map to be empty.

@return a <code>java.util.Map</code> object containing the names of
        SQL user-defined types and the Java classes to which they are
        to be mapped

@exception SQLException if a database access error occurs
@see #setTypeMap"
      end

      operation 8754331 "setTypeMap"
	public explicit_return_type "void"
	nparams 1
	  param inout name "map" type class_ref 136603 // Map
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<String,Class<?>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Installs the given <code>java.util.Map</code> object as the default 
type map for this <code>RowSet</code> object. This type map will be
used unless another type map is supplied as a method parameter.

@param map  a <code>java.util.Map</code> object containing the names of
        SQL user-defined types and the Java classes to which they are
        to be mapped
@exception SQLException if a database access error occurs
@see #getTypeMap"
      end

      operation 8754459 "getCommand"
	public explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------
 The following properties may be used to create a Statement.
-----------------------------------------------------------------------
 
Retrieves this <code>RowSet</code> object's command property.

The command property contains a command string, which must be an SQL
query, that can be executed to fill the rowset with data.  
The default value is <code>null</code>.

@return the command string; may be <code>null</code>
@see #setCommand"
      end

      operation 8754587 "setCommand"
	public explicit_return_type "void"
	nparams 1
	  param in name "cmd" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this <code>RowSet</code> object's command property to the given
SQL query.

This property is optional
when a rowset gets its data from a data source that does not support
commands, such as a spreadsheet. 

@param cmd the SQL query that will be used to get the data for this
       <code>RowSet</code> object; may be <code>null</code>
@exception SQLException if a database access error occurs
@see #getCommand"
      end

      operation 8754715 "isReadOnly"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this <code>RowSet</code> object is read-only.
If updates are possible, the default is for a rowset to be
updatable.
<P>
Attempts to update a read-only rowset will result in an
<code>SQLException</code> being thrown. 

@return <code>true</code> if this <code>RowSet</code> object is
        read-only; <code>false</code> if it is updatable 
@see #setReadOnly"
      end

      operation 8754843 "setReadOnly"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets whether this <code>RowSet</code> object is read-only to the
given <code>boolean</code>.

@param value <code>true</code> if read-only; <code>false</code> if 
       updatable
@exception SQLException if a database access error occurs
@see #isReadOnly"
      end

      operation 8754971 "getMaxFieldSize"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the maximum number of bytes that may be returned 
for certain column values. 
This limit applies only to <code>BINARY</code>,
<code>VARBINARY</code>, <code>LONGVARBINARYBINARY</code>, <code>CHAR</code>,
<code>VARCHAR</code>, and <code>LONGVARCHAR</code> columns.
If the limit is exceeded, the excess data is silently discarded.

@return the current maximum column size limit; zero means that there
         is no limit
@exception SQLException if a database access error occurs
@see #setMaxFieldSize"
      end

      operation 8755099 "setMaxFieldSize"
	public explicit_return_type "void"
	nparams 1
	  param in name "max" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the maximum number of bytes that can be returned for a column
value to the given number of bytes.
This limit applies only to <code>BINARY</code>,
<code>VARBINARY</code>, <code>LONGVARBINARYBINARY</code>, <code>CHAR</code>,
<code>VARCHAR</code>, and <code>LONGVARCHAR</code> columns.
If the limit is exceeded, the excess data is silently discarded.
For maximum portability, use values greater than 256.

@param max the new max column size limit in bytes; zero means unlimited 
@exception SQLException if a database access error occurs
@see #getMaxFieldSize"
      end

      operation 8755227 "getMaxRows"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the maximum number of rows that this <code>RowSet</code>
object can contain.
If the limit is exceeded, the excess rows are silently dropped.

@return the current maximum number of rows that this <code>RowSet</code>
        object can contain; zero means unlimited
@exception SQLException if a database access error occurs
@see #setMaxRows"
      end

      operation 8755355 "setMaxRows"
	public explicit_return_type "void"
	nparams 1
	  param in name "max" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the maximum number of rows that this <code>RowSet</code>
object can contain to the specified number.
If the limit is exceeded, the excess rows are silently dropped.

@param max the new maximum number of rows; zero means unlimited 
@exception SQLException if a database access error occurs
@see #getMaxRows"
      end

      operation 8755483 "getEscapeProcessing"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether escape processing is enabled for this
<code>RowSet</code> object.  
If escape scanning is enabled, which is the default, the driver will do
escape substitution before sending an SQL statement to the database.

@return <code>true</code> if escape processing is enabled; 
        <code>false</code> if it is disabled
@exception SQLException if a database access error occurs
@see #setEscapeProcessing"
      end

      operation 8755611 "setEscapeProcessing"
	public explicit_return_type "void"
	nparams 1
	  param inout name "enable" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets escape processing for this <code>RowSet</code> object on or
off. If escape scanning is on (the default), the driver will do
escape substitution before sending an SQL statement to the database.

@param enable <code>true</code> to enable escape processing;
       <code>false</code> to disable it
@exception SQLException if a database access error occurs
@see #getEscapeProcessing"
      end

      operation 8755739 "getQueryTimeout"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the maximum number of seconds the driver will wait for
a statement to execute.
If this limit is exceeded, an <code>SQLException</code> is thrown.

@return the current query timeout limit in seconds; zero means 
         unlimited 
@exception SQLException if a database access error occurs
@see #setQueryTimeout"
      end

      operation 8755867 "setQueryTimeout"
	public explicit_return_type "void"
	nparams 1
	  param in name "seconds" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the maximum time the driver will wait for
a statement to execute to the given number of seconds.
If this limit is exceeded, an <code>SQLException</code> is thrown.

@param seconds the new query timeout limit in seconds; zero means 
       that there is no limit
@exception SQLException if a database access error occurs
@see #getQueryTimeout"
      end

      operation 8755995 "setType"
	public explicit_return_type "void"
	nparams 1
	  param in name "type" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the type of this <code>RowSet</code> object to the given type.
This method is used to change the type of a rowset, which is by
default read-only and non-scrollable.

@param type one of the <code>ResultSet</code> constants specifying a type:
       <code>ResultSet.TYPE_FORWARD_ONLY</code>,
       <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
       <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>
@exception SQLException if a database access error occurs
@see java.sql.ResultSet#getType"
      end

      operation 8756123 "setConcurrency"
	public explicit_return_type "void"
	nparams 1
	  param in name "concurrency" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the concurrency of this <code>RowSet</code> object to the given
concurrency level. This method is used to change the concurrency level
of a rowset, which is by default <code>ResultSet.CONCUR_READ_ONLY</code>

@param concurrency one of the <code>ResultSet</code> constants specifying a
       concurrency level:  <code>ResultSet.CONCUR_READ_ONLY</code> or
       <code>ResultSet.CONCUR_UPDATABLE</code>
@exception SQLException if a database access error occurs
@see ResultSet#getConcurrency"
      end

      operation 8756251 "setNull"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "sqlType" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------
 Parameters
-----------------------------------------------------------------------
 
The <code>RowSet</code> setter methods are used to set any input parameters
needed by the <code>RowSet</code> object's command.
Parameters are set at run time, as opposed to design time.


Sets the designated parameter in this <code>RowSet</code> object's SQL
command to SQL <code>NULL</code>.

<P><B>Note:</B> You must specify the parameter's SQL type.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param sqlType a SQL type code defined by <code>java.sql.Types</code>
@exception SQLException if a database access error occurs"
      end

      operation 8756379 "setNull"
	public explicit_return_type "void"
	nparams 3
	  param in name "paramIndex" explicit_type "int"
	  param in name "sqlType" explicit_type "int"
	  param in name "typeName" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's SQL
command to SQL <code>NULL</code>. This version of the method <code>setNull</code>
should  be used for SQL user-defined types (UDTs) and <code>REF</code> type
parameters.  Examples of UDTs include: <code>STRUCT</code>, <code>DISTINCT</code>,
<code>JAVA_OBJECT</code>, and named array types.

<P><B>Note:</B> To be portable, applications must give the
SQL type code and the fully qualified SQL type name when specifying
a NULL UDT or <code>REF</code> parameter.  In the case of a UDT,
the name is the type name of the parameter itself.  For a <code>REF</code> 
parameter, the name is the type name of the referenced type.  If 
a JDBC driver does not need the type code or type name information, 
it may ignore it.     

Although it is intended for UDT and <code>REF</code> parameters,
this method may be used to set a null parameter of any JDBC type.
If the parameter does not have a user-defined or <code>REF</code> type,
the typeName parameter is ignored.


@param paramIndex the first parameter is 1, the second is 2, ...
@param sqlType a value from <code>java.sql.Types</code>
@param typeName the fully qualified name of an SQL UDT or the type
       name of the SQL structured type being referenced by a <code>REF</code>
       type; ignored if the parameter is not a UDT or <code>REF</code> type
@exception SQLException if a database access error occurs"
      end

      operation 8756507 "setBoolean"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
to the given Java <code>boolean</code> value. The driver converts this to
an SQL <code>BIT</code> value before sending it to the database.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@exception SQLException if a database access error occurs"
      end

      operation 8756635 "setByte"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "x" explicit_type "byte"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
to the given Java <code>byte</code> value. The driver converts this to
an SQL <code>TINYINT</code> value before sending it to the database.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@exception SQLException if a database access error occurs"
      end

      operation 8756763 "setShort"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "x" explicit_type "short"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
to the given Java <code>short</code> value. The driver converts this to
an SQL <code>SMALLINT</code> value before sending it to the database.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@exception SQLException if a database access error occurs"
      end

      operation 8756891 "setInt"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "x" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
to the given Java <code>int</code> value. The driver converts this to
an SQL <code>INTEGER</code> value before sending it to the database.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@exception SQLException if a database access error occurs"
      end

      operation 8757019 "setLong"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "x" explicit_type "long"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
to the given Java <code>long</code> value. The driver converts this to
an SQL <code>BIGINT</code> value before sending it to the database.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@exception SQLException if a database access error occurs"
      end

      operation 8757147 "setFloat"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "x" explicit_type "float"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
to the given Java <code>float</code> value. The driver converts this to
an SQL <code>REAL</code> value before sending it to the database.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@exception SQLException if a database access error occurs"
      end

      operation 8757275 "setDouble"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "x" explicit_type "double"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
to the given Java <code>double</code> value. The driver converts this to
an SQL <code>DOUBLE</code> value before sending it to the database.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@exception SQLException if a database access error occurs"
      end

      operation 8757403 "setBigDecimal"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 178459 // BigDecimal
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
to the given <code>java.math.BigDeciaml</code> value.
The driver converts this to
an SQL <code>NUMERIC</code> value before sending it to the database.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@exception SQLException if a database access error occurs"
      end

      operation 8757531 "setString"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "x" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
to the given Java <code>String</code> value. Before sending it to the 
database, the driver converts this to an SQL <code>VARCHAR</code> or
<code>LONGVARCHAR</code> value, depending on the argument's size relative
to the driver's limits on <code>VARCHAR</code> values.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@exception SQLException if a database access error occurs"
      end

      operation 8757659 "setBytes"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param in name "x" explicit_type "byte"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
to the given Java array of <code>byte</code> values. Before sending it to the 
database, the driver converts this to an SQL <code>VARBINARY</code> or
<code>LONGVARBINARY</code> value, depending on the argument's size relative
to the driver's limits on <code>VARBINARY</code> values.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value 
@exception SQLException if a database access error occurs"
      end

      operation 8757787 "setDate"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 981147 // Date
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
to the given <code>java.sql.Date</code> value. The driver converts this to
an SQL <code>DATE</code> value before sending it to the database, using the
default <code>java.util.Calendar</code> to calculate the date.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@exception SQLException if a database access error occurs"
      end

      operation 8757915 "setTime"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 981275 // Time
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
to the given <code>java.sql.Time</code> value. The driver converts this to
an SQL <code>TIME</code> value before sending it to the database, using the
default <code>java.util.Calendar</code> to calculate it.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@exception SQLException if a database access error occurs"
      end

      operation 8758043 "setTimestamp"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 981403 // Timestamp
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
to the given <code>java.sql.Timestamp</code> value. The driver converts this to
an SQL <code>TIMESTAMP</code> value before sending it to the database, using the
default <code>java.util.Calendar</code> to calculate it.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value 
@exception SQLException if a database access error occurs"
      end

      operation 8758171 "setAsciiStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 179099 // InputStream
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
to the given <code>java.io.InputStream</code> value. 
It may be more practical to send a very large ASCII value via a
<code>java.io.InputStream</code> rather than as a <code>LONGVARCHAR</code> 
parameter. The driver will read the data from the stream
as needed until it reaches end-of-file.   

<P><B>Note:</B> This stream object can either be a standard
Java stream object or your own subclass that implements the
standard interface.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the Java input stream that contains the ASCII parameter value
@param length the number of bytes in the stream 
@exception SQLException if a database access error occurs"
      end

      operation 8758299 "setBinaryStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 179099 // InputStream
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
to the given <code>java.io.InputStream</code> value. 
It may be more practical to send a very large binary value via a
<code>java.io.InputStream</code> rather than as a <code>LONGVARBINARY</code> 
parameter. The driver will read the data from the stream
as needed until it reaches end-of-file.   

<P><B>Note:</B> This stream object can either be a standard
Java stream object or your own subclass that implements the
standard interface.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the java input stream which contains the binary parameter value
@param length the number of bytes in the stream 
@exception SQLException if a database access error occurs"
      end

      operation 8758427 "setCharacterStream"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "reader" type class_ref 364827 // Reader
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
to the given <code>java.io.Reader</code> value. 
It may be more practical to send a very large UNICODE value via a
<code>java.io.Reader</code> rather than as a <code>LONGVARCHAR</code> 
parameter. The driver will read the data from the stream
as needed until it reaches end-of-file.   

<P><B>Note:</B> This stream object can either be a standard
Java stream object or your own subclass that implements the
standard interface.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param reader the <code>Reader</code> object that contains the UNICODE data
       to be set
@param length the number of characters in the stream 
@exception SQLException if a database access error occurs"
      end

      operation 8758555 "setObject"
	public explicit_return_type "void"
	nparams 4
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" explicit_type "Object"
	  param in name "targetSqlType" explicit_type "int"
	  param in name "scale" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
with the given Java <code>Object</code>.  For integral values, the 
<code>java.lang</code> equivalent objects should be used (for example,
an instance of the class <code>Integer</code> for an <code>int</code>).

<p>The given Java object will be converted to the targetSqlType
before being sent to the database.
<P>
If the object is of a class implementing <code>SQLData</code>,
the rowset should call the method <code>SQLData.writeSQL</code>
to write the object to an <code>SQLOutput</code> data stream.
If the object is an instance of a class implementing the <code>Ref</code>,
<code>Struct</code>, <code>Array</code>, <code>Blob</code>,
or <code>Clob</code> interfaces,
the driver uses the default mapping to the corresponding SQL type.

<p>Note that this method may be used to pass datatabase-specific
abstract data types. 

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the object containing the input parameter value
@param targetSqlType the SQL type (as defined in <code>java.sql.Types</code>) 
       to be sent to the database. The scale argument may further qualify this
       type.
@param scale for <code>java.sql.Types.DECIMAL</code> or
       <code>java.sql.Types.NUMERIC</code> types, this is the number of
        digits after the decimal point.  For all other types, this value
        will be ignored.
@exception SQLException if a database access error occurs
@see java.sql.Types "
      end

      operation 8758683 "setObject"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" explicit_type "Object"
	  param in name "targetSqlType" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
with a Java <code>Object</code>.  For integral values, the 
<code>java.lang</code> equivalent objects should be used.
This method is like <code>setObject</code> above, but the scale used is the scale
of the second parameter.  Scalar values have a scale of zero.  Literal
values have the scale present in the literal.  
<P>
Even though it is supported, it is not recommended that this method
be called with floating point input values.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the object containing the input parameter value
@param targetSqlType the SQL type (as defined in <code>java.sql.Types</code>) 
       to be sent to the database
@exception SQLException if a database access error occurs"
      end

      operation 8758811 "setObject"
	public explicit_return_type "void"
	nparams 2
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" explicit_type "Object"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
with a Java <code>Object</code>.  For integral values, the 
<code>java.lang</code> equivalent objects should be used.

<p>The JDBC specification provides a standard mapping from
Java Object types to SQL types.  The driver will convert the 
given Java object to its standard SQL mapping before sending it
to the database.

<p>Note that this method may be used to pass datatabase-specific
abstract data types by using a driver-specific Java type.

If the object is of a class implementing <code>SQLData</code>,
the rowset should call the method <code>SQLData.writeSQL</code>
to write the object to an <code>SQLOutput</code> data stream.
If the object is an instance of a class implementing the <code>Ref</code>,
<code>Struct</code>, <code>Array</code>, <code>Blob</code>,
or <code>Clob</code> interfaces,
the driver uses the default mapping to the corresponding SQL type.
<P>
An exception is thrown if there is an ambiguity, for example, if the
object is of a class implementing more than one of these interfaces.

@param parameterIndex The first parameter is 1, the second is 2, ...
@param x The object containing the input parameter value 
@exception SQLException if a database access error occurs"
      end

      operation 8758939 "setRef"
	public explicit_return_type "void"
	nparams 2
	  param in name "i" explicit_type "int"
	  param inout name "x" type class_ref 981531 // Ref
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
with the given  <code>Ref</code> value.  The driver will convert this
to the appropriate <code>REF(&lt;structured-type&gt;)</code> value.

@param i the first parameter is 1, the second is 2, ...
@param x an object representing data of an SQL <code>REF</code> type
@exception SQLException if a database access error occurs"
      end

      operation 8759067 "setBlob"
	public explicit_return_type "void"
	nparams 2
	  param in name "i" explicit_type "int"
	  param inout name "x" type class_ref 980379 // Blob
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
with the given  <code>Blob</code> value.  The driver will convert this
to the <code>BLOB</code> value that the <code>Blob</code> object
represents before sending it to the database.

@param i the first parameter is 1, the second is 2, ...
@param x an object representing a BLOB
@exception SQLException if a database access error occurs"
      end

      operation 8759195 "setClob"
	public explicit_return_type "void"
	nparams 2
	  param in name "i" explicit_type "int"
	  param inout name "x" type class_ref 981659 // Clob
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
with the given  <code>Clob</code> value.  The driver will convert this
to the <code>CLOB</code> value that the <code>Clob</code> object
represents before sending it to the database.

@param i the first parameter is 1, the second is 2, ...
@param x an object representing a CLOB
@exception SQLException if a database access error occurs"
      end

      operation 8759323 "setArray"
	public explicit_return_type "void"
	nparams 2
	  param in name "i" explicit_type "int"
	  param inout name "x" type class_ref 979867 // Array
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
with the given  <code>Array</code> value.  The driver will convert this
to the <code>ARRAY</code> value that the <code>Array</code> object
represents before sending it to the database.

@param i the first parameter is 1, the second is 2, ...
@param x an object representing an SQL array
@exception SQLException if a database access error occurs"
      end

      operation 8759451 "setDate"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 981147 // Date
	  param inout name "cal" type class_ref 138523 // Calendar
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
with the given  <code>java.sql.Date</code> value.  The driver will convert this
to an SQL <code>DATE</code> value, using the given <code>java.util.Calendar</code>
object to calculate the date.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@param cal the <code>java.util.Calendar</code> object to use for calculating the date
@exception SQLException if a database access error occurs"
      end

      operation 8759579 "setTime"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 981275 // Time
	  param inout name "cal" type class_ref 138523 // Calendar
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
with the given  <code>java.sql.Time</code> value.  The driver will convert this
to an SQL <code>TIME</code> value, using the given <code>java.util.Calendar</code>
object to calculate it, before sending it to the database.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value
@param cal the <code>java.util.Calendar</code> object to use for calculating the time
@exception SQLException if a database access error occurs"
      end

      operation 8759707 "setTimestamp"
	public explicit_return_type "void"
	nparams 3
	  param in name "parameterIndex" explicit_type "int"
	  param inout name "x" type class_ref 981403 // Timestamp
	  param inout name "cal" type class_ref 138523 // Calendar
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated parameter in this <code>RowSet</code> object's command
with the given  <code>java.sql.Timestamp</code> value.  The driver will
convert this to an SQL <code>TIMESTAMP</code> value, using the given
<code>java.util.Calendar</code> object to calculate it, before sending it to the
database.

@param parameterIndex the first parameter is 1, the second is 2, ...
@param x the parameter value 
@param cal the <code>java.util.Calendar</code> object to use for calculating the 
       timestamp
@exception SQLException if a database access error occurs"
      end

      operation 8759835 "clearParameters"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clears the parameters set for this <code>RowSet</code> object's command.
<P>In general, parameter values remain in force for repeated use of a
<code>RowSet</code> object. Setting a parameter value automatically clears its
previous value.  However, in some cases it is useful to immediately
release the resources used by the current parameter values, which can
be done by calling the method <code>clearParameters</code>.

@exception SQLException if a database access error occurs"
      end

      operation 8759963 "execute"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "---------------------------------------------------------------------
 Reading and writing data
---------------------------------------------------------------------

Fills this <code>RowSet</code> object with data.  
<P>
The <code>execute</code> method may use the following properties 
to create a connection for reading data: url, data source name, 
user name, password, transaction isolation, and type map.

The <code>execute</code> method  may use the following properties 
to create a statement to execute a command:
command, read only, maximum field size, 
maximum rows, escape processing, and query timeout.
<P>
If the required properties have not been set, an exception is 
thrown.  If this method is successful, the current contents of the rowset are 
discarded and the rowset's metadata is also (re)set.  If there are 
outstanding updates, they are ignored.   
<P>
If this <code>RowSet</code> object does not maintain a continuous connection 
with its source of data, it may use a reader (a <code>RowSetReader</code> 
object) to fill itself with data.  In this case, a reader will have been
registered with this <code>RowSet</code> object, and the method 
<code>execute</code> will call on the reader's <code>readData</code>
method as part of its implementation.

@exception SQLException if a database access error occurs or any of the
           properties necessary for making a connection and creating
           a statement have not been set"
      end

      operation 8760091 "addRowSetListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 1094811 // RowSetListener
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "--------------------------------------------------------------------
 Events
--------------------------------------------------------------------

Registers the given listener so that it will be notified of events
that occur on this <code>RowSet</code> object.

@param listener a component that has implemented the <code>RowSetListener</code>
       interface and wants to be notified when events occur on this
       <code>RowSet</code> object
@see #removeRowSetListener"
      end

      operation 8760219 "removeRowSetListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 1094811 // RowSetListener
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the specified listener from the list of components that will be
notified when an event occurs on this <code>RowSet</code> object.

@param listener a component that has been registered as a listener for this
       <code>RowSet</code> object
@see #addRowSetListener"
      end
    end

    class 1094811 "RowSetListener"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An interface that must be implemented by a 
component that wants to be notified when a significant 
event happens in the life of a <code>RowSet</code> object.
A component becomes a listener by being registered with a
<code>RowSet</code> object via the method <code>RowSet.addRowSetListener</code>.
How a registered component implements this interface determines what it does
when it is notified of an event.

@since 1.4"
      classrelation 2229275 // <generalisation>
	relation 2229275 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2229275 // <generalisation>
	  b parent class_ref 147099 // EventListener
      end

      operation 8761115 "rowSetChanged"
	public explicit_return_type "void"
	nparams 1
	  param inout name "event" type class_ref 1094939 // RowSetEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Notifies registered listeners that a <code>RowSet</code> object 
in the given <code>RowSetEvent</code> object has changed its entire contents.
<P>
The source of the event can be retrieved with the method 
<code>event.getSource</code>.

@param event a <code>RowSetEvent</code> object that contains 
        the <code>RowSet</code> object that is the source of the event"
      end

      operation 8761243 "rowChanged"
	public explicit_return_type "void"
	nparams 1
	  param inout name "event" type class_ref 1094939 // RowSetEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Notifies registered listeners that a <code>RowSet</code> object 
has had a change in one of its rows.
<P>
The source of the event can be retrieved with the method 
<code>event.getSource</code>.

@param event a <code>RowSetEvent</code> object that contains 
        the <code>RowSet</code> object that is the source of the event"
      end

      operation 8761371 "cursorMoved"
	public explicit_return_type "void"
	nparams 1
	  param inout name "event" type class_ref 1094939 // RowSetEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Notifies registered listeners that a <code>RowSet</code> object's
cursor has moved. 
<P>
The source of the event can be retrieved with the method 
<code>event.getSource</code>.

@param event a <code>RowSetEvent</code> object that contains 
        the <code>RowSet</code> object that is the source of the event"
      end
    end

    class 1094939 "RowSetEvent"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An <code>Event</code> object generated when an event occurs to a 
<code>RowSet</code> object.  A <code>RowSetEvent</code> object is
generated when a single row in a rowset is changed, the whole rowset
is changed, or the rowset cursor moves.
<P>
When an event occurs on a <code>RowSet</code> object, one of the
<code>RowSetListener</code> methods will be sent to all registered
listeners to notify them of the event.  An <code>Event</code> object
is supplied to the <code>RowSetListener</code> method so that the
listener can use it to find out which <code>RowSet</code> object is 
the source of the event.

@since 1.4 "
      classrelation 2229147 // <generalisation>
	relation 2229147 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2229147 // <generalisation>
	  b parent class_ref 147355 // EventObject
      end

      operation 8760347 "RowSetEvent"
	public explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 1094683 // RowSet
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>RowSetEvent</code> object initialized with the
given <code>RowSet</code> object.

@param source the <code>RowSet</code> object whose data has changed or
       whose cursor has moved"
      end

      attribute 3157275 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value "=  -1875450876546332005L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Private serial version unique ID to ensure serialization
compatibility.
"
      end
    end

    class 1095067 "RowSetInternal"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The interface that a <code>RowSet</code> object implements in order to 
present itself to a <code>RowSetReader</code> or <code>RowSetWriter</code>
object. The <code>RowSetInternal</code> interface contains 
methods that let the reader or writer access and modify the internal
state of the rowset.

@since 1.4"
      operation 8760475 "getParams"
	public explicit_return_type "Object"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the parameters that have been set for this
<code>RowSet</code> object's command.

@return an array of the current parameter values for this <code>RowSet</code>
        object's command 
@exception SQLException if a database access error occurs"
      end

      operation 8760603 "getConnection"
	public return_type class_ref 981019 // Connection
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the <code>Connection</code> object that was passed to this
<code>RowSet</code> object.

@return the <code>Connection</code> object passed to the rowset 
     or <code>null</code> if none was passed
@exception SQLException if a database access error occurs"
      end

      operation 8760731 "setMetaData"
	public explicit_return_type "void"
	nparams 1
	  param inout name "md" type class_ref 1095195 // RowSetMetaData
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the given <code>RowSetMetaData</code> object as the
<code>RowSetMetaData</code> object for this <code>RowSet</code>
object. The <code>RowSetReader</code> object associated with the rowset 
will use <code>RowSetMetaData</code> methods to set the values giving
information about the rowset's columns.

@param md the <code>RowSetMetaData</code> object that will be set with
       information about the rowset's columns

@exception SQLException if a database access error occurs"
      end

      operation 8760859 "getOriginal"
	public return_type class_ref 980123 // ResultSet
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a <code>ResultSet</code> object containing the original
value of this <code>RowSet</code> object.
<P>
The cursor is positioned before the first row in the result set.
Only rows contained in the result set returned by the method
<code>getOriginal</code> are said to have an original value.

@return the original value of the rowset
@exception SQLException if a database access error occurs"
      end

      operation 8760987 "getOriginalRow"
	public return_type class_ref 980123 // ResultSet
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a <code>ResultSet</code> object containing the original value
of the current row only.  If the current row has no original value,
an empty result set is returned. If there is no current row,
an exception is thrown.

@return the original value of the current row as a <code>ResultSet</code>
         object
@exception SQLException if a database access error occurs or this method
          is called while the cursor is on the insert row, before the 
          first row, or after the last row"
      end
    end

    class 1095195 "RowSetMetaData"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An object that contains information about the columns in a
<code>RowSet</code> object.  This interface is
an extension of the <code>ResultSetMetaData</code> interface with 
methods for setting the values in a <code>RowSetMetaData</code> object.  
When a <code>RowSetReader</code> object reads data into a <code>RowSet</code>
object, it creates a <code>RowSetMetaData</code> object and initializes it
using the methods in the <code>RowSetMetaData</code> interface.  Then the
reader passes the <code>RowSetMetaData</code> object to the rowset.
<P>
The methods in this interface are invoked internally when an application
calls the method <code>RowSet.execute</code>; an application
programmer would not use them directly.

@since 1.4 "
      classrelation 2229403 // <generalisation>
	relation 2229403 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2229403 // <generalisation>
	  b parent class_ref 981787 // ResultSetMetaData
      end

      operation 8761499 "setColumnCount"
	public explicit_return_type "void"
	nparams 1
	  param in name "columnCount" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the number of columns in the <code>RowSet</code> object to
the given number.

@param columnCount the number of columns in the <code>RowSet</code> object
@exception SQLException if a database access error occurs"
      end

      operation 8761627 "setAutoIncrement"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "property" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets whether the designated column is automatically numbered, 
and thus read-only. The default is for a <code>RowSet</code> object's
columns not to be automatically numbered.

@param columnIndex the first column is 1, the second is 2, ...
@param property <code>true</code> if the column is automatically
                numbered; <code>false</code> if it is not

@exception SQLException if a database access error occurs"
      end

      operation 8761755 "setCaseSensitive"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "property" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets whether the designated column is case sensitive.
The default is <code>false</code>.

@param columnIndex the first column is 1, the second is 2, ...
@param property <code>true</code> if the column is case sensitive;
                <code>false</code> if it is not

@exception SQLException if a database access error occurs"
      end

      operation 8761883 "setSearchable"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "property" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets whether the designated column can be used in a where clause.
The default is <code>false</code>.

@param columnIndex the first column is 1, the second is 2, ...
@param property <code>true</code> if the column can be used in a 
                <code>WHERE</code> clause; <code>false</code> if it cannot

@exception SQLException if a database access error occurs"
      end

      operation 8762011 "setCurrency"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "property" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets whether the designated column is a cash value.
The default is <code>false</code>.

@param columnIndex the first column is 1, the second is 2, ...
@param property <code>true</code> if the column is a cash value;
                <code>false</code> if it is not

@exception SQLException if a database access error occurs"
      end

      operation 8762139 "setNullable"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param in name "property" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets whether the designated column's value can be set to 
<code>NULL</code>.
The default is <code>ResultSetMetaData.columnNullableUnknown</code>

@param columnIndex the first column is 1, the second is 2, ...
@param property one of the following constants:
                <code>ResultSetMetaData.columnNoNulls</code>, 
                <code>ResultSetMetaData.columnNullable</code>, or
                <code>ResultSetMetaData.columnNullableUnknown</code> 

@exception SQLException if a database access error occurs"
      end

      operation 8762267 "setSigned"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param inout name "property" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets whether the designated column is a signed number.
The default is <code>false</code>.

@param columnIndex the first column is 1, the second is 2, ...
@param property <code>true</code> if the column is a signed number;
                <code>false</code> if it is not

@exception SQLException if a database access error occurs"
      end

      operation 8762395 "setColumnDisplaySize"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param in name "size" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated column's normal maximum width in chars to the
given <code>int</code>.

@param columnIndex the first column is 1, the second is 2, ...
@param size the normal maximum number of characters for 
          the designated column

@exception SQLException if a database access error occurs"
      end

      operation 8762523 "setColumnLabel"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param in name "label" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the suggested column title for use in printouts and
displays, if any, to the given <code>String</code>.

@param columnIndex the first column is 1, the second is 2, ...
@param label the column title
@exception SQLException if a database access error occurs"
      end

      operation 8762651 "setColumnName"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param in name "columnName" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the name of the designated column to the given <code>String</code>.

@param columnIndex the first column is 1, the second is 2, ...
@param columnName the designated column's name
@exception SQLException if a database access error occurs"
      end

      operation 8762779 "setSchemaName"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param in name "schemaName" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the name of the designated column's table's schema, if any, to
the given <code>String</code>.

@param columnIndex the first column is 1, the second is 2, ...
@param schemaName the schema name
@exception SQLException if a database access error occurs"
      end

      operation 8762907 "setPrecision"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param in name "precision" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated column's number of decimal digits to the
given <code>int</code>.

@param columnIndex the first column is 1, the second is 2, ...
@param precision the total number of decimal digits
@exception SQLException if a database access error occurs"
      end

      operation 8763035 "setScale"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param in name "scale" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated column's number of digits to the
right of the decimal point to the given <code>int</code>.

@param columnIndex the first column is 1, the second is 2, ...
@param scale the number of digits to right of decimal point
@exception SQLException if a database access error occurs"
      end

      operation 8763163 "setTableName"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param in name "tableName" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated column's table name, if any, to the given
<code>String</code>.

@param columnIndex the first column is 1, the second is 2, ...
@param tableName the column's table name
@exception SQLException if a database access error occurs"
      end

      operation 8763291 "setCatalogName"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param in name "catalogName" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated column's table's catalog name, if any, to the given
<code>String</code>.

@param columnIndex the first column is 1, the second is 2, ...
@param catalogName the column's catalog name
@exception SQLException if a database access error occurs"
      end

      operation 8763419 "setColumnType"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param in name "SQLType" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated column's SQL type to the one given.

@param columnIndex the first column is 1, the second is 2, ...
@param SQLType the column's SQL type
@exception SQLException if a database access error occurs
@see Types"
      end

      operation 8763547 "setColumnTypeName"
	public explicit_return_type "void"
	nparams 2
	  param in name "columnIndex" explicit_type "int"
	  param in name "typeName" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the designated column's type name that is specific to the
data source, if any, to the given <code>String</code>.

@param columnIndex the first column is 1, the second is 2, ...
@param typeName data source specific type name.
@exception SQLException if a database access error occurs"
      end
    end

    class 1095323 "RowSetReader"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The facility that a disconnected <code>RowSet</code> object calls on 
to populate itself with rows of data. A reader (an object implementing the
<code>RowSetReader</code> interface) may be registered with 
a <code>RowSet</code> object that supports the reader/writer paradigm.
When the <code>RowSet</code> object's <code>execute</code> method is
called, it in turn calls the reader's <code>readData</code> method.

@since 1.4"
      operation 8763675 "readData"
	public explicit_return_type "void"
	nparams 1
	  param inout name "caller" type class_ref 1095067 // RowSetInternal
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the new contents of the calling <code>RowSet</code> object. 
In order to call this method, a <code>RowSet</code>
object must have implemented the <code>RowSetInternal</code> interface
and registered this <code>RowSetReader</code> object as its reader.
The <code>readData</code>  method is invoked internally
by the <code>RowSet.execute</code> method for rowsets that support the
reader/writer paradigm. 

<P>The <code>readData</code> method adds rows to the caller. 
It can be implemented in a wide variety of ways and can even
populate the caller with rows from a nonrelational data source.
In general, a reader may invoke any of the rowset's methods,
with one exception. Calling the method <code>execute</code> will 
cause an <code>SQLException</code> to be thrown
because <code>execute</code> may not be called recursively.  Also,
when a reader invokes <code>RowSet</code> methods, no listeners 
are notified; that is, no <code>RowSetEvent</code> objects are
generated and no <code>RowSetListener</code> methods are invoked. 
This is true because listeners are already being notified by the method
<code>execute</code>.

@param caller the <code>RowSet</code> object (1) that has implemented the
        <code>RowSetInternal</code> interface, (2) with which this reader is
       registered, and (3) whose <code>execute</code> method called this reader
@exception SQLException if a database access error occurs or this method 
           invokes the <code>RowSet.execute</code> method"
      end
    end

    class 1095451 "RowSetWriter"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An object that implements the <code>RowSetWriter</code> interface, 
called a <i>writer</i>. A writer may be registered with a <code>RowSet</code>
object that supports the reader/writer paradigm.
<P>
If a disconnected <code>RowSet</code> object modifies some of its data,
and it has a writer associated with it, it may be implemented so that it
calls on the writer's <code>writeData</code> method internally 
to write the updates back to the data source. In order to do this, the writer
must first establish a connection with the rowset's data source.
<P>
If the data to be updated has already been changed in the data source, there
is a conflict, in which case the writer will not write
the changes to the data source.  The algorithm the writer uses for preventing
or limiting conflicts depends entirely on its implementation.

@since 1.4"
      operation 8763803 "writeData"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "caller" type class_ref 1095067 // RowSetInternal
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the changes in this <code>RowSetWriter</code> object's
rowset back to the data source from which it got its data.

@param caller the <code>RowSet</code> object (1) that has implemented the
        <code>RowSetInternal</code> interface, (2) with which this writer is
       registered, and (3) that called this method internally
@return <code>true</code> if the modified data was written; <code>false</code>
         if not, which will be the case if there is a conflict
@exception SQLException if a database access error occurs"
      end
    end

    class 1095579 "XAConnection"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An object that provides support for distributed 
transactions.  An <code>XAConnection</code> object  may be enlisted 
in a distributed transaction by means of an <code>XAResource</code> object.
A transaction manager, usually part of a middle tier server, manages an
<code>XAConnection</code> object through the <code>XAResource</code> object.
<P>
An application programmer does not use this interface directly; rather,
it is used by a transaction manager working in the middle tier server.

@since 1.4"
      classrelation 2229531 // <generalisation>
	relation 2229531 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2229531 // <generalisation>
	  b parent class_ref 1094171 // PooledConnection
      end

      operation 8763931 "getXAResource"
	public explicit_return_type "javax.transaction.xa.XAResource"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves an <code>XAResource</code> object that 
the transaction manager will use 
to manage this <code>XAConnection</code> object's participation in a
distributed transaction.

@return the <code>XAResource</code> object
@exception SQLException if a database access error occurs"
      end
    end

    class 1095707 "XADataSource"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A factory for <code>XAConnection</code> objects that is used internally.  
An object that implements the <code>XADataSource</code> interface is
typically registered with a naming service that uses the
Java Naming and Directory Interface<sup><font size=-3>TM</font></sup>
(JNDI). 

@since 1.4"
      operation 8764059 "getXAConnection"
	public return_type class_ref 1095579 // XAConnection
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to establish a physical database connection that can be
used in a distributed transaction.

@return  an <code>XAConnection</code> object, which represents a
         physical connection to a data source, that can be used in
         a distributed transaction
@exception SQLException if a database access error occurs"
      end

      operation 8764187 "getXAConnection"
	public return_type class_ref 1095579 // XAConnection
	nparams 2
	  param in name "user" explicit_type "String"
	  param in name "password" explicit_type "String"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to establish a physical database connection, using the given
user name and password. The connection that is returned is one that
can be used in a distributed transaction.

@param user the database user on whose behalf the connection is being made
@param password the user's password
@return  an <code>XAConnection</code> object, which represents a
         physical connection to a data source, that can be used in
         a distributed transaction
@exception SQLException if a database access error occurs"
      end

      operation 8764315 "getLogWriter"
	public return_type class_ref 221595 // PrintWriter
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Retrieves the log writer for this <code>XADataSource</code> object.

@return the log writer for this data source; <code>null</code> if no log
         writer has been set, which means that logging is disabled
@exception SQLException if a database access error occurs  
@see #setLogWriter"
      end

      operation 8764443 "setLogWriter"
	public explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 221595 // PrintWriter
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the log writer for this <code>XADataSource</code> object
to the given <code>java.io.PrintWriter</code> object.
<P>
The log writer is a character output stream to which all logging
and tracing messages for this <code>XADataSource</code> object will be
printed.  This includes messages printed by the methods of this
object, messages printed by methods of other objects manufactured
by this object, and so on.  Messages printed to a log writer that is
specific to a data source are not printed to the log writer associated
with the <code>java.sql.DriverManager</code> class. When a data source
object is created, the log writer is initially <code>null</code>.

@param out the new log writer; to disable logging, set to <code>null</code>
@exception SQLException if a database access error occurs  
@see #getLogWriter"
      end

      operation 8764571 "setLoginTimeout"
	public explicit_return_type "void"
	nparams 1
	  param in name "seconds" explicit_type "int"
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Sets the maximum time in seconds that this data source will wait
while attempting to connect to a data source.  A value of zero
specifies that the timeout is the default system timeout 
if there is one; otherwise, it specifies that there is no timeout.
When a data source object is created, the login timeout is
initially zero.

@param seconds the data source login time limit
@exception SQLException if a database access error occurs
@see #getLoginTimeout"
      end

      operation 8764699 "getLoginTimeout"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 979995 // SQLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the maximum time in seconds that this data source can wait
while attempting to connect to a data source.  A value of zero
means that the timeout is the default system timeout 
if there is one; otherwise, it means that there is no timeout.
When a data source object is created, the login timeout is
initially zero.

@return the number of seconds that is the login time limit for this
        <code>XADataSource</code> object or zero if there is no
        no timeout limit or the timeout limit is the default system
        timeout limit if there is one
@exception SQLException if a database access error occurs
@see #setLoginTimeout"
      end
    end
  end

  deploymentview 172699 "sql"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 840987 "ConnectionEvent"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.sql.SQLException;
${definition}"
      associated_classes
	class_ref 1094043 // ConnectionEvent
      end
      comment "@(#)ConnectionEvent.java	1.9 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 841115 "ConnectionEventListener"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1094299 // ConnectionEventListener
      end
      comment "@(#)ConnectionEventListener.java	1.9 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 841243 "ConnectionPoolDataSource"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.sql.SQLException;
${definition}"
      associated_classes
	class_ref 1094427 // ConnectionPoolDataSource
      end
      comment "@(#)ConnectionPoolDataSource.java	1.10 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 841371 "DataSource"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.sql.Connection;
import java.sql.SQLException;
${definition}"
      associated_classes
	class_ref 1094555 // DataSource
      end
      comment "@(#)DataSource.java	1.9 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 841499 "PooledConnection"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.sql.Connection;
import java.sql.SQLException;
${definition}"
      associated_classes
	class_ref 1094171 // PooledConnection
      end
      comment "@(#)PooledConnection.java	1.12 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 841627 "RowSet"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.sql.*;
import java.io.*;
import java.math.*;
import java.util.*;
${definition}"
      associated_classes
	class_ref 1094683 // RowSet
      end
      comment "@(#)RowSet.java	1.15 04/05/05

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 841755 "RowSetEvent"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1094939 // RowSetEvent
      end
      comment "@(#)RowSetEvent.java	1.9 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 841883 "RowSetInternal"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.sql.*;
${definition}"
      associated_classes
	class_ref 1095067 // RowSetInternal
      end
      comment "@(#)RowSetInternal.java	1.9 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 842011 "RowSetListener"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1094811 // RowSetListener
      end
      comment "@(#)RowSetListener.java	1.9 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 842139 "RowSetMetaData"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.sql.*;
${definition}"
      associated_classes
	class_ref 1095195 // RowSetMetaData
      end
      comment "@(#)RowSetMetaData.java	1.8 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 842267 "RowSetReader"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.sql.*;
${definition}"
      associated_classes
	class_ref 1095323 // RowSetReader
      end
      comment "@(#)RowSetReader.java	1.8 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 842395 "RowSetWriter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.sql.*;
${definition}"
      associated_classes
	class_ref 1095451 // RowSetWriter
      end
      comment "@(#)RowSetWriter.java	1.8 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 842523 "XAConnection"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.sql.*;
${definition}"
      associated_classes
	class_ref 1095579 // XAConnection
      end
      comment "@(#)XAConnection.java	1.8 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 842651 "XADataSource"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.sql.*;
${definition}"
      associated_classes
	class_ref 1095707 // XADataSource
      end
      comment "@(#)XADataSource.java	1.9 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end
  end

  package_ref 184091 // rowset
end
