class AccessibleJTree
!!!9218715.java!!!	AccessibleJTree()
            // Add a tree model listener for JTree
            TreeModel model = JTree.this.getModel();
            if (model != null) {
                model.addTreeModelListener(this);
            }
	    JTree.this.addTreeExpansionListener(this);      
	    JTree.this.addTreeSelectionListener(this);      
            leadSelectionPath = JTree.this.getLeadSelectionPath();
	    leadSelectionAccessible = (leadSelectionPath != null) 
		    ? new AccessibleJTreeNode(JTree.this,
		                              leadSelectionPath,
		                              JTree.this)
		    : null;
!!!9218843.java!!!	valueChanged(inout e : TreeSelectionEvent) : void
            // Fixes 4546503 - JTree is sending incorrect active 
            // descendant events
            TreePath oldLeadSelectionPath = e.getOldLeadSelectionPath();
            leadSelectionPath = e.getNewLeadSelectionPath();

	    if (oldLeadSelectionPath != leadSelectionPath) {
		// Set parent to null so AccessibleJTreeNode computes 
		// its parent.
		Accessible oldLSA = leadSelectionAccessible;
		leadSelectionAccessible = (leadSelectionPath != null) 
			? new AccessibleJTreeNode(JTree.this,
						  leadSelectionPath,
		                  		  null) // parent
			: null;
                firePropertyChange(AccessibleContext.ACCESSIBLE_ACTIVE_DESCENDANT_PROPERTY,
                                   oldLSA, leadSelectionAccessible);
	    }
            firePropertyChange(AccessibleContext.ACCESSIBLE_SELECTION_PROPERTY,
                               Boolean.valueOf(false), Boolean.valueOf(true));
!!!9218971.java!!!	fireVisibleDataPropertyChange() : void
           firePropertyChange(AccessibleContext.ACCESSIBLE_VISIBLE_DATA_PROPERTY,
                              Boolean.valueOf(false), Boolean.valueOf(true));
!!!9219099.java!!!	treeNodesChanged(inout e : TreeModelEvent) : void
           fireVisibleDataPropertyChange();
!!!9219227.java!!!	treeNodesInserted(inout e : TreeModelEvent) : void
           fireVisibleDataPropertyChange();
!!!9219355.java!!!	treeNodesRemoved(inout e : TreeModelEvent) : void
           fireVisibleDataPropertyChange();
!!!9219483.java!!!	treeStructureChanged(inout e : TreeModelEvent) : void
           fireVisibleDataPropertyChange();
!!!9219611.java!!!	treeCollapsed(inout e : TreeExpansionEvent) : void
	    fireVisibleDataPropertyChange();
	    TreePath path = e.getPath();
	    if (path != null) {
		// Set parent to null so AccessibleJTreeNode computes 
		// its parent.
		AccessibleJTreeNode node = new AccessibleJTreeNode(JTree.this,
								   path,
								   null);
		PropertyChangeEvent pce = new PropertyChangeEvent(node,
		    AccessibleContext.ACCESSIBLE_STATE_PROPERTY,
                    AccessibleState.EXPANDED,
		    AccessibleState.COLLAPSED);
		firePropertyChange(AccessibleContext.ACCESSIBLE_STATE_PROPERTY,
				   null, pce);
	    }
!!!9219739.java!!!	treeExpanded(inout e : TreeExpansionEvent) : void
            fireVisibleDataPropertyChange();
	    TreePath path = e.getPath();
	    if (path != null) {
                // TIGER - 4839971 
		// Set parent to null so AccessibleJTreeNode computes 
		// its parent.
		AccessibleJTreeNode node = new AccessibleJTreeNode(JTree.this,
								   path,
								   null);
		PropertyChangeEvent pce = new PropertyChangeEvent(node,
		    AccessibleContext.ACCESSIBLE_STATE_PROPERTY,
		    AccessibleState.COLLAPSED,
                    AccessibleState.EXPANDED);
		firePropertyChange(AccessibleContext.ACCESSIBLE_STATE_PROPERTY,
				   null, pce);
            }
!!!9219867.java!!!	getCurrentAccessibleContext() : AccessibleContext
            Component c = getCurrentComponent();
            if (c instanceof Accessible) {
                return (((Accessible) c).getAccessibleContext());
            } else {
                return null;
            }
!!!9219995.java!!!	getCurrentComponent() : Component
            // is the object visible?
            // if so, get row, selected, focus & leaf state, 
            // and then get the renderer component and return it
            TreeModel model = JTree.this.getModel();
            if (model == null) {
                return null;
            }
            TreePath path = new TreePath(model.getRoot());
            if (JTree.this.isVisible(path)) {
                TreeCellRenderer r = JTree.this.getCellRenderer();
                TreeUI ui = JTree.this.getUI();
                if (ui != null) {
                    int row = ui.getRowForPath(JTree.this, path);
		    int lsr = JTree.this.getLeadSelectionRow();
                    boolean hasFocus = JTree.this.isFocusOwner()
				       && (lsr == row);
                    boolean selected = JTree.this.isPathSelected(path);
                    boolean expanded = JTree.this.isExpanded(path);

                    return r.getTreeCellRendererComponent(JTree.this, 
                        model.getRoot(), selected, expanded, 
                        model.isLeaf(model.getRoot()), row, hasFocus);
                }
            } 
            return null;
!!!9220123.java!!!	getAccessibleRole() : AccessibleRole
            return AccessibleRole.TREE;
!!!9220251.java!!!	getAccessibleAt(inout p : Point) : Accessible
            TreePath path = getClosestPathForLocation(p.x, p.y);
            if (path != null) {
		// JTree.this is NOT the parent; parent will get computed later
                return new AccessibleJTreeNode(JTree.this, path, null);
            } else {
                return null;
            }
!!!9220379.java!!!	getAccessibleChildrenCount() : int
	    TreeModel model = JTree.this.getModel();
	    if (model != null) {
		return 1;
	    } else {
		return 0;
	    }
!!!9220507.java!!!	getAccessibleChild(in i : int) : Accessible
            TreeModel model = JTree.this.getModel();
            if (model != null) {
                if (i != 0) {
                    return null;
                } else {
                    Object[] objPath = {model.getRoot()};
                    TreePath path = new TreePath(objPath);
                    return new AccessibleJTreeNode(JTree.this, path, 
						   JTree.this);
                }
            }
            return null;
!!!9220635.java!!!	getAccessibleIndexInParent() : int
	    // didn't ever need to override this...
            return super.getAccessibleIndexInParent();
!!!9220763.java!!!	getAccessibleSelection() : AccessibleSelection
            return this;
!!!9220891.java!!!	getAccessibleSelectionCount() : int
            Object[] rootPath = new Object[1];
            rootPath[0] = treeModel.getRoot();
            TreePath childPath = new TreePath(rootPath);
            if (JTree.this.isPathSelected(childPath)) {
                return 1;
            } else {
                return 0;
            }
!!!9221019.java!!!	getAccessibleSelection(in i : int) : Accessible
	    // The JTree can have only one accessible child, the root.
            if (i == 0) {
                Object[] rootPath = new Object[1];
                rootPath[0] = treeModel.getRoot();
                TreePath childPath = new TreePath(rootPath);
                if (JTree.this.isPathSelected(childPath)) {
                    return new AccessibleJTreeNode(JTree.this, childPath, JTree.this);
                }
            }
            return null;
!!!9221147.java!!!	isAccessibleChildSelected(in i : int) : boolean
	    // The JTree can have only one accessible child, the root.
	    if (i == 0) {
                Object[] rootPath = new Object[1];
                rootPath[0] = treeModel.getRoot();
                TreePath childPath = new TreePath(rootPath);
                return JTree.this.isPathSelected(childPath);
	    } else {
		return false;
	    }
!!!9221275.java!!!	addAccessibleSelection(in i : int) : void
           TreeModel model = JTree.this.getModel();
           if (model != null) {
               if (i == 0) {
                   Object[] objPath = {model.getRoot()};
                   TreePath path = new TreePath(objPath);
                   JTree.this.addSelectionPath(path);
                }
            }
!!!9221403.java!!!	removeAccessibleSelection(in i : int) : void
	    TreeModel model = JTree.this.getModel();
	    if (model != null) {
                if (i == 0) {
                    Object[] objPath = {model.getRoot()};
                    TreePath path = new TreePath(objPath);
                    JTree.this.removeSelectionPath(path);
                }
            }
!!!9221531.java!!!	clearAccessibleSelection() : void
            int childCount = getAccessibleChildrenCount();
            for (int i = 0; i < childCount; i++) {
                removeAccessibleSelection(i);
            }
!!!9221659.java!!!	selectAllAccessibleSelection() : void
            TreeModel model = JTree.this.getModel();
            if (model != null) {
                Object[] objPath = {model.getRoot()};
                TreePath path = new TreePath(objPath);
                JTree.this.addSelectionPath(path);
            }
