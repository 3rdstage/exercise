class BufferedInputStream
!!!6826907.java!!!	getInIfOpen() : InputStream
        InputStream input = in;
	if (input == null)
	    throw new IOException("Stream closed");
        return input;
!!!6827035.java!!!	getBufIfOpen() : byte
        byte[] buffer = buf;
	if (buffer == null)
	    throw new IOException("Stream closed");
        return buffer;
!!!6827163.java!!!	BufferedInputStream(inout in : InputStream)
	this(in, defaultBufferSize);
!!!6827291.java!!!	BufferedInputStream(inout in : InputStream, in size : int)
	super(in);
        if (size <= 0) {
            throw new IllegalArgumentException("Buffer size <= 0");
        }
	buf = new byte[size];
!!!6827419.java!!!	fill() : void
        byte[] buffer = getBufIfOpen();
	if (markpos < 0)
	    pos = 0;		/* no mark: throw away the buffer */
	else if (pos >= buffer.length)	/* no room left in buffer */
	    if (markpos > 0) {	/* can throw away early part of the buffer */
		int sz = pos - markpos;
		System.arraycopy(buffer, markpos, buffer, 0, sz);
		pos = sz;
		markpos = 0;
	    } else if (buffer.length >= marklimit) {
		markpos = -1;	/* buffer got too big, invalidate mark */
		pos = 0;	/* drop buffer contents */
	    } else {		/* grow buffer */
		int nsz = pos * 2;
		if (nsz > marklimit)
		    nsz = marklimit;
		byte nbuf[] = new byte[nsz];
		System.arraycopy(buffer, 0, nbuf, 0, pos);
                if (!bufUpdater.compareAndSet(this, buffer, nbuf)) {
                    // Can't replace buf if there was an async close.
                    // Note: This would need to be changed if fill()
                    // is ever made accessible to multiple threads.
                    // But for now, the only way CAS can fail is via close.
                    // assert buf == null;
                    throw new IOException("Stream closed");
                }
                buffer = nbuf;
	    }
        count = pos;
	int n = getInIfOpen().read(buffer, pos, buffer.length - pos);
        if (n > 0)
            count = n + pos;
!!!6827547.java!!!	read() : int
	if (pos >= count) {
	    fill();
	    if (pos >= count)
		return -1;
	}
	return getBufIfOpen()[pos++] & 0xff;
!!!6827675.java!!!	read1(in b : byte, in off : int, in len : int) : int
	int avail = count - pos;
	if (avail <= 0) {
	    /* If the requested length is at least as large as the buffer, and
	       if there is no mark/reset activity, do not bother to copy the
	       bytes into the local buffer.  In this way buffered streams will
	       cascade harmlessly. */
	    if (len >= getBufIfOpen().length && markpos < 0) {
		return getInIfOpen().read(b, off, len);
	    }
	    fill();
	    avail = count - pos;
	    if (avail <= 0) return -1;
	}
	int cnt = (avail < len) ? avail : len;
	System.arraycopy(getBufIfOpen(), pos, b, off, cnt);
	pos += cnt;
	return cnt;
!!!6827803.java!!!	read(in b : byte, in off : int, in len : int) : int
        getBufIfOpen(); // Check for closed stream
        if ((off | len | (off + len) | (b.length - (off + len))) < 0) {
	    throw new IndexOutOfBoundsException();
	} else if (len == 0) {
            return 0;
        }

	int n = 0;
        for (;;) {
            int nread = read1(b, off + n, len - n);
            if (nread <= 0) 
                return (n == 0) ? nread : n;
            n += nread;
            if (n >= len)
                return n;
            // if not closed but no bytes available, return
            InputStream input = in;
            if (input != null && input.available() <= 0)
                return n;
        }
!!!6827931.java!!!	skip(in n : long) : long
        getBufIfOpen(); // Check for closed stream
	if (n <= 0) {
	    return 0;
	}
	long avail = count - pos;
     
        if (avail <= 0) {
            // If no mark position set then don't keep in buffer
            if (markpos <0) 
                return getInIfOpen().skip(n);
            
            // Fill in buffer to save bytes for reset
            fill();
            avail = count - pos;
            if (avail <= 0)
                return 0;
        }
        
        long skipped = (avail < n) ? avail : n;
        pos += skipped;
        return skipped;
!!!6828059.java!!!	available() : int
	return getInIfOpen().available() + (count - pos);
!!!6828187.java!!!	mark(in readlimit : int) : void
	marklimit = readlimit;
	markpos = pos;
!!!6828315.java!!!	reset() : void
        getBufIfOpen(); // Cause exception if closed
	if (markpos < 0)
	    throw new IOException("Resetting to invalid mark");
	pos = markpos;
!!!6828443.java!!!	markSupported() : boolean
	return true;
!!!6828571.java!!!	close() : void
        byte[] buffer;
        while ( (buffer = buf) != null) {
            if (bufUpdater.compareAndSet(this, buffer, null)) {
                InputStream input = in;
                in = null;
                if (input != null)
                    input.close();
                return;
            }
            // Else retry in case a new buf was CASed in fill()
        }
