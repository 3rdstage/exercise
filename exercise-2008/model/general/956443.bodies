class VMID
!!!7535259.java!!!	VMID()
	addr = localAddr;
	uid = new UID();
!!!7535387.java!!!	isUnique() : boolean
	return true;
!!!7535515.java!!!	hashCode() : int
	return uid.hashCode();
!!!7535643.java!!!	equals(inout obj : Object) : boolean
	if (obj instanceof VMID) {
	    VMID vmid = (VMID) obj;
	    if (!uid.equals(vmid.uid))
		return false;
	    if ((addr == null) ^ (vmid.addr == null))
		return false;
	    if (addr != null) {
		if (addr.length != vmid.addr.length)
		    return false;
		for (int i = 0; i < addr.length; ++ i)
		    if (addr[i] != vmid.addr[i])
			return false;
	    }
	    return true;
	} else {
	    return false;
	}
!!!7535771.java!!!	toString() : String
	StringBuffer result = new StringBuffer();
	if (addr != null)
	    for (int i = 0; i < addr.length; ++ i) {
		int x = (int) (addr[i] & 0xFF);
		result.append((x < 0x10 ? "0" : "") +
			      Integer.toString(x, 16));
	    }
	result.append(':');
	result.append(uid.toString());
	return result.toString();
!!!7535899.java!!!	computeAddressHash() : byte

	/*
	 * Get the local host's IP address.
	 */
	byte[] addr = (byte[]) java.security.AccessController.doPrivileged(
	    new PrivilegedAction() {
	    public Object run() {
		try {
		    return InetAddress.getLocalHost().getAddress();
		} catch (Exception e) {
		}
		return new byte[] { 0, 0, 0, 0 };
	    }
	});

	byte[] addrHash;
	final int ADDR_HASH_LENGTH = 8;
	
	try {
	    /*
	     * Calculate message digest of IP address using SHA.
	     */
	    MessageDigest md = MessageDigest.getInstance("SHA");
	    ByteArrayOutputStream sink = new ByteArrayOutputStream(64);
	    DataOutputStream out = new DataOutputStream(
		new DigestOutputStream(sink, md));
	    out.write(addr, 0, addr.length);
	    out.flush();
	    
	    byte digest[] = md.digest();
	    int hashlength = Math.min(ADDR_HASH_LENGTH, digest.length);
	    addrHash = new byte[hashlength];
	    System.arraycopy(digest, 0, addrHash, 0, hashlength);

	} catch (IOException ignore) {
	    /* can't happen, but be deterministic anyway. */
	    addrHash = new byte[0];
	} catch (NoSuchAlgorithmException complain) {
	    throw new InternalError(complain.toString());
	}
	return addrHash;
