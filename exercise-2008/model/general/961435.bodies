class Service
!!!7564443.java!!!	Service(inout provider : Provider)
	    this.provider = provider;
	    aliases = Collections.<String>emptyList();
	    attributes = Collections.<UString,String>emptyMap();
!!!7564571.java!!!	isValid() : boolean
	    return (type != null) && (algorithm != null) && (className != null);
!!!7564699.java!!!	addAlias(in alias : String) : void
	    if (aliases.isEmpty()) {
		aliases = new ArrayList<String>(2);
	    }
	    aliases.add(alias);
!!!7564827.java!!!	addAttribute(in type : String, in value : String) : void
	    if (attributes.isEmpty()) {
		attributes = new HashMap<UString,String>(8);
	    }
	    attributes.put(new UString(type), value);
!!!7564955.java!!!	Service(inout provider : Provider, in type : String, in algorithm : String, in className : String, inout aliases : List, inout attributes : Map)
	    if ((provider == null) || (type == null) || 
		    (algorithm == null) || (className == null)) {
		throw new NullPointerException();
	    }
	    this.provider = provider;
	    this.type = getEngineName(type);
	    this.algorithm = algorithm;
	    this.className = className;
	    if (aliases == null) {
		this.aliases = Collections.<String>emptyList();
	    } else {
		this.aliases = new ArrayList<String>(aliases);
	    }
	    if (attributes == null) {
		this.attributes = Collections.<UString,String>emptyMap();
	    } else {
		this.attributes = new HashMap<UString,String>();
		for (Map.Entry<String,String> entry : attributes.entrySet()) {
		    this.attributes.put(new UString(entry.getKey()), entry.getValue());
		}
	    }
!!!7565083.java!!!	getType() : String
	    return type;
!!!7565211.java!!!	getAlgorithm() : String
	    return algorithm;
!!!7565339.java!!!	getProvider() : Provider
	    return provider;
!!!7565467.java!!!	getClassName() : String
	    return className;
!!!7565595.java!!!	getAliases() : List
	    return aliases;
!!!7565723.java!!!	getAttribute(in name : String) : String
	    if (name == null) {
		throw new NullPointerException();
	    }
	    return attributes.get(new UString(name));
!!!7565851.java!!!	newInstance(inout constructorParameter : Object) : Object
	    try {
		EngineDescription cap = knownEngines.get(type);
		if (cap == null) {
		    // unknown engine type, use generic code
		    // this is the code path future for non-core
		    // optional packages
		    return newInstanceGeneric(constructorParameter);
		}
		if (cap.constructor == false) {
		    if (constructorParameter != null) {
			throw new InvalidParameterException
			    ("constructorParameter not used with " + type
			    + " engines");
		    }
		    Class clazz = getImplClass();
		    return clazz.newInstance();
		}
		if (type.equals("CertStore") == false) {
		    throw new AssertionError("Unknown engine: " + type);
		}
		if (constructorParameter != null &&
		    !(constructorParameter instanceof CertStoreParameters)) {
		    throw new InvalidParameterException
		    	("constructorParameter must be instanceof "
			+ "CertStoreParameters for CertStores");
		}
		Class clazz = getImplClass();
		// use Class.forName() rather than .class to delay
		// class loading
		Constructor cons = clazz.getConstructor(new Class[] 
		   { Class.forName("java.security.cert.CertStoreParameters") });
		return cons.newInstance(new Object[] {constructorParameter});
	    } catch (NoSuchAlgorithmException e) {
		throw e;
	    } catch (InvocationTargetException e) {
		throw new NoSuchAlgorithmException
		    ("Error constructing implementation (algorithm: "
		    + algorithm + ", provider: " + provider.getName() 
		    + ", class: " + className + ")", e.getCause());
	    } catch (Exception e) {
		throw new NoSuchAlgorithmException
		    ("Error constructing implementation (algorithm: "
		    + algorithm + ", provider: " + provider.getName() 
		    + ", class: " + className + ")", e);
	    }
!!!7565979.java!!!	getImplClass() : Class
	    try {
		Reference<Class> ref = classRef;
		Class clazz = (ref == null) ? null : ref.get();
		if (clazz == null) {
		    ClassLoader cl = provider.getClass().getClassLoader();
		    if (cl == null) {
			clazz = Class.forName(className);
		    } else {
			clazz = cl.loadClass(className);
		    }
		    classRef = new WeakReference<Class>(clazz);
		}
		return clazz;
	    } catch (ClassNotFoundException e) {
		throw new NoSuchAlgorithmException
	            ("class configured for " + type + "(provider: " + 
		    provider.getName() + ")" + "cannot be found.", e);
	    }
!!!7566107.java!!!	newInstanceGeneric(inout constructorParameter : Object) : Object
	    Class clazz = getImplClass();
	    if (constructorParameter == null) {
		Object o = clazz.newInstance();
		return o;
	    }
	    Class argClass = constructorParameter.getClass();
	    Constructor[] cons = clazz.getConstructors();
	    // find first public constructor that can take the
	    // argument as parameter
	    for (int i = 0; i < cons.length; i++) {
		Constructor con = cons[i];
		Class[] paramTypes = con.getParameterTypes();
		if (paramTypes.length != 1) {
		    continue;
		}
		if (paramTypes[0].isAssignableFrom(argClass) == false) {
		    continue;
		}
		Object o = con.newInstance(new Object[] {constructorParameter});
		return o;
	    }
	    throw new NoSuchAlgorithmException("No constructor matching "
	    	+ argClass.getName() + " found in class " + className);
!!!7566235.java!!!	supportsParameter(inout parameter : Object) : boolean
	    EngineDescription cap = knownEngines.get(type);
	    if (cap == null) {
		// unknown engine type, return true by default
		return true;
	    }
	    if (cap.supportsParameter == false) {
		throw new InvalidParameterException("supportsParameter() not "
		    + "used with " + type + " engines");
	    }
	    // allow null for keys without attributes for compatibility
	    if ((parameter != null) && (parameter instanceof Key == false)) {
		throw new InvalidParameterException
		    ("Parameter must be instanceof Key for engine " + type);
	    }
	    if (hasKeyAttributes() == false) {
		return true;
	    }
	    if (parameter == null) {
		return false;
	    }
	    Key key = (Key)parameter;
	    if (supportsKeyFormat(key)) {
		return true;
	    }
	    if (supportsKeyClass(key)) {
		return true;
	    }
	    return false;
!!!7566363.java!!!	hasKeyAttributes() : boolean
	    Boolean b = hasKeyAttributes;
	    if (b == null) {
		synchronized (this) {
		    String s;
		    s = getAttribute("SupportedKeyFormats");
		    if (s != null) {
			supportedFormats = s.split("\\|");
		    }
		    s = getAttribute("SupportedKeyClasses");
		    if (s != null) {
			String[] classNames = s.split("\\|");
			List<Class> classList = 
			    new ArrayList<Class>(classNames.length);
			for (String className : classNames) {
			    Class clazz = getKeyClass(className);
			    if (clazz != null) {
				classList.add(clazz);
			    }
			}
			supportedClasses = classList.toArray(CLASS0);
		    }
		    boolean bool = (supportedFormats != null)
		    	|| (supportedClasses != null);
		    b = Boolean.valueOf(bool);
		    hasKeyAttributes = b;
		}
	    }
	    return b.booleanValue();
!!!7566491.java!!!	getKeyClass(in name : String) : Class
	    try {
		return Class.forName(name);
	    } catch (ClassNotFoundException e) {
		// ignore
	    }
	    try {
		ClassLoader cl = provider.getClass().getClassLoader();
		if (cl != null) {
		    return cl.loadClass(name);
		}
	    } catch (ClassNotFoundException e) {
		// ignore
	    }
	    return null;
!!!7566619.java!!!	supportsKeyFormat(inout key : Key) : boolean
	    if (supportedFormats == null) {
		return false;
	    }
	    String format = key.getFormat();
	    if (format == null) {
		return false;
	    }
	    for (String supportedFormat : supportedFormats) {
		if (supportedFormat.equals(format)) {
		    return true;
		}
	    }
	    return false;
!!!7566747.java!!!	supportsKeyClass(inout key : Key) : boolean
	    if (supportedClasses == null) {
		return false;
	    }
	    Class keyClass = key.getClass();
	    for (Class clazz : supportedClasses) {
		if (clazz.isAssignableFrom(keyClass)) {
		    return true;
		}
	    }
	    return false;
!!!7566875.java!!!	toString() : String
	    String aString = aliases.isEmpty()
		? "" : "\r\n  aliases: " + aliases.toString();
	    String attrs = attributes.isEmpty() 
		? "" : "\r\n  attributes: " + attributes.toString();
	    return provider.getName() + ": " + type + "." + algorithm
	    	+ " -> " + className + aString + attrs + "\r\n";
