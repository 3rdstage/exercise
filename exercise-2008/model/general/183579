format 66
"midi" // src::javax::sound::midi
  revision 3
  modified_by 27 "3rdstage"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "javax/sound/midi"
  java_package "javax.sound.midi"
  classview 178459 "midi"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 1086235 "ControllerEventListener"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The <code>ControllerEventListener</code> interface should be implemented
by classes whose instances need to be notified when a <code>Sequencer</code>
has processed a requested type of MIDI control-change event.
To register a <code>ControllerEventListener</code> object to receive such
notifications, invoke the
{@link Sequencer#addControllerEventListener(ControllerEventListener, int[])
addControllerEventListener} method of <code>Sequencer</code>,
specifying the types of MIDI controllers about which you are interested in
getting control-change notifications.

@see MidiChannel#controlChange(int, int)

@version 1.15, 03/12/19
@author Kara Kytle"
      classrelation 2220187 // <generalisation>
	relation 2220187 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2220187 // <generalisation>
	  b parent class_ref 147099 // EventListener
      end

      operation 8687515 "controlChange"
	public explicit_return_type "void"
	nparams 1
	  param inout name "event" type class_ref 1086363 // ShortMessage
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when a <code>Sequencer</code> has encountered and processed
a control-change event of interest to this listener.  The event passed
in is a <code>ShortMessage</code> whose first data byte indicates
the controller number and whose second data byte is the value to which
the controller was set.

@param event the control-change event that the sequencer encountered in
the sequence it is processing

@see Sequencer#addControllerEventListener(ControllerEventListener, int[])
@see MidiChannel#controlChange(int, int)
@see ShortMessage#getData1
@see ShortMessage#getData2"
      end
    end

    class 1086363 "ShortMessage"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A <code>ShortMessage</code> contains a MIDI message that has at most
two data bytes following its status byte.  The types of MIDI message
that satisfy this criterion are channel voice, channel mode, system common,
and system real-time--in other words, everything except system exclusive
and meta-events.  The <code>ShortMessage</code> class provides methods
for getting and setting the contents of the MIDI message.
<p>
A number of <code>ShortMessage</code> methods have integer parameters by which
you specify a MIDI status or data byte.  If you know the numeric value, you
can express it directly.  For system common and system real-time messages,
you can often use the corresponding fields of <code>ShortMessage</code>, such as
{@link #SYSTEM_RESET SYSTEM_RESET}.  For channel messages,
the upper four bits of the status byte are specified by a command value and
the lower four bits are specified by a MIDI channel number. To
convert incoming MIDI data bytes that are in the form of Java's signed bytes,
you can use the <A HREF=\"MidiMessage.html#integersVsBytes\">conversion code</A>
given in the <code>{@link MidiMessage}</code> class description.

@see SysexMessage
@see MetaMessage

@version 1.24, 03/12/19
@author David Rivas
@author Kara Kytle
@author Florian Bomers"
      classrelation 2222491 // <generalisation>
	relation 2222491 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2222491 // <generalisation>
	  b parent class_ref 1087387 // MidiMessage
      end

      attribute 3148187 "MIDI_TIME_CODE"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0xF1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Status byte defines
 System common messages

Status byte for MIDI Time Code Quarter Frame message (0xF1, or 241).
@see MidiMessage#getStatus

 241"
      end

      attribute 3148315 "SONG_POSITION_POINTER"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0xF2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Status byte for Song Position Pointer message (0xF2, or 242).
@see MidiMessage#getStatus

 242"
      end

      attribute 3148443 "SONG_SELECT"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0xF3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Status byte for MIDI Song Select message (0xF3, or 243).
@see MidiMessage#getStatus

 243"
      end

      attribute 3148571 "TUNE_REQUEST"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0xF6"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Status byte for Tune Request message (0xF6, or 246).
@see MidiMessage#getStatus

 246"
      end

      attribute 3148699 "END_OF_EXCLUSIVE"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0xF7"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Status byte for End of System Exclusive message (0xF7, or 247).
@see MidiMessage#getStatus

 247"
      end

      attribute 3148827 "TIMING_CLOCK"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0xF8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " System real-time messages

Status byte for Timing Clock messagem (0xF8, or 248).
@see MidiMessage#getStatus

 248"
      end

      attribute 3148955 "START"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0xFA"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Status byte for Start message (0xFA, or 250).
@see MidiMessage#getStatus

 250"
      end

      attribute 3149083 "CONTINUE"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0xFB"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Status byte for Continue message (0xFB, or 251).
@see MidiMessage#getStatus

 251"
      end

      attribute 3149211 "STOP"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0xFC"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Status byte for Stop message (0xFC, or 252).
@see MidiMessage#getStatus

252"
      end

      attribute 3149339 "ACTIVE_SENSING"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0xFE"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Status byte for Active Sensing message (0xFE, or 254).
@see MidiMessage#getStatus

 254"
      end

      attribute 3149467 "SYSTEM_RESET"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0xFF"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Status byte for System Reset message (0xFF, or 255).
@see MidiMessage#getStatus

 255"
      end

      attribute 3149595 "NOTE_OFF"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0x80"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Channel voice message upper nibble defines

Command value for Note Off message (0x80, or 128)

 128"
      end

      attribute 3149723 "NOTE_ON"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0x90"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Command value for Note On message (0x90, or 144)

 144"
      end

      attribute 3149851 "POLY_PRESSURE"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0xA0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Command value for Polyphonic Key Pressure (Aftertouch) message (0xA0, or 128)

 160"
      end

      attribute 3149979 "CONTROL_CHANGE"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0xB0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Command value for Control Change message (0xB0, or 176)

 176"
      end

      attribute 3150107 "PROGRAM_CHANGE"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0xC0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Command value for Program Change message (0xC0, or 192)

 192"
      end

      attribute 3150235 "CHANNEL_PRESSURE"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0xD0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Command value for Channel Pressure (Aftertouch) message (0xD0, or 208)

 208"
      end

      attribute 3150363 "PITCH_BEND"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0xE0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Command value for Pitch Bend message (0xE0, or 224)

 224"
      end

      operation 8711451 "ShortMessage"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Instance variables

Constructs a new <code>ShortMessage</code>.  The
contents of the new message are guaranteed to specify
a valid MIDI message.  Subsequently, you may set the
contents of the message using one of the <code>setMessage</code>
methods.
@see #setMessage"
      end

      operation 8711579 "ShortMessage"
	protected explicit_return_type ""
	nparams 1
	  param in name "data" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new <code>ShortMessage</code>.
@param data an array of bytes containing the complete message.
The message data may be changed using the <code>setMessage</code>
method.
@see #setMessage

 $$fb this should throw an Exception in case of an illegal message!"
      end

      operation 8711707 "setMessage"
	public explicit_return_type "void"
	nparams 1
	  param in name "status" explicit_type "int"
	nexceptions 1
	  exception class_ref 1087003 // InvalidMidiDataException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the parameters for a MIDI message that takes no data bytes.
@param status	the MIDI status byte
@throws  <code>InvalidMidiDataException</code> if <code>status</code> does not
specify a valid MIDI status byte for a message that requires no data bytes.
@see #setMessage(int, int, int)
@see #setMessage(int, int, int, int)"
      end

      operation 8711835 "setMessage"
	public explicit_return_type "void"
	nparams 3
	  param in name "status" explicit_type "int"
	  param in name "data1" explicit_type "int"
	  param in name "data2" explicit_type "int"
	nexceptions 1
	  exception class_ref 1087003 // InvalidMidiDataException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the  parameters for a MIDI message that takes one or two data
bytes.  If the message takes only one data byte, the second data
byte is ignored; if the message does not take any data bytes, both
data bytes are ignored.

@param status	the MIDI status byte
@param data1		the first data byte
@param data2		the second data byte
@throws	<code>InvalidMidiDataException</code> if the
the status byte, or all data bytes belonging to the message, do
not specify a valid MIDI message.
@see #setMessage(int, int, int, int)
@see #setMessage(int)"
      end

      operation 8711963 "setMessage"
	public explicit_return_type "void"
	nparams 4
	  param in name "command" explicit_type "int"
	  param in name "channel" explicit_type "int"
	  param in name "data1" explicit_type "int"
	  param in name "data2" explicit_type "int"
	nexceptions 1
	  exception class_ref 1087003 // InvalidMidiDataException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the short message parameters for a  channel message
which takes up to two data bytes.  If the message only
takes one data byte, the second data byte is ignored; if
the message does not take any data bytes, both data bytes
are ignored.

@param command	the MIDI command represented by this message
@param channel	the channel associated with the message
@param data1		the first data byte
@param data2		the second data byte
@throws		<code>InvalidMidiDataException</code> if the
status byte or all data bytes belonging to the message, do
not specify a valid MIDI message

@see #setMessage(int, int, int)
@see #setMessage(int)
@see #getCommand
@see #getChannel
@see #getData1
@see #getData2"
      end

      operation 8712091 "getChannel"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the MIDI channel associated with this event.  This method
assumes that the event is a MIDI channel message; if not, the return
value will not be meaningful.
@return MIDI channel associated with the message.
@see #setMessage(int, int, int, int)"
      end

      operation 8712219 "getCommand"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the MIDI command associated with this event.  This method
assumes that the event is a MIDI channel message; if not, the return
value will not be meaningful.
@see #setMessage(int, int, int, int)"
      end

      operation 8712347 "getData1"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the first data byte in the message.
@return the value of the <code>data1</code> field
@see #setMessage(int, int, int)"
      end

      operation 8712475 "getData2"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the second data byte in the message.
@return the value of the <code>data2</code> field
@see #setMessage(int, int, int)"
      end

      operation 8712603 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new object of the same class and with the same contents
as this object.
@return a clone of this instance."
      end

      operation 8712731 "getDataLength"
	protected explicit_return_type "int"
	nparams 1
	  param in name "status" explicit_type "int"
	nexceptions 1
	  exception class_ref 1087003 // InvalidMidiDataException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the number of data bytes associated with a particular
status byte value.
@param status status byte value, which must represent a short MIDI message
@return data length in bytes (0, 1, or 2)
@throws <code>InvalidMidiDataException</code> if the
<code>status</code> argument does not represent the status byte for any
short message"
      end
    end

    class 1086491 "Instrument"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An instrument is a sound-synthesis algorithm with certain parameter 
settings, usually designed to emulate a specific real-world 
musical instrument or to achieve a specific sort of sound effect.
Instruments are typically stored in collections called soundbanks.
Before the instrument can be used to play notes, it must first be loaded
onto a synthesizer, and then it must be selected for use on
one or more channels, via a program-change command.  MIDI notes 
that are subsequently received on those channels will be played using 
the sound of the selected instrument.

@see Soundbank
@see Soundbank#getInstruments
@see Patch
@see Synthesizer#loadInstrument(Instrument)
@see MidiChannel#programChange(int, int)
@version 1.16, 04/05/05
@author Kara Kytle"
      classrelation 2220571 // <generalisation>
	relation 2220571 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2220571 // <generalisation>
	  b parent class_ref 1086619 // SoundbankResource
      end

      classrelation 2220699 // patch (<unidirectional association>)
	relation 2220699 --->
	  a role_name "patch" const_relation private
	    comment "
Instrument patch

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2220699 // patch (<unidirectional association>)
	  b parent class_ref 1086875 // Patch
      end

      operation 8688283 "Instrument"
	protected explicit_return_type ""
	nparams 4
	  param inout name "soundbank" type class_ref 1086747 // Soundbank
	  param inout name "patch" type class_ref 1086875 // Patch
	  param in name "name" explicit_type "String"
	  param inout name "dataClass" type class_ref 164635 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}<?> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new MIDI instrument from the specified <code>Patch</code>.
When a subsequent request is made to load the 
instrument, the sound bank will search its contents for this instrument's <code>Patch</code>,
and the instrument will be loaded into the synthesizer at the 
bank and program location indicated by the <code>Patch</code> object.
@param soundbank sound bank containing the instrument
@param patch the patch of this instrument
@param name the name of this instrument
@param dataClass the class used to represent the sample's data.

@see Synthesizer#loadInstrument(Instrument)"
      end

      operation 8688411 "getPatch"
	public return_type class_ref 1086875 // Patch
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the <code>Patch</code> object that indicates the bank and program
numbers where this instrument is to be stored in the synthesizer.
@return this instrument's patch"
      end
    end

    class 1086619 "SoundbankResource"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A <code>SoundbankResource</code> represents any audio resource stored
in a <code>{@link Soundbank}</code>.  Common soundbank resources include:
<ul>
<li>Instruments.  An instrument may be specified in a variety of
ways.  However, all soundbanks have some mechanism for defining
instruments.  In doing so, they may reference other resources
stored in the soundbank.  Each instrument has a <code>Patch</code>
which specifies the MIDI program and bank by which it may be 
referenced in MIDI messages.  Instrument information may be
stored in <code>{@link Instrument}</code> objects.
<li>Audio samples.  A sample typically is a sampled audio waveform 
which contains a short sound recording whose duration is a fraction of
a second, or at most a few seconds.  These audio samples may be
used by a <code>{@link Synthesizer}</code> to synthesize sound in response to MIDI 
commands, or extracted for use by an application.
(The terminology reflects musicians' use of the word \"sample\" to refer 
collectively to a series of contiguous audio samples or frames, rather than 
to a single, instantaneous sample.)
The data class for an audio sample will be an object
that encapsulates the audio sample data itself and information
about how to interpret it (the format of the audio data), such
as an <code>{@link javax.sound.sampled.AudioInputStream}</code>.	</li>
<li>Embedded sequences.  A sound bank may contain built-in
song data stored in a data object such as a <code>{@link Sequence}</code>.
</ul>  
<p>
Synthesizers that use wavetable synthesis or related
techniques play back the audio in a sample when
synthesizing notes, often when emulating the real-world instrument that 
was originally recorded.  However, there is not necessarily a one-to-one
correspondence between the <code>Instruments</code> and samples
in a <code>Soundbank</code>.  A single <code>Instrument</code> can use 
multiple SoundbankResources (typically for notes of dissimilar pitch or 
brightness).  Also, more than one <code>Instrument</code> can use the same 
sample.

@version 1.15, 04/05/05
@author Kara Kytle"
      classrelation 2220315 // soundBank (<unidirectional association>)
	relation 2220315 --->
	  a role_name "soundBank" const_relation private
	    comment "
The sound bank that contains the <code>SoundbankResources</code>

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2220315 // soundBank (<unidirectional association>)
	  b parent class_ref 1086747 // Soundbank
      end

      attribute 3144475 "name"
	const_attribute private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The name of the <code>SoundbankResource</code>
"
      end

      classrelation 2220443 // dataClass (<unidirectional association>)
	relation 2220443 --->
	  a role_name "dataClass" const_relation private
	    comment "
The class used to represent the sample's data.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2220443 // dataClass (<unidirectional association>)
	  b parent class_ref 164635 // Class
      end

      operation 8687643 "SoundbankResource"
	protected explicit_return_type ""
	nparams 3
	  param inout name "soundBank" type class_ref 1086747 // Soundbank
	  param in name "name" explicit_type "String"
	  param inout name "dataClass" type class_ref 164635 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<?> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The wavetable index.

private final int index;

Constructs a new <code>SoundbankResource</code> from the given sound bank 
and wavetable index.  (Setting the <code>SoundbankResource's</code> name, 
sampled audio data, and instruments is a subclass responsibility.)
@param soundBank the sound bank containing this <code>SoundbankResource</code>
@param name the name of the sample
@param dataClass the class used to represent the sample's data

@see #getSoundbank
@see #getName
@see #getDataClass
@see #getData"
      end

      operation 8687771 "getSoundbank"
	public return_type class_ref 1086747 // Soundbank
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the sound bank that contains this <code>SoundbankResource</code>.
@return the sound bank in which this <code>SoundbankResource</code> is stored"
      end

      operation 8687899 "getName"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the name of the resource.  This should generally be a string 
descriptive of the resource.
@return the instrument's name"
      end

      operation 8688027 "getDataClass"
	public return_type class_ref 164635 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the class used by this sample to represent its data.
The object returned by <code>getData</code> will be of this
class.  If this <code>SoundbankResource</code> object does not support
direct access to its data, returns <code>null</code>.
@return the class used to represent the sample's data, or 
null if the data is not accessible"
      end

      operation 8688155 "getData"
	abstract public explicit_return_type "Object"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the sampled audio that is stored in this <code>SoundbankResource</code>.  
The type of object returned depends on the implementation of the 
concrete class, and may be queried using <code>getDataClass</code>.
@return an object containing the sampled audio data  
@see #getDataClass"
      end
    end

    class 1086747 "Soundbank"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A <code>Soundbank</code> contains a set of <code>Instruments</code>
that can be loaded into a <code>Synthesizer</code>.
Note that a Java Sound <code>Soundbank</code> is different from a MIDI bank.
MIDI permits up to 16383 banks, each containing up to 128 instruments
(also sometimes called programs, patches, or timbres).
However, a <code>Soundbank</code> can contain 16383 times 128 instruments,
because the instruments within a <code>Soundbank</code> are indexed by both
a MIDI program number and a MIDI bank number (via a <code>Patch</code>
object). Thus, a <code>Soundbank</code> can be thought of as a collection
of MIDI banks.
<p>
<code>Soundbank</code> includes methods that return <code>String</code>
objects containing the sound bank's name, manufacturer, version number, and
description.  The precise content and format of these strings is left
to the implementor.
<p>
Different synthesizers use a variety of synthesis techniques.  A common
one is wavetable synthesis, in which a segment of recorded sound is
played back, often with looping and pitch change.  The Downloadable Sound
(DLS) format uses segments of recorded sound, as does the Headspace Engine.
<code>Soundbanks</code> and <code>Instruments</code> that are based on
wavetable synthesis (or other uses of stored sound recordings) should
typically implement the <code>getResources()</code>
method to provide access to these recorded segments.  This is optional,
however; the method can return an zero-length array if the synthesis technique
doesn't use sampled sound (FM synthesis and physical modeling are examples
of such techniques), or if it does but the implementor chooses not to make the
samples accessible.

@see Synthesizer#getDefaultSoundbank
@see Synthesizer#isSoundbankSupported
@see Synthesizer#loadInstruments(Soundbank, Patch[])
@see Patch
@see Instrument
@see SoundbankResource

@version 1.24, 03/12/19
@author David Rivas
@author Kara Kytle"
      operation 8712859 "getName"
	public explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the name of the sound bank.
@return a <code>String</code> naming the sound bank"
      end

      operation 8712987 "getVersion"
	public explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the version string for the sound bank.
@return a <code>String</code> that indicates the sound bank's version"
      end

      operation 8713115 "getVendor"
	public explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a <code>string</code> naming the company that provides the
sound bank
@return the vendor string"
      end

      operation 8713243 "getDescription"
	public explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a textual description of the sound bank, suitable for display.
@return a <code>String</code> that describes the sound bank"
      end

      operation 8713371 "getResources"
	public return_type class_ref 1086619 // SoundbankResource
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Extracts a list of non-Instrument resources contained in the sound bank.
@return an array of resources, exclusing instruments.  If the sound bank contains
no resources (other than instruments), returns an array of length 0."
      end

      operation 8713499 "getInstruments"
	public return_type class_ref 1086491 // Instrument
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a list of instruments contained in this sound bank.
@return an array of the <code>Instruments</code> in this
<code>SoundBank</code>
If the sound bank contains no instruments, returns an array of length 0.

@see Synthesizer#getLoadedInstruments
@see #getInstrument(Patch)"
      end

      operation 8713627 "getInstrument"
	public return_type class_ref 1086491 // Instrument
	nparams 1
	  param inout name "patch" type class_ref 1086875 // Patch
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an <code>Instrument</code> from the given <code>Patch</code>.
@param patch a <code>Patch</code> object specifying the bank index
and program change number
@return the requested instrument, or <code>null</code> if the
sound bank doesn't contain that instrument

@see #getInstruments
@see Synthesizer#loadInstruments(Soundbank, Patch[])"
      end
    end

    class 1086875 "Patch"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A <code>Patch</code> object represents a location, on a MIDI 
synthesizer, into which a single instrument is stored (loaded).  
Every <code>Instrument</code> object has its own <code>Patch</code>
object that specifies the memory location
into which that instrument should be loaded. The 
location is specified abstractly by a bank index and a program number (not by
any scheme that directly refers to a specific address or offset in RAM).
This is a hierarchical indexing scheme: MIDI provides for up to 16384 banks,
each of which contains up to 128 program locations.  For example, a
minimal sort of synthesizer might have only one bank of instruments, and 
only 32 instruments (programs) in that bank.  
<p>
To select what instrument should play the notes on a particular MIDI
channel, two kinds of MIDI message are used that specify a patch location:
a bank-select command, and a program-change channel command.  The Java Sound
equivalent is the 
{@link MidiChannel#programChange(int, int) programChange(int, int)}
method of <code>MidiChannel</code>.

@see Instrument
@see Instrument#getPatch()
@see MidiChannel#programChange(int, int)
@see Synthesizer#loadInstruments(Soundbank, Patch[])
@see Soundbank
@see Sequence#getPatchList()

@author Kara Kytle"
      attribute 3146779 "bank"
	const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Bank index
"
      end

      attribute 3146907 "program"
	const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Program change number
"
      end

      operation 8703515 "Patch"
	public explicit_return_type ""
	nparams 2
	  param in name "bank" explicit_type "int"
	  param in name "program" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new patch object from the specified bank and program
numbers.
@param bank the bank index (in the range from 0 to 16383)
@param program the program index (in the range from 0 to 127)"
      end

      operation 8703643 "getBank"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of the bank that contains the instrument
whose location this <code>Patch</code> specifies.
@return the bank number, whose range is from 0 to 16383
@see MidiChannel#programChange(int, int)"
      end

      operation 8703771 "getProgram"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index, within
a bank, of the instrument whose location this <code>Patch</code> specifies.
@return the instrument's program number, whose range is from 0 to 127

@see MidiChannel#getProgram
@see MidiChannel#programChange(int)
@see MidiChannel#programChange(int, int)"
      end
    end

    class 1087003 "InvalidMidiDataException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An <code>InvalidMidiDataException</code> indicates that inappropriate MIDI 
data was encountered. This often means that the data is invalid in and of
itself, from the perspective of the MIDI specification.  An example would
be an undefined status byte.  However, the exception might simply
mean that the data was invalid in the context it was used, or that 
the object to which the data was given was unable to parse or use it.
For example, a file reader might not be able to parse a Type 2 MIDI file, even
though that format is defined in the MIDI specification.

@version 1.11, 12/19/03
@author Kara Kytle"
      classrelation 2220827 // <generalisation>
	relation 2220827 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2220827 // <generalisation>
	  b parent class_ref 165403 // Exception
      end

      operation 8688539 "InvalidMidiDataException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>InvalidMidiDataException</code> with
<code>null</code> for its error detail message."
      end

      operation 8688667 "InvalidMidiDataException"
	public explicit_return_type ""
	nparams 1
	  param in name "message" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructs an <code>InvalidMidiDataException</code> with the 
specified detail message.

@param message the string to display as an error detail message"
      end
    end

    class 1087131 "MetaEventListener"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The <code>MetaEventListener</code> interface should be implemented
by classes whose instances need to be notified when a <code>{@link Sequencer}</code> 
has processed a <code>{@link MetaMessage}</code>.  
To register a <code>MetaEventListener</code> object to receive such 
notifications, pass it as the argument to the 
<code>{@link Sequencer#addMetaEventListener(MetaEventListener) addMetaEventListener}</code>
method of <code>Sequencer</code>.

@version 1.16, 03/12/19
@author Kara Kytle"
      classrelation 2220955 // <generalisation>
	relation 2220955 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2220955 // <generalisation>
	  b parent class_ref 147099 // EventListener
      end

      operation 8688795 "meta"
	public explicit_return_type "void"
	nparams 1
	  param inout name "meta" type class_ref 1087259 // MetaMessage
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked when a <code>{@link Sequencer}</code> has encountered and processed 
a <code>MetaMessage</code> in the <code>{@link Sequence}</code> it is processing.
@param meta the meta-message that the sequencer encountered "
      end
    end

    class 1087259 "MetaMessage"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A <code>MetaMessage</code> is a <code>{@link MidiMessage}</code> that is not meaningful to synthesizers, but
that can be stored in a MIDI file and interpreted by a sequencer program.
(See the discussion in the <code>MidiMessage</code>
class description.)  The Standard MIDI Files specification defines
various types of meta-events, such as sequence number, lyric, cue point,
and set tempo.  There are also meta-events
for such information as lyrics, copyrights, tempo indications, time and key
signatures, markers, etc.  For more information, see the Standard MIDI Files 1.0
specification, which is part of the Complete MIDI 1.0 Detailed Specification
published by the MIDI Manufacturer's Association
(<a href = http://www.midi.org>http://www.midi.org</a>).

<p>
When data is being transported using MIDI wire protocol,
a <code>{@link ShortMessage}</code> with the status value <code>0xFF</code> represents
a system reset message.  In MIDI files, this same status value denotes a <code>MetaMessage</code>.
The types of meta-message are distinguished from each other by the first byte
that follows the status byte <code>0xFF</code>.  The subsequent bytes are data
bytes.  As with system exclusive messages, there are an arbitrary number of
data bytes, depending on the type of <code>MetaMessage</code>.

@see MetaEventListener

@version 1.24, 03/12/19
@author David Rivas
@author Kara Kytle"
      classrelation 2221211 // <generalisation>
	relation 2221211 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2221211 // <generalisation>
	  b parent class_ref 1087387 // MidiMessage
      end

      attribute 3144859 "META"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0xFF"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Status byte defines

Status byte for <code>MetaMessage</code> (0xFF, or 255), which is used
in MIDI files.  It has the same value as SYSTEM_RESET, which
is used in the real-time \"MIDI wire\" protocol.
@see MidiMessage#getStatus

 255"
      end

      attribute 3144987 "defaultMessage"
	class_attribute private explicit_type "byte"
	multiplicity "[]"
	init_value "=  { (byte)META, 0 }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Default meta message data: just the META status byte value
 $$kk: 09.09.99: need a real event here!!"
      end

      attribute 3145115 "dataLength"
	private explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Instance variables

The length of the actual message in the data array.
This is used to determine how many bytes of the data array
is the message, and how many are the status byte, the
type byte, and the variable-length-int describing the
length of the message.
"
      end

      operation 8689691 "MetaMessage"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new <code>MetaMessage</code>. The contents of
the message are not set here; use
{@link #setMessage(int, byte[], int) setMessage}
to set them subsequently."
      end

      operation 8689819 "MetaMessage"
	protected explicit_return_type ""
	nparams 1
	  param in name "data" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new <code>MetaMessage</code>.
@param data an array of bytes containing the complete message.
The message data may be changed using the <code>setMessage</code>
method.
@see #setMessage"
      end

      operation 8689947 "setMessage"
	public explicit_return_type "void"
	nparams 3
	  param in name "type" explicit_type "int"
	  param in name "data" explicit_type "byte"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 1087003 // InvalidMidiDataException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the message parameters for a <code>MetaMessage</code>.
Since only one status byte value, <code>0xFF</code>, is allowed for meta-messages,
it does not need to be specified here.  Calls to <code>{@link MidiMessage#getStatus getStatus}</code> return
<code>0xFF</code> for all meta-messages.
<p>
The <code>type</code> argument should be a valid value for the byte that
follows the status byte in the <code>MetaMessage</code>.  The <code>data</code> argument
should contain all the subsequent bytes of the <code>MetaMessage</code>.  In other words,
the byte that specifies the type of <code>MetaMessage</code> is not considered a data byte.

@param type		meta-message type (must be less than 128)
@param data		the data bytes in the MIDI message
@param length	the number of bytes in the <code>data</code>
byte array
@throws			<code>InvalidMidiDataException</code>  if the
parameter values do not specify a valid MIDI meta message"
      end

      operation 8690075 "getType"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the type of the <code>MetaMessage</code>.
@return an integer representing the <code>MetaMessage</code> type"
      end

      operation 8690203 "getData"
	public explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a copy of the data for the meta message.  The returned
array of bytes does not include the status byte or the message
length data.  The length of the data for the meta message is
the length of the array.  Note that the length of the entire
message includes the status byte and the meta message type
byte, and therefore may be longer than the returned array.
@return array containing the meta message data.
@see MidiMessage#getLength"
      end

      operation 8690331 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new object of the same class and with the same contents
as this object.
@return a clone of this instance"
      end

      operation 8690459 "getVarIntLength"
	private explicit_return_type "int"
	nparams 1
	  param in name "value" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " HELPER METHODS"
      end

      attribute 3145243 "mask"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  0x7F"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 8690587 "writeVarInt"
	private explicit_return_type "void"
	nparams 3
	  param in name "data" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "value" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1087387 "MidiMessage"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<code>MidiMessage</code> is the base class for MIDI messages.  They include
not only the standard MIDI messages that a synthesizer can respond to, but also
\"meta-events\" that can be used by sequencer programs.  There are meta-events
for such information as lyrics, copyrights, tempo indications, time and key
signatures, markers, etc.  For more information, see the Standard MIDI Files 1.0
specification, which is part of the Complete MIDI 1.0 Detailed Specification
published by the MIDI Manufacturer's Association
(<a href = http://www.midi.org>http://www.midi.org</a>).
<p>
The base <code>MidiMessage</code> class provides access to three types of
information about a MIDI message:
<ul>
<li>The messages's status byte</li>
<li>The total length of the message in bytes (the status byte plus any data bytes)</li>
<li>A byte array containing the complete message</li>
</ul>

<code>MidiMessage</code> includes methods to get, but not set, these values.
Setting them is a subclass responsibility.
<p>
<a name=\"integersVsBytes\"></a>
The MIDI standard expresses MIDI data in bytes.  However, because
Java<sup>TM</sup> uses signed bytes, the Java Sound API uses integers
instead of bytes when expressing MIDI data.  For example, the
{@link #getStatus()} method of
<code>MidiMessage</code> returns MIDI status bytes as integers.  If you are
processing MIDI data that originated outside Java Sound and now
is encoded as signed bytes, the bytes can
can be converted to integers using this conversion:
<center><code>int i = (int)(byte & 0xFF)</code></center>
<p>
If you simply need to pass a known MIDI byte value as a method parameter,
it can be expressed directly as an integer, using (for example) decimal or
hexidecimal notation.  For instance, to pass the \"active sensing\" status byte
as the first argument to ShortMessage's
{@link ShortMessage#setMessage(int) setMessage(int)}
method, you can express it as 254 or 0xFE.

@see Track
@see Sequence
@see Receiver

@version 1.29, 03/12/19
@author David Rivas
@author Kara Kytle"
      classrelation 2221083 // <realization>
	relation 2221083 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2221083 // <realization>
	  b parent class_ref 339867 // Cloneable
      end

      attribute 3144603 "data"
	protected explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Instance variables

The MIDI message data.  The first byte is the status
byte for the message; subsequent bytes up to the length
of the message are data bytes for this message.
@see #getLength
"
      end

      attribute 3144731 "length"
	protected explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The number of bytes in the MIDI message, including the
status byte and any data bytes.
@see #getLength
"
      end

      operation 8688923 "MidiMessage"
	protected explicit_return_type ""
	nparams 1
	  param in name "data" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new <code>MidiMessage</code>.  This protected
constructor is called by concrete subclasses, which should
ensure that the data array specifies a complete, valid MIDI
message.

@param data an array of bytes containing the complete message.
The message data may be changed using the <code>setMessage</code>
method.

@see #setMessage"
      end

      operation 8689051 "setMessage"
	protected explicit_return_type "void"
	nparams 2
	  param in name "data" explicit_type "byte"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 1087003 // InvalidMidiDataException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the data for the MIDI message.   This protected
method is called by concrete subclasses, which should
ensure that the data array specifies a complete, valid MIDI
message."
      end

      operation 8689179 "getMessage"
	public explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the MIDI message data.  The first byte of the returned byte
array is the status byte of the message.  Any subsequent bytes up to
the length of the message are data bytes.  The byte array may have a
length which is greater than that of the actual message; the total
length of the message in bytes is reported by the <code>{@link #getLength}</code>
method.

@return the byte array containing the complete <code>MidiMessage</code> data"
      end

      operation 8689307 "getStatus"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the status byte for the MIDI message.  The status \"byte\" is
represented as an integer; see the
<a href=\"#integersVsBytes\">discussion</a> in the
<code>MidiMessage</code> class description.

@return the integer representation of this event's status byte"
      end

      operation 8689435 "getLength"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the total length of the MIDI message in bytes.  A
MIDI message consists of one status byte and zero or more
data bytes.  The return value ranges from 1 for system real-time messages,
to 2 or 3 for channel messages, to any value for meta and system
exclusive messages.

@return the length of the message in bytes"
      end

      operation 8689563 "clone"
	abstract public explicit_return_type "Object"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new object of the same class and with the same contents
as this object.
@return a clone of this instance."
      end
    end

    class 1087515 "MidiChannel"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A <code>MidiChannel</code> object represents a single MIDI channel.
Generally, each <code>MidiChannel</code> method processes a like-named MIDI
\"channel voice\" or \"channel mode\" message as defined by the MIDI specification. However,
<code>MidiChannel</code> adds some \"get\" methods  that retrieve the value
most recently set by one of the standard MIDI channel messages.  Similarly,
methods for per-channel solo and mute have been added.
<p>
A <code>{@link Synthesizer}</code> object has a collection
of <code>MidiChannels</code>, usually one for each of the 16 channels
prescribed by the MIDI 1.0 specification.  The <code>Synthesizer</code>
generates sound when its <code>MidiChannels</code> receive
<code>noteOn</code> messages.
<p>
See the MIDI 1.0 Specification for more information about the prescribed
behavior of the MIDI channel messages, which are not exhaustively
documented here.  The specification is titled <code>MIDI Reference:
The Complete MIDI 1.0 Detailed Specification</code>, and is published by
the MIDI Manufacturer's Association (<a href = http://www.midi.org>
http://www.midi.org</a>).
<p>
MIDI was originally a protocol for reporting the gestures of a keyboard
musician.  This genesis is visible in the <code>MidiChannel</code> API, which
preserves such MIDI concepts as key number, key velocity, and key pressure.
It should be understood that the MIDI data does not necessarily originate
with a keyboard player (the source could be a different kind of musician, or
software).  Some devices might generate constant values for velocity
and pressure, regardless of how the note was performed.
Also, the MIDI specification often leaves it up to the
synthesizer to use the data in the way the implementor sees fit.  For
example, velocity data need not always be mapped to volume and/or brightness.

@see Synthesizer#getChannels

@version 1.43, 04/22/04
@author David Rivas
@author Kara Kytle"
      operation 8690715 "noteOn"
	public explicit_return_type "void"
	nparams 2
	  param in name "noteNumber" explicit_type "int"
	  param in name "velocity" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Starts the specified note sounding.  The key-down velocity
usually controls the note's volume and/or brightness.
If <code>velocity</code> is zero, this method instead acts like
{@link #noteOff(int)}, terminating the note.

@param noteNumber the MIDI note number, from 0 to 127 (60 = Middle C)
@param velocity the speed with which the key was depressed

@see #noteOff(int, int)"
      end

      operation 8690843 "noteOff"
	public explicit_return_type "void"
	nparams 2
	  param in name "noteNumber" explicit_type "int"
	  param in name "velocity" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Turns the specified note off.  The key-up velocity, if not ignored, can
be used to affect how quickly the note decays.
In any case, the note might not die away instantaneously; its decay
rate is determined by the internals of the <code>Instrument</code>.
If the Hold Pedal (a controller; see
{@link #controlChange(int, int) controlChange})
is down, the effect of this method is deferred until the pedal is
released.


@param noteNumber the MIDI note number, from 0 to 127 (60 = Middle C)
@param velocity the speed with which the key was released

@see #noteOff(int)
@see #noteOn
@see #allNotesOff
@see #allSoundOff"
      end

      operation 8690971 "noteOff"
	public explicit_return_type "void"
	nparams 1
	  param in name "noteNumber" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Turns the specified note off.

@param noteNumber the MIDI note number, from 0 to 127 (60 = Middle C)

@see #noteOff(int, int)"
      end

      operation 8691099 "setPolyPressure"
	public explicit_return_type "void"
	nparams 2
	  param in name "noteNumber" explicit_type "int"
	  param in name "pressure" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reacts to a change in the specified note's key pressure.
Polyphonic key pressure
allows a keyboard player to press multiple keys simultaneously, each
with a different amount of pressure.  The pressure, if not ignored,
is typically used to vary such features as the volume, brightness,
or vibrato of the note.

It is possible that the underlying synthesizer
does not support this MIDI message. In order
to verify that <code>setPolyPressure</code>
was successful, use <code>getPolyPressure</code>.

@param noteNumber the MIDI note number, from 0 to 127 (60 = Middle C)
@param pressure value for the specified key, from 0 to 127 (127 =
maximum pressure)

@see #getPolyPressure(int)"
      end

      operation 8691227 "getPolyPressure"
	public explicit_return_type "int"
	nparams 1
	  param in name "noteNumber" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the pressure with which the specified key is being depressed.

@param noteNumber the MIDI note number, from 0 to 127 (60 = Middle C)

If the device does not support setting poly pressure,
this method always returns 0. Calling
<code>setPolyPressure</code> will have no effect then.

@return the amount of pressure for that note, from 0 to 127
(127 = maximum pressure)

@see #setPolyPressure(int, int)"
      end

      operation 8691355 "setChannelPressure"
	public explicit_return_type "void"
	nparams 1
	  param in name "pressure" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reacts to a change in the keyboard pressure.  Channel
pressure indicates how hard the keyboard player is depressing
the entire keyboard.  This can be the maximum or
average of the per-key pressure-sensor values, as set by
<code>setPolyPressure</code>.  More commonly, it is a measurement of
a single sensor on a device that doesn't implement polyphonic key
pressure.  Pressure can be used to control various aspects of the sound,
as described under {@link #setPolyPressure(int, int) setPolyPressure}.

It is possible that the underlying synthesizer
does not support this MIDI message. In order
to verify that <code>setChannelPressure</code>
was successful, use <code>getChannelPressure</code>.

@param pressure the pressure with which the keyboard is being depressed,
from 0 to 127 (127 = maximum pressure)
@see #setPolyPressure(int, int)
@see #getChannelPressure"
      end

      operation 8691483 "getChannelPressure"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the channel's keyboard pressure.
If the device does not support setting channel pressure,
this method always returns 0. Calling
<code>setChannelPressure</code> will have no effect then.

@return the amount of pressure for that note,
        from 0 to 127 (127 = maximum pressure)

@see #setChannelPressure(int)"
      end

      operation 8691611 "controlChange"
	public explicit_return_type "void"
	nparams 2
	  param in name "controller" explicit_type "int"
	  param in name "value" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reacts to a change in the specified controller's value.  A controller
is some control other than a keyboard key, such as a
switch, slider, pedal, wheel, or breath-pressure sensor.
The MIDI 1.0 Specification provides standard numbers for typical
controllers on MIDI devices, and describes the intended effect
for some of the controllers.
The way in which an
<code>Instrument</code> reacts to a controller change may be
specific to the <code>Instrument</code>.
<p>
The MIDI 1.0 Specification defines both 7-bit controllers
and 14-bit controllers.  Continuous controllers, such
as wheels and sliders, typically have 14 bits (two MIDI bytes),
while discrete controllers, such as switches, typically have 7 bits
(one MIDI byte).  Refer to the specification to see the
expected resolution for each type of control.
<p>
Controllers 64 through 95 (0x40 - 0x5F) allow 7-bit precision.
The value of a 7-bit controller is set completely by the
<code>value</code> argument.  An additional set of controllers
provide 14-bit precision by using two controller numbers, one
for the most significant 7 bits and another for the least significant
7 bits.  Controller numbers 0 through 31 (0x00 - 0x1F) control the
most significant 7 bits of 14-bit controllers; controller numbers
32 through 63 (0x20 - 0x3F) control the least significant 7 bits of
these controllers.  For example, controller number 7 (0x07) controls
the upper 7 bits of the channel volume controller, and controller
number 39 (0x27) controls the lower 7 bits.
The value of a 14-bit controller is determined
by the interaction of the two halves.  When the most significant 7 bits
of a controller are set (using controller numbers 0 through 31), the
lower 7 bits are automatically set to 0.  The corresponding controller
number for the lower 7 bits may then be used to further modulate the
controller value.

It is possible that the underlying synthesizer
does not support a specific controller message. In order
to verify that a call to <code>controlChange</code>
was successful, use <code>getController</code>.

@param controller the controller number (0 to 127; see the MIDI
1.0 Specification for the interpretation)
@param value the value to which the specified controller is changed (0 to 127)

@see #getController(int)"
      end

      operation 8691739 "getController"
	public explicit_return_type "int"
	nparams 1
	  param in name "controller" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the current value of the specified controller.  The return
value is represented with 7 bits. For 14-bit controllers, the MSB and
LSB controller value needs to be obtained separately. For example,
the 14-bit value of the volume controller can be calculated by
multiplying the value of controller 7 (0x07, channel volume MSB)
with 128 and adding the
value of controller 39 (0x27, channel volume LSB).

If the device does not support setting a specific controller,
this method returns 0 for that controller.
Calling <code>controlChange</code> will have no effect then.

@param controller the number of the controller whose value is desired.
The allowed range is 0-127; see the MIDI
1.0 Specification for the interpretation.

@return the current value of the specified controller (0 to 127)

@see #controlChange(int, int)"
      end

      operation 8691867 "programChange"
	public explicit_return_type "void"
	nparams 1
	  param in name "program" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Changes a program (patch).  This selects a specific
instrument from the currently selected bank of instruments.
<p>
The MIDI specification does not
dictate whether notes that are already sounding should switch
to the new instrument (timbre) or continue with their original timbre
until terminated by a note-off.
<p>
The program number is zero-based (expressed from 0 to 127).
Note that MIDI hardware displays and literature about MIDI
typically use the range 1 to 128 instead.

It is possible that the underlying synthesizer
does not support a specific program. In order
to verify that a call to <code>programChange</code>
was successful, use <code>getProgram</code>.

@param program the program number to switch to (0 to 127)

@see #programChange(int, int)
@see #getProgram()"
      end

      operation 8691995 "programChange"
	public explicit_return_type "void"
	nparams 2
	  param in name "bank" explicit_type "int"
	  param in name "program" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Changes the program using bank and program (patch) numbers.

It is possible that the underlying synthesizer
does not support a specific bank, or program. In order
to verify that a call to <code>programChange</code>
was successful, use <code>getProgram</code> and
<code>getController</code>.
Since banks are changed by way of control changes,
you can verify the current bank with the following
statement:
<pre>
  int bank = (getController(0) * 128)
             + getController(32);
</pre>

@param bank the bank number to switch to (0 to 16383)
@param program the program (patch) to use in the specified bank (0 to 127)
@see #programChange(int)
@see #getProgram()"
      end

      operation 8692123 "getProgram"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the current program number for this channel.
@return the program number of the currently selected patch
@see Patch#getProgram
@see Synthesizer#loadInstrument
@see #programChange(int)"
      end

      operation 8692251 "setPitchBend"
	public explicit_return_type "void"
	nparams 1
	  param in name "bend" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Changes the pitch offset for all notes on this channel.
This affects all currently sounding notes as well as subsequent ones.
(For pitch bend to cease, the value needs to be reset to the
center position.)
<p> The MIDI specification
stipulates that pitch bend be a 14-bit value, where zero
is maximum downward bend, 16383 is maximum upward bend, and
8192 is the center (no pitch bend).  The actual
amount of pitch change is not specified; it can be changed by
a pitch-bend sensitivity setting.  However, the General MIDI
specification says that the default range should be two semitones
up and down from center.

It is possible that the underlying synthesizer
does not support this MIDI message. In order
to verify that <code>setPitchBend</code>
was successful, use <code>getPitchBend</code>.

@param bend the amount of pitch change, as a nonnegative 14-bit value
(8192 = no bend)

@see #getPitchBend"
      end

      operation 8692379 "getPitchBend"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the upward or downward pitch offset for this channel.
If the device does not support setting pitch bend,
this method always returns 8192. Calling
<code>setPitchBend</code> will have no effect then.

@return bend amount, as a nonnegative 14-bit value (8192 = no bend)

@see #setPitchBend(int)"
      end

      operation 8692507 "resetAllControllers"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets all the implemented controllers to their default values.

@see #controlChange(int, int)"
      end

      operation 8692635 "allNotesOff"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Turns off all notes that are currently sounding on this channel.
The notes might not die away instantaneously; their decay
rate is determined by the internals of the <code>Instrument</code>.
If the Hold Pedal controller (see
{@link #controlChange(int, int) controlChange})
is down, the effect of this method is deferred until the pedal is
released.

@see #allSoundOff
@see #noteOff(int)"
      end

      operation 8692763 "allSoundOff"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Immediately turns off all sounding notes on this channel, ignoring the
state of the Hold Pedal and the internal decay rate of the current
<code>Instrument</code>.

@see #allNotesOff"
      end

      operation 8692891 "localControl"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "on" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Turns local control on or off.  The default is for local control
to be on.  The \"on\" setting means that if a device is capable
of both synthesizing sound and transmitting MIDI messages,
it will synthesize sound in response to the note-on and
note-off messages that it itself transmits.  It will also respond
to messages received from other transmitting devices.
The \"off\" setting means that the synthesizer will ignore its
own transmitted MIDI messages, but not those received from other devices.

It is possible that the underlying synthesizer
does not support local control. In order
to verify that a call to <code>localControl</code>
was successful, check the return value.

@param on <code>true</code> to turn local control on, <code>false</code>
 to turn local control off
@return the new local-control value, or false
        if local control is not supported
"
      end

      operation 8693019 "setMono"
	public explicit_return_type "void"
	nparams 1
	  param inout name "on" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Turns mono mode on or off.  In mono mode, the channel synthesizes
only one note at a time.  In poly mode (identical to mono mode off),
the channel can synthesize multiple notes simultaneously.
The default is mono off (poly mode on).
<p>
\"Mono\" is short for the word \"monophonic,\" which in this context
is opposed to the word \"polyphonic\" and refers to a single synthesizer
voice per MIDI channel.  It
has nothing to do with how many audio channels there might be
(as in \"monophonic\" versus \"stereophonic\" recordings).

It is possible that the underlying synthesizer
does not support mono mode. In order
to verify that a call to <code>setMono</code>
was successful, use <code>getMono</code>.

@param on <code>true</code> to turn mono mode on, <code>false</code> to
turn it off (which means turning poly mode on).

@see #getMono
@see VoiceStatus"
      end

      operation 8693147 "getMono"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the current mono/poly mode.
Synthesizers that do not allow changing mono/poly mode
will always return the same value, regardless
of calls to <code>setMono</code>.
@return <code>true</code> if mono mode is on, otherwise
<code>false</code> (meaning poly mode is on).

@see #setMono(boolean)"
      end

      operation 8693275 "setOmni"
	public explicit_return_type "void"
	nparams 1
	  param inout name "on" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Turns omni mode on or off.  In omni mode, the channel responds
to messages sent on all channels.  When omni is off, the channel
responds only to messages sent on its channel number.
The default is omni off.

It is possible that the underlying synthesizer
does not support omni mode. In order
to verify that <code>setOmni</code>
was successful, use <code>getOmni</code>.

@param on <code>true</code> to turn omni mode on, <code>false</code> to
turn it off.

@see #getOmni
@see VoiceStatus"
      end

      operation 8693403 "getOmni"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the current omni mode.
Synthesizers that do not allow changing the omni mode
will always return the same value, regardless
of calls to <code>setOmni</code>.
@return <code>true</code> if omni mode is on, otherwise
<code>false</code> (meaning omni mode is off).

@see #setOmni(boolean)"
      end

      operation 8693531 "setMute"
	public explicit_return_type "void"
	nparams 1
	  param inout name "mute" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the mute state for this channel. A value of
<code>true</code> means the channel is to be muted, <code>false</code>
means the channel can sound (if other channels are not soloed).
<p>
Unlike {@link #allSoundOff()}, this method
applies to only a specific channel, not to all channels.  Further, it
silences not only currently sounding notes, but also subsequently
received notes.

It is possible that the underlying synthesizer
does not support muting channels. In order
to verify that a call to <code>setMute</code>
was successful, use <code>getMute</code>.

@param mute the new mute state

@see #getMute
@see #setSolo(boolean)"
      end

      operation 8693659 "getMute"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the current mute state for this channel.
If the underlying synthesizer does not support
muting this channel, this method always returns
<code>false</code>.

@return <code>true</code> the channel is muted,
        or <code>false</code> if not

@see #setMute(boolean)"
      end

      operation 8693787 "setSolo"
	public explicit_return_type "void"
	nparams 1
	  param inout name "soloState" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the solo state for this channel.
If <code>solo</code> is <code>true</code> only this channel
and other soloed channels will sound. If <code>solo</code>
is <code>false</code> then only other soloed channels will
sound, unless no channels are soloed, in which case all
unmuted channels will sound.

It is possible that the underlying synthesizer
does not support solo channels. In order
to verify that a call to <code>setSolo</code>
was successful, use <code>getSolo</code>.

@param soloState new solo state for the channel
@see #getSolo()"
      end

      operation 8693915 "getSolo"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the current solo state for this channel.
If the underlying synthesizer does not support
solo on this channel, this method always returns
<code>false</code>.

@return <code>true</code> the channel is solo,
        or <code>false</code> if not

@see #setSolo(boolean)"
      end
    end

    class 1087643 "MidiDevice"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<code>MidiDevice</code> is the base interface for all MIDI devices.
Common devices include synthesizers, sequencers, MIDI input ports, and MIDI
output ports.  

<p>A <code>MidiDevice</code> can be a transmitter or a receiver of
MIDI events, or both. Therefore, it can provide {@link Transmitter}
or {@link Receiver} instances (or both). Typically, MIDI IN ports
provide transmitters, MIDI OUT ports and synthesizers provide
receivers. A Sequencer typically provides transmitters for playback
and receivers for recording.

<p>A <code>MidiDevice</code> can be opened and closed explicitly as
well as implicitly. Explicit opening is accomplished by calling
{@link #open}, explicit closing is done by calling {@link
#close} on the <code>MidiDevice</code> instance.
If an application opens a <code>MidiDevice</code>
explicitly, it has to close it explicitly to free system resources
and enable the application to exit cleanly. Implicit opening is
done by calling {@link javax.sound.midi.MidiSystem#getReceiver
MidiSystem.getReceiver} and {@link
javax.sound.midi.MidiSystem#getTransmitter
MidiSystem.getTransmitter}. The <code>MidiDevice</code> used by
<code>MidiSystem.getReceiver</code> and
<code>MidiSystem.getTransmitter</code> is implementation-dependant
unless the properties <code>javax.sound.midi.Receiver</code>
and <code>javax.sound.midi.Transmitter</code> are used (see the
description of properties to select default providers in
{@link javax.sound.midi.MidiSystem}). A <code>MidiDevice</code>
that was opened implicitly, is closed implicitly by closing the
<code>Receiver</code> or <code>Transmitter</code> that resulted in
opening it. If more than one implicitly opening
<code>Receiver</code> or <code>Transmitter</code> were obtained by
the application, the decive is closed after the last
<code>Receiver</code> or <code>Transmitter</code> has been
closed. On the other hand, calling <code>getReceiver</code> or
<code>getTransmitter</code> on the device instance directly does
not open the device implicitly. Closing these
<code>Transmitter</code>s and <code>Receiver</code>s does not close
the device implicitly. To use a device with <code>Receiver</code>s
or <code>Transmitter</code>s obtained this way, the device has to
be opened and closed explicitly.

<p>If implicit and explicit opening and closing are mixed on the
same <code>MidiDevice</code> instance, the following rules apply:

<ul>
<li>After an explicit open (either before or after implicit
opens), the device will not be closed by implicit closing. The only
way to close an explicitly opened device is an explicit close.</li>

<li>An explicit close always closes the device, even if it also has
been opened implicitly. A subsequent implicit close has no further
effect.</li>
</ul>

To detect if a MidiDevice represents a hardware MIDI port, the
following programming technique can be used:

<pre>
MidiDevice device = ...;
if ( ! (device instanceof Sequencer) && ! (device instanceof Synthesizer)) {
  // we're now sure that device represents a MIDI port
  // ...
}
</pre>

<p>
A <code>MidiDevice</code> includes a <code>{@link MidiDevice.Info}</code> object
to provide manufacturer information and so on.

@see Synthesizer
@see Sequencer
@see Receiver
@see Transmitter

@version 1.38, 03/12/19
@author Kara Kytle
@author Florian Bomers"
      class 1087771 "Info"
	visibility public 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 3145371 "name"
	  private explicit_type "String"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "The device's name.
"
	end

	attribute 3145499 "vendor"
	  private explicit_type "String"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "The name of the company who provides the device.
"
	end

	attribute 3145627 "description"
	  private explicit_type "String"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "A description of the device.
"
	end

	attribute 3145755 "version"
	  private explicit_type "String"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Device version.
"
	end

	operation 8695451 "Info"
	  protected explicit_return_type ""
	  nparams 4
	    param in name "name" explicit_type "String"
	    param in name "vendor" explicit_type "String"
	    param in name "description" explicit_type "String"
	    param in name "version" explicit_type "String"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs a device info object.

@param name the name of the device
@param vendor the name of the company who provides the device
@param description a description of the device
@param version version information for the device"
	end

	operation 8695579 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "obj" explicit_type "Object"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Reports whether two objects are equal.
Returns <code>true</code> if the objects are identical.
@param obj the reference object with which to compare this
object
@return <code>true</code> if this object is the same as the
<code>obj</code> argument; <code>false</code> otherwise"
	end

	operation 8695707 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Finalizes the hashcode method."
	end

	operation 8695835 "getName"
	  public explicit_return_type "String"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Obtains the name of the device.

@return a string containing the device's name"
	end

	operation 8695963 "getVendor"
	  public explicit_return_type "String"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Obtains the name of the company who supplies the device.
@return device the vendor's name"
	end

	operation 8696091 "getDescription"
	  public explicit_return_type "String"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Obtains the description of the device.
@return a description of the device"
	end

	operation 8696219 "getVersion"
	  public explicit_return_type "String"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Obtains the version of the device.
@return textual version information for the device."
	end

	operation 8696347 "toString"
	  public explicit_return_type "String"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Provides a string representation of the device information.

@return a description of the info object"
	end
      end

      operation 8694043 "getDeviceInfo"
	public return_type class_ref 1087771 // Info
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains information about the device, including its Java class and
<code>Strings</code> containing its name, vendor, and description.

@return device info"
      end

      operation 8694171 "open"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1087899 // MidiUnavailableException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Opens the device, indicating that it should now acquire any
system resources it requires and become operational.

<p>An application opening a device explicitly with this call
has to close the device by calling {@link #close}. This is
necessary to release system resources and allow applications to
exit cleanly.

<p>
Note that some devices, once closed, cannot be reopened.  Attempts
to reopen such a device will always result in a MidiUnavailableException.

@throws MidiUnavailableException thrown if the device cannot be
opened due to resource restrictions.
@throws SecurityException thrown if the device cannot be
opened due to security restrictions.

@see #close
@see #isOpen"
      end

      operation 8694299 "close"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes the device, indicating that the device should now release
any system resources it is using.

<p>All <code>Receiver</code> and <code>Transmitter</code> instances
open from this device are closed. This includes instances retrieved
via <code>MidiSystem</code>.

@see #open
@see #isOpen"
      end

      operation 8694427 "isOpen"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports whether the device is open.

@return <code>true</code> if the device is open, otherwise
<code>false</code>
@see #open
@see #close"
      end

      operation 8694555 "getMicrosecondPosition"
	public explicit_return_type "long"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the current time-stamp of the device, in microseconds.
If a device supports time-stamps, it should start counting at
0 when the device is opened and continue incrementing its
time-stamp in microseconds until the device is closed.
If it does not support time-stamps, it should always return
-1.
@return the current time-stamp of the device in microseconds,
or -1 if time-stamping is not supported by the device."
      end

      operation 8694683 "getMaxReceivers"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the maximum number of MIDI IN connections available on this
MIDI device for receiving MIDI data.
@return maximum number of MIDI IN connections, 
or -1 if an unlimited number of connections is available."
      end

      operation 8694811 "getMaxTransmitters"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the maximum number of MIDI OUT connections available on this
MIDI device for transmitting MIDI data.
@return maximum number of MIDI OUT connections,
or -1 if an unlimited number of connections is available."
      end

      operation 8694939 "getReceiver"
	public return_type class_ref 1088027 // Receiver
	nparams 0
	nexceptions 1
	  exception class_ref 1087899 // MidiUnavailableException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a MIDI IN receiver through which the MIDI device may receive
MIDI data.  The returned receiver must be closed when the application
has finished using it.

<p>Obtaining a <code>Receiver</code> with this method does not
open the device. To be able to use the device, it has to be
opened explicitly by calling {@link #open}. Also, closing the
<code>Receiver</code> does not close the device. It has to be
closed explicitly by calling {@link #close}.

@return a receiver for the device.
@throws MidiUnavailableException thrown if a receiver is not available
due to resource restrictions
@see Receiver#close()"
      end

      operation 8695067 "getReceivers"
	public return_type class_ref 135579 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Receiver> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all currently active, non-closed receivers
connected with this MidiDevice.
A receiver can be removed
from the device by closing it.
@return an unmodifiable list of the open receivers
@since 1.5"
      end

      operation 8695195 "getTransmitter"
	public return_type class_ref 1088155 // Transmitter
	nparams 0
	nexceptions 1
	  exception class_ref 1087899 // MidiUnavailableException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a MIDI OUT connection from which the MIDI device will transmit
MIDI data  The returned transmitter must be closed when the application
has finished using it.

<p>Obtaining a <code>Transmitter</code> with this method does not
open the device. To be able to use the device, it has to be
opened explicitly by calling {@link #open}. Also, closing the
<code>Transmitter</code> does not close the device. It has to be
closed explicitly by calling {@link #close}.

@return a MIDI OUT transmitter for the device.
@throws MidiUnavailableException thrown if a transmitter is not available
due to resource restrictions
@see Transmitter#close()"
      end

      operation 8695323 "getTransmitters"
	public return_type class_ref 135579 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Transmitter> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all currently active, non-closed transmitters
connected with this MidiDevice.
A transmitter can be removed
from the device by closing it.
@return an unmodifiable list of the open transmitters
@since 1.5"
      end
    end

    class 1087899 "MidiUnavailableException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A <code>MidiUnavailableException</code> is thrown when a requested MIDI 
component cannot be opened or created because it is unavailable.  This often
occurs when a device is in use by another application.  More generally, it
can occur when there is a finite number of a certain kind of resource that can 
be used for some purpose, and all of them are already in use (perhaps all by
this application).  For an example of the latter case, see the
{@link Transmitter#setReceiver(Receiver) setReceiver} method of 
<code>Transmitter</code>. 

@version 1.13, 12/19/03
@author Kara Kytle"
      classrelation 2221595 // <generalisation>
	relation 2221595 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2221595 // <generalisation>
	  b parent class_ref 165403 // Exception
      end

      operation 8703259 "MidiUnavailableException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>MidiUnavailableException</code> that has 
<code>null</code> as its error detail message."
      end

      operation 8703387 "MidiUnavailableException"
	public explicit_return_type ""
	nparams 1
	  param in name "message" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructs a <code>MidiUnavailableException</code> with the 
specified detail message.

@param message the string to display as an error detail message"
      end
    end

    class 1088027 "Receiver"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A <code>Receiver</code> receives <code>{@link MidiEvent}</code> objects and
typically does something useful in response, such as interpreting them to
generate sound or raw MIDI output.  Common MIDI receivers include 
synthesizers and MIDI Out ports.  

@see MidiDevice
@see Synthesizer
@see Transmitter

@version 1.21, 03/12/19
@author Kara Kytle"
      operation 8703899 "send"
	public explicit_return_type "void"
	nparams 2
	  param inout name "message" type class_ref 1087387 // MidiMessage
	  param in name "timeStamp" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "$$fb 2002-04-12: fix for 4662090: Contradiction in Receiver specification

Sends a MIDI message and time-stamp to this receiver.
If time-stamping is not supported by this receiver, the time-stamp 
value should be -1.
@param message the MIDI message to send
@param timeStamp the time-stamp for the message, in microseconds.
@throws IllegalStateException if the receiver is closed"
      end

      operation 8704027 "close"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates that the application has finished using the receiver, and
that limited resources it requires may be released or made available.

<p>If the creation of this <code>Receiver</code> resulted in
implicitly opening the underlying device, the device is
implicitly closed by this method. This is true unless the device is
kept open by other <code>Receiver</code> or <code>Transmitter</code>
instances that opened the device implicitly, and unless the device
has been opened explicitly. If the device this
<code>Receiver</code> is retrieved from is closed explicitly by
calling {@link MidiDevice#close MidiDevice.close}, the
<code>Receiver</code> is closed, too.  For a detailed
description of open/close behaviour see the class description
of {@link javax.sound.midi.MidiDevice MidiDevice}.

@see javax.sound.midi.MidiSystem#getReceiver"
      end
    end

    class 1088155 "Transmitter"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A <code>Transmitter</code> sends <code>{@link MidiEvent}</code> objects to one or more 
<code>{@link Receiver Receivers}</code>. Common MIDI transmitters include sequencers
and MIDI input ports.

@see Receiver

@version 1.22, 03/12/19
@author Kara Kytle"
      operation 8717467 "setReceiver"
	public explicit_return_type "void"
	nparams 1
	  param inout name "receiver" type class_ref 1088027 // Receiver
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the receiver to which this transmitter will deliver MIDI messages.
If a receiver is currently set, it is replaced with this one.
@param receiver the desired receiver."
      end

      operation 8717595 "getReceiver"
	public return_type class_ref 1088027 // Receiver
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the current receiver to which this transmitter will deliver MIDI messages. 
@return the current receiver.  If no receiver is currently set, 
returns <code>null</code>"
      end

      operation 8717723 "close"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates that the application has finished using the transmitter, and
that limited resources it requires may be released or made available.

<p>If the creation of this <code>Transmitter</code> resulted in
implicitly opening the underlying device, the device is
implicitly closed by this method. This is true unless the device is
kept open by other <code>Receiver</code> or <code>Transmitter</code>
instances that opened the device implicitly, and unless the device
has been opened explicitly. If the device this
<code>Transmitter</code> is retrieved from is closed explicitly
by calling {@link MidiDevice#close MidiDevice.close}, the
<code>Transmitter</code> is closed, too.  For a detailed
description of open/close behaviour see the class description
of {@link javax.sound.midi.MidiDevice MidiDevice}.

@see javax.sound.midi.MidiSystem#getTransmitter"
      end
    end

    class 1088283 "MidiEvent"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "MIDI events contain a MIDI message and a corresponding time-stamp
expressed in ticks, and can represent the MIDI event information
stored in a MIDI file or a <code>{@link Sequence}</code> object.  The 
duration of a tick is specified by the timing information contained
in the MIDI file or <code>Sequence</code> object.
<p>
In Java Sound, <code>MidiEvent</code> objects are typically contained in a 
<code>{@link Track}</code>, and <code>Tracks</code> are likewise 
contained in a <code>Sequence</code>. 


@version 1.10 03/12/19
@author David Rivas
@author Kara Kytle"
      classrelation 2221339 // message (<unidirectional association>)
	relation 2221339 --->
	  a role_name "message" const_relation private
	    comment " Instance variables    

The MIDI message for this event.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2221339 // message (<unidirectional association>)
	  b parent class_ref 1087387 // MidiMessage
      end

      attribute 3145883 "tick"
	private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The tick value for this event.
"
      end

      operation 8696475 "MidiEvent"
	public explicit_return_type ""
	nparams 2
	  param inout name "message" type class_ref 1087387 // MidiMessage
	  param in name "tick" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new <code>MidiEvent</code>.
@param message the MIDI message contained in the event
@param tick the time-stamp for the event, in MIDI ticks"
      end

      operation 8696603 "getMessage"
	public return_type class_ref 1087387 // MidiMessage
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the MIDI message contained in the event.
@return the MIDI message"
      end

      operation 8696731 "setTick"
	public explicit_return_type "void"
	nparams 1
	  param in name "tick" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the time-stamp for the event, in MIDI ticks
@param tick the new time-stamp, in MIDI ticks"
      end

      operation 8696859 "getTick"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the time-stamp for the event, in MIDI ticks
@return the time-stamp for the event, in MIDI ticks"
      end
    end

    class 1088411 "MidiFileFormat"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A <code>MidiFileFormat</code> object encapsulates a MIDI file's
type, as well as its length and timing information.

<p>A <code>MidiFileFormat</code> object can
include a set of properties. A property is a pair of key and value:
the key is of type <code>String</code>, the associated property
value is an arbitrary object.
Properties specify additional informational
meta data (like a author, or copyright).
Properties are optional information, and file reader and file
writer implementations are not required to provide or
recognize properties.

<p>The following table lists some common properties that should
be used in implementations:

<table border=1>
 <tr>
  <th>Property key</th>
  <th>Value type</th>
  <th>Description</th>
 </tr>
 <tr>
  <td>&quot;author&quot;</td>
  <td>{@link java.lang.String String}</td>
  <td>name of the author of this file</td>
 </tr>
 <tr>
  <td>&quot;title&quot;</td>
  <td>{@link java.lang.String String}</td>
  <td>title of this file</td>
 </tr>
 <tr>
  <td>&quot;copyright&quot;</td>
  <td>{@link java.lang.String String}</td>
  <td>copyright message</td>
 </tr>
 <tr>
  <td>&quot;date&quot;</td>
  <td>{@link java.util.Date Date}</td>
  <td>date of the recording or release</td>
 </tr>
 <tr>
  <td>&quot;comment&quot;</td>
  <td>{@link java.lang.String String}</td>
  <td>an arbitrary text</td>
 </tr>
</table>

@see MidiSystem#getMidiFileFormat(java.io.File)
@see Sequencer#setSequence(java.io.InputStream stream)

@version 1.17, 03/12/19
@author Kara Kytle
@author Florian Bomers"
      attribute 3146011 "UNKNOWN_LENGTH"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Represents unknown length.
@see #getByteLength
@see #getMicrosecondLength
"
      end

      attribute 3146139 "type"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The type of MIDI file.
"
      end

      attribute 3146267 "divisionType"
	protected explicit_type "float"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The division type of the MIDI file.

@see Sequence#PPQ
@see Sequence#SMPTE_24
@see Sequence#SMPTE_25
@see Sequence#SMPTE_30DROP
@see Sequence#SMPTE_30
"
      end

      attribute 3146395 "resolution"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The timing resolution of the MIDI file.
"
      end

      attribute 3146523 "byteLength"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The length of the MIDI file in bytes.
"
      end

      attribute 3146651 "microsecondLength"
	protected explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The duration of the MIDI file in microseconds.
"
      end

      classrelation 2221467 // properties (<unidirectional association>)
	relation 2221467 --->
	  a role_name "properties" private
	    comment " The set of properties 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, Object> ${name}${value};
"
	    classrelation_ref 2221467 // properties (<unidirectional association>)
	  b parent class_ref 144923 // HashMap
      end

      operation 8696987 "MidiFileFormat"
	public explicit_return_type ""
	nparams 5
	  param in name "type" explicit_type "int"
	  param in name "divisionType" explicit_type "float"
	  param in name "resolution" explicit_type "int"
	  param in name "bytes" explicit_type "int"
	  param in name "microseconds" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>MidiFileFormat</code>.

@param type the MIDI file type (0, 1, or 2)
@param divisionType the timing division type (PPQ or one of the SMPTE types)
@param resolution the timing resolution
@param bytes the length of the MIDI file in bytes, or UNKNOWN_LENGTH if not known
@param microseconds the duration of the file in microseconds, or UNKNOWN_LENGTH if not known
@see #UNKNOWN_LENGTH
@see Sequence#PPQ
@see Sequence#SMPTE_24
@see Sequence#SMPTE_25
@see Sequence#SMPTE_30DROP
@see Sequence#SMPTE_30"
      end

      operation 8697115 "MidiFileFormat"
	public explicit_return_type ""
	nparams 6
	  param in name "type" explicit_type "int"
	  param in name "divisionType" explicit_type "float"
	  param in name "resolution" explicit_type "int"
	  param in name "bytes" explicit_type "int"
	  param in name "microseconds" explicit_type "long"
	  param inout name "properties" type class_ref 136603 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}<String, Object> ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a <code>MidiFileFormat</code> with a set of properties.

@param type         the MIDI file type (0, 1, or 2)
@param divisionType the timing division type
     (PPQ or one of the SMPTE types)
@param resolution   the timing resolution
@param bytes the length of the MIDI file in bytes,
     or UNKNOWN_LENGTH if not known
@param microseconds the duration of the file in microseconds,
     or UNKNOWN_LENGTH if not known
@param properties  a <code>Map&lt;String,Object&gt;</code> object
       with properties

@see #UNKNOWN_LENGTH
@see Sequence#PPQ
@see Sequence#SMPTE_24
@see Sequence#SMPTE_25
@see Sequence#SMPTE_30DROP
@see Sequence#SMPTE_30
@since 1.5"
      end

      operation 8697243 "getType"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the MIDI file type.
@return the file's type (0, 1, or 2)"
      end

      operation 8697371 "getDivisionType"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the timing division type for the MIDI file.

@return the division type (PPQ or one of the SMPTE types)

@see Sequence#Sequence(float, int)
@see Sequence#PPQ
@see Sequence#SMPTE_24
@see Sequence#SMPTE_25
@see Sequence#SMPTE_30DROP
@see Sequence#SMPTE_30
@see Sequence#getDivisionType()"
      end

      operation 8697499 "getResolution"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the timing resolution for the MIDI file.
If the division type is PPQ, the resolution is specified in ticks per beat.
For SMTPE timing, the resolution is specified in ticks per frame.

@return the number of ticks per beat (PPQ) or per frame (SMPTE)
@see #getDivisionType
@see Sequence#getResolution()"
      end

      operation 8697627 "getByteLength"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the length of the MIDI file, expressed in 8-bit bytes.
@return the number of bytes in the file, or UNKNOWN_LENGTH if not known
@see #UNKNOWN_LENGTH"
      end

      operation 8697755 "getMicrosecondLength"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the length of the MIDI file, expressed in microseconds.
@return the file's duration in microseconds, or UNKNOWN_LENGTH if not known
@see Sequence#getMicrosecondLength()
@see #getByteLength
@see #UNKNOWN_LENGTH"
      end

      operation 8697883 "properties"
	public return_type class_ref 136603 // Map
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String,Object> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtain an unmodifiable map of properties.
The concept of properties is further explained in
the {@link MidiFileFormat class description}.

@return a <code>Map&lt;String,Object&gt;</code> object containing
        all properties. If no properties are recognized, an empty map is
        returned.

@see #getProperty(String)
@since 1.5"
      end

      operation 8698011 "getProperty"
	public explicit_return_type "Object"
	nparams 1
	  param in name "key" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtain the property value specified by the key.
The concept of properties is further explained in
the {@link MidiFileFormat class description}.

<p>If the specified property is not defined for a
particular file format, this method returns
<code>null</code>.

@param key the key of the desired property
@return the value of the property with the specified key,
        or <code>null</code> if the property does not exist.

@see #properties
@since 1.5"
      end
    end

    class 1088539 "MidiSystem"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The <code>MidiSystem</code> class provides access to the installed MIDI
system resources, including devices such as synthesizers, sequencers, and
MIDI input and output ports.  A typical simple MIDI application might
begin by invoking one or more <code>MidiSystem</code> methods to learn
what devices are installed and to obtain the ones needed in that
application.
<p>
The class also has methods for reading files, streams, and  URLs that
contain standard MIDI file data or soundbanks.  You can query the
<code>MidiSystem</code> for the format of a specified MIDI file.
<p>
You cannot instantiate a <code>MidiSystem</code>; all the methods are
static.

<p>Properties can be used to specify default MIDI devices.
Both system properties and a properties file are considered.
The properties file is &quot;lib/sound.properties&quot; in the JRE
directory. If a property exists both as a system property and in the
properties file, the system property takes precedence. If none is
specified, a suitable default is chosen among the available devices.
The syntax of the properties file is specified in
{@link java.util.Properties#load(InputStream) Properties.load}. The
following table lists the available property keys and which methods
consider them:

<table border=0>
 <tr>
  <th>Property Key</th>
  <th>Interface</th>
  <th>Affected Method</th>
 </tr>
 <tr>
  <td><code>javax.sound.midi.Receiver</code></td>
  <td>{@link Receiver}</td>
  <td>{@link #getReceiver}</td>
 </tr>
 <tr>
  <td><code>javax.sound.midi.Sequencer</code></td>
  <td>{@link Sequencer}</td>
  <td>{@link #getSequencer}</td>
 </tr>
 <tr>
  <td><code>javax.sound.midi.Synthesizer</code></td>
  <td>{@link Synthesizer}</td>
  <td>{@link #getSynthesizer}</td>
 </tr>
 <tr>
  <td><code>javax.sound.midi.Transmitter</code></td>
  <td>{@link Transmitter}</td>
  <td>{@link #getTransmitter}</td>
 </tr>
</table>

The property value consists of the provider class name
and the device name, separated by the hash mark (&quot;#&quot;).
The provider class name is the fully-qualified
name of a concrete {@link javax.sound.midi.spi.MidiDeviceProvider
MIDI device provider} class. The device name is matched against
the <code>String</code> returned by the <code>getName</code>
method of <code>MidiDevice.Info</code>.
Either the class name, or the device name may be omitted.
If only the class name is specified, the trailing hash mark
is optional.

<p>If the provider class is specified, and it can be
successully retrieved from the installed providers,
the list of
<code>MidiDevice.Info</code> objects is retrieved
from the provider. Otherwise, or when these devices
do not provide a subsequent match, the list is retrieved
from {@link #getMidiDeviceInfo} to contain
all available <code>MidiDevice.Info</code> objects.

<p>If a device name is specified, the resulting list of
<code>MidiDevice.Info</code> objects is searched:
the first one with a matching name, and whose
<code>MidiDevice</code> implements the
respective interface, will be returned.
If no matching <code>MidiDevice.Info</code> object
is found, or the device name is not specified,
the first suitable device from the resulting
list will be returned. For Sequencer and Synthesizer,
a device is suitable if it implements the respective
interface; whereas for Receiver and Transmitter, a device is
suitable if it
implements neither Sequencer nor Synthesizer and provides
at least one Receiver or Transmitter, respectively.

For example, the property <code>javax.sound.midi.Receiver</code>
with a value
<code>&quot;com.sun.media.sound.MidiProvider#SunMIDI1&quot;</code>
will have the following consequences when
<code>getReceiver</code> is called:
if the class <code>com.sun.media.sound.MidiProvider</code> exists
in the list of installed MIDI device providers,
the first <code>Receiver</code> device with name
<code>&quot;SunMIDI1&quot;</code> will be returned. If it cannot
be found, the first <code>Receiver</code> from that provider
will be returned, regardless of name.
If there is none, the first <code>Receiver</code> with name
<code>&quot;SunMIDI1&quot;</code> in the list of all devices
(as returned by <code>getMidiDeviceInfo</code>) will be returned,
or, if not found, the first <code>Receiver</code> that can
be found in the list of all devices is returned.
If that fails, too, a <code>MidiUnavailableException</code>
is thrown.

@version 1.66, 04/04/15
@author Kara Kytle
@author Florian Bomers
@author Matthias Pfisterer"
      operation 8698139 "MidiSystem"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Private no-args constructor for ensuring against instantiation."
      end

      operation 8698267 "getMidiDeviceInfo"
	class_operation public return_type class_ref 1087771 // Info
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an array of information objects representing
the set of all MIDI devices available on the system.
A returned information object can then be used to obtain the
corresponding device object, by invoking
{@link #getMidiDevice(MidiDevice.Info) getMidiDevice}.

@return an array of <code>MidiDevice.Info</code> objects, one
for each installed MIDI device.  If no such devices are installed,
an array of length 0 is returned."
      end

      operation 8698395 "getMidiDevice"
	class_operation public return_type class_ref 1087643 // MidiDevice
	nparams 1
	  param inout name "info" type class_ref 1087771 // Info
	nexceptions 1
	  exception class_ref 1087899 // MidiUnavailableException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the requested MIDI device.

@param info a device information object representing the desired device.
@return the requested device
@throws MidiUnavailableException if the requested device is not available
due to resource restrictions
@throws IllegalArgumentException if the info object does not represent
a MIDI device installed on the system
@see #getMidiDeviceInfo"
      end

      operation 8698523 "getReceiver"
	class_operation public return_type class_ref 1088027 // Receiver
	nparams 0
	nexceptions 1
	  exception class_ref 1087899 // MidiUnavailableException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a MIDI receiver from an external MIDI port
or other default device.

<p>If the system property
<code>javax.sound.midi.Receiver</code>
is defined or it is defined in the file &quot;sound.properties&quot;,
it is used to identify the device that provides the default receiver.
For details, refer to the {@link MidiSystem class description}.

If a suitable MIDI port is not available, the Receiver is
retrieved from an installed synthesizer.

<p>If this method returns successfully, the {@link
javax.sound.midi.MidiDevice MidiDevice} the
<code>Receiver</code> belongs to is opened implicitly, if it is
not already open. It is possible to close an implicitly opened
device by calling {@link javax.sound.midi.Receiver#close close}
on the returned <code>Receiver</code>. All open <code>Receiver</code>
instances have to be closed in order to release system resources
hold by the <code>MidiDevice</code>. For a
detailed description of open/close behaviour see the class
description of {@link javax.sound.midi.MidiDevice MidiDevice}.


@return the default MIDI receiver
@throws MidiUnavailableException if the default receiver is not
        available due to resource restrictions,
        or no device providing receivers is installed in the system"
      end

      operation 8698651 "getTransmitter"
	class_operation public return_type class_ref 1088155 // Transmitter
	nparams 0
	nexceptions 1
	  exception class_ref 1087899 // MidiUnavailableException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a MIDI transmitter from an external MIDI port
or other default source.

<p>If the system property
<code>javax.sound.midi.Transmitter</code>
is defined or it is defined in the file &quot;sound.properties&quot;,
it is used to identify the device that provides the default transmitter.
For details, refer to the {@link MidiSystem class description}.

If this method returns successfully, the {@link
javax.sound.midi.MidiDevice MidiDevice} the
<code>Transmitter</code> belongs to is opened implicitly, if it
is not already open. It is possible to close an implicitly
opened device by calling {@link
javax.sound.midi.Transmitter#close close} on the returned
<code>Transmitter</code>. All open <code>Transmitter</code>
instances have to be closed in order to release system resources
hold by the <code>MidiDevice</code>. For a detailed description
of open/close behaviour see the class description of {@link
javax.sound.midi.MidiDevice MidiDevice}.

@return the default MIDI transmitter
@throws MidiUnavailableException if the default transmitter is not
        available due to resource restrictions,
        or no device providing transmitters is installed in the system"
      end

      operation 8698779 "getSynthesizer"
	class_operation public return_type class_ref 1088667 // Synthesizer
	nparams 0
	nexceptions 1
	  exception class_ref 1087899 // MidiUnavailableException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the default synthesizer.

<p>If the system property
<code>javax.sound.midi.Synthesizer</code>
is defined or it is defined in the file &quot;sound.properties&quot;,
it is used to identify the default synthesizer.
For details, refer to the {@link MidiSystem class description}.

@return the default synthesizer
@throws MidiUnavailableException if the synthesizer is not
        available due to resource restrictions,
        or no synthesizer is installed in the system"
      end

      operation 8698907 "getSequencer"
	class_operation public return_type class_ref 1088795 // Sequencer
	nparams 0
	nexceptions 1
	  exception class_ref 1087899 // MidiUnavailableException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the default <code>Sequencer</code>, connected to
a default device.
The returned <code>Sequencer</code> instance is
connected to the default <code>Synthesizer</code>,
as returned by {@link #getSynthesizer}.
If there is no <code>Synthesizer</code>
available, or the default <code>Synthesizer</code>
cannot be opened, the <code>sequencer</code> is connected
to the default <code>Receiver</code>, as returned
by {@link #getReceiver}.
The connection is made by retrieving a <code>Transmitter</code>
instance from the <code>Sequencer</code> and setting its
<code>Receiver</code>.
Closing and re-opening the sequencer will restore the
connection to the default device.

<p>This method is equivalent to calling
<code>getSequencer(true)</code>.

<p>If the system property
<code>javax.sound.midi.Sequencer</code>
is defined or it is defined in the file &quot;sound.properties&quot;,
it is used to identify the default sequencer.
For details, refer to the {@link MidiSystem class description}.

@return the default sequencer, connected to a default Receiver
@throws MidiUnavailableException if the sequencer is not
        available due to resource restrictions,
        or there is no <code>Receiver</code> available by any
        installed <code>MidiDevice</code>,
        or no sequencer is installed in the system.
@see #getSequencer(boolean)
@see #getSynthesizer
@see #getReceiver"
      end

      operation 8699035 "getSequencer"
	class_operation public return_type class_ref 1088795 // Sequencer
	nparams 1
	  param inout name "connected" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 1087899 // MidiUnavailableException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the default <code>Sequencer</code>, optionally
connected to a default device.

<p>If <code>connected</code> is true, the returned
<code>Sequencer</code> instance is
connected to the default <code>Synthesizer</code>,
as returned by {@link #getSynthesizer}.
If there is no <code>Synthesizer</code>
available, or the default <code>Synthesizer</code>
cannot be opened, the <code>sequencer</code> is connected
to the default <code>Receiver</code>, as returned
by {@link #getReceiver}.
The connection is made by retrieving a <code>Transmitter</code>
instance from the <code>Sequencer</code> and setting its
<code>Receiver</code>.
Closing and re-opening the sequencer will restore the
connection to the default device.

<p>If <code>connected</code> is false, the returned
<code>Sequencer</code> instance is not connected, it
has no open <code>Transmitters</code>. In order to
play the sequencer on a MIDI device, or a <code>Synthesizer</code>,
it is necessary to get a <code>Transmitter</code> and set its
<code>Receiver</code>.

<p>If the system property
<code>javax.sound.midi.Sequencer</code>
is defined or it is defined in the file \"sound.properties\",
it is used to identify the default sequencer.
For details, refer to the {@link MidiSystem class description}.

@return the default sequencer
@throws MidiUnavailableException if the sequencer is not
        available due to resource restrictions,
        or no sequencer is installed in the system,
        or if <code>connected</code> is true, and there is
        no <code>Receiver</code> available by any installed
        <code>MidiDevice</code>
@see #getSynthesizer
@see #getReceiver
@since 1.5"
      end

      operation 8699163 "getSoundbank"
	class_operation public return_type class_ref 1086747 // Soundbank
	nparams 1
	  param inout name "stream" type class_ref 179099 // InputStream
	nexceptions 2
	  exception class_ref 1087003 // InvalidMidiDataException
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a MIDI sound bank by reading it from the specified stream.
The stream must point to
a valid MIDI soundbank file.  In general, MIDI soundbank providers may
need to read some data from the stream before determining whether they
support it.  These parsers must
be able to mark the stream, read enough data to determine whether they
support the stream, and, if not, reset the stream's read pointer to
its original position.  If the input stream does not support this,
this method may fail with an IOException.
@param stream the source of the sound bank data.
@return the sound bank
@throws InvalidMidiDataException if the stream does not point to
valid MIDI soundbank data recognized by the system
@throws IOException if an I/O error occurred when loading the soundbank
@see InputStream#markSupported
@see InputStream#mark"
      end

      operation 8699291 "getSoundbank"
	class_operation public return_type class_ref 1086747 // Soundbank
	nparams 1
	  param inout name "url" type class_ref 269467 // URL
	nexceptions 2
	  exception class_ref 1087003 // InvalidMidiDataException
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>Soundbank</code> by reading it from the specified URL.
The URL must point to a valid MIDI soundbank file.

@param url the source of the sound bank data
@return the sound bank
@throws InvalidMidiDataException if the URL does not point to valid MIDI
soundbank data recognized by the system
@throws IOException if an I/O error occurred when loading the soundbank"
      end

      operation 8699419 "getSoundbank"
	class_operation public return_type class_ref 1086747 // Soundbank
	nparams 1
	  param inout name "file" type class_ref 165147 // File
	nexceptions 2
	  exception class_ref 1087003 // InvalidMidiDataException
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>Soundbank</code> by reading it from the specified
<code>File</code>.
The <code>File</code> must point to a valid MIDI soundbank file.

@param file the source of the sound bank data
@return the sound bank
@throws InvalidMidiDataException if the <code>File</code> does not
point to valid MIDI soundbank data recognized by the system
@throws IOException if an I/O error occurred when loading the soundbank"
      end

      operation 8699547 "getMidiFileFormat"
	class_operation public return_type class_ref 1088411 // MidiFileFormat
	nparams 1
	  param inout name "stream" type class_ref 179099 // InputStream
	nexceptions 2
	  exception class_ref 1087003 // InvalidMidiDataException
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the MIDI file format of the data in the specified input stream.
The stream must point to valid MIDI file data for a file type recognized
by the system.
<p>
This method and/or the code it invokes may need to read some data from
the stream to determine whether its data format is supported.  The
implementation may therefore
need to mark the stream, read enough data to determine whether it is in
a supported format, and reset the stream's read pointer to its original
position.  If the input stream does not permit this set of operations,
this method may fail with an <code>IOException</code>.
<p>
This operation can only succeed for files of a type which can be parsed
by an installed file reader.  It may fail with an InvalidMidiDataException
even for valid files if no compatible file reader is installed.  It
will also fail with an InvalidMidiDataException if a compatible file reader
is installed, but encounters errors while determining the file format.

@param stream the input stream from which file format information
should be extracted
@return an <code>MidiFileFormat</code> object describing the MIDI file
format
@throws InvalidMidiDataException if the stream does not point to valid
MIDI file data recognized by the system
@throws IOException if an I/O exception occurs while accessing the
stream
@see #getMidiFileFormat(URL)
@see #getMidiFileFormat(File)
@see InputStream#markSupported
@see InputStream#mark"
      end

      operation 8699675 "getMidiFileFormat"
	class_operation public return_type class_ref 1088411 // MidiFileFormat
	nparams 1
	  param inout name "url" type class_ref 269467 // URL
	nexceptions 2
	  exception class_ref 1087003 // InvalidMidiDataException
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the MIDI file format of the data in the specified URL.  The URL
must point to valid MIDI file data for a file type recognized
by the system.
<p>
This operation can only succeed for files of a type which can be parsed
by an installed file reader.  It may fail with an InvalidMidiDataException
even for valid files if no compatible file reader is installed.  It
will also fail with an InvalidMidiDataException if a compatible file reader
is installed, but encounters errors while determining the file format.

@param url the URL from which file format information should be
extracted
@return a <code>MidiFileFormat</code> object describing the MIDI file
format
@throws InvalidMidiDataException if the URL does not point to valid MIDI
file data recognized by the system
@throws IOException if an I/O exception occurs while accessing the URL

@see #getMidiFileFormat(InputStream)
@see #getMidiFileFormat(File)"
      end

      operation 8699803 "getMidiFileFormat"
	class_operation public return_type class_ref 1088411 // MidiFileFormat
	nparams 1
	  param inout name "file" type class_ref 165147 // File
	nexceptions 2
	  exception class_ref 1087003 // InvalidMidiDataException
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the MIDI file format of the specified <code>File</code>.  The
<code>File</code> must point to valid MIDI file data for a file type
recognized by the system.
<p>
This operation can only succeed for files of a type which can be parsed
by an installed file reader.  It may fail with an InvalidMidiDataException
even for valid files if no compatible file reader is installed.  It
will also fail with an InvalidMidiDataException if a compatible file reader
is installed, but encounters errors while determining the file format.

@param file the <code>File</code> from which file format information
should be extracted
@return a <code>MidiFileFormat</code> object describing the MIDI file
format
@throws InvalidMidiDataException if the <code>File</code> does not point
 to valid MIDI file data recognized by the system
@throws IOException if an I/O exception occurs while accessing the file

@see #getMidiFileFormat(InputStream)
@see #getMidiFileFormat(URL)"
      end

      operation 8699931 "getSequence"
	class_operation public return_type class_ref 1088923 // Sequence
	nparams 1
	  param inout name "stream" type class_ref 179099 // InputStream
	nexceptions 2
	  exception class_ref 1087003 // InvalidMidiDataException
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a MIDI sequence from the specified input stream.  The stream must
point to valid MIDI file data for a file type recognized
by the system.
<p>
This method and/or the code it invokes may need to read some data
from the stream to determine whether
its data format is supported.  The implementation may therefore
need to mark the stream, read enough data to determine whether it is in
a supported format, and reset the stream's read pointer to its original
position.  If the input stream does not permit this set of operations,
this method may fail with an <code>IOException</code>.
<p>
This operation can only succeed for files of a type which can be parsed
by an installed file reader.  It may fail with an InvalidMidiDataException
even for valid files if no compatible file reader is installed.  It
will also fail with an InvalidMidiDataException if a compatible file reader
is installed, but encounters errors while constructing the <code>Sequence</code>
object from the file data.

@param stream the input stream from which the <code>Sequence</code>
should be constructed
@return a <code>Sequence</code> object based on the MIDI file data
contained in the input stream
@throws InvalidMidiDataException if the stream does not point to
valid MIDI file data recognized by the system
@throws IOException if an I/O exception occurs while accessing the
stream
@see InputStream#markSupported
@see InputStream#mark"
      end

      operation 8700059 "getSequence"
	class_operation public return_type class_ref 1088923 // Sequence
	nparams 1
	  param inout name "url" type class_ref 269467 // URL
	nexceptions 2
	  exception class_ref 1087003 // InvalidMidiDataException
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a MIDI sequence from the specified URL.  The URL must
point to valid MIDI file data for a file type recognized
by the system.
<p>
This operation can only succeed for files of a type which can be parsed
by an installed file reader.  It may fail with an InvalidMidiDataException
even for valid files if no compatible file reader is installed.  It
will also fail with an InvalidMidiDataException if a compatible file reader
is installed, but encounters errors while constructing the <code>Sequence</code>
object from the file data.

@param url the URL from which the <code>Sequence</code> should be
constructed
@return a <code>Sequence</code> object based on the MIDI file data
pointed to by the URL
@throws InvalidMidiDataException if the URL does not point to valid MIDI
file data recognized by the system
@throws IOException if an I/O exception occurs while accessing the URL"
      end

      operation 8700187 "getSequence"
	class_operation public return_type class_ref 1088923 // Sequence
	nparams 1
	  param inout name "file" type class_ref 165147 // File
	nexceptions 2
	  exception class_ref 1087003 // InvalidMidiDataException
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a MIDI sequence from the specified <code>File</code>.
The <code>File</code> must point to valid MIDI file data
for a file type recognized by the system.
<p>
This operation can only succeed for files of a type which can be parsed
by an installed file reader.  It may fail with an InvalidMidiDataException
even for valid files if no compatible file reader is installed.  It
will also fail with an InvalidMidiDataException if a compatible file reader
is installed, but encounters errors while constructing the <code>Sequence</code>
object from the file data.

@param file the <code>File</code> from which the <code>Sequence</code>
should be constructed
@return a <code>Sequence</code> object based on the MIDI file data
pointed to by the File
@throws InvalidMidiDataException if the File does not point to valid MIDI
file data recognized by the system
@throws IOException if an I/O exception occurs"
      end

      operation 8700315 "getMidiFileTypes"
	class_operation public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the set of MIDI file types for which file writing support is
provided by the system.
@return array of unique file types.  If no file types are supported,
an array of length 0 is returned."
      end

      operation 8700443 "isFileTypeSupported"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "fileType" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether file writing support for the specified MIDI file type
is provided by the system.
@param fileType the file type for which write capabilities are queried
@return <code>true</code> if the file type is supported,
otherwise <code>false</code>"
      end

      operation 8700571 "getMidiFileTypes"
	class_operation public explicit_return_type "int"
	nparams 1
	  param inout name "sequence" type class_ref 1088923 // Sequence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the set of MIDI file types that the system can write from the
sequence specified.
@param sequence the sequence for which MIDI file type support
is queried
@return the set of unique supported file types.  If no file types are supported,
returns an array of length 0."
      end

      operation 8700699 "isFileTypeSupported"
	class_operation public explicit_return_type "boolean"
	nparams 2
	  param in name "fileType" explicit_type "int"
	  param inout name "sequence" type class_ref 1088923 // Sequence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether a MIDI file of the file type specified can be written
from the sequence indicated.
@param fileType the file type for which write capabilities
are queried
@param sequence the sequence for which file writing support is queried
@return <code>true</code> if the file type is supported for this
sequence, otherwise <code>false</code>"
      end

      operation 8700827 "write"
	class_operation public explicit_return_type "int"
	nparams 3
	  param inout name "in" type class_ref 1088923 // Sequence
	  param in name "fileType" explicit_type "int"
	  param inout name "out" type class_ref 183835 // OutputStream
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a stream of bytes representing a file of the MIDI file type
indicated to the output stream provided.
@param in sequence containing MIDI data to be written to the file
@param fileType the file type of the file to be written to the output stream
@param out stream to which the file data should be written
@return the number of bytes written to the output stream
@throws IOException if an I/O exception occurs
@throws IllegalArgumentException if the file format is not supported by
the system
@see #isFileTypeSupported(int, Sequence)
@see	#getMidiFileTypes(Sequence)"
      end

      operation 8700955 "write"
	class_operation public explicit_return_type "int"
	nparams 3
	  param inout name "in" type class_ref 1088923 // Sequence
	  param in name "type" explicit_type "int"
	  param inout name "out" type class_ref 165147 // File
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a stream of bytes representing a file of the MIDI file type
indicated to the external file provided.
@param in sequence containing MIDI data to be written to the file
@param type the file type of the file to be written to the output stream
@param out external file to which the file data should be written
@return the number of bytes written to the file
@throws IOException if an I/O exception occurs
@throws IllegalArgumentException if the file type is not supported by
the system
@see #isFileTypeSupported(int, Sequence)
@see	#getMidiFileTypes(Sequence)"
      end

      operation 8701083 "getMidiDeviceProviders"
	class_operation private return_type class_ref 135579 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " HELPER METHODS"
      end

      operation 8701211 "getSoundbankReaders"
	class_operation private return_type class_ref 135579 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8701339 "getMidiFileWriters"
	class_operation private return_type class_ref 135579 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8701467 "getMidiFileReaders"
	class_operation private return_type class_ref 135579 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8701595 "getDefaultDeviceWrapper"
	class_operation private return_type class_ref 1087643 // MidiDevice
	nparams 1
	  param inout name "deviceClass" type class_ref 164635 // Class
	nexceptions 1
	  exception class_ref 1087899 // MidiUnavailableException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Attempts to locate and return a default MidiDevice of the specified
type.

This method wraps {@link #getDefaultDevice}. It catches the
<code>IllegalArgumentException</code> thrown by
<code>getDefaultDevice</code> and instead throws a
<code>MidiUnavailableException</code>, with the catched
exception chained.

@param deviceClass The requested device type, one of Synthesizer.class,
Sequencer.class, Receiver.class or Transmitter.class.
@throws  MidiUnavalableException on failure."
      end

      operation 8701723 "getDefaultDevice"
	class_operation private return_type class_ref 1087643 // MidiDevice
	nparams 1
	  param inout name "deviceClass" type class_ref 164635 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Attempts to locate and return a default MidiDevice of the specified
type.

@param deviceClass The requested device type, one of Synthesizer.class,
Sequencer.class, Receiver.class or Transmitter.class.
@throws  IllegalArgumentException on failure."
      end

      operation 8701851 "getNamedProvider"
	class_operation private return_type class_ref 1089051 // MidiDeviceProvider
	nparams 2
	  param in name "providerClassName" explicit_type "String"
	  param inout name "providers" type class_ref 135579 // List
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Return a MidiDeviceProcider of a given class from the list of
MidiDeviceProviders.

@param providerClassName The class name of the provider to be returned.
@param provider The list of MidiDeviceProviders that is searched.
@return A MidiDeviceProvider of the requested class, or null if none
is found."
      end

      operation 8701979 "getNamedDevice"
	class_operation private return_type class_ref 1087643 // MidiDevice
	nparams 3
	  param in name "deviceName" explicit_type "String"
	  param inout name "provider" type class_ref 1089051 // MidiDeviceProvider
	  param inout name "deviceClass" type class_ref 164635 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Return a MidiDevice with a given name from a given MidiDeviceProvider.
@param deviceName The name of the MidiDevice to be returned.
@param provider The MidiDeviceProvider to check for MidiDevices.
@param deviceClass The requested device type, one of Synthesizer.class,
Sequencer.class, Receiver.class or Transmitter.class.

@return A MidiDevice matching the requirements, or null if none is found."
      end

      operation 8702107 "getNamedDevice"
	class_operation private return_type class_ref 1087643 // MidiDevice
	nparams 5
	  param in name "deviceName" explicit_type "String"
	  param inout name "provider" type class_ref 1089051 // MidiDeviceProvider
	  param inout name "deviceClass" type class_ref 164635 // Class
	  param inout name "allowSynthesizer" explicit_type "boolean"
	  param inout name "allowSequencer" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Return a MidiDevice with a given name from a given MidiDeviceProvider.
@param deviceName The name of the MidiDevice to be returned.
@param provider The MidiDeviceProvider to check for MidiDevices.
@param deviceClass The requested device type, one of Synthesizer.class,
Sequencer.class, Receiver.class or Transmitter.class.

@return A MidiDevice matching the requirements, or null if none is found."
      end

      operation 8702235 "getNamedDevice"
	class_operation private return_type class_ref 1087643 // MidiDevice
	nparams 3
	  param in name "deviceName" explicit_type "String"
	  param inout name "providers" type class_ref 135579 // List
	  param inout name "deviceClass" type class_ref 164635 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Return a MidiDevice with a given name from a list of
MidiDeviceProviders.
@param deviceName The name of the MidiDevice to be returned.
@param providers The List of MidiDeviceProviders to check for
MidiDevices.
@param deviceClass The requested device type, one of Synthesizer.class,
Sequencer.class, Receiver.class or Transmitter.class.
@return A Mixer matching the requirements, or null if none is found."
      end

      operation 8702363 "getNamedDevice"
	class_operation private return_type class_ref 1087643 // MidiDevice
	nparams 5
	  param in name "deviceName" explicit_type "String"
	  param inout name "providers" type class_ref 135579 // List
	  param inout name "deviceClass" type class_ref 164635 // Class
	  param inout name "allowSynthesizer" explicit_type "boolean"
	  param inout name "allowSequencer" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Return a MidiDevice with a given name from a list of
MidiDeviceProviders.
@param deviceName The name of the MidiDevice to be returned.
@param providers The List of MidiDeviceProviders to check for
MidiDevices.
@param deviceClass The requested device type, one of Synthesizer.class,
Sequencer.class, Receiver.class or Transmitter.class.
@return A Mixer matching the requirements, or null if none is found."
      end

      operation 8702491 "getFirstDevice"
	class_operation private return_type class_ref 1087643 // MidiDevice
	nparams 2
	  param inout name "provider" type class_ref 1089051 // MidiDeviceProvider
	  param inout name "deviceClass" type class_ref 164635 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " From a given MidiDeviceProvider, return the first appropriate device.
@param provider The MidiDeviceProvider to check for MidiDevices.
@param deviceClass The requested device type, one of Synthesizer.class,
Sequencer.class, Receiver.class or Transmitter.class.
@return A MidiDevice is considered appropriate, or null if no
appropriate device is found."
      end

      operation 8702619 "getFirstDevice"
	class_operation private return_type class_ref 1087643 // MidiDevice
	nparams 4
	  param inout name "provider" type class_ref 1089051 // MidiDeviceProvider
	  param inout name "deviceClass" type class_ref 164635 // Class
	  param inout name "allowSynthesizer" explicit_type "boolean"
	  param inout name "allowSequencer" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " From a given MidiDeviceProvider, return the first appropriate device.
@param provider The MidiDeviceProvider to check for MidiDevices.
@param deviceClass The requested device type, one of Synthesizer.class,
Sequencer.class, Receiver.class or Transmitter.class.
@return A MidiDevice is considered appropriate, or null if no
appropriate device is found."
      end

      operation 8702747 "getFirstDevice"
	class_operation private return_type class_ref 1087643 // MidiDevice
	nparams 2
	  param inout name "providers" type class_ref 135579 // List
	  param inout name "deviceClass" type class_ref 164635 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " From a List of MidiDeviceProviders, return the first appropriate
MidiDevice.
@param providers The List of MidiDeviceProviders to search.
@param deviceClass The requested device type, one of Synthesizer.class,
Sequencer.class, Receiver.class or Transmitter.class.
@return A MidiDevice that is considered appropriate, or null
if none is found."
      end

      operation 8702875 "getFirstDevice"
	class_operation private return_type class_ref 1087643 // MidiDevice
	nparams 4
	  param inout name "providers" type class_ref 135579 // List
	  param inout name "deviceClass" type class_ref 164635 // Class
	  param inout name "allowSynthesizer" explicit_type "boolean"
	  param inout name "allowSequencer" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " From a List of MidiDeviceProviders, return the first appropriate
MidiDevice.
@param providers The List of MidiDeviceProviders to search.
@param deviceClass The requested device type, one of Synthesizer.class,
Sequencer.class, Receiver.class or Transmitter.class.
@return A MidiDevice that is considered appropriate, or null
if none is found."
      end

      operation 8703003 "isAppropriateDevice"
	class_operation private explicit_return_type "boolean"
	nparams 4
	  param inout name "device" type class_ref 1087643 // MidiDevice
	  param inout name "deviceClass" type class_ref 164635 // Class
	  param inout name "allowSynthesizer" explicit_type "boolean"
	  param inout name "allowSequencer" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Checks if a MidiDevice is appropriate.
If deviceClass is Synthesizer or Sequencer, a device implementing
the respective interface is considered appropriate. If deviceClass
is Receiver or Transmitter, a device is considered appropriate if
it implements neither Synthesizer nor Transmitter, and if it can
provide at least one Receiver or Transmitter, respectively.

@param device the MidiDevice to test
@param allowSynthesizer if true, Synthesizers are considered
appropriate. Otherwise only pure MidiDevices are considered
appropriate (unless allowSequencer is true). This flag only has an
effect for deviceClass Receiver and Transmitter. For other device
classes (Sequencer and Synthesizer), this flag has no effect. 
@param allowSequencer if true, Sequencers are considered
appropriate. Otherwise only pure MidiDevices are considered
appropriate (unless allowSynthesizer is true). This flag only has an
effect for deviceClass Receiver and Transmitter. For other device
classes (Sequencer and Synthesizer), this flag has no effect. 
@return true if the device is considered appropriate according to the
rules given above, false otherwise."
      end

      operation 8703131 "getProviders"
	class_operation private return_type class_ref 135579 // List
	nparams 1
	  param inout name "providerClass" type class_ref 164635 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the set of services currently installed on the system
using sun.misc.Service, the SPI mechanism in 1.3.
@return a List of instances of providers for the requested service.
If no providers are available, a List of length 0 will be returned."
      end
    end

    class 1088667 "Synthesizer"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A <code>Synthesizer</code> generates sound.  This usually happens when one of 
the <code>Synthesizer</code>'s {@link MidiChannel} objects receives a 
{@link MidiChannel#noteOn(int, int) noteOn} message, either
directly or via the <code>Synthesizer</code> object.
Many <code>Synthesizer</code>s support <code>Receivers</code>, through which
MIDI events can be delivered to the <code>Synthesizer</code>.  
In such cases, the <code>Synthesizer</code> typically responds by sending
a corresponding message to the appropriate <code>MidiChannel</code>, or by
processing the event itself if the event isn't one of the MIDI channel 
messages.
<p>
The <code>Synthesizer</code> interface includes methods for loading and 
unloading instruments from soundbanks.  An instrument is a specification for synthesizing a
certain type of sound, whether that sound emulates a traditional instrument or is
some kind of sound effect or other imaginary sound. A soundbank is a collection of instruments, organized
by bank and program number (via the instrument's <code>Patch</code> object).  
Different <code>Synthesizer</code> classes might implement different sound-synthesis
techniques, meaning that some instruments and not others might be compatible with a
given synthesizer.
Also, synthesizers may have a limited amount of memory for instruments, meaning
that not every soundbank and instrument can be used by every synthesizer, even if
the synthesis technique is compatible.
To see whether the instruments from 
a certain soundbank can be played by a given synthesizer, invoke the
{@link #isSoundbankSupported(Soundbank) isSoundbankSupported} method of 
<code>Synthesizer</code>.
<p>
\"Loading\" an instrument means that that instrument becomes available for 
synthesizing notes.  The instrument is loaded into the bank and 
program location specified by its <code>Patch</code> object.  Loading does
not necessarily mean that subsequently played notes will immediately have 
the sound of this newly loaded instrument.  For the instrument to play notes, 
one of the synthesizer's <code>MidiChannel</code> objects must receive (or have received)
a program-change message that causes that particular instrument's
bank and program number to be selected.

@see MidiSystem#getSynthesizer
@see Soundbank
@see Instrument
@see MidiChannel#programChange(int, int)
@see Receiver
@see Transmitter
@see MidiDevice

@version 1.27, 03/12/19
@author Kara Kytle"
      classrelation 2222619 // <generalisation>
	relation 2222619 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2222619 // <generalisation>
	  b parent class_ref 1087643 // MidiDevice
      end

      operation 8713755 "getMaxPolyphony"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " SYNTHESIZER METHODS

Obtains the maximum number of notes that this synthesizer can sound simultaneously.
@return the maximum number of simultaneous notes
@see #getVoiceStatus"
      end

      operation 8713883 "getLatency"
	public explicit_return_type "long"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the processing latency incurred by this synthesizer, expressed in 
microseconds.  This latency measures the worst-case delay between the  
time a MIDI message is delivered to the synthesizer and the time that the
synthesizer actually produces the corresponding result.
<p>
Although the latency is expressed in microseconds, a synthesizer's actual measured 
delay may vary over a wider range than this resolution suggests.  For example,
a synthesizer might have a worst-case delay of a few milliseconds or more.

@return the worst-case delay, in microseconds"
      end

      operation 8714011 "getChannels"
	public return_type class_ref 1087515 // MidiChannel
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the set of MIDI channels controlled by this synthesizer.  Each 
non-null element in the returned array is a <code>MidiChannel</code> that 
receives the MIDI messages sent on that channel number.
<p>
The MIDI 1.0 specification provides for 16 channels, so this 
method returns an array of at least 16 elements.  However, if this synthesizer 
doesn't make use of all 16 channels, some of the elements of the array
might be <code>null</code>, so you should check each element
before using it.
@return an array of the <code>MidiChannel</code> objects managed by this
<code>Synthesizer</code>.  Some of the array elements may be <code>null</code>."
      end

      operation 8714139 "getVoiceStatus"
	public return_type class_ref 1089435 // VoiceStatus
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the current status of the voices produced by this synthesizer.  
If this class of <code>Synthesizer</code> does not provide voice 
information, the returned array will always be of length 0.  Otherwise,
its length is always equal to the total number of voices, as returned by 
<code>getMaxPolyphony()</code>.  (See the <code>VoiceStatus</code> class 
description for an explanation of synthesizer voices.)

@return an array of <code>VoiceStatus</code> objects that supply 
information about the corresponding synthesizer voices
@see #getMaxPolyphony
@see VoiceStatus"
      end

      operation 8714267 "isSoundbankSupported"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "soundbank" type class_ref 1086747 // Soundbank
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Informs the caller whether this synthesizer is capable of loading 
instruments from the specified soundbank.
If the soundbank is unsupported, any attempts to load instruments from
it will result in an <code>IllegalArgumentException</code>.
@param soundbank soundbank for which support is queried
@return <code>true</code> if the soundbank is supported, otherwise <code>false</code>
@see #loadInstruments
@see #loadAllInstruments
@see #unloadInstruments
@see #unloadAllInstruments
@see #getDefaultSoundbank"
      end

      operation 8714395 "loadInstrument"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "instrument" type class_ref 1086491 // Instrument
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Makes a particular instrument available for synthesis.  This instrument
is loaded into the patch location specified by its <code>Patch</code> 
object, so that if a program-change message is 
received (or has been received) that causes that patch to be selected,
subsequent notes will be played using the sound of 
<code>instrument</code>.  If the specified instrument is already loaded,
this method does nothing and returns <code>true</code>.
<p>
The instrument must be part of a soundbank 
that this <code>Synthesizer</code> supports.  (To make sure, you can use
the <code>getSoundbank</code> method of <code>Instrument</code> and the 
<code>isSoundbankSupported</code> method of <code>Synthesizer</code>.)
@param instrument instrument to load
@return <code>true</code> if the instrument is successfully loaded (or 
already had been), <code>false</code> if the instrument could not be 
loaded (for example, if the synthesizer has insufficient
memory to load it)
@throws <code>IllegalArgumentException</code> if this 
<code>Synthesizer</code> doesn't support the specified instrument's 
soundbank 
@see #unloadInstrument	 
@see #loadInstruments	 
@see #loadAllInstruments	 
@see #remapInstrument
@see SoundbankResource#getSoundbank	 
@see MidiChannel#programChange(int, int)"
      end

      operation 8714523 "unloadInstrument"
	public explicit_return_type "void"
	nparams 1
	  param inout name "instrument" type class_ref 1086491 // Instrument
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unloads a particular instrument.
@param instrument instrument to unload
@throws <code>IllegalArgumentException</code> if this 
<code>Synthesizer</code> doesn't support the specified instrument's 
soundbank 
@see #loadInstrument	 
@see #unloadInstruments	 
@see #unloadAllInstruments	 
@see #getLoadedInstruments
@see #remapInstrument	 "
      end

      operation 8714651 "remapInstrument"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "from" type class_ref 1086491 // Instrument
	  param inout name "to" type class_ref 1086491 // Instrument
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remaps an instrument.  Instrument <code>to</code> takes the 
place of instrument <code>from</code>.
For example, if <code>from</code> was located at bank number 2,
program number 11, remapping causes
that bank and program location to be occupied instead by 
<code>to</code>.  Instrument <code>from</code> is unloaded.

@param from instrument to be replaced
@param to new instrument to be used in place of the old instrument
@return <code>true</code> if the instrument could be remapped, 
<code>false</code> otherwise
@throws <code>IllegalArgumentException</code> if the soundbank is not supported"
      end

      operation 8714779 "getDefaultSoundbank"
	public return_type class_ref 1086747 // Soundbank
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the default soundbank for the synthesizer, if one exists.
(Some synthesizers provide a default or built-in soundbank.)
If a synthesizer doesn't have a default soundbank, instruments must
be loaded explicitly from an external soundbank.  
@return default soundbank, or <code>null</code> if one does not exist.
@see #isSoundbankSupported"
      end

      operation 8714907 "getAvailableInstruments"
	public return_type class_ref 1086491 // Instrument
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a list of instruments that come with the synthesizer.  These
instruments might be built into the synthesizer, or they might be
part of a default soundbank provided with the synthesizer, etc.
<p>  
Note that you don't use this method  to find out which instruments are 
currently loaded onto the synthesizer; for that purpose, you use 
<code>getLoadedInstruments()</code>.
Nor does the method indicate all the instruments that can be loaded onto
the synthesizer; it only indicates the subset that come with the synthesizer.
To learn whether another instrument can be loaded, you can invoke 
<code>isSoundbankSupported()</code>, and if the instrument's 
<code>Soundbank</code> is supported, you can try loading the instrument.
 
@return list of available instruments.
@see #getLoadedInstruments	 
@see #isSoundbankSupported(Soundbank)
@see #loadInstrument	 "
      end

      operation 8715035 "getLoadedInstruments"
	public return_type class_ref 1086491 // Instrument
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a list of the instruments that are currently loaded onto this 
<code>Synthesizer</code>.
@return a list of currently loaded instruments
@see #loadInstrument	 
@see #getAvailableInstruments	 
@see Soundbank#getInstruments	 "
      end

      operation 8715163 "loadAllInstruments"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "soundbank" type class_ref 1086747 // Soundbank
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Loads onto the <code>Synthesizer</code> all instruments contained 
in the specified <code>Soundbank</code>.
@param soundbank the <code>Soundbank</code> whose are instruments are 
to be loaded
@return <code>true</code> if the instruments are all successfully loaded (or 
already had been), <code>false</code> if any instrument could not be 
loaded (for example, if the <code>Synthesizer</code> had insufficient memory)
@throws IllegalArgumentException if the requested soundbank is 
incompatible with this synthesizer.
@see #isSoundbankSupported
@see #loadInstrument	 
@see #loadInstruments	 "
      end

      operation 8715291 "unloadAllInstruments"
	public explicit_return_type "void"
	nparams 1
	  param inout name "soundbank" type class_ref 1086747 // Soundbank
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unloads all instruments contained in the specified <code>Soundbank</code>.
@param soundbank soundbank containing instruments to unload
@throws IllegalArgumentException thrown if the soundbank is not supported.
@see #isSoundbankSupported
@see #unloadInstrument	 
@see #unloadInstruments	 "
      end

      operation 8715419 "loadInstruments"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "soundbank" type class_ref 1086747 // Soundbank
	  param inout name "patchList" type class_ref 1086875 // Patch
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Loads the instruments referenced by the specified patches, from the 
specified <code>Soundbank</code>.  Each of the <code>Patch</code> objects
indicates a bank and program number; the <code>Instrument</code> that
has the matching <code>Patch</code> is loaded into that bank and program
location.
@param soundbank the <code>Soundbank</code> containing the instruments to load
@param patchList list of patches for which instruments should be loaded
@return <code>true</code> if the instruments are all successfully loaded (or 
already had been), <code>false</code> if any instrument could not be 
loaded (for example, if the <code>Synthesizer</code> had insufficient memory)
@throws IllegalArgumentException thrown if the soundbank is not supported.
@see #isSoundbankSupported
@see Instrument#getPatch
@see #loadAllInstruments
@see #loadInstrument	 
@see Soundbank#getInstrument(Patch)
@see Sequence#getPatchList()"
      end

      operation 8715547 "unloadInstruments"
	public explicit_return_type "void"
	nparams 2
	  param inout name "soundbank" type class_ref 1086747 // Soundbank
	  param inout name "patchList" type class_ref 1086875 // Patch
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unloads the instruments referenced by the specified patches, from the MIDI sound bank specified.
@param soundbank soundbank containing instruments to unload
@param patchList list of patches for which instruments should be unloaded
@throws IllegalArgumentException thrown if the soundbank is not supported.

@see #unloadInstrument	 
@see #unloadAllInstruments	 
@see #isSoundbankSupported
@see Instrument#getPatch
@see #loadInstruments	 "
      end
    end

    class 1088795 "Sequencer"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A hardware or software device that plays back a MIDI
<code>{@link Sequence sequence}</code> is known as a <em>sequencer</em>.
A MIDI sequence contains lists of time-stamped MIDI data, such as
might be read from a standard MIDI file.  Most
sequencers also provide functions for creating and editing sequences.
<p>
The <code>Sequencer</code> interface includes methods for the following
basic MIDI sequencer operations:
<ul>
<li>obtaining a sequence from MIDI file data</li>
<li>starting and stopping playback</li>
<li>moving to an arbitrary position in the sequence</li>
<li>changing the tempo (speed) of playback</li>
<li>synchronizing playback to an internal clock or to received MIDI
messages</li>
<li>controlling the timing of another device</li>
</ul>
In addition, the following operations are supported, either directly, or
indirectly through objects that the <code>Sequencer</code> has access to:
<ul>
<li>editing the data by adding or deleting individual MIDI events or entire
tracks</li>
<li>muting or soloing individual tracks in the sequence</li>
<li>notifying listener objects about any meta-events or
control-change events encountered while playing back the sequence.</li>
</ul>

@see Sequencer.SyncMode
@see #addMetaEventListener
@see ControllerEventListener
@see Receiver
@see Transmitter
@see MidiDevice

@version 1.36, 03/12/19
@author Kara Kytle
@author Florian Bomers"
      classrelation 2221851 // <generalisation>
	relation 2221851 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2221851 // <generalisation>
	  b parent class_ref 1087643 // MidiDevice
      end

      attribute 3147931 "LOOP_CONTINUOUSLY"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A value indicating that looping should continue
indefinitely rather than complete after a specific
number of loops.

@see #setLoopCount
@since 1.5
"
      end

      operation 8705435 "setSequence"
	public explicit_return_type "void"
	nparams 1
	  param inout name "sequence" type class_ref 1088923 // Sequence
	nexceptions 1
	  exception class_ref 1087003 // InvalidMidiDataException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the current sequence on which the sequencer operates.

<p>This method can be called even if the
<code>Sequencer</code> is closed.

@param sequence the sequence to be loaded.
@throws InvalidMidiDataException if the sequence contains invalid
MIDI data, or is not supported."
      end

      operation 8705563 "setSequence"
	public explicit_return_type "void"
	nparams 1
	  param inout name "stream" type class_ref 179099 // InputStream
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 1087003 // InvalidMidiDataException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the current sequence on which the sequencer operates.
The stream must point to MIDI file data.

<p>This method can be called even if the
<code>Sequencer</code> is closed.

@param stream stream containing MIDI file data.
@throws IOException if an I/O exception occurs during reading of the stream.
@throws InvalidMidiDataException if invalid data is encountered
in the stream, or the stream is not supported."
      end

      operation 8705691 "getSequence"
	public return_type class_ref 1088923 // Sequence
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the sequence on which the Sequencer is currently operating.

<p>This method can be called even if the
<code>Sequencer</code> is closed.

@return the current sequence, or <code>null</code> if no sequence is currently set."
      end

      operation 8705819 "start"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Starts playback of the MIDI data in the currently
loaded sequence.
Playback will begin from the current position.
If the playback position reaches the loop end point,
and the loop count is greater than 0, playback will
resume at the loop start point for the number of
repetitions set with <code>setLoopCount</code>.
After that, or if the loop count is 0, playback will
continue to play to the end of the sequence.

<p>The implementation ensures that the synthesizer
is brought to a consistent state when jumping
to the loop start point by sending appropriate
controllers, pitch bend, and program change events.

@throws IllegalStateException if the <code>Sequencer</code> is
closed.

@see #setLoopStartPoint
@see #setLoopEndPoint
@see #setLoopCount
@see #stop"
      end

      operation 8705947 "stop"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Stops recording, if active, and playback of the currently loaded sequence,
if any.

@throws IllegalStateException if the <code>Sequencer</code> is
closed.

@see #start
@see #isRunning"
      end

      operation 8706075 "isRunning"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether the Sequencer is currently running.  The default is <code>false</code>.
The Sequencer starts running when either <code>{@link #start}</code> or <code>{@link #startRecording}</code>
is called.  <code>isRunning</code> then returns <code>true</code> until playback of the
sequence completes or <code>{@link #stop}</code> is called.
@return <code>true</code> if the Sequencer is running, otherwise <code>false</code>"
      end

      operation 8706203 "startRecording"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Starts recording and playback of MIDI data.  Data is recorded to all enabled tracks,
on the channel(s) for which they were enabled.  Recording begins at the current position
of the sequencer.   Any events already in the track are overwritten for the duration
of the recording session.  Events from the currently loaded sequence,
if any, are delivered to the sequencer's transmitter(s) along with messages
received during recording.
<p>
Note that tracks are not by default enabled for recording.  In order to record MIDI data,
at least one track must be specifically enabled for recording.

@throws IllegalStateException if the <code>Sequencer</code> is
closed.

@see #startRecording
@see #recordEnable
@see #recordDisable"
      end

      operation 8706331 "stopRecording"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Stops recording, if active.  Playback of the current sequence continues.

@throws IllegalStateException if the <code>Sequencer</code> is
closed.

@see #startRecording
@see #isRecording"
      end

      operation 8706459 "isRecording"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether the Sequencer is currently recording.  The default is <code>false</code>.
The Sequencer begins recording when <code>{@link #startRecording}</code> is called,
and then returns <code>true</code> until <code>{@link #stop}</code> or <code>{@link #stopRecording}</code>
is called.
@return <code>true</code> if the Sequencer is recording, otherwise <code>false</code>"
      end

      operation 8706587 "recordEnable"
	public explicit_return_type "void"
	nparams 2
	  param inout name "track" type class_ref 1089179 // Track
	  param in name "channel" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prepares the specified track for recording events received on a particular channel.
Once enabled, a track will receive events when recording is active.
@param track the track to which events will be recorded
@param channel the channel on which events will be received.  If -1 is specified
for the channel value, the track will receive data from all channels.
@throws IllegalArgumentException thrown if the track is not part of the current
sequence."
      end

      operation 8706715 "recordDisable"
	public explicit_return_type "void"
	nparams 1
	  param inout name "track" type class_ref 1089179 // Track
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Disables recording to the specified track.  Events will no longer be recorded
into this track.
@param track the track to disable for recording, or <code>null</code> to disable
recording for all tracks."
      end

      operation 8706843 "getTempoInBPM"
	public explicit_return_type "float"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the current tempo, expressed in beats per minute.  The
actual tempo of playback is the product of the returned value
and the tempo factor.

@return the current tempo in beats per minute

@see #getTempoFactor
@see #setTempoInBPM(float)
@see #getTempoInMPQ"
      end

      operation 8706971 "setTempoInBPM"
	public explicit_return_type "void"
	nparams 1
	  param in name "bpm" explicit_type "float"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the tempo in beats per minute.   The actual tempo of playback
is the product of the specified value and the tempo factor.

@param bpm desired new tempo in beats per minute
@see #getTempoFactor
@see #setTempoInMPQ(float)
@see #getTempoInBPM"
      end

      operation 8707099 "getTempoInMPQ"
	public explicit_return_type "float"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the current tempo, expressed in microseconds per quarter
note.  The actual tempo of playback is the product of the returned
value and the tempo factor.

@return the current tempo in microseconds per quarter note
@see #getTempoFactor
@see #setTempoInMPQ(float)
@see #getTempoInBPM"
      end

      operation 8707227 "setTempoInMPQ"
	public explicit_return_type "void"
	nparams 1
	  param in name "mpq" explicit_type "float"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the tempo in microseconds per quarter note.  The actual tempo
of playback is the product of the specified value and the tempo
factor.

@param mpq desired new tempo in microseconds per quarter note.
@see #getTempoFactor
@see #setTempoInBPM(float)
@see #getTempoInMPQ"
      end

      operation 8707355 "setTempoFactor"
	public explicit_return_type "void"
	nparams 1
	  param in name "factor" explicit_type "float"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Scales the sequencer's actual playback tempo by the factor provided.
The default is 1.0.  A value of 1.0 represents the natural rate (the
tempo specified in the sequence), 2.0 means twice as fast, etc.
The tempo factor does not affect the values returned by
<code>{@link #getTempoInMPQ}</code> and <code>{@link #getTempoInBPM}</code>.
Those values indicate the tempo prior to scaling.
<p>
Note that the tempo factor cannot be adjusted when external
synchronization is used.  In that situation,
<code>setTempoFactor</code> always sets the tempo factor to 1.0.

@param factor the requested tempo scalar
@see #getTempoFactor"
      end

      operation 8707483 "getTempoFactor"
	public explicit_return_type "float"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current tempo factor for the sequencer.  The default is
1.0.

@return tempo factor.
@see #setTempoFactor(float)"
      end

      operation 8707611 "getTickLength"
	public explicit_return_type "long"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the length of the current sequence, expressed in MIDI ticks,
or 0 if no sequence is set.
@return length of the sequence in ticks"
      end

      operation 8707739 "getTickPosition"
	public explicit_return_type "long"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the current position in the sequence, expressed in MIDI
ticks.  (The duration of a tick in seconds is determined both by
the tempo and by the timing resolution stored in the
<code>{@link Sequence}</code>.)

@return current tick
@see #setTickPosition"
      end

      operation 8707867 "setTickPosition"
	public explicit_return_type "void"
	nparams 1
	  param in name "tick" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the current sequencer position in MIDI ticks
@param tick the desired tick position
@see #getTickPosition"
      end

      operation 8707995 "getMicrosecondLength"
	public explicit_return_type "long"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the length of the current sequence, expressed in microseconds,
or 0 if no sequence is set.
@return length of the sequence in microseconds."
      end

      operation 8708123 "getMicrosecondPosition"
	public explicit_return_type "long"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the current position in the sequence, expressed in
microseconds.
@return the current position in microseconds
@see #setMicrosecondPosition"
      end

      operation 8708251 "setMicrosecondPosition"
	public explicit_return_type "void"
	nparams 1
	  param in name "microseconds" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the current position in the sequence, expressed in microseconds
@param microseconds desired position in microseconds
@see #getMicrosecondPosition"
      end

      operation 8708379 "setMasterSyncMode"
	public explicit_return_type "void"
	nparams 1
	  param inout name "sync" type class_ref 1089307 // SyncMode
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the source of timing information used by this sequencer.
The sequencer synchronizes to the master, which is the internal clock,
MIDI clock, or MIDI time code, depending on the value of
<code>sync</code>.  The <code>sync</code> argument must be one
of the supported modes, as returned by
<code>{@link #getMasterSyncModes}</code>.

@param sync the desired master synchronization mode

@see SyncMode#INTERNAL_CLOCK
@see SyncMode#MIDI_SYNC
@see SyncMode#MIDI_TIME_CODE
@see #getMasterSyncMode"
      end

      class 1089307 "SyncMode"
	visibility public 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 3148059 "name"
	  private explicit_type "String"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Synchronization mode name.
"
	end

	operation 8710939 "SyncMode"
	  protected explicit_return_type ""
	  nparams 1
	    param in name "name" explicit_type "String"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs a synchronization mode.
@param name name of the synchronization mode"
	end

	operation 8711067 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "obj" explicit_type "Object"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Determines whether two objects are equal.
Returns <code>true</code> if the objects are identical
@param obj the reference object with which to compare
@return <code>true</code> if this object is the same as the
<code>obj</code> argument, <code>false</code> otherwise"
	end

	operation 8711195 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Finalizes the hashcode method."
	end

	operation 8711323 "toString"
	  public explicit_return_type "String"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Provides this synchronization mode's name as the string
representation of the mode.
@return the name of this synchronization mode"
	end

	classrelation 2221979 // INTERNAL_CLOCK (<unidirectional association>)
	  relation 2221979 --->
	    a role_name "INTERNAL_CLOCK" init_value "=  new SyncMode(\"Internal Clock\")" class_relation const_relation public
	      comment "
A master synchronization mode that makes the sequencer get
its timing information from its internal clock.  This is not
a legal slave sync mode.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 2221979 // INTERNAL_CLOCK (<unidirectional association>)
	    b parent class_ref 1089307 // SyncMode
	end

	classrelation 2222107 // MIDI_SYNC (<unidirectional association>)
	  relation 2222107 --->
	    a role_name "MIDI_SYNC" init_value "=  new SyncMode(\"MIDI Sync\")" class_relation const_relation public
	      comment "
A master or slave synchronization mode that specifies the
use of MIDI clock
messages.  If this mode is used as the master sync mode,
the sequencer gets its timing information from system real-time
MIDI clock messages.  This mode only applies as the master sync
mode for sequencers that are also MIDI receivers.  If this is the
slave sync mode, the sequencer sends system real-time MIDI clock
messages to its receiver.  MIDI clock messages are sent at a rate
of 24 per quarter note.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 2222107 // MIDI_SYNC (<unidirectional association>)
	    b parent class_ref 1089307 // SyncMode
	end

	classrelation 2222235 // MIDI_TIME_CODE (<unidirectional association>)
	  relation 2222235 --->
	    a role_name "MIDI_TIME_CODE" init_value "=  new SyncMode(\"MIDI Time Code\")" class_relation const_relation public
	      comment "
A master or slave synchronization mode that specifies the
use of MIDI Time Code.
If this mode is used as the master sync mode,
the sequencer gets its timing information from MIDI Time Code
messages.  This mode only applies as the master sync
mode to sequencers that are also MIDI receivers.  If this
mode is used as the
slave sync mode, the sequencer sends MIDI Time Code
messages to its receiver.  (See the MIDI 1.0 Detailed
Specification for a description of MIDI Time Code.)

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 2222235 // MIDI_TIME_CODE (<unidirectional association>)
	    b parent class_ref 1089307 // SyncMode
	end

	classrelation 2222363 // NO_SYNC (<unidirectional association>)
	  relation 2222363 --->
	    a role_name "NO_SYNC" init_value "=  new SyncMode(\"No Timing\")" class_relation const_relation public
	      comment "
A slave synchronization mode indicating that no timing information
should be sent to the receiver.  This is not a legal master sync
mode.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 2222363 // NO_SYNC (<unidirectional association>)
	    b parent class_ref 1089307 // SyncMode
	end
      end

      operation 8708507 "getMasterSyncMode"
	public return_type class_ref 1089307 // SyncMode
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the current master synchronization mode for this sequencer.

@return the current master synchronization mode

@see #setMasterSyncMode(Sequencer.SyncMode)
@see #getMasterSyncModes"
      end

      operation 8708635 "getMasterSyncModes"
	public return_type class_ref 1089307 // SyncMode
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the set of master synchronization modes supported by this
sequencer.

@return the available master synchronization modes

@see SyncMode#INTERNAL_CLOCK
@see SyncMode#MIDI_SYNC
@see SyncMode#MIDI_TIME_CODE
@see #getMasterSyncMode
@see #setMasterSyncMode(Sequencer.SyncMode)"
      end

      operation 8708763 "setSlaveSyncMode"
	public explicit_return_type "void"
	nparams 1
	  param inout name "sync" type class_ref 1089307 // SyncMode
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the slave synchronization mode for the sequencer.
This indicates the type of timing information sent by the sequencer
to its receiver.  The <code>sync</code> argument must be one
of the supported modes, as returned by
<code>{@link #getSlaveSyncModes}</code>.

@param sync the desired slave synchronization mode

@see SyncMode#MIDI_SYNC
@see SyncMode#MIDI_TIME_CODE
@see SyncMode#NO_SYNC
@see #getSlaveSyncModes"
      end

      operation 8708891 "getSlaveSyncMode"
	public return_type class_ref 1089307 // SyncMode
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the current slave synchronization mode for this sequencer.

@return the current slave synchronization mode

@see #setSlaveSyncMode(Sequencer.SyncMode)
@see #getSlaveSyncModes"
      end

      operation 8709019 "getSlaveSyncModes"
	public return_type class_ref 1089307 // SyncMode
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the set of slave synchronization modes supported by the sequencer.

@return the available slave synchronization modes

@see SyncMode#MIDI_SYNC
@see SyncMode#MIDI_TIME_CODE
@see SyncMode#NO_SYNC"
      end

      operation 8709147 "setTrackMute"
	public explicit_return_type "void"
	nparams 2
	  param in name "track" explicit_type "int"
	  param inout name "mute" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the mute state for a track.  This method may fail for a number
of reasons.  For example, the track number specified may not be valid
for the current sequence, or the sequencer may not support this functionality.
An application which needs to verify whether this operation succeeded should
follow this call with a call to <code>{@link #getTrackMute}</code>.

@param track the track number.  Tracks in the current sequence are numbered
from 0 to the number of tracks in the sequence minus 1.
@param mute the new mute state for the track.  <code>true</code> implies the
track should be muted, <code>false</code> implies the track should be unmuted.
@see #getSequence"
      end

      operation 8709275 "getTrackMute"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "track" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the current mute state for a track.  The default mute
state for all tracks which have not been muted is false.  In any
case where the specified track has not been muted, this method should
return false.  This applies if the sequencer does not support muting
of tracks, and if the specified track index is not valid.

@param track the track number.  Tracks in the current sequence are numbered
from 0 to the number of tracks in the sequence minus 1.
@return <code>true</code> if muted, <code>false</code> if not."
      end

      operation 8709403 "setTrackSolo"
	public explicit_return_type "void"
	nparams 2
	  param in name "track" explicit_type "int"
	  param inout name "solo" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the solo state for a track.  If <code>solo</code> is <code>true</code>
only this track and other solo'd tracks will sound. If <code>solo</code>
is <code>false</code> then only other solo'd tracks will sound, unless no
tracks are solo'd in which case all un-muted tracks will sound.
<p>
This method may fail for a number
of reasons.  For example, the track number specified may not be valid
for the current sequence, or the sequencer may not support this functionality.
An application which needs to verify whether this operation succeeded should
follow this call with a call to <code>{@link #getTrackSolo}</code>.

@param track the track number.  Tracks in the current sequence are numbered
from 0 to the number of tracks in the sequence minus 1.
@param solo the new solo state for the track.  <code>true</code> implies the
track should be solo'd, <code>false</code> implies the track should not be solo'd.
@see #getSequence"
      end

      operation 8709531 "getTrackSolo"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "track" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the current solo state for a track.  The default mute
state for all tracks which have not been solo'd is false.  In any
case where the specified track has not been solo'd, this method should
return false.  This applies if the sequencer does not support soloing
of tracks, and if the specified track index is not valid.

@param track the track number.  Tracks in the current sequence are numbered
from 0 to the number of tracks in the sequence minus 1.
@return <code>true</code> if solo'd, <code>false</code> if not."
      end

      operation 8709659 "addMetaEventListener"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "listener" type class_ref 1087131 // MetaEventListener
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers a meta-event listener to receive
notification whenever a meta-event is encountered in the sequence
and processed by the sequencer. This method can fail if, for
instance,this class of sequencer does not support meta-event
notification.

@param listener listener to add
@return <code>true</code> if the listener was successfully added,
otherwise <code>false</code>

@see #removeMetaEventListener
@see MetaEventListener
@see MetaMessage"
      end

      operation 8709787 "removeMetaEventListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 1087131 // MetaEventListener
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the specified meta-event listener from this sequencer's
list of registered listeners, if in fact the listener is registered.

@param listener the meta-event listener to remove
@see #addMetaEventListener"
      end

      operation 8709915 "addControllerEventListener"
	public explicit_return_type "int"
	nparams 2
	  param inout name "listener" type class_ref 1086235 // ControllerEventListener
	  param in name "controllers" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers a controller event listener to receive notification
whenever the sequencer processes a control-change event of the
requested type or types.  The types are specified by the
<code>controllers</code> argument, which should contain an array of
MIDI controller numbers.  (Each number should be between 0 and 127,
inclusive.  See the MIDI 1.0 Specification for the numbers that
correspond to various types of controllers.)
<p>
The returned array contains the MIDI controller
numbers for which the listener will now receive events.
Some sequencers might not support controller event notification, in
which case the array has a length of 0.  Other sequencers might
support notification for some controllers but not all.
This method may be invoked repeatedly.
Each time, the returned array indicates all the controllers
that the listener will be notified about, not only the controllers
requested in that particular invocation.

@param listener the controller event listener to add to the list of
registered listeners
@param controllers the MIDI controller numbers for which change
notification is requested
@return the numbers of all the MIDI controllers whose changes will
now be reported to the specified listener

@see #removeControllerEventListener
@see ControllerEventListener"
      end

      operation 8710043 "removeControllerEventListener"
	public explicit_return_type "int"
	nparams 2
	  param inout name "listener" type class_ref 1086235 // ControllerEventListener
	  param in name "controllers" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a controller event listener's interest in one or more
types of controller event. The <code>controllers</code> argument
is an array of MIDI numbers corresponding to the  controllers for
which the listener should no longer receive change notifications.
To completely remove this listener from the list of registered
listeners, pass in <code>null</code> for <code>controllers</code>.
The returned array contains the MIDI controller
numbers for which the listener will now receive events.  The
array has a length of 0 if the listener will not receive
change notifications for any controllers.

@param listener old listener
@param controllers the MIDI controller numbers for which change
notification should be cancelled, or <code>null</code> to cancel
for all controllers
@return the numbers of all the MIDI controllers whose changes will
now be reported to the specified listener

@see #addControllerEventListener"
      end

      operation 8710171 "setLoopStartPoint"
	public explicit_return_type "void"
	nparams 1
	  param in name "tick" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the first MIDI tick that will be
played in the loop. If the loop count is
greater than 0, playback will jump to this
point when reaching the loop end point.

<p>A value of 0 for the starting point means the
beginning of the loaded sequence. The starting
point must be lower than or equal to the ending
point, and it must fall within the size of the
loaded sequence.

<p>A sequencer's loop start point defaults to
start of the sequence.

@param tick the loop's starting position,
       in MIDI ticks (zero-based)
@throws IllegalArgumentException if the requested
        loop start point cannot be set, usually because
        it falls outside the sequence's
        duration or because the start point is
        after the end point

@see #setLoopEndPoint
@see #setLoopCount
@see #getLoopStartPoint
@see #start
@since 1.5"
      end

      operation 8710299 "getLoopStartPoint"
	public explicit_return_type "long"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the start position of the loop,
in MIDI ticks.

@return the start position of the loop,
in MIDI ticks (zero-based)
@see #setLoopStartPoint
@since 1.5"
      end

      operation 8710427 "setLoopEndPoint"
	public explicit_return_type "void"
	nparams 1
	  param in name "tick" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the last MIDI tick that will be played in
the loop. If the loop count is 0, the loop end
point has no effect and playback continues to
play when reaching the loop end point.

<p>A value of -1 for the ending point
indicates the last tick of the sequence.
Otherwise, the ending point must be greater
than or equal to the starting point, and it must
fall within the size of the loaded sequence.

<p>A sequencer's loop end point defaults to -1,
meaning the end of the sequence.

@param tick the loop's ending position,
       in MIDI ticks (zero-based), or
       -1 to indicate the final tick
@throws IllegalArgumentException if the requested
        loop point cannot be set, usually because
        it falls outside the sequence's
        duration or because the ending point is
        before the starting point

@see #setLoopStartPoint
@see #setLoopCount
@see #getLoopEndPoint
@see #start
@since 1.5"
      end

      operation 8710555 "getLoopEndPoint"
	public explicit_return_type "long"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the end position of the loop,
in MIDI ticks.

@return the end position of the loop, in MIDI
        ticks (zero-based), or -1 to indicate
        the end of the sequence
@see #setLoopEndPoint
@since 1.5"
      end

      operation 8710683 "setLoopCount"
	public explicit_return_type "void"
	nparams 1
	  param in name "count" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the number of repetitions of the loop for
playback.
When the playback position reaches the loop end point,
it will loop back to the loop start point
<code>count</code> times, after which playback will
continue to play to the end of the sequence.
<p>
If the current position when this method is invoked
is greater than the loop end point, playback
continues to the end of the sequence without looping,
unless the loop end point is changed subsequently.
<p>
A <code>count</code> value of 0 disables looping:
playback will continue at the loop end point, and it
will not loop back to the loop start point.
This is a sequencer's default.

<p>If playback is stopped during looping, the
current loop status is cleared; subsequent start
requests are not affected by an interrupted loop
operation.

@param count the number of times playback should
       loop back from the loop's end position
       to the loop's start position, or
       <code>{@link #LOOP_CONTINUOUSLY}</code>
       to indicate that looping should
       continue until interrupted

@throws IllegalArgumentException if <code>count</code> is
negative and not equal to {@link #LOOP_CONTINUOUSLY}

@see #setLoopStartPoint
@see #setLoopEndPoint
@see #getLoopCount
@see #start
@since 1.5"
      end

      operation 8710811 "getLoopCount"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the number of repetitions for
playback.

@return the number of loops after which
        playback plays to the end of the
        sequence
@see #setLoopCount
@see #start
@since 1.5"
      end
    end

    class 1088923 "Sequence"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A <code>Sequence</code> is a data structure containing musical
information (often an entire song or composition) that can be played
back by a <code>{@link Sequencer}</code> object. Specifically, the
<code>Sequence</code> contains timing
information and one or more tracks.  Each <code>{@link Track track}</code> consists of a
series of MIDI events (such as note-ons, note-offs, program changes, and meta-events).
The sequence's timing information specifies the type of unit that is used
to time-stamp the events in the sequence.
<p>
A <code>Sequence</code> can be created from a MIDI file by reading the file
into an input stream and invoking one of the <code>getSequence</code> methods of
{@link MidiSystem}.  A sequence can also be built from scratch by adding new
<code>Tracks</code> to an empty <code>Sequence</code>, and adding
<code>{@link MidiEvent}</code> objects to these <code>Tracks</code>.

@see Sequencer#setSequence(java.io.InputStream stream)
@see Sequencer#setSequence(Sequence sequence)
@see Track#add(MidiEvent)
@see MidiFileFormat

@version 1.27, 04/05/05
@author Kara Kytle"
      attribute 3147035 "PPQ"
	class_attribute const_attribute public explicit_type "float"
	init_value "=  0.0f"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Timing types

The tempo-based timing type, for which the resolution is expressed in pulses (ticks) per quarter note.
@see #Sequence(float, int)
"
      end

      attribute 3147163 "SMPTE_24"
	class_attribute const_attribute public explicit_type "float"
	init_value "=  24.0f"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The SMPTE-based timing type with 24 frames per second (resolution is expressed in ticks per frame).
@see #Sequence(float, int)
"
      end

      attribute 3147291 "SMPTE_25"
	class_attribute const_attribute public explicit_type "float"
	init_value "=  25.0f"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The SMPTE-based timing type with 25 frames per second (resolution is expressed in ticks per frame).
@see #Sequence(float, int)
"
      end

      attribute 3147419 "SMPTE_30DROP"
	class_attribute const_attribute public explicit_type "float"
	init_value "=  29.97f"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The SMPTE-based timing type with 29.97 frames per second (resolution is expressed in ticks per frame).
@see #Sequence(float, int)
"
      end

      attribute 3147547 "SMPTE_30"
	class_attribute const_attribute public explicit_type "float"
	init_value "=  30.0f"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The SMPTE-based timing type with 30 frames per second (resolution is expressed in ticks per frame).
@see #Sequence(float, int)
"
      end

      attribute 3147675 "divisionType"
	protected explicit_type "float"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Variables

The timing division type of the sequence.
@see #PPQ
@see #SMPTE_24
@see #SMPTE_25
@see #SMPTE_30DROP
@see #SMPTE_30
@see #getDivisionType
"
      end

      attribute 3147803 "resolution"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The timing resolution of the sequence.
@see #getResolution
"
      end

      classrelation 2221723 // tracks (<unidirectional association>)
	relation 2221723 --->
	  a role_name "tracks" init_value "=  new Vector<Track>()" protected
	    comment "
The MIDI tracks in this sequence.
@see #getTracks

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Track> ${name}${value};
"
	    classrelation_ref 2221723 // tracks (<unidirectional association>)
	  b parent class_ref 153883 // Vector
      end

      operation 8704155 "Sequence"
	public explicit_return_type ""
	nparams 2
	  param in name "divisionType" explicit_type "float"
	  param in name "resolution" explicit_type "int"
	nexceptions 1
	  exception class_ref 1087003 // InvalidMidiDataException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new MIDI sequence with the specified timing division
type and timing resolution.  The division type must be one of the
recognized MIDI timing types.  For tempo-based timing,
<code>divisionType</code> is PPQ (pulses per quarter note) and
the resolution is specified in ticks per beat.  For SMTPE timing,
<code>divisionType</code> specifies the number of frames per
second and the resolution is specified in ticks per frame.
The sequence will contain no initial tracks.  Tracks may be
added to or removed from the sequence using <code>{@link #createTrack}</code>
and <code>{@link #deleteTrack}</code>.

@param divisionType the timing division type (PPQ or one of the SMPTE types)
@param resolution the timing resolution
@throws InvalidMidiDataException if <code>divisionType</code> is not valid

@see #PPQ
@see #SMPTE_24
@see #SMPTE_25
@see #SMPTE_30DROP
@see #SMPTE_30
@see #getDivisionType
@see #getResolution
@see #getTracks"
      end

      operation 8704283 "Sequence"
	public explicit_return_type ""
	nparams 3
	  param in name "divisionType" explicit_type "float"
	  param in name "resolution" explicit_type "int"
	  param in name "numTracks" explicit_type "int"
	nexceptions 1
	  exception class_ref 1087003 // InvalidMidiDataException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new MIDI sequence with the specified timing division
type, timing resolution, and number of tracks.  The division type must be one of the
recognized MIDI timing types.  For tempo-based timing,
<code>divisionType</code> is PPQ (pulses per quarter note) and
the resolution is specified in ticks per beat.  For SMTPE timing,
<code>divisionType</code> specifies the number of frames per
second and the resolution is specified in ticks per frame.
The sequence will be initialized with the number of tracks specified by
<code>numTracks</code>. These tracks are initially empty (i.e.
they contain only the meta-event End of Track).
The tracks may be retrieved for editing using the <code>{@link #getTracks}</code>
method.  Additional tracks may be added, or existing tracks removed,
using <code>{@link #createTrack}</code> and <code>{@link #deleteTrack}</code>.

@param divisionType the timing division type (PPQ or one of the SMPTE types)
@param resolution the timing resolution
@param numTracks the initial number of tracks in the sequence.
@throws InvalidMidiDataException if <code>divisionType</code> is not valid

@see #PPQ
@see #SMPTE_24
@see #SMPTE_25
@see #SMPTE_30DROP
@see #SMPTE_30
@see #getDivisionType
@see #getResolution"
      end

      operation 8704411 "getDivisionType"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the timing division type for this sequence.
@return the division type (PPQ or one of the SMPTE types)

@see #PPQ
@see #SMPTE_24
@see #SMPTE_25
@see #SMPTE_30DROP
@see #SMPTE_30
@see #Sequence(float, int)
@see MidiFileFormat#getDivisionType()"
      end

      operation 8704539 "getResolution"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the timing resolution for this sequence.
If the sequence's division type is PPQ, the resolution is specified in ticks per beat.
For SMTPE timing, the resolution is specified in ticks per frame.

@return the number of ticks per beat (PPQ) or per frame (SMPTE)
@see #getDivisionType
@see #Sequence(float, int)
@see MidiFileFormat#getResolution()"
      end

      operation 8704667 "createTrack"
	public return_type class_ref 1089179 // Track
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new, initially empty track as part of this sequence.
The track initially contains the meta-event End of Track.
The newly created track is returned.  All tracks in the sequence
may be retrieved using <code>{@link #getTracks}</code>.  Tracks may be
removed from the sequence using <code>{@link #deleteTrack}</code>.
@return the newly created track"
      end

      operation 8704795 "deleteTrack"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "track" type class_ref 1089179 // Track
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the specified track from the sequence.
@param track the track to remove
@return <code>true</code> if the track existed in the track and was removed,
otherwise <code>false</code>.

@see #createTrack
@see #getTracks"
      end

      operation 8704923 "getTracks"
	public return_type class_ref 1089179 // Track
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an array containing all the tracks in this sequence.
If the sequence contains no tracks, an array of length 0 is returned.
@return the array of tracks

@see #createTrack
@see #deleteTrack"
      end

      operation 8705051 "getMicrosecondLength"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the duration of this sequence, expressed in microseconds.
@return this sequence's duration in microseconds."
      end

      operation 8705179 "getTickLength"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the duration of this sequence, expressed in MIDI ticks.

@return this sequence's length in ticks

@see #getMicrosecondLength"
      end

      operation 8705307 "getPatchList"
	public return_type class_ref 1086875 // Patch
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a list of patches referenced in this sequence.
This patch list may be used to load the required
<code>{@link Instrument}</code> objects
into a <code>{@link Synthesizer}</code>.

@return an array of <code>{@link Patch}</code> objects used in this sequence

@see Synthesizer#loadInstruments(Soundbank, Patch[])"
      end
    end

    class 1089179 "Track"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A MIDI track is an independent stream of MIDI events (time-stamped MIDI
data) that can be stored along with other tracks in a standard MIDI file.
The MIDI specification allows only 16 channels of MIDI data, but tracks
are a way to get around this limitation.  A MIDI file can contain any number
of tracks, each containing its own stream of up to 16 channels of MIDI data.
<p>
A <code>Track</code> occupies a middle level in the hierarchy of data played
by a <code>{@link Sequencer}</code>: sequencers play sequences, which contain tracks,
which contain MIDI events.  A sequencer may provide controls that mute
or solo individual tracks.
<p>
The timing information and resolution for a track is controlled by and stored
in the sequence containing the track. A given <code>Track</code>
is considered to belong to the particular <code>{@link Sequence}</code> that
maintains its timing. For this reason, a new (empty) track is created by calling the
<code>{@link Sequence#createTrack}</code> method, rather than by directly invoking a
<code>Track</code> constructor.
<p>
The <code>Track</code> class provides methods to edit the track by adding
or removing <code>MidiEvent</code> objects from it.  These operations keep
the event list in the correct time order.  Methods are also
included to obtain the track's size, in terms of either the number of events
it contains or its duration in ticks.

@see Sequencer#setTrackMute
@see Sequencer#setTrackSolo

@version 1.22, 03/12/19
@author Kara Kytle
@author Florian Bomers"
      classrelation 2222875 // eventsList (<unidirectional association>)
	relation 2222875 --->
	  a role_name "eventsList" init_value "=  new ArrayList()" private
	    comment " TODO: use arrays for faster access
 the list containing the events
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2222875 // eventsList (<unidirectional association>)
	  b parent class_ref 137627 // ArrayList
      end

      classrelation 2223003 // set (<unidirectional association>)
	relation 2223003 --->
	  a role_name "set" init_value "=  new HashSet()" private
	    comment " use a hashset to detect duplicate events in add(MidiEvent)
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2223003 // set (<unidirectional association>)
	  b parent class_ref 149659 // HashSet
      end

      classrelation 2223131 // eotEvent (<unidirectional association>)
	relation 2223131 --->
	  a role_name "eotEvent" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2223131 // eotEvent (<unidirectional association>)
	  b parent class_ref 1088283 // MidiEvent
      end

      operation 8716443 "Track"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Package-private constructor.  Constructs a new, empty Track object,
which initially contains one event, the meta-event End of Track."
      end

      operation 8716571 "add"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "event" type class_ref 1088283 // MidiEvent
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a new event to the track.  However, if the event is already
contained in the track, it is not added again.  The list of events
is kept in time order, meaning that this event inserted at the
appropriate place in the list, not necessarily at the end.

@param event the event to add
@return <code>true</code> if the event did not already exist in the
track and was added, otherwise <code>false</code>"
      end

      operation 8716699 "remove"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "event" type class_ref 1088283 // MidiEvent
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the specified event from the track.
@param event the event to remove
@return <code>true</code> if the event existed in the track and was removed,
otherwise <code>false</code>"
      end

      operation 8716827 "get"
	public return_type class_ref 1088283 // MidiEvent
	nparams 1
	  param in name "index" explicit_type "int"
	nexceptions 1
	  exception class_ref 791195 // ArrayIndexOutOfBoundsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the event at the specified index.
@param index the location of the desired event in the event vector
@throws <code>ArrayIndexOutOfBoundsException</code>  if the
specified index is negative or not less than the current size of
this track.
@see #size"
      end

      operation 8716955 "size"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the number of events in this track.
@return the size of the track's event vector"
      end

      operation 8717083 "ticks"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the length of the track, expressed in MIDI ticks.  (The
duration of a tick in seconds is determined by the timing resolution
of the <code>Sequence</code> containing this track, and also by
the tempo of the music as set by the sequencer.)
@return the duration, in ticks
@see Sequence#Sequence(float, int)
@see Sequencer#setTempoInBPM(float)
@see Sequencer#getTickPosition()"
      end

      class 1089691 "ImmutableEndOfTrack"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 2223259 // <generalisation>
	  relation 2223259 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 2223259 // <generalisation>
	    b parent class_ref 1087259 // MetaMessage
	end

	operation 8717211 "ImmutableEndOfTrack"
	  private explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8717339 "setMessage"
	  public explicit_return_type "void"
	  nparams 3
	    param in name "type" explicit_type "int"
	    param in name "data" explicit_type "byte"
	    param in name "length" explicit_type "int"
	  nexceptions 1
	    exception class_ref 1087003 // InvalidMidiDataException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end
    end

    class 1089435 "VoiceStatus"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A <code>VoiceStatus</code> object contains information about the current 
status of one of the voices produced by a {@link Synthesizer}.  
<p>
MIDI synthesizers are generally capable of producing some maximum number of 
simultaneous notes, also referred to as voices.  A voice is a stream
of successive single notes, and the process of assigning incoming MIDI notes to
specific voices is known as voice allocation.
However, the voice-allocation algorithm and the contents of each voice are 
normally internal to a MIDI synthesizer and hidden from outside view.  One can, of 
course, learn from MIDI messages which notes the synthesizer is playing, and 
one might be able deduce something about the assignment of notes to voices.
But MIDI itself does not provide a means to report which notes a 
synthesizer has assigned to which voice, nor even to report how many voices 
the synthesizer is capable of synthesizing.  
<p>
In Java Sound, however, a 
<code>Synthesizer</code> class can expose the contents of its voices through its 
{@link Synthesizer#getVoiceStatus() getVoiceStatus()} method.  
This behavior is recommended but optional;
synthesizers that don't expose their voice allocation simply return a
zero-length array. A <code>Synthesizer</code> that does report its voice status
should maintain this information at
all times for all of its voices, whether they are currently sounding or
not.  In other words, a given type of <code>Synthesizer</code> always has a fixed
number of voices, equal to the maximum number of simultaneous notes it is 
capable of sounding.  
<p>
<A NAME=\"description_of_active\"></A>
If the voice is not currently processing a MIDI note, it
is considered inactive.  A voice is inactive when it has
been given no note-on commands, or when every note-on command received has
been terminated by a corresponding note-off (or by an \"all notes off\" 
message).  For example, this happens when a synthesizer capable of playing 16
simultaneous notes is told to play a four-note chord; only
four voices are active in this case (assuming no earlier notes are still playing).
Usually, a voice whose status is reported as active is producing audible sound, but this
is not always true; it depends on the details of the instrument (that
is, the synthesis algorithm) and how long the note has been going on.
For example, a voice may be synthesizing the sound of a single hand-clap.  Because
this sound dies away so quickly, it may become inaudible before a note-off
message is received.  In such a situation, the voice is still considered active 
even though no sound is currently being produced.
<p>
Besides its active or inactive status, the <code>VoiceStatus</code> class 
provides fields that reveal the voice's current MIDI channel, bank and 
program number, MIDI note number, and MIDI volume.  All of these can
change during the course of a voice.  While the voice is inactive, each
of these fields has an unspecified value, so you should check the active
field first.

@see Synthesizer#getMaxPolyphony
@see Synthesizer#getVoiceStatus

@version 1.18, 12/19/03
@author David Rivas
@author Kara Kytle"
      attribute 3150747 "active"
	public explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates whether the voice is currently processing a MIDI note.
See the explanation of 
<A HREF=\"#description_of_active\">active and inactive voices</A>.
"
      end

      attribute 3150875 "channel"
	public explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The MIDI channel on which this voice is playing.  The value is a 
zero-based channel number if the voice is active, or 
unspecified if the voice is inactive.

@see MidiChannel
@see #active
"
      end

      attribute 3151003 "bank"
	public explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The bank number of the instrument that this voice is currently using.
This is a number dictated by the MIDI bank-select message; it does not
refer to a <code>SoundBank</code> object.
The value ranges from 0 to 16383 if the voice is active, and is
unspecified if the voice is inactive.
@see Patch
@see Soundbank
@see #active
@see MidiChannel#programChange(int, int)
"
      end

      attribute 3151131 "program"
	public explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The program number of the instrument that this voice is currently using.
The value ranges from 0 to 127 if the voice is active, and is
unspecified if the voice is inactive.

@see MidiChannel#getProgram
@see Patch
@see #active
"
      end

      attribute 3151259 "note"
	public explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The MIDI note that this voice is playing.  The range for an active voice
is from 0 to 127 in semitones, with 60 referring to Middle C.
The value is unspecified if the voice is inactive.

@see MidiChannel#noteOn
@see #active
"
      end

      attribute 3151387 "volume"
	public explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The current MIDI volume level for the voice.  
The value ranges from 0 to 127 if the voice is active, and is
unspecified if the voice is inactive.
<p>
Note that this value does not necessarily reflect
the instantaneous level of the sound produced by this
voice; that level is the result of  many contributing
factors, including the current instrument and the
shape of the amplitude envelope it produces.

@see #active
"
      end
    end

    class 1089563 "SysexMessage"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A <code>SysexMessage</code> object represents a MIDI system exclusive message.
<p>
When a system exclusive message is read from a MIDI file, it always has
a defined length.  Data from a system exclusive message from a MIDI file
should be stored in the data array of a <code>SysexMessage</code> as
follows: the system exclusive message status byte (0xF0 or 0xF7), all
message data bytes, and finally the end-of-exclusive flag (0xF7).
The length reported by the <code>SysexMessage</code> object is therefore
the length of the system exclusive data plus two: one byte for the status
byte and one for the end-of-exclusive flag.
<p>
As dictated by the Standard MIDI Files specification, two status byte values are legal
for a <code>SysexMessage</code> read from a MIDI file:
<ul>
<li>0xF0: System Exclusive message (same as in MIDI wire protocol)</li>
<li>0xF7: Special System Exclusive message</li>
</ul>
<p>
When Java Sound is used to handle system exclusive data that is being received
using MIDI wire protocol, it should place the data in one or more
<code>SysexMessages</code>.  In this case, the length of the system exclusive data
is not known in advance; the end of the system exclusive data is marked by an
end-of-exclusive flag (0xF7) in the MIDI wire byte stream.
<ul>
<li>0xF0: System Exclusive message (same as in MIDI wire protocol)</li>
<li>0xF7: End of Exclusive (EOX)</li>
</ul>
The first <code>SysexMessage</code> object containing data for a particular system
exclusive message should have the status value 0xF0.  If this message contains all
the system exclusive data
for the message, it should end with the status byte 0xF7 (EOX).
Otherwise, additional system exclusive data should be sent in one or more
<code>SysexMessages</code> with a status value of 0xF7.  The <code>SysexMessage</code>
containing the last of the data for the system exclusive message should end with the
value 0xF7 (EOX) to mark the end of the system exclusive message.
<p>
If system exclusive data from <code>SysexMessages</code> objects is being transmitted
using MIDI wire protocol, only the initial 0xF0 status byte, the system exclusive
data itself, and the final 0xF7 (EOX) byte should be propagated; any 0xF7 status
bytes used to indicate that a <code>SysexMessage</code> contains continuing system
exclusive data should not be propagated via MIDI wire protocol.

@version 1.26, 03/12/19
@author David Rivas
@author Kara Kytle
@author Florian Bomers"
      classrelation 2222747 // <generalisation>
	relation 2222747 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2222747 // <generalisation>
	  b parent class_ref 1087387 // MidiMessage
      end

      attribute 3150491 "SYSTEM_EXCLUSIVE"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0xF0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Status byte defines

Status byte for System Exclusive message (0xF0, or 240).
@see MidiMessage#getStatus

 240"
      end

      attribute 3150619 "SPECIAL_SYSTEM_EXCLUSIVE"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0xF7"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Status byte for Special System Exclusive message (0xF7, or 247), which is used
in MIDI files.  It has the same value as END_OF_EXCLUSIVE, which
is used in the real-time \"MIDI wire\" protocol.
@see MidiMessage#getStatus

 247"
      end

      operation 8715675 "SysexMessage"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Instance variables

The data bytes for this system exclusive message.  These are
initialized to <code>null</code> and are set explicitly
by {@link #setMessage(int, byte[], int, long) setMessage}.

protected byte[] data = null;

Constructs a new <code>SysexMessage</code>. The
contents of the new message are guaranteed to specify
a valid MIDI message.  Subsequently, you may set the
contents of the message using one of the <code>setMessage</code>
methods.
@see #setMessage"
      end

      operation 8715803 "SysexMessage"
	protected explicit_return_type ""
	nparams 1
	  param in name "data" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new <code>SysexMessage</code>.
@param data an array of bytes containing the complete message.
The message data may be changed using the <code>setMessage</code>
method.
@see #setMessage"
      end

      operation 8715931 "setMessage"
	public explicit_return_type "void"
	nparams 2
	  param in name "data" explicit_type "byte"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 1087003 // InvalidMidiDataException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the data for the system exclusive message.   The
first byte of the data array must be a valid system
exclusive status byte (0xF0 or 0xF7).
@param data the system exclusive message data
@param length the length of the valid message data in
the array, including the status byte."
      end

      operation 8716059 "setMessage"
	public explicit_return_type "void"
	nparams 3
	  param in name "status" explicit_type "int"
	  param in name "data" explicit_type "byte"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 1087003 // InvalidMidiDataException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the data for the system exclusive message.
@param status the status byte for the message (0xF0 or 0xF7)
@param data the system exclusive message data
@param length the length of the valid message data in
the array"
      end

      operation 8716187 "getData"
	public explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a copy of the data for the system exclusive message.
The returned array of bytes does not include the status byte.
@return array containing the system exclusive message data."
      end

      operation 8716315 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new object of the same class and with the same contents
as this object.
@return a clone of this instance"
      end
    end
  end

  deploymentview 172315 "midi"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 835099 "ControllerEventListener"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.EventListener;
${definition}"
      associated_classes
	class_ref 1086235 // ControllerEventListener
      end
      comment "@(#)ControllerEventListener.java	1.15 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 835227 "SoundbankResource"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1086619 // SoundbankResource
      end
      comment "@(#)SoundbankResource.java	1.15 04/05/05

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 835355 "Instrument"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.net.URL;
${definition}"
      associated_classes
	class_ref 1086491 // Instrument
      end
      comment "@(#)Instrument.java	1.16 04/05/05

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 835483 "InvalidMidiDataException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1087003 // InvalidMidiDataException
      end
      comment "@(#)InvalidMidiDataException.java	1.11 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 835611 "MetaEventListener"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.EventListener;
${definition}"
      associated_classes
	class_ref 1087131 // MetaEventListener
      end
      comment "@(#)MetaEventListener.java	1.16 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 835739 "MidiMessage"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1087387 // MidiMessage
      end
      comment "@(#)MidiMessage.java	1.29 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 835867 "MetaMessage"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
${definition}"
      associated_classes
	class_ref 1087259 // MetaMessage
      end
      comment "@(#)MetaMessage.java	1.24 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 835995 "MidiChannel"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1087515 // MidiChannel
      end
      comment "@(#)MidiChannel.java	1.43 04/04/22

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 836123 "MidiDevice"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
${definition}"
      associated_classes
	class_ref 1087643 // MidiDevice
      end
      comment "@(#)MidiDevice.java	1.38 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 836251 "MidiEvent"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1088283 // MidiEvent
      end
      comment "@(#)MidiEvent.java	1.10 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 836379 "MidiFileFormat"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.InputStream;
import java.io.IOException;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
${definition}"
      associated_classes
	class_ref 1088411 // MidiFileFormat
      end
      comment "@(#)MidiFileFormat.java	1.17 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 836507 "MidiSystem"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.FileInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.net.URL;
import javax.sound.midi.spi.MidiFileWriter;
import javax.sound.midi.spi.MidiFileReader;
import javax.sound.midi.spi.SoundbankReader;
import javax.sound.midi.spi.MidiDeviceProvider;
import com.sun.media.sound.JDK13Services;
import com.sun.media.sound.ReferenceCountingDevice;
import com.sun.media.sound.AutoConnectSequencer;
${definition}"
      associated_classes
	class_ref 1088539 // MidiSystem
      end
      comment "@(#)MidiSystem.java	1.66 04/04/15

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 836635 "MidiUnavailableException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1087899 // MidiUnavailableException
      end
      comment "@(#)MidiUnavailableException.java	1.13 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 836763 "Patch"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1086875 // Patch
      end
      comment "@(#)Patch.java	1.12 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 836891 "Receiver"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1088027 // Receiver
      end
      comment "@(#)Receiver.java	1.21 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 837019 "Sequence"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Vector;
import com.sun.media.sound.MidiUtils;
${definition}"
      associated_classes
	class_ref 1088923 // Sequence
      end
      comment "@(#)Sequence.java	1.27 04/05/05

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 837147 "Sequencer"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.InputStream;
import java.io.IOException;
${definition}"
      associated_classes
	class_ref 1088795 // Sequencer
      end
      comment "@(#)Sequencer.java	1.36 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 837275 "ShortMessage"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1086363 // ShortMessage
      end
      comment "@(#)ShortMessage.java	1.24 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 837403 "Soundbank"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.net.URL;
${definition}"
      associated_classes
	class_ref 1086747 // Soundbank
      end
      comment "@(#)Soundbank.java	1.24 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 837531 "Synthesizer"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.sound.sampled.Control;
${definition}"
      associated_classes
	class_ref 1088667 // Synthesizer
      end
      comment "@(#)Synthesizer.java	1.27 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 837659 "SysexMessage"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1089563 // SysexMessage
      end
      comment "@(#)SysexMessage.java	1.26 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 837787 "Track"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Vector;
import java.util.ArrayList;
import java.util.HashSet;
import com.sun.media.sound.MidiUtils;
${definition}"
      associated_classes
	class_ref 1089179 // Track
      end
      comment "@(#)Track.java	1.22 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 837915 "Transmitter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1088155 // Transmitter
      end
      comment "@(#)Transmitter.java	1.22 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 838043 "VoiceStatus"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1089435 // VoiceStatus
      end
      comment "@(#)VoiceStatus.java	1.18 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end
  end

  package_ref 183707 // spi
end
