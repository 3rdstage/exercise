format 66
"naming" // src::javax::naming
  revision 3
  modified_by 27 "3rdstage"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "javax/naming"
  java_package "javax.naming"
  package_ref 146971 // spi

  classview 146331 "naming"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 289691 "Name"
      visibility public stereotype "interface"
      nactuals 3
      actual class class_ref 221467 // Comparable
        rank 0 explicit_value "any"
      actual class class_ref 221467 // Comparable
        rank 1 explicit_value ""
      actual class class_ref 221467 // Comparable
        rank 2 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The <tt>Name</tt> interface represents a generic name -- an ordered
sequence of components.  It can be a composite name (names that
span multiple namespaces), or a compound name (names that are
used within individual hierarchical naming systems).

<p> There can be different implementations of <tt>Name</tt>; for example,
composite names, URLs, or namespace-specific compound names.

<p> The components of a name are numbered.  The indexes of a name
with N components range from 0 up to, but not including, N.  This
range may be written as [0,N).
The most significant component is at index 0.
An empty name has no components.

<p> None of the methods in this interface accept null as a valid
value for a parameter that is a name or a name component.
Likewise, methods that return a name or name component never return null.

<p> An instance of a <tt>Name</tt> may not be synchronized against
concurrent multithreaded access if that access is not read-only.

@author Rosanna Lee
@author Scott Seligman
@author R. Vasudevan
@version 1.11 04/05/05
@since 1.3"
      classrelation 2097179 // <generalisation>
	relation 2097179 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2097179 // <generalisation>
	  b parent class_ref 339867 // Cloneable
      end

      classrelation 2097307 // <generalisation>
	relation 2097307 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2097307 // <generalisation>
	  b parent class_ref 137883 // Serializable
      end

      classrelation 2097435 // <realization>
	relation 2097435 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 2097435 // <realization>
	  b parent class_ref 221467 // Comparable
      end

      attribute 3079195 "serialVersionUID"
	class_attribute const_attribute public explicit_type "long"
	init_value "=  -3617482732056931635L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The class fingerprint that is set to indicate
serialization compatibility with a previous
version of the class.
"
      end

      operation 8459163 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates a new copy of this name.
Subsequent changes to the components of this name will not
affect the new copy, and vice versa.

@return	a copy of this name

@see Object#clone()"
      end

      operation 8459291 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this name with another name for order.
Returns a negative integer, zero, or a positive integer as this
name is less than, equal to, or greater than the given name.

<p> As with <tt>Object.equals()</tt>, the notion of ordering for names 
depends on the class that implements this interface.
For example, the ordering may be
based on lexicographical ordering of the name components.
Specific attributes of the name, such as how it treats case,
may affect the ordering.  In general, two names of different
classes may not be compared.

@param   obj the non-null object to compare against.
@return  a negative integer, zero, or a positive integer as this name
		is less than, equal to, or greater than the given name
@throws	ClassCastException if obj is not a <tt>Name</tt> of a
		type that may be compared with this name

@see Comparable#compareTo(Object)"
      end

      operation 8459419 "size"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of components in this name.

@return	the number of components in this name"
      end

      operation 8459547 "isEmpty"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether this name is empty.
An empty name is one with zero components.

@return	true if this name is empty, false otherwise"
      end

      operation 8459675 "getAll"
	public return_type class_ref 144411 // Enumeration
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the components of this name as an enumeration
of strings.  The effect on the enumeration of updates to
this name is undefined.  If the name has zero components,
an empty (non-null) enumeration is returned.

@return	an enumeration of the components of this name, each a string"
      end

      operation 8459803 "get"
	public explicit_return_type "String"
	nparams 1
	  param in name "posn" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a component of this name.

@param posn
		the 0-based index of the component to retrieve.
		Must be in the range [0,size()).
@return	the component at index posn
@throws	ArrayIndexOutOfBoundsException
		if posn is outside the specified range"
      end

      operation 8459931 "getPrefix"
	public return_type class_ref 289691 // Name
	nparams 1
	  param in name "posn" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a name whose components consist of a prefix of the
components of this name.  Subsequent changes to
this name will not affect the name that is returned and vice versa.

@param posn
		the 0-based index of the component at which to stop.
		Must be in the range [0,size()].
@return	a name consisting of the components at indexes in
		the range [0,posn).
@throws	ArrayIndexOutOfBoundsException
		if posn is outside the specified range"
      end

      operation 8460059 "getSuffix"
	public return_type class_ref 289691 // Name
	nparams 1
	  param in name "posn" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a name whose components consist of a suffix of the
components in this name.  Subsequent changes to
this name do not affect the name that is returned and vice versa.

@param posn
		the 0-based index of the component at which to start.
		Must be in the range [0,size()].
@return	a name consisting of the components at indexes in
		the range [posn,size()).  If posn is equal to 
		size(), an empty name is returned.
@throws	ArrayIndexOutOfBoundsException
		if posn is outside the specified range"
      end

      operation 8460187 "startsWith"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "n" type class_ref 289691 // Name
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether this name starts with a specified prefix.
A name <tt>n</tt> is a prefix if it is equal to
<tt>getPrefix(n.size())</tt>.

@param n
		the name to check
@return	true if <tt>n</tt> is a prefix of this name, false otherwise"
      end

      operation 8460315 "endsWith"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "n" type class_ref 289691 // Name
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether this name ends with a specified suffix.
A name <tt>n</tt> is a suffix if it is equal to
<tt>getSuffix(size()-n.size())</tt>.

@param n
		the name to check
@return	true if <tt>n</tt> is a suffix of this name, false otherwise"
      end

      operation 8460443 "addAll"
	public return_type class_ref 289691 // Name
	nparams 1
	  param inout name "suffix" type class_ref 289691 // Name
	nexceptions 1
	  exception class_ref 1049243 // InvalidNameException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the components of a name -- in order -- to the end of this name.

@param suffix
		the components to add
@return	the updated name (not a new one)

@throws	InvalidNameException if <tt>suffix</tt> is not a valid name,
		or if the addition of the components would violate the syntax
		rules of this name"
      end

      operation 8460571 "addAll"
	public return_type class_ref 289691 // Name
	nparams 2
	  param in name "posn" explicit_type "int"
	  param inout name "n" type class_ref 289691 // Name
	nexceptions 1
	  exception class_ref 1049243 // InvalidNameException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the components of a name -- in order -- at a specified position
within this name.
Components of this name at or after the index of the first new
component are shifted up (away from 0) to accommodate the new
components.

@param n
		the components to add
@param posn
		the index in this name at which to add the new
		components.  Must be in the range [0,size()].
@return	the updated name (not a new one)

@throws	ArrayIndexOutOfBoundsException
		if posn is outside the specified range
@throws	InvalidNameException if <tt>n</tt> is not a valid name,
		or if the addition of the components would violate the syntax
		rules of this name"
      end

      operation 8460699 "add"
	public return_type class_ref 289691 // Name
	nparams 1
	  param in name "comp" explicit_type "String"
	nexceptions 1
	  exception class_ref 1049243 // InvalidNameException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a single component to the end of this name.

@param comp
		the component to add
@return	the updated name (not a new one)

@throws	InvalidNameException if adding <tt>comp</tt> would violate
		the syntax rules of this name"
      end

      operation 8460827 "add"
	public return_type class_ref 289691 // Name
	nparams 2
	  param in name "posn" explicit_type "int"
	  param in name "comp" explicit_type "String"
	nexceptions 1
	  exception class_ref 1049243 // InvalidNameException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a single component at a specified position within this name.
Components of this name at or after the index of the new component
are shifted up by one (away from index 0) to accommodate the new
component.

@param comp
		the component to add
@param posn
		the index at which to add the new component.
		Must be in the range [0,size()].
@return	the updated name (not a new one)

@throws	ArrayIndexOutOfBoundsException
		if posn is outside the specified range
@throws	InvalidNameException if adding <tt>comp</tt> would violate
		the syntax rules of this name"
      end

      operation 8460955 "remove"
	public explicit_return_type "Object"
	nparams 1
	  param in name "posn" explicit_type "int"
	nexceptions 1
	  exception class_ref 1049243 // InvalidNameException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a component from this name.
The component of this name at the specified position is removed.
Components with indexes greater than this position
are shifted down (toward index 0) by one.

@param posn
		the index of the component to remove.
		Must be in the range [0,size()).
@return	the component removed (a String)

@throws	ArrayIndexOutOfBoundsException
		if posn is outside the specified range
@throws	InvalidNameException if deleting the component
		would violate the syntax rules of the name"
      end
    end

    class 289819 "Context"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This interface represents a naming context, which
consists of a set of name-to-object bindings.
It contains methods for examining and updating these bindings.
<p>
<h4>Names</h4>
Each name passed as an argument to a <tt>Context</tt> method is relative
to that context.  The empty name is used to name the context itself.
A name parameter may never be null.
<p>
Most of the methods have overloaded versions with one taking a
<code>Name</code> parameter and one taking a <code>String</code>.
These overloaded versions are equivalent in that if
the <code>Name</code> and <code>String</code> parameters are just
different representations of the same name, then the overloaded
versions of the same methods behave the same.
In the method descriptions below, only one version is fully documented.
The second version instead has a link to the first:  the same
documentation applies to both.
<p>
For systems that support federation, <tt>String</tt> name arguments to
<tt>Context</tt> methods are composite names. Name arguments that are
instances of <tt>CompositeName</tt> are treated as composite names,
while <tt>Name</tt> arguments that are not instances of
<tt>CompositeName</tt> are treated as compound names (which might be
instances of <tt>CompoundName</tt> or other implementations of compound
names). This allows the results of <tt>NameParser.parse()</tt> to be used as
arguments to the <tt>Context</tt> methods.
Prior to JNDI 1.2, all name arguments were treated as composite names.
<p>
Furthermore, for systems that support federation, all names returned
in a <tt>NamingEnumeration</tt>
from <tt>list()</tt> and <tt>listBindings()</tt> are composite names
represented as strings.
See <tt>CompositeName</tt> for the string syntax of names.
<p>
For systems that do not support federation, the name arguments (in
either <tt>Name</tt> or <tt>String</tt> forms) and the names returned in
<tt>NamingEnumeration</tt> may be names in their own namespace rather than
names in a composite namespace, at the discretion of the service
provider.
<p>
<h4>Exceptions</h4>
All the methods in this interface can throw a <tt>NamingException</tt> or
any of its subclasses. See <tt>NamingException</tt> and their subclasses
for details on each exception.
<p>
<h4>Concurrent Access</h4>
A Context instance is not guaranteed to be synchronized against
concurrent access by multiple threads.  Threads that need to access
a single Context instance concurrently should synchronize amongst
themselves and provide the necessary locking.  Multiple threads
each manipulating a different Context instance need not
synchronize.  Note that the {@link #lookup(Name) <tt>lookup</tt>}
method, when passed an empty name, will return a new Context instance
representing the same naming context.
<p>
For purposes of concurrency control,
a Context operation that returns a <tt>NamingEnumeration</tt> is
not considered to have completed while the enumeration is still in
use, or while any referrals generated by that operation are still
being followed.

<p>
<h4>Parameters</h4>
A <tt>Name</tt> parameter passed to any method of the
<tt>Context</tt> interface or one of its subinterfaces
will not be modified by the service provider.
The service provider may keep a reference to it
for the duration of the operation, including any enumeration of the
method's results and the processing of any referrals generated.
The caller should not modify the object during this time.
A <tt>Name</tt> returned by any such method is owned by the caller.
The caller may subsequently modify it; the service provider may not.

<p>
<h4>Environment Properties</h4>
<p>
JNDI applications need a way to communicate various preferences
and properties that define the environment in which naming and
directory services are accessed. For example, a context might
require specification of security credentials in order to access
the service. Another context might require that server configuration
information be supplied. These are referred to as the <em>environment</em>
of a context. The <tt>Context</tt> interface provides methods for
retrieving and updating this environment.
<p>
The environment is inherited from the parent context as
context methods proceed from one context to the next. Changes to
the environment of one context do not directly affect those
of other contexts.
<p>
It is implementation-dependent when environment properties are used
and/or verified for validity.  For example, some of the
security-related properties are used by service providers to \"log in\"
to the directory.  This login process might occur at the time the
context is created, or the first time a method is invoked on the
context.  When, and whether this occurs at all, is
implementation-dependent.  When environment properties are added or
removed from the context, verifying the validity of the changes is again
implementation-dependent. For example, verification of some properties
might occur at the time the change is made, or at the time the next
operation is performed on the context, or not at all.
<p>
Any object with a reference to a context may examine that context's
environment.  Sensitive information such as clear-text
passwords should not be stored there unless the implementation is
known to protect it.

<p>
<a name=RESOURCEFILES></a>
<h4>Resource Files</h4>
<p>
To simplify the task of setting up the environment
required by a JNDI application,
application components and service providers may be distributed
along with <em>resource files.</em>
A JNDI resource file is a file in the properties file format (see
{@link java.util.Properties#load <tt>java.util.Properties</tt>}),
containing a list of key/value pairs.
The key is the name of the property (e.g. \"java.naming.factory.object\")
and the value is a string in the format defined
for that property.  Here is an example of a JNDI resource file:

<blockquote><tt><pre>
java.naming.factory.object=com.sun.jndi.ldap.AttrsToCorba:com.wiz.from.Person
java.naming.factory.state=com.sun.jndi.ldap.CorbaToAttrs:com.wiz.from.Person
java.naming.factory.control=com.sun.jndi.ldap.ResponseControlFactory
</pre></tt></blockquote>

The JNDI class library reads the resource files and makes the property
values freely available.  Thus JNDI resource files should be considered
to be \"world readable\", and sensitive information such as clear-text
passwords should not be stored there.
<p>
There are two kinds of JNDI resource files:
<em>provider</em> and <em>application</em>.

<h5>Provider Resource Files</h5>

Each service provider has an optional resource that lists properties
specific to that provider.  The name of this resource is:
<blockquote>
[<em>prefix</em>/]<tt>jndiprovider.properties</tt>
</blockquote>
where <em>prefix</em> is
the package name of the provider's context implementation(s),
with each period (\".\") converted to a slash (\"/\").

For example, suppose a service provider defines a context
implementation with class name <tt>com.sun.jndi.ldap.LdapCtx</tt>.
The provider resource for this provider is named
<tt>com/sun/jndi/ldap/jndiprovider.properties</tt>.  If the class is
not in a package, the resource's name is simply
<tt>jndiprovider.properties</tt>.

<p>
<a name=LISTPROPS></a>
Certain methods in the JNDI class library make use of the standard
JNDI properties that specify lists of JNDI factories:
<ul>
<li>java.naming.factory.object
<li>java.naming.factory.state
<li>java.naming.factory.control
<li>java.naming.factory.url.pkgs
</ul>
The JNDI library will consult the provider resource file
when determining the values of these properties.
Properties other than these may be set in the provider
resource file at the discretion of the service provider.
The service provider's documentation should clearly state which
properties are allowed; other properties in the file will be ignored.

<h5>Application Resource Files</h5>

When an application is deployed, it will generally have several
codebase directories and JARs in its classpath.  Similarly, when an
applet is deployed, it will have a codebase and archives specifying
where to find the applet's classes.  JNDI locates (using
{@link ClassLoader#getResources <tt>ClassLoader.getResources()</tt>})
all <em>application resource files</em> named <tt>jndi.properties</tt>
in the classpath.
In addition, if the file <i>java.home</i><tt>/lib/jndi.properties</tt>
exists and is readable,
JNDI treats it as an additional application resource file.
(<i>java.home</i> indicates the
directory named by the <tt>java.home</tt> system property.)
All of the properties contained in these files are placed
into the environment of the initial context.  This environment
is then inherited by other contexts.

<p>
For each property found in more than one application resource file,
JNDI uses the first value found or, in a few cases where it makes
sense to do so, it concatenates all of the values (details are given
below).
For example, if the \"java.naming.factory.object\" property is found in
three <tt>jndi.properties</tt> resource files, the
list of object factories is a concatenation of the property
values from all three files.
Using this scheme, each deployable component is responsible for
listing the factories that it exports.  JNDI automatically
collects and uses all of these export lists when searching for factory
classes.

<p>
Application resource files are available beginning with the Java 2
Platform, except that the file in
<i>java.home</i><tt>/lib</tt> may be used on earlier Java platforms as well.

<h5>Search Algorithm for Properties</h5>

When JNDI constructs an initial context, the context's environment
is initialized with properties defined in the environment parameter
passed to the constructor, the system properties, the applet parameters,
and the application resource files.  See
<a href=InitialContext.html#ENVIRONMENT><tt>InitialContext</tt></a>
for details.
This initial environment is then inherited by other context instances.

<p>
When the JNDI class library needs to determine
the value of a property, it does so by merging
the values from the following two sources, in order:
<ol>
<li>The environment of the context being operated on.
<li>The provider resource file (<tt>jndiprovider.properties</tt>)
for the context being operated on.
</ol>
For each property found in both of these two sources,
JNDI determines the property's value as follows.  If the property is
one of the standard JNDI properties that specify a list of JNDI
factories (listed <a href=#LISTPROPS>above</a>), the values are
concatenated into a single colon-separated list.  For other
properties, only the first value found is used.

<p>
When a service provider needs to determine the value of a property,
it will generally take that value directly from the environment.
A service provider may define provider-specific properties
to be placed in its own provider resource file.  In that
case it should merge values as described in the previous paragraph.

<p>
In this way, each service provider developer can specify a list of
factories to use with that service provider. These can be modified by
the application resources specified by the deployer of the application
or applet, which in turn can be modified by the user.

@author Rosanna Lee
@author Scott Seligman
@author R. Vasudevan
@version 1.12 04/07/16

@since 1.3"
      operation 8467099 "lookup"
	public explicit_return_type "Object"
	nparams 1
	  param inout name "name" type class_ref 289691 // Name
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the named object.
If <tt>name</tt> is empty, returns a new instance of this context
(which represents the same naming context as this context, but its
environment may be modified independently and it may be accessed
concurrently).

@param name
		the name of the object to look up
@return	the object bound to <tt>name</tt>
@throws	NamingException if a naming exception is encountered

@see #lookup(String)
@see #lookupLink(Name)"
      end

      operation 8467227 "lookup"
	public explicit_return_type "Object"
	nparams 1
	  param in name "name" explicit_type "String"
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the named object.
See {@link #lookup(Name)} for details.
@param name
		the name of the object to look up
@return	the object bound to <tt>name</tt>
@throws	NamingException if a naming exception is encountered"
      end

      operation 8467355 "bind"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 289691 // Name
	  param inout name "obj" explicit_type "Object"
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Binds a name to an object.
All intermediate contexts and the target context (that named by all
but terminal atomic component of the name) must already exist.

@param name
		the name to bind; may not be empty
@param obj
		the object to bind; possibly null
@throws	NameAlreadyBoundException if name is already bound
@throws	javax.naming.directory.InvalidAttributesException
	 	if object did not supply all mandatory attributes
@throws	NamingException if a naming exception is encountered

@see #bind(String, Object)
@see #rebind(Name, Object)
@see javax.naming.directory.DirContext#bind(Name, Object,
		javax.naming.directory.Attributes)"
      end

      operation 8467483 "bind"
	public explicit_return_type "void"
	nparams 2
	  param in name "name" explicit_type "String"
	  param inout name "obj" explicit_type "Object"
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Binds a name to an object.
See {@link #bind(Name, Object)} for details.

@param name
		the name to bind; may not be empty
@param obj
		the object to bind; possibly null
@throws	NameAlreadyBoundException if name is already bound
@throws	javax.naming.directory.InvalidAttributesException
	 	if object did not supply all mandatory attributes
@throws	NamingException if a naming exception is encountered"
      end

      operation 8467611 "rebind"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 289691 // Name
	  param inout name "obj" explicit_type "Object"
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Binds a name to an object, overwriting any existing binding.
All intermediate contexts and the target context (that named by all
but terminal atomic component of the name) must already exist.

<p> If the object is a <tt>DirContext</tt>, any existing attributes
associated with the name are replaced with those of the object.
Otherwise, any existing attributes associated with the name remain
unchanged.

@param name
		the name to bind; may not be empty
@param obj
		the object to bind; possibly null
@throws	javax.naming.directory.InvalidAttributesException
	 	if object did not supply all mandatory attributes
@throws	NamingException if a naming exception is encountered

@see #rebind(String, Object)
@see #bind(Name, Object)
@see javax.naming.directory.DirContext#rebind(Name, Object,
		javax.naming.directory.Attributes)
@see javax.naming.directory.DirContext"
      end

      operation 8467739 "rebind"
	public explicit_return_type "void"
	nparams 2
	  param in name "name" explicit_type "String"
	  param inout name "obj" explicit_type "Object"
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Binds a name to an object, overwriting any existing binding.
See {@link #rebind(Name, Object)} for details.

@param name
		the name to bind; may not be empty
@param obj
		the object to bind; possibly null
@throws	javax.naming.directory.InvalidAttributesException
	 	if object did not supply all mandatory attributes
@throws	NamingException if a naming exception is encountered"
      end

      operation 8467867 "unbind"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 289691 // Name
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unbinds the named object.
Removes the terminal atomic name in <code>name</code>
from the target context--that named by all but the terminal
atomic part of <code>name</code>.

<p> This method is idempotent.
It succeeds even if the terminal atomic name
is not bound in the target context, but throws
<tt>NameNotFoundException</tt>
if any of the intermediate contexts do not exist.

<p> Any attributes associated with the name are removed.
Intermediate contexts are not changed.

@param name
		the name to unbind; may not be empty
@throws	NameNotFoundException if an intermediate context does not exist
@throws	NamingException if a naming exception is encountered
@see #unbind(String)"
      end

      operation 8467995 "unbind"
	public explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "String"
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unbinds the named object.
See {@link #unbind(Name)} for details.

@param name
		the name to unbind; may not be empty
@throws	NameNotFoundException if an intermediate context does not exist
@throws	NamingException if a naming exception is encountered"
      end

      operation 8468123 "rename"
	public explicit_return_type "void"
	nparams 2
	  param inout name "oldName" type class_ref 289691 // Name
	  param inout name "newName" type class_ref 289691 // Name
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Binds a new name to the object bound to an old name, and unbinds
the old name.  Both names are relative to this context.
Any attributes associated with the old name become associated
with the new name.
Intermediate contexts of the old name are not changed.

@param oldName
		the name of the existing binding; may not be empty
@param newName
		the name of the new binding; may not be empty
@throws	NameAlreadyBoundException if <tt>newName</tt> is already bound
@throws	NamingException if a naming exception is encountered

@see #rename(String, String)
@see #bind(Name, Object)
@see #rebind(Name, Object)"
      end

      operation 8468251 "rename"
	public explicit_return_type "void"
	nparams 2
	  param in name "oldName" explicit_type "String"
	  param in name "newName" explicit_type "String"
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Binds a new name to the object bound to an old name, and unbinds
the old name.
See {@link #rename(Name, Name)} for details.

@param oldName
		the name of the existing binding; may not be empty
@param newName
		the name of the new binding; may not be empty
@throws	NameAlreadyBoundException if <tt>newName</tt> is already bound
@throws	NamingException if a naming exception is encountered"
      end

      operation 8468379 "list"
	public return_type class_ref 565659 // NamingEnumeration
	nparams 1
	  param inout name "name" type class_ref 289691 // Name
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<NameClassPair> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enumerates the names bound in the named context, along with the
class names of objects bound to them.
The contents of any subcontexts are not included.

<p> If a binding is added to or removed from this context,
its effect on an enumeration previously returned is undefined.

@param name
		the name of the context to list
@return	an enumeration of the names and class names of the
		bindings in this context.  Each element of the
		enumeration is of type <tt>NameClassPair</tt>.
@throws	NamingException if a naming exception is encountered

@see #list(String)
@see #listBindings(Name)
@see NameClassPair"
      end

      operation 8468507 "list"
	public return_type class_ref 565659 // NamingEnumeration
	nparams 1
	  param in name "name" explicit_type "String"
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<NameClassPair> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enumerates the names bound in the named context, along with the
class names of objects bound to them.
See {@link #list(Name)} for details.

@param name
		the name of the context to list
@return	an enumeration of the names and class names of the
		bindings in this context.  Each element of the
		enumeration is of type <tt>NameClassPair</tt>.
@throws	NamingException if a naming exception is encountered"
      end

      operation 8468635 "listBindings"
	public return_type class_ref 565659 // NamingEnumeration
	nparams 1
	  param inout name "name" type class_ref 289691 // Name
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Binding> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enumerates the names bound in the named context, along with the
objects bound to them.
The contents of any subcontexts are not included.

<p> If a binding is added to or removed from this context,
its effect on an enumeration previously returned is undefined.

@param name
		the name of the context to list
@return	an enumeration of the bindings in this context.
		Each element of the enumeration is of type
		<tt>Binding</tt>.
@throws	NamingException if a naming exception is encountered

@see #listBindings(String)
@see #list(Name)
@see Binding"
      end

      operation 8468763 "listBindings"
	public return_type class_ref 565659 // NamingEnumeration
	nparams 1
	  param in name "name" explicit_type "String"
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Binding> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enumerates the names bound in the named context, along with the
objects bound to them.
See {@link #listBindings(Name)} for details.

@param name
		the name of the context to list
@return	an enumeration of the bindings in this context.
		Each element of the enumeration is of type
		<tt>Binding</tt>.
@throws	NamingException if a naming exception is encountered"
      end

      operation 8468891 "destroySubcontext"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 289691 // Name
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Destroys the named context and removes it from the namespace.
Any attributes associated with the name are also removed.
Intermediate contexts are not destroyed.

<p> This method is idempotent.
It succeeds even if the terminal atomic name
is not bound in the target context, but throws
<tt>NameNotFoundException</tt>
if any of the intermediate contexts do not exist.

<p> In a federated naming system, a context from one naming system
may be bound to a name in another.  One can subsequently
look up and perform operations on the foreign context using a
composite name.  However, an attempt destroy the context using
this composite name will fail with
<tt>NotContextException</tt>, because the foreign context is not
a \"subcontext\" of the context in which it is bound.
Instead, use <tt>unbind()</tt> to remove the
binding of the foreign context.  Destroying the foreign context
requires that the <tt>destroySubcontext()</tt> be performed
on a context from the foreign context's \"native\" naming system.

@param name
		the name of the context to be destroyed; may not be empty
@throws	NameNotFoundException if an intermediate context does not exist
@throws	NotContextException if the name is bound but does not name a
		context, or does not name a context of the appropriate type
@throws	ContextNotEmptyException if the named context is not empty
@throws	NamingException if a naming exception is encountered

@see #destroySubcontext(String)"
      end

      operation 8469019 "destroySubcontext"
	public explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "String"
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Destroys the named context and removes it from the namespace.
See {@link #destroySubcontext(Name)} for details.

@param name
		the name of the context to be destroyed; may not be empty
@throws	NameNotFoundException if an intermediate context does not exist
@throws	NotContextException if the name is bound but does not name a
		context, or does not name a context of the appropriate type
@throws	ContextNotEmptyException if the named context is not empty
@throws	NamingException if a naming exception is encountered"
      end

      operation 8469147 "createSubcontext"
	public return_type class_ref 289819 // Context
	nparams 1
	  param inout name "name" type class_ref 289691 // Name
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates and binds a new context.
Creates a new context with the given name and binds it in
the target context (that named by all but terminal atomic
component of the name).  All intermediate contexts and the
target context must already exist.

@param name
		the name of the context to create; may not be empty
@return	the newly created context

@throws	NameAlreadyBoundException if name is already bound
@throws	javax.naming.directory.InvalidAttributesException
		if creation of the subcontext requires specification of
		mandatory attributes
@throws	NamingException if a naming exception is encountered

@see #createSubcontext(String)
@see javax.naming.directory.DirContext#createSubcontext"
      end

      operation 8469275 "createSubcontext"
	public return_type class_ref 289819 // Context
	nparams 1
	  param in name "name" explicit_type "String"
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates and binds a new context.
See {@link #createSubcontext(Name)} for details.

@param name
		the name of the context to create; may not be empty
@return	the newly created context

@throws	NameAlreadyBoundException if name is already bound
@throws	javax.naming.directory.InvalidAttributesException
		if creation of the subcontext requires specification of
		mandatory attributes
@throws	NamingException if a naming exception is encountered"
      end

      operation 8469403 "lookupLink"
	public explicit_return_type "Object"
	nparams 1
	  param inout name "name" type class_ref 289691 // Name
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the named object, following links except
for the terminal atomic component of the name.
If the object bound to <tt>name</tt> is not a link,
returns the object itself.

@param name
		the name of the object to look up
@return	the object bound to <tt>name</tt>, not following the
		terminal link (if any).
@throws	NamingException if a naming exception is encountered

@see #lookupLink(String)"
      end

      operation 8469531 "lookupLink"
	public explicit_return_type "Object"
	nparams 1
	  param in name "name" explicit_type "String"
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the named object, following links except
for the terminal atomic component of the name.
See {@link #lookupLink(Name)} for details.

@param name
		the name of the object to look up
@return	the object bound to <tt>name</tt>, not following the
		terminal link (if any)
@throws	NamingException if a naming exception is encountered"
      end

      operation 8469659 "getNameParser"
	public return_type class_ref 1049755 // NameParser
	nparams 1
	  param inout name "name" type class_ref 289691 // Name
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the parser associated with the named context.
In a federation of namespaces, different naming systems will
parse names differently.  This method allows an application
to get a parser for parsing names into their atomic components
using the naming convention of a particular naming system.
Within any single naming system, <tt>NameParser</tt> objects
returned by this method must be equal (using the <tt>equals()</tt>
test).

@param name
		the name of the context from which to get the parser
@return	a name parser that can parse compound names into their atomic
		components
@throws	NamingException if a naming exception is encountered

@see #getNameParser(String)
@see CompoundName"
      end

      operation 8469787 "getNameParser"
	public return_type class_ref 1049755 // NameParser
	nparams 1
	  param in name "name" explicit_type "String"
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the parser associated with the named context.
See {@link #getNameParser(Name)} for details.

@param name
		the name of the context from which to get the parser
@return	a name parser that can parse compound names into their atomic
		components
@throws	NamingException if a naming exception is encountered"
      end

      operation 8469915 "composeName"
	public return_type class_ref 289691 // Name
	nparams 2
	  param inout name "name" type class_ref 289691 // Name
	  param inout name "prefix" type class_ref 289691 // Name
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Composes the name of this context with a name relative to
this context.
Given a name (<code>name</code>) relative to this context, and
the name (<code>prefix</code>) of this context relative to one
of its ancestors, this method returns the composition of the
two names using the syntax appropriate for the naming
system(s) involved.  That is, if <code>name</code> names an
object relative to this context, the result is the name of the
same object, but relative to the ancestor context.  None of the
names may be null.
<p>
For example, if this context is named \"wiz.com\" relative
to the initial context, then
<pre>
	composeName(\"east\", \"wiz.com\")	</pre>
might return <code>\"east.wiz.com\"</code>.
If instead this context is named \"org/research\", then
<pre>
	composeName(\"user/jane\", \"org/research\")	</pre>
might return <code>\"org/research/user/jane\"</code> while
<pre>
	composeName(\"user/jane\", \"research\")	</pre>
returns <code>\"research/user/jane\"</code>.

@param name
		a name relative to this context
@param prefix
		the name of this context relative to one of its ancestors
@return	the composition of <code>prefix</code> and <code>name</code>
@throws	NamingException if a naming exception is encountered

@see #composeName(String, String)"
      end

      operation 8470043 "composeName"
	public explicit_return_type "String"
	nparams 2
	  param in name "name" explicit_type "String"
	  param in name "prefix" explicit_type "String"
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Composes the name of this context with a name relative to
this context.
See {@link #composeName(Name, Name)} for details.

@param name
		a name relative to this context
@param prefix
		the name of this context relative to one of its ancestors
@return	the composition of <code>prefix</code> and <code>name</code>
@throws	NamingException if a naming exception is encountered"
      end

      operation 8470171 "addToEnvironment"
	public explicit_return_type "Object"
	nparams 2
	  param in name "propName" explicit_type "String"
	  param inout name "propVal" explicit_type "Object"
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a new environment property to the environment of this
context.  If the property already exists, its value is overwritten.
See class description for more details on environment properties.

@param propName
		the name of the environment property to add; may not be null
@param propVal
		the value of the property to add; may not be null
@return	the previous value of the property, or null if the property was
		not in the environment before
@throws	NamingException if a naming exception is encountered

@see #getEnvironment()
@see #removeFromEnvironment(String)"
      end

      operation 8470299 "removeFromEnvironment"
	public explicit_return_type "Object"
	nparams 1
	  param in name "propName" explicit_type "String"
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes an environment property from the environment of this
context.  See class description for more details on environment
properties.

@param propName
		the name of the environment property to remove; may not be null
@return	the previous value of the property, or null if the property was
		not in the environment
@throws	NamingException if a naming exception is encountered

@see #getEnvironment()
@see #addToEnvironment(String, Object)"
      end

      operation 8470427 "getEnvironment"
	public return_type class_ref 139035 // Hashtable
	nparams 0
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?,?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the environment in effect for this context.
See class description for more details on environment properties.

<p> The caller should not make any changes to the object returned:
their effect on the context is undefined.
The environment of this context may be changed using
<tt>addToEnvironment()</tt> and <tt>removeFromEnvironment()</tt>.

@return	the environment of this context; never null
@throws	NamingException if a naming exception is encountered

@see #addToEnvironment(String, Object)
@see #removeFromEnvironment(String)"
      end

      operation 8470555 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this context.
This method releases this context's resources immediately, instead of
waiting for them to be released automatically by the garbage collector.

<p> This method is idempotent:  invoking it on a context that has
already been closed has no effect.  Invoking any other method
on a closed context is not allowed, and results in undefined behaviour.

@throws	NamingException if a naming exception is encountered"
      end

      operation 8470683 "getNameInNamespace"
	public explicit_return_type "String"
	nparams 0
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the full name of this context within its own namespace.

<p> Many naming services have a notion of a \"full name\" for objects
in their respective namespaces.  For example, an LDAP entry has
a distinguished name, and a DNS record has a fully qualified name.
This method allows the client application to retrieve this name.
The string returned by this method is not a JNDI composite name
and should not be passed directly to context methods.
In naming systems for which the notion of full name does not
make sense, <tt>OperationNotSupportedException</tt> is thrown.

@return	this context's name in its own namespace; never null
@throws	OperationNotSupportedException if the naming system does
		not have the notion of a full name
@throws	NamingException if a naming exception is encountered

@since 1.3"
      end

      attribute 3079707 "INITIAL_CONTEXT_FACTORY"
	public explicit_type "String"
	init_value "=  \"java.naming.factory.initial\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " public static final:  JLS says recommended style is to omit these modifiers
 because they are the default

Constant that holds the name of the environment property
for specifying the initial context factory to use. The value
of the property should be the fully qualified class name
of the factory class that will create an initial context.
This property may be specified in the environment parameter
passed to the initial context constructor, an applet parameter,
a system property, or an application resource file.
If it is not specified in any of these sources,
<tt>NoInitialContextException</tt> is thrown when an initial
context is required to complete an operation.

<p> The value of this constant is \"java.naming.factory.initial\".

@see InitialContext
@see javax.naming.directory.InitialDirContext
@see javax.naming.spi.NamingManager#getInitialContext
@see javax.naming.spi.InitialContextFactory
@see NoInitialContextException
@see #addToEnvironment(String, Object)
@see #removeFromEnvironment(String)
@see #APPLET
"
      end

      attribute 3079835 "OBJECT_FACTORIES"
	public explicit_type "String"
	init_value "=  \"java.naming.factory.object\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant that holds the name of the environment property
for specifying the list of object factories to use. The value
of the property should be a colon-separated list of the fully
qualified class names of factory classes that will create an object
given information about the object.
This property may be specified in the environment, an applet
parameter, a system property, or one or more resource files.

<p> The value of this constant is \"java.naming.factory.object\".

@see javax.naming.spi.NamingManager#getObjectInstance
@see javax.naming.spi.ObjectFactory
@see #addToEnvironment(String, Object)
@see #removeFromEnvironment(String)
@see #APPLET
"
      end

      attribute 3079963 "STATE_FACTORIES"
	public explicit_type "String"
	init_value "=  \"java.naming.factory.state\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant that holds the name of the environment property
for specifying the list of state factories to use. The value
of the property should be a colon-separated list of the fully
qualified class names of state factory classes that will be used
to get an object's state given the object itself.
This property may be specified in the environment, an applet
parameter, a system property, or one or more resource files.

<p> The value of this constant is \"java.naming.factory.state\".

@see javax.naming.spi.NamingManager#getStateToBind
@see javax.naming.spi.StateFactory
@see #addToEnvironment(String, Object)
@see #removeFromEnvironment(String)
@see #APPLET
@since 1.3
"
      end

      attribute 3080091 "URL_PKG_PREFIXES"
	public explicit_type "String"
	init_value "=  \"java.naming.factory.url.pkgs\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant that holds the name of the environment property
for specifying the list of package prefixes to use when
loading in URL context factories. The value
of the property should be a colon-separated list of package
prefixes for the class name of the factory class that will create
a URL context factory.
This property may be specified in the environment,
an applet parameter, a system property, or one or more
resource files.
The prefix <tt>com.sun.jndi.url</tt> is always appended to
the possibly empty list of package prefixes.

<p> The value of this constant is \"java.naming.factory.url.pkgs\".

@see javax.naming.spi.NamingManager#getObjectInstance
@see javax.naming.spi.NamingManager#getURLContext
@see javax.naming.spi.ObjectFactory
@see #addToEnvironment(String, Object)
@see #removeFromEnvironment(String)
@see #APPLET
"
      end

      attribute 3080219 "PROVIDER_URL"
	public explicit_type "String"
	init_value "=  \"java.naming.provider.url\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant that holds the name of the environment property
for specifying configuration information for the service provider
to use. The value of the property should contain a URL string
(e.g. \"ldap://somehost:389\").
This property may be specified in the environment,
an applet parameter, a system property, or a resource file.
If it is not specified in any of these sources,
the default configuration is determined by the service provider.

<p> The value of this constant is \"java.naming.provider.url\".

@see #addToEnvironment(String, Object)
@see #removeFromEnvironment(String)
@see #APPLET
"
      end

      attribute 3080347 "DNS_URL"
	public explicit_type "String"
	init_value "=  \"java.naming.dns.url\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant that holds the name of the environment property
for specifying the DNS host and domain names to use for the
JNDI URL context (for example, \"dns://somehost/wiz.com\").
This property may be specified in the environment,
an applet parameter, a system property, or a resource file.
If it is not specified in any of these sources
and the program attempts to use a JNDI URL containing a DNS name,
a <tt>ConfigurationException</tt> will be thrown.

<p> The value of this constant is \"java.naming.dns.url\".

@see #addToEnvironment(String, Object)
@see #removeFromEnvironment(String)
"
      end

      attribute 3080475 "AUTHORITATIVE"
	public explicit_type "String"
	init_value "=  \"java.naming.authoritative\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant that holds the name of the environment property for
specifying the authoritativeness of the service requested.
If the value of the property is the string \"true\", it means
that the access is to the most authoritative source (i.e. bypass
any cache or replicas). If the value is anything else,
the source need not be (but may be) authoritative.
If unspecified, the value defaults to \"false\".

<p> The value of this constant is \"java.naming.authoritative\".

@see #addToEnvironment(String, Object)
@see #removeFromEnvironment(String)
"
      end

      attribute 3080603 "BATCHSIZE"
	public explicit_type "String"
	init_value "=  \"java.naming.batchsize\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant that holds the name of the environment property for
specifying the batch size to use when returning data via the
service's protocol. This is a hint to the provider to return
the results of operations in batches of the specified size, so
the provider can optimize its performance and usage of resources.
The value of the property is the string representation of an
integer.
If unspecified, the batch size is determined by the service
provider.

<p> The value of this constant is \"java.naming.batchsize\".

@see #addToEnvironment(String, Object)
@see #removeFromEnvironment(String)
"
      end

      attribute 3080731 "REFERRAL"
	public explicit_type "String"
	init_value "=  \"java.naming.referral\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant that holds the name of the environment property for
specifying how referrals encountered by the service provider
are to be processed. The value of the property is one of the
following strings:
<dl>
<dt>\"follow\"
<dd>follow referrals automatically
<dt>\"ignore\"
<dd>ignore referrals
<dt>\"throw\"
<dd>throw <tt>ReferralException</tt> when a referral is encountered.
</dl>
If this property is not specified, the default is
determined by the provider.

<p> The value of this constant is \"java.naming.referral\".

@see #addToEnvironment(String, Object)
@see #removeFromEnvironment(String)
"
      end

      attribute 3080859 "SECURITY_PROTOCOL"
	public explicit_type "String"
	init_value "=  \"java.naming.security.protocol\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant that holds the name of the environment property for
specifying the security protocol to use.
Its value is a string determined by the service provider
(e.g. \"ssl\").
If this property is unspecified,
the behaviour is determined by the service provider.

<p> The value of this constant is \"java.naming.security.protocol\".

@see #addToEnvironment(String, Object)
@see #removeFromEnvironment(String)
"
      end

      attribute 3080987 "SECURITY_AUTHENTICATION"
	public explicit_type "String"
	init_value "=  \"java.naming.security.authentication\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant that holds the name of the environment property for
specifying the security level to use.
Its value is one of the following strings:
\"none\", \"simple\", \"strong\".
If this property is unspecified,
the behaviour is determined by the service provider.

<p> The value of this constant is \"java.naming.security.authentication\".

@see #addToEnvironment(String, Object)
@see #removeFromEnvironment(String)
"
      end

      attribute 3081115 "SECURITY_PRINCIPAL"
	public explicit_type "String"
	init_value "=  \"java.naming.security.principal\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant that holds the name of the environment property for
specifying the identity of the principal for authenticating
the caller to the service. The format of the principal
depends on the authentication scheme.
If this property is unspecified,
the behaviour is determined by the service provider.

<p> The value of this constant is \"java.naming.security.principal\".

@see #addToEnvironment(String, Object)
@see #removeFromEnvironment(String)
"
      end

      attribute 3081243 "SECURITY_CREDENTIALS"
	public explicit_type "String"
	init_value "=  \"java.naming.security.credentials\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant that holds the name of the environment property for
specifying the credentials of the principal for authenticating
the caller to the service. The value of the property depends
on the authentication scheme. For example, it could be a hashed
password, clear-text password, key, certificate, and so on.
If this property is unspecified,
the behaviour is determined by the service provider.

<p> The value of this constant is \"java.naming.security.credentials\".

@see #addToEnvironment(String, Object)
@see #removeFromEnvironment(String)
"
      end

      attribute 3081371 "LANGUAGE"
	public explicit_type "String"
	init_value "=  \"java.naming.language\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant that holds the name of the environment property for
specifying the preferred language to use with the service.
The value of the property is a colon-separated list of language
tags as defined in RFC 1766.
If this property is unspecified,
the language preference is determined by the service provider.

<p> The value of this constant is \"java.naming.language\".

@see #addToEnvironment(String, Object)
@see #removeFromEnvironment(String)
"
      end

      attribute 3081499 "APPLET"
	public explicit_type "String"
	init_value "=  \"java.naming.applet\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant that holds the name of the environment property for
specifying an applet for the initial context constructor to use
when searching for other properties.
The value of this property is the
<tt>java.applet.Applet</tt> instance that is being executed.
This property may be specified in the environment parameter
passed to the initial context constructor.
When this property is set, each property that the initial context
constructor looks for in the system properties is first looked for
in the applet's parameter list.
If this property is unspecified, the initial context constructor
will search for properties only in the environment parameter
passed to it, the system properties, and application resource files.

<p> The value of this constant is \"java.naming.applet\".

@see #addToEnvironment(String, Object)
@see #removeFromEnvironment(String)
@see InitialContext

@since 1.3
"
      end
    end

    class 289947 "NamingException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This is the superclass of all exceptions thrown by
operations in the Context and DirContext interfaces.
The nature of the failure is described by the name of the subclass.
This exception captures the information pinpointing where the operation 
failed, such as where resolution last proceeded to.
<ul>
<li> Resolved Name. Portion of name that has been resolved.
<li> Resolved Object. Object to which resolution of name proceeded.
<li> Remaining Name. Portion of name that has not been resolved.
<li> Explanation. Detail explaining why name resolution failed.
<li> Root Exception. The exception that caused this naming exception
			to be thrown.
</ul>
null is an acceptable value for any of these fields. When null,
it means that no such information has been recorded for that field.
<p>
A NamingException instance is not synchronized against concurrent 
multithreaded access. Multiple threads trying to access and modify
a single NamingException instance should lock the object.
<p>
This exception has been retrofitted to conform to
the general purpose exception-chaining mechanism.  The
<i>root exception</i> (or <i>root cause</i>) is the same object as the
<i>cause</i> returned by the {@link Throwable#getCause()} method.

@author Rosanna Lee
@author Scott Seligman
@version 1.10 03/12/19
@since 1.3"
      classrelation 2095003 // <generalisation>
	relation 2095003 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2095003 // <generalisation>
	  b parent class_ref 165403 // Exception
      end

      classrelation 2095131 // resolvedName (<unidirectional association>)
	relation 2095131 --->
	  a role_name "resolvedName" protected
	    comment "
Contains the part of the name that has been successfully resolved.
It is a composite name and can be null.
This field is initialized by the constructors.
You should access and manipulate this field
through its get and set methods.
@serial
@see #getResolvedName
@see #setResolvedName

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2095131 // resolvedName (<unidirectional association>)
	  b parent class_ref 289691 // Name
      end

      attribute 3076891 "resolvedObj"
	protected explicit_type "Object"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Contains the object to which resolution of the part of the name was 
successful. Can be null. 
This field is initialized by the constructors.
You should access and manipulate this field
through its get and set methods.
@serial
@see #getResolvedObj
@see #setResolvedObj
"
      end

      classrelation 2095259 // remainingName (<unidirectional association>)
	relation 2095259 --->
	  a role_name "remainingName" protected
	    comment "
Contains the remaining name that has not been resolved yet.
It is a composite name and can be null. 
This field is initialized by the constructors.
You should access and manipulate this field
through its get, set, \"append\" methods.
@serial
@see #getRemainingName
@see #setRemainingName
@see #appendRemainingName
@see #appendRemainingComponent

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2095259 // remainingName (<unidirectional association>)
	  b parent class_ref 289691 // Name
      end

      classrelation 2095387 // rootException (<unidirectional association>)
	relation 2095387 --->
	  a role_name "rootException" init_value "=  null" protected
	    comment "
Contains the original exception that caused this NamingException to
be thrown. This field is set if there is additional
information that could be obtained from the original
exception, or if the original exception could not be
mapped to a subclass of NamingException.
Can be null.
<p>
This field predates the general-purpose exception chaining facility.
The {@link #initCause(Throwable)} and {@link #getCause()} methods
are now the preferred means of accessing this information.

@serial
@see #getRootCause
@see #setRootCause(Throwable)
@see #initCause(Throwable)
@see #getCause

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2095387 // rootException (<unidirectional association>)
	  b parent class_ref 164251 // Throwable
      end

      operation 8450715 "NamingException"
	public explicit_return_type ""
	nparams 1
	  param in name "explanation" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new NamingException with an explanation.
All unspecified fields are set to null.

@param	explanation	A possibly null string containing
				additional detail about this exception.
@see java.lang.Throwable#getMessage"
      end

      operation 8450843 "NamingException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new NamingException.
All fields are set to null."
      end

      operation 8450971 "getResolvedName"
	public return_type class_ref 289691 // Name
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the leading portion of the name that was resolved
successfully. 

@return The part of the name that was resolved successfully. 
		It is a composite name. It can be null, which means
		the resolved name field has not been set.
@see #getResolvedObj
@see #setResolvedName"
      end

      operation 8451099 "getRemainingName"
	public return_type class_ref 289691 // Name
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the remaining unresolved portion of the name.
@return The part of the name that has not been resolved. 
		It is a composite name. It can be null, which means
		the remaining name field has not been set.
@see #setRemainingName
@see #appendRemainingName
@see #appendRemainingComponent"
      end

      operation 8451227 "getResolvedObj"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the object to which resolution was successful.
This is the object to which the resolved name is bound.

@return The possibly null object that was resolved so far.
	null means that the resolved object field has not been set.
@see #getResolvedName
@see #setResolvedObj"
      end

      operation 8451355 "getExplanation"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the explanation associated with this exception.

@return The possibly null detail string explaining more 
	about this exception. If null, it means there is no
		detail message for this exception.

@see java.lang.Throwable#getMessage"
      end

      operation 8451483 "setResolvedName"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 289691 // Name
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the resolved name field of this exception.
<p>
<tt>name</tt> is a composite name. If the intent is to set
this field using a compound name or string, you must 
\"stringify\" the compound name, and create a composite
name with a single component using the string. You can then
invoke this method using the resulting composite name.
<p>
A copy of <code>name</code> is made and stored.
Subsequent changes to <code>name</code> does not
affect the copy in this NamingException and vice versa.

@param name The possibly null name to set resolved name to.
		If null, it sets the resolved name field to null.
@see #getResolvedName"
      end

      operation 8451611 "setRemainingName"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 289691 // Name
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the remaining name field of this exception.
<p>
<tt>name</tt> is a composite name. If the intent is to set
this field using a compound name or string, you must 
\"stringify\" the compound name, and create a composite
name with a single component using the string. You can then
invoke this method using the resulting composite name.
<p>
A copy of <code>name</code> is made and stored.
Subsequent changes to <code>name</code> does not
affect the copy in this NamingException and vice versa.
@param name The possibly null name to set remaining name to.
		If null, it sets the remaining name field to null.
@see #getRemainingName
@see #appendRemainingName
@see #appendRemainingComponent"
      end

      operation 8451739 "setResolvedObj"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the resolved object field of this exception.
@param obj The possibly null object to set resolved object to.
		  If null, the resolved object field is set to null.
@see #getResolvedObj"
      end

      operation 8451867 "appendRemainingComponent"
	public explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add name as the last component in remaining name.
@param name The component to add.
  	If name is null, this method does not do anything.
@see #setRemainingName
@see #getRemainingName
@see #appendRemainingName"
      end

      operation 8451995 "appendRemainingName"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 289691 // Name
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add components from 'name' as the last components in 
remaining name.
<p>
<tt>name</tt> is a composite name. If the intent is to append
a compound name, you should \"stringify\" the compound name
then invoke the overloaded form that accepts a String parameter.
<p>
Subsequent changes to <code>name</code> does not
affect the remaining name field in this NamingException and vice versa.
@param name The possibly null name containing ordered components to add.
		If name is null, this method does not do anything.
@see #setRemainingName
@see #getRemainingName
@see #appendRemainingComponent"
      end

      operation 8452123 "getRootCause"
	public return_type class_ref 164251 // Throwable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the root cause of this NamingException, if any.
The root cause of a naming exception is used when the service provider
wants to indicate to the caller a non-naming related exception
but at the same time wants to use the NamingException structure
to indicate how far the naming operation proceeded.
<p>
This method predates the general-purpose exception chaining facility.
The {@link #getCause()} method is now the preferred means of obtaining
this information.

@return The possibly null exception that caused this naming 
   exception. If null, it means no root cause has been
	   set for this naming exception.
@see #setRootCause
@see #rootException
@see #getCause"
      end

      operation 8452251 "setRootCause"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 164251 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Records the root cause of this NamingException.
If <tt>e</tt> is <tt>this</tt>, this method does not do anything.
<p>
This method predates the general-purpose exception chaining facility.
The {@link #initCause(Throwable)} method is now the preferred means
of recording this information.

@param e The possibly null exception that caused the naming 
	 operation to fail. If null, it means this naming
	 exception has no root cause.
@see #getRootCause
@see #rootException
@see #initCause"
      end

      operation 8452379 "getCause"
	public return_type class_ref 164251 // Throwable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the cause of this exception.  The cause is the
throwable that caused this naming exception to be thrown.
Returns <code>null</code> if the cause is nonexistent or
unknown.

@return  the cause of this exception, or <code>null</code> if the
         cause is nonexistent or unknown.
@see #initCause(Throwable)
@since 1.4"
      end

      operation 8452507 "initCause"
	public return_type class_ref 164251 // Throwable
	nparams 1
	  param inout name "cause" type class_ref 164251 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes the cause of this exception to the specified value.
The cause is the throwable that caused this naming exception to be
thrown.
<p>
This method may be called at most once.

@param  cause	the cause, which is saved for later retrieval by
        the {@link #getCause()} method.  A <tt>null</tt> value
        indicates that the cause is nonexistent or unknown.
@return a reference to this <code>NamingException</code> instance.
@throws IllegalArgumentException if <code>cause</code> is this
        exception.  (A throwable cannot be its own cause.)
@throws IllegalStateException if this method has already
        been called on this exception.
@see #getCause
@since 1.4"
      end

      operation 8452635 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates the string representation of this exception.
The string representation consists of this exception's class name, 
its detailed message, and if it has a root cause, the string
representation of the root cause exception, followed by
the remaining name (if it is not null). 
This string is used for debugging and not meant to be interpreted
programmatically.

@return The non-null string containing the string representation 
of this exception."
      end

      operation 8452763 "toString"
	public explicit_return_type "String"
	nparams 1
	  param inout name "detail" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates the string representation in more detail.
This string representation consists of the information returned
by the toString() that takes no parameters, plus the string
representation of the resolved object (if it is not null).
This string is used for debugging and not meant to be interpreted
programmatically.

@param detail If true, include details about the resolved object
			in addition to the other information.
@return The non-null string containing the string representation. "
      end

      attribute 3077019 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -1299181962103167177L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Use serialVersionUID from JNDI 1.1.1 for interoperability
"
      end
    end

    class 565659 "NamingEnumeration"
      visibility public stereotype "interface"
      nformals 3
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 4
      actual class class_ref 144411 // Enumeration
        rank 0 explicit_value "T"
      actual class class_ref 144411 // Enumeration
        rank 1 explicit_value ""
      actual class class_ref 144411 // Enumeration
        rank 2 explicit_value ""
      actual class class_ref 144411 // Enumeration
        rank 3 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This interface is for enumerating lists returned by 
methods in the javax.naming and javax.naming.directory packages.
It extends Enumeration to allow as exceptions to be thrown during 
the enumeration.
<p>
When a method such as list(), listBindings(), or search() returns
a NamingEnumeration, any exceptions encountered are reserved until
all results have been returned. At the end of the enumeration, the
exception is thrown (by hasMore());
<p> 
For example, if the list() is
returning only a partial answer, the corresponding exception would 
be PartialResultException. list() would first return a NamingEnumeration.
When the last of the results has been returned by the NamingEnumeration's
next(), invoking hasMore() would result in PartialResultException being thrown.
<p>
In another example, if a search() method was invoked with a specified
size limit of 'n'. If the answer consists of more than 'n' results, 
search() would first return a NamingEnumeration.
When the n'th result has been returned by invoking next() on the
NamingEnumeration, a SizeLimitExceedException would then thrown when
hasMore() is invoked.
<p>
Note that if the program uses hasMoreElements() and nextElement() instead
to iterate through the NamingEnumeration, because these methods
cannot throw exceptions, no exception will be thrown. Instead,
in the previous example, after the n'th result has been returned by
nextElement(), invoking hasMoreElements() would return false.
<p>
Note also that NoSuchElementException is thrown if the program invokes
next() or nextElement() when there are no elements left in the enumeration.
The program can always avoid this exception by using hasMore() and 
hasMoreElements() to check whether the end of the enumeration has been reached.
<p>
If an exception is thrown during an enumeration,
the enumeration becomes invalid. 
Subsequent invocation of any method on that enumeration
will yield undefined results.

@author Rosanna Lee
@author Scott Seligman
@version 1.8 04/05/05

@see Context#list
@see Context#listBindings
@see javax.naming.directory.DirContext#search
@see javax.naming.directory.Attributes#getAll
@see javax.naming.directory.Attributes#getIDs
@see javax.naming.directory.Attribute#getAll
@since 1.3"
      classrelation 957467 // <realization>
	relation 957467 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 957467 // <realization>
	  b parent class_ref 144411 // Enumeration
      end

      operation 3586203 "next"
	public explicit_return_type "T"
	nparams 0
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the next element in the enumeration.
This method allows naming exceptions encountered while
retrieving the next element to be caught and handled
by the application. 
<p> 
Note that <tt>next()</tt> can also throw the runtime exception 
NoSuchElementException to indicate that the caller is 
attempting to enumerate beyond the end of the enumeration.
This is different from a NamingException, which indicates
that there was a problem in obtaining the next element,
for example, due to a referral or server unavailability, etc.

@return 	The possibly null element in the enumeration.
	    null is only valid for enumerations that can return
	    null (e.g. Attribute.getAll() returns an enumeration of
	    attribute values, and an attribute value can be null).
@exception NamingException If a naming exception is encountered while attempting
		to retrieve the next element. See NamingException
			and its subclasses for the possible naming exceptions.
@exception java.util.NoSuchElementException If attempting to get the next element when none is available.
@see java.util.Enumeration#nextElement"
      end

      operation 3586331 "hasMore"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether there are any more elements in the enumeration.
This method allows naming exceptions encountered while
determining whether there are more elements to be caught and handled
by the application.

@return		true if there is more in the enumeration ; false otherwise.
@exception NamingException 
		If a naming exception is encountered while attempting
		to determine whether there is another element
			in the enumeration. See NamingException
			and its subclasses for the possible naming exceptions.
@see java.util.Enumeration#hasMoreElements"
      end

      operation 3586459 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this enumeration.

After this method has been invoked on this enumeration, the
enumeration becomes invalid and subsequent invocation of any of
its methods will yield undefined results.
This method is intended for aborting an enumeration to free up resources.
If an enumeration proceeds to the end--that is, until
<tt>hasMoreElements()</tt> or <tt>hasMore()</tt> returns <tt>false</tt>--
resources will be freed up automatically and there is no need to
explicitly call <tt>close()</tt>.
<p>
This method indicates to the service provider that it is free
to release resources associated with the enumeration, and can
notify servers to cancel any outstanding requests. The <tt>close()</tt>
method is a hint to implementations for managing their resources.
Implementations are encouraged to use appropriate algorithms to
manage their resources when client omits the <tt>close()</tt> calls.

@exception NamingException If a naming exception is encountered
while closing the enumeration.
@since 1.3"
      end
    end

    class 1047963 "AuthenticationException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This exception is thrown when an authentication error occurs while
accessing the naming or directory service.
An authentication error can happen, for example, when the credentials
supplied by the user program is invalid or otherwise fails to
authenticate the user to the naming/directory service.
<p>
If the program wants to handle this exception in particular, it
should catch AuthenticationException explicitly before attempting to
catch NamingException. After catching AuthenticationException, the
program could reattempt the authentication by updating
the resolved context's environment properties with the appropriate
appropriate credentials.
<p>
Synchronization and serialization issues that apply to NamingException
apply directly here.

@author Rosanna Lee
@author Scott Seligman
@version 1.7 03/12/19
@since 1.3"
      classrelation 2095643 // <generalisation>
	relation 2095643 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2095643 // <generalisation>
	  b parent class_ref 1048091 // NamingSecurityException
      end

      operation 8453147 "AuthenticationException"
	public explicit_return_type ""
	nparams 1
	  param in name "explanation" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of AuthenticationException using the
explanation supplied. All other fields default to null.

@param	explanation	A possibly null string containing
				additional detail about this exception.
@see java.lang.Throwable#getMessage"
      end

      operation 8453275 "AuthenticationException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of AuthenticationException.
All fields are set to null."
      end

      attribute 3077275 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  3678497619904568096L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Use serialVersionUID from JNDI 1.1.1 for interoperability
"
      end
    end

    class 1048091 "NamingSecurityException"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This is the superclass of security-related exceptions 
thrown by operations in the Context and DirContext interfaces.
The nature of the failure is described by the name of the subclass.
<p>
If the program wants to handle this exception in particular, it
should catch NamingSecurityException explicitly before attempting to
catch NamingException. A program might want to do this, for example,
if it wants to treat security-related exceptions specially from
other sorts of naming exception.
<p>
Synchronization and serialization issues that apply to NamingException
apply directly here.

@author Rosanna Lee
@author Scott Seligman
@version 1.8 03/12/19
@since 1.3"
      classrelation 2095515 // <generalisation>
	relation 2095515 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2095515 // <generalisation>
	  b parent class_ref 289947 // NamingException
      end

      operation 8452891 "NamingSecurityException"
	public explicit_return_type ""
	nparams 1
	  param in name "explanation" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of NamingSecurityException using the
explanation supplied. All other fields default to null.

@param	explanation	Possibly null additional detail about this exception.
@see java.lang.Throwable#getMessage"
      end

      operation 8453019 "NamingSecurityException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of NamingSecurityException.
All fields are initialized to null."
      end

      attribute 3077147 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  5855287647294685775L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Use serialVersionUID from JNDI 1.1.1 for interoperability
"
      end
    end

    class 1048219 "AuthenticationNotSupportedException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This exception is thrown when
the particular flavor of authentication requested is not supported.
For example, if the program
is attempting to use strong authentication but the directory/naming
supports only simple authentication, this exception would be thrown.
Identification of a particular flavor of authentication is
provider- and server-specific. It may be specified using
specific authentication schemes such
those identified using SASL, or a generic authentication specifier
(such as \"simple\" and \"strong\").
<p>
If the program wants to handle this exception in particular, it
should catch AuthenticationNotSupportedException explicitly before
attempting to catch NamingException. After catching
<code>AuthenticationNotSupportedException</code>, the program could
reattempt the authentication using a different authentication flavor
by updating the resolved context's environment properties accordingly.
<p>
Synchronization and serialization issues that apply to NamingException
apply directly here.

@author Rosanna Lee
@author Scott Seligman
@version 1.7 03/12/19
@since 1.3"
      classrelation 2095771 // <generalisation>
	relation 2095771 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2095771 // <generalisation>
	  b parent class_ref 1048091 // NamingSecurityException
      end

      operation 8453403 "AuthenticationNotSupportedException"
	public explicit_return_type ""
	nparams 1
	  param in name "explanation" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of AuthenticationNotSupportedException using
an explanation. All other fields default to null.

@param	explanation	A possibly null string containing additional
				detail about this exception.
@see java.lang.Throwable#getMessage"
      end

      operation 8453531 "AuthenticationNotSupportedException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of AuthenticationNotSupportedException
all name resolution fields and explanation initialized to null."
      end

      attribute 3077403 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -7149033933259492300L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Use serialVersionUID from JNDI 1.1.1 for interoperability
"
      end
    end

    class 1048347 "BinaryRefAddr"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class represents the binary form of the address of 
a communications end-point.
<p>
A BinaryRefAddr consists of a type that describes the communication mechanism
and an opaque buffer containing the address description
specific to that communication mechanism. The format and interpretation of
the address type and the contents of the opaque buffer are based on 
the agreement of three parties: the client that uses the address,
the object/server that can be reached using the address,
and the administrator or program that creates the address.
<p>
An example of a binary reference address is an BER X.500 presentation address.
Another example of a binary reference address is a serialized form of
a service's object handle.
<p>
A binary reference address is immutable in the sense that its fields
once created, cannot be replaced. However, it is possible to access
the byte array used to hold the opaque buffer. Programs are strongly
recommended against changing this byte array. Changes to this
byte array need to be explicitly synchronized.

@author Rosanna Lee
@author Scott Seligman
@version 1.7 03/12/19

@see RefAddr
@see StringRefAddr
@since 1.3


The serialized form of a BinaryRefAddr object consists of its type
name String and a byte array containing its \"contents\"."
      classrelation 2096027 // <generalisation>
	relation 2096027 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2096027 // <generalisation>
	  b parent class_ref 1048475 // RefAddr
      end

      attribute 3077787 "buf"
	private explicit_type "byte"
	multiplicity "[]"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Contains the bytes of the address.
This field is initialized by the constructor and returned
using getAddressBytes() and getAddressContents().
@serial 
"
      end

      operation 8454427 "BinaryRefAddr"
	public explicit_return_type ""
	nparams 2
	  param in name "addrType" explicit_type "String"
	  param in name "src" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of BinaryRefAddr using its address type and a byte
array for contents.

@param addrType A non-null string describing the type of the address.
@param src	The non-null contents of the address as a byte array.
			The contents of src is copied into the new BinaryRefAddr."
      end

      operation 8454555 "BinaryRefAddr"
	public explicit_return_type ""
	nparams 4
	  param in name "addrType" explicit_type "String"
	  param in name "src" explicit_type "byte"
	  param in name "offset" explicit_type "int"
	  param in name "count" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of BinaryRefAddr using its address type and
a region of a byte array for contents.

@param addrType A non-null string describing the type of the address.
@param src	The non-null contents of the address as a byte array.
			The contents of src is copied into the new BinaryRefAddr.
@param offset	The starting index in src to get the bytes.
			0 <= offset <= src.length.
@param count	The number of bytes to extract from src.
                0 <= count <= src.length-offset."
      end

      operation 8454683 "getContent"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the contents of this address as an Object.
The result is a byte array.
Changes to this array will affect this BinaryRefAddr's contents.
Programs are recommended against changing this array's contents
and to lock the buffer if they need to change it.

@return The non-null buffer containing this address's contents."
      end

      operation 8454811 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether obj is equal to this address.  It is equal if
it contains the same address type and their contents are byte-wise
equivalent.
@param obj	The possibly null object to check.
@return true if the object is equal; false otherwise."
      end

      operation 8454939 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Computes the hash code of this address using its address type and contents.
Two BinaryRefAddrs have the same hash code if they have
the same address type and the same contents.
It is also possible for different BinaryRefAddrs to have
the same hash code.

@return The hash code of this address as an int."
      end

      operation 8455067 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates the string representation of this address.
The string consists of the address's type and contents with labels.
The first 32 bytes of contents are displayed (in hexadecimal).
If there are more than 32 bytes, \"...\" is used to indicate more.
This string is meant to used for debugging purposes and not
meant to be interpreted programmatically.
@return The non-null string representation of this address."
      end

      attribute 3077915 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -3415254970957330361L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Use serialVersionUID from JNDI 1.1.1 for interoperability
"
      end
    end

    class 1048475 "RefAddr"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class represents the address of a communications end-point.
It consists of a type that describes the communication mechanism
and an address contents determined by an RefAddr subclass.
<p>
For example, an address type could be \"BSD Printer Address\",
which specifies that it is an address to be used with the BSD printing
protocol. Its contents could be the machine name identifying the
location of the printer server that understands this protocol.
<p>
A RefAddr is contained within a Reference.
<p>
RefAddr is an abstract class. Concrete implementations of it
determine its synchronization properties. 

@author Rosanna Lee
@author Scott Seligman
@version 1.8 03/12/19

@see Reference
@see LinkRef
@see StringRefAddr
@see BinaryRefAddr
@since 1.3

<p>
The serialized form of a RefAddr object consists of only its type name
String."
      classrelation 2095899 // <realization>
	relation 2095899 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2095899 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      attribute 3077531 "addrType"
	protected explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Contains the type of this address.
@serial 
"
      end

      operation 8453659 "RefAddr"
	protected explicit_return_type ""
	nparams 1
	  param in name "addrType" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of RefAddr using its address type.

@param addrType A non-null string describing the type of the address."
      end

      operation 8453787 "getType"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the address type of this address.

@return The non-null address type of this address."
      end

      operation 8453915 "getContent"
	abstract public explicit_return_type "Object"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the contents of this address.

@return The possibly null address contents."
      end

      operation 8454043 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether obj is equal to this RefAddr.
<p>
obj is equal to this RefAddr all of these conditions are true
<ul> non-null
<li> instance of RefAddr 
<li> obj has the same address type as this RefAddr (using String.compareTo())
<li> both obj and this RefAddr's contents are null or they are equal
		(using the equals() test).
</ul>
@param obj possibly null obj to check.
@return true if obj is equal to this refaddr; false otherwise.
@see #getContent
@see #getType"
      end

      operation 8454171 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Computes the hash code of this address using its address type and contents.
The hash code is the sum of the hash code of the address type and
the hash code of the address contents.

@return The hash code of this address as an int.
@see java.lang.Object#hashCode"
      end

      operation 8454299 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates the string representation of this address.
The string consists of the address's type and contents with labels.
This representation is intended for display only and not to be parsed.
@return The non-null string representation of this address."
      end

      attribute 3077659 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -1468165120479154358L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Use serialVersionUID from JNDI 1.1.1 for interoperability
"
      end
    end

    class 1048603 "Binding"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class represents a name-to-object binding found in a context.
<p>
A context consists of name-to-object bindings.
The Binding class represents such a binding.  It consists
of a name and an object. The <code>Context.listBindings()</code>
method returns an enumeration of Binding.
<p>
Use subclassing for naming systems that generate contents of 
a binding dynamically.
<p>
A Binding instance is not synchronized against concurrent access by multiple
threads. Threads that need to access a Binding concurrently should
synchronize amongst themselves and provide the necessary locking.

@author Rosanna Lee
@author Scott Seligman
@version 1.8 03/12/19
@since 1.3"
      classrelation 2096283 // <generalisation>
	relation 2096283 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2096283 // <generalisation>
	  b parent class_ref 1048731 // NameClassPair
      end

      attribute 3078683 "boundObj"
	private explicit_type "Object"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Contains this binding's object.
It is initialized by the constuctor and can be updated using
<tt>setObject</tt>.
@serial
@see #getObject
@see #setObject
"
      end

      operation 8456603 "Binding"
	public explicit_return_type ""
	nparams 2
	  param in name "name" explicit_type "String"
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of a Binding given its name and object. 
<p>
<tt>getClassName()</tt> will return
the class name of <tt>obj</tt> (or null if <tt>obj</tt> is null) 
unless the class name has been explicitly set using <tt>setClassName()</tt>

@param	name	The non-null name of the object. It is relative
            to the <em>target context</em> (which is
named by the first parameter of the <code>listBindings()</code> method)
@param	obj	The possibly null object bound to name.
@see NameClassPair#setClassName"
      end

      operation 8456731 "Binding"
	public explicit_return_type ""
	nparams 3
	  param in name "name" explicit_type "String"
	  param inout name "obj" explicit_type "Object"
	  param inout name "isRelative" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of a Binding given its name, object, and whether
the name is relative.
<p>
<tt>getClassName()</tt> will return the class name of <tt>obj</tt> 
(or null if <tt>obj</tt> is null) unless the class name has been
explicitly set using <tt>setClassName()</tt>

@param	name	The non-null string name of the object.
@param	obj	The possibly null object bound to name.
@param isRelative true if <code>name</code> is a name relative
		to the target context (which is named by
        the first parameter of the <code>listBindings()</code> method);
        false if <code>name</code> is a URL string.
@see NameClassPair#isRelative
@see NameClassPair#setRelative
@see NameClassPair#setClassName"
      end

      operation 8456859 "Binding"
	public explicit_return_type ""
	nparams 3
	  param in name "name" explicit_type "String"
	  param in name "className" explicit_type "String"
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of a Binding given its name, class name, and object. 

@param	name	The non-null name of the object. It is relative
            to the <em>target context</em> (which is
named by the first parameter of the <code>listBindings()</code> method)
@param	className	The possibly null class name of the object 
	bound to <tt>name</tt>. If null, the class name of <tt>obj</tt> is
		returned by <tt>getClassName()</tt>. If <tt>obj</tt> is also
		null, <tt>getClassName()</tt> will return null.
@param	obj	The possibly null object bound to name.
@see NameClassPair#setClassName"
      end

      operation 8456987 "Binding"
	public explicit_return_type ""
	nparams 4
	  param in name "name" explicit_type "String"
	  param in name "className" explicit_type "String"
	  param inout name "obj" explicit_type "Object"
	  param inout name "isRelative" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of a Binding given its 
name, class name, object, and whether the name is relative.

@param	name	The non-null string name of the object.
@param	className	The possibly null class name of the object 
	bound to <tt>name</tt>. If null, the class name of <tt>obj</tt> is
		returned by <tt>getClassName()</tt>. If <tt>obj</tt> is also
		null, <tt>getClassName()</tt> will return null.
@param	obj	The possibly null object bound to name.
@param isRelative true if <code>name</code> is a name relative
		to the target context (which is named by
        the first parameter of the <code>listBindings()</code> method);
        false if <code>name</code> is a URL string.
@see NameClassPair#isRelative
@see NameClassPair#setRelative
@see NameClassPair#setClassName"
      end

      operation 8457115 "getClassName"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the class name of the object bound to the name of this binding.
If the class name has been set explicitly, return it.
Otherwise, if this binding contains a non-null object, 
that object's class name is used. Otherwise, null is returned.

@return	A possibly null string containing class name of object bound."
      end

      operation 8457243 "getObject"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the object bound to the name of this binding.

@return	The object bound; null if this binding does not contain an object.
@see #setObject"
      end

      operation 8457371 "setObject"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the object associated with this binding.
@param obj The possibly null object to use.
@see #getObject"
      end

      operation 8457499 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates the string representation of this binding.
The string representation consists of the string representation
of the name/class pair and the string representation of
this binding's object, separated by ':'.
The contents of this string is useful
for debugging and is not meant to be interpreted programmatically.

@return The non-null string representation of this binding."
      end

      attribute 3078811 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  8839217842691845890L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Use serialVersionUID from JNDI 1.1.1 for interoperability
"
      end
    end

    class 1048731 "NameClassPair"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class represents the object name and class name pair of a binding
found in a context.
<p>
A context consists of name-to-object bindings.
The NameClassPair class represents the name and the
class of the bound object. It consists
of a name and a string representing the
package-qualified class name.
<p>
Use subclassing for naming systems that generate contents of
a name/class pair dynamically.
<p>
A NameClassPair instance is not synchronized against concurrent
access by multiple threads. Threads that need to access a NameClassPair
concurrently should synchronize amongst themselves and provide
the necessary locking.

@author Rosanna Lee
@author Scott Seligman
@version 1.10 03/12/19

@see Context#list
@since 1.3


<p>
The serialized form of a NameClassPair object consists of the name (a
String), class name (a String), and isRelative flag (a boolean)."
      classrelation 2096155 // <realization>
	relation 2096155 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2096155 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      attribute 3078043 "name"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Contains the name of this NameClassPair.
It is initialized by the constructor and can be updated using
<tt>setName()</tt>.
@serial
@see #getName
@see #setName
"
      end

      attribute 3078171 "className"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Contains the class name contained in this NameClassPair.
It is initialized by the constructor and can be updated using
<tt>setClassName()</tt>.
@serial
@see #getClassName
@see #setClassName
"
      end

      attribute 3078299 "fullName"
	private explicit_type "String"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Contains the full name of this NameClassPair within its
own namespace.
It is initialized using <tt>setNameInNamespace()</tt>
@serial
@see #getNameInNamespace
@see #setNameInNamespace
"
      end

      attribute 3078427 "isRel"
	private explicit_type "boolean"
	init_value "=  true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Records whether the name of this <tt>NameClassPair</tt>
is relative to the target context.
It is initialized by the constructor and can be updated using
<tt>setRelative()</tt>.
@serial
@see #isRelative
@see #setRelative
@see #getName
@see #setName
"
      end

      operation 8455195 "NameClassPair"
	public explicit_return_type ""
	nparams 2
	  param in name "name" explicit_type "String"
	  param in name "className" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of a NameClassPair given its
name and class name.

@param	name	The non-null name of the object. It is relative
			to the <em>target context</em> (which is
named by the first parameter of the <code>list()</code> method)
@param	className	The possibly null class name of the object
		bound to name. It is null if the object bound is null.
@see #getClassName
@see #setClassName
@see #getName
@see #setName"
      end

      operation 8455323 "NameClassPair"
	public explicit_return_type ""
	nparams 3
	  param in name "name" explicit_type "String"
	  param in name "className" explicit_type "String"
	  param inout name "isRelative" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of a NameClassPair given its
name, class name, and whether it is relative to the listing context.

@param	name	The non-null name of the object.
@param	className	The possibly null class name of the object
	bound to name.  It is null if the object bound is null.
@param isRelative true if <code>name</code> is a name relative
		to the target context (which is named by the first parameter
		of the <code>list()</code> method); false if <code>name</code>
		is a URL string.
@see #getClassName
@see #setClassName
@see #getName
@see #setName
@see #isRelative
@see #setRelative"
      end

      operation 8455451 "getClassName"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the class name of the object bound to the name of this binding.
If a reference or some other indirect information is bound,
retrieves the class name of the eventual object that
will be returned by <tt>Binding.getObject()</tt>.

@return	The possibly null class name of object bound.
		It is null if the object bound is null.
@see Binding#getObject
@see Binding#getClassName
@see #setClassName"
      end

      operation 8455579 "getName"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the name of this binding.
If <tt>isRelative()</tt> is true, this name is relative to the
target context (which is named by the first parameter of the
<tt>list()</tt>).
If <tt>isRelative()</tt> is false, this name is a URL string.

@return	The non-null name of this binding.
@see #isRelative
@see #setName"
      end

      operation 8455707 "setName"
	public explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the name of this binding.

@param	name the non-null string to use as the name.
@see #getName
@see #setRelative"
      end

      operation 8455835 "setClassName"
	public explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the class name of this binding.

@param	name the possibly null string to use as the class name.
If null, <tt>Binding.getClassName()</tt> will return
the actual class name of the object in the binding.
The class name will be null if the object bound is null.
@see #getClassName
@see Binding#getClassName"
      end

      operation 8455963 "isRelative"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether the name of this binding is
relative to the target context (which is named by
the first parameter of the <code>list()</code> method).

@return true if the name of this binding is relative to the
		target context;
		false if the name of this binding is a URL string.
@see #setRelative
@see #getName"
      end

      operation 8456091 "setRelative"
	public explicit_return_type "void"
	nparams 1
	  param inout name "r" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets whether the name of this binding is relative to the target
context (which is named by the first parameter of the <code>list()</code>
method).

@param r If true, the name of binding is relative to the target context;
		if false, the name of binding is a URL string.
@see #isRelative
@see #setName"
      end

      operation 8456219 "getNameInNamespace"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the full name of this binding.
The full name is the absolute name of this binding within
its own namespace. See {@link Context#getNameInNamespace()}.
<p>

In naming systems for which the notion of full name does not
apply to this binding an <tt>UnsupportedOperationException</tt>
is thrown.
This exception is also thrown when a service provider written before
the introduction of the method is in use.
<p>
The string returned by this method is not a JNDI composite name and
should not be passed directly to context methods.

@return The full name of this binding.
@throws UnsupportedOperationException if the notion of full name
	       does not apply to this binding in the naming system.
@since 1.5
@see #setNameInNamespace
@see #getName"
      end

      operation 8456347 "setNameInNamespace"
	public explicit_return_type "void"
	nparams 1
	  param in name "fullName" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the full name of this binding.
This method must be called to set the full name whenever a
<tt>NameClassPair</tt> is created and a full name is
applicable to this binding.
<p>
Setting the full name to null, or not setting it at all, will
cause <tt>getNameInNamespace()</tt> to throw an exception.

@param fullName The full name to use.
@since 1.5
@see #getNameInNamespace
@see #setName"
      end

      operation 8456475 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates the string representation of this name/class pair.
The string representation consists of the name and class name separated
by a colon (':').
The contents of this string is useful
for debugging and is not meant to be interpreted programmatically.

@return The string representation of this name/class pair."
      end

      attribute 3078555 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  5620776610160863339L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Use serialVersionUID from JNDI 1.1.1 for interoperability
"
      end
    end

    class 1048859 "CannotProceedException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This exception is thrown to indicate that the operation reached 
a point in the name where the operation cannot proceed any further.
When performing an operation on a composite name, a naming service
provider may reach a part of the name that does not belong to its
namespace.  At that point, it can construct a
CannotProceedException and then invoke methods provided by
javax.naming.spi.NamingManager (such as getContinuationContext())
to locate another provider to continue the operation.  If this is
not possible, this exception is raised to the caller of the
context operation.
<p>
If the program wants to handle this exception in particular, it
should catch CannotProceedException explicitly before attempting to
catch NamingException.
<p>
A CannotProceedException instance is not synchronized against concurrent 
multithreaded access. Multiple threads trying to access and modify
CannotProceedException should lock the object.

@author Rosanna Lee
@author Scott Seligman
@version 1.11 04/07/16
@since 1.3


The serialized form of a CannotProceedException object consists of
the serialized fields of its NamingException superclass, the remaining new
name (a Name object), the environment (a Hashtable), the altName field
(a Name object), and the serialized form of the altNameCtx field."
      classrelation 2096411 // <generalisation>
	relation 2096411 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2096411 // <generalisation>
	  b parent class_ref 289947 // NamingException
      end

      classrelation 2096539 // remainingNewName (<unidirectional association>)
	relation 2096539 --->
	  a role_name "remainingNewName" init_value "=  null" protected
	    comment "
Contains the remaining unresolved part of the second
\"name\" argument to Context.rename().
This information necessary for
continuing the Context.rename() operation.
<p>
This field is initialized to null.
It should not be manipulated directly:  it should
be accessed and updated using getRemainingName() and setRemainingName().
@serial

@see #getRemainingNewName
@see #setRemainingNewName

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2096539 // remainingNewName (<unidirectional association>)
	  b parent class_ref 289691 // Name
      end

      classrelation 2096667 // environment (<unidirectional association>)
	relation 2096667 --->
	  a role_name "environment" init_value "=  null" protected
	    comment "
Contains the environment
relevant for the Context or DirContext method that cannot proceed.
<p>
This field is initialized to null.
It should not be manipulated directly:  it should be accessed
and updated using getEnvironment() and setEnvironment().
@serial

@see #getEnvironment
@see #setEnvironment

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?,?> ${name}${value};
"
	    classrelation_ref 2096667 // environment (<unidirectional association>)
	  b parent class_ref 139035 // Hashtable
      end

      classrelation 2096795 // altName (<unidirectional association>)
	relation 2096795 --->
	  a role_name "altName" init_value "=  null" protected
	    comment "
Contains the name of the resolved object, relative
to the context <code>altNameCtx</code>.  It is a composite name.
If null, then no name is specified.
See the <code>javax.naming.spi.ObjectFactory.getObjectInstance</code>
method for details on how this is used.
<p>
This field is initialized to null.
It should not be manipulated directly:  it should
be accessed and updated using getAltName() and setAltName().
@serial

@see #getAltName
@see #setAltName
@see #altNameCtx
@see javax.naming.spi.ObjectFactory#getObjectInstance

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2096795 // altName (<unidirectional association>)
	  b parent class_ref 289691 // Name
      end

      classrelation 2096923 // altNameCtx (<unidirectional association>)
	relation 2096923 --->
	  a role_name "altNameCtx" init_value "=  null" protected
	    comment "
Contains the context relative to which
<code>altName</code> is specified.  If null, then the default initial
context is implied.
See the <code>javax.naming.spi.ObjectFactory.getObjectInstance</code>
method for details on how this is used.
<p>
This field is initialized to null.
It should not be manipulated directly:  it should
be accessed and updated using getAltNameCtx() and setAltNameCtx().
@serial

@see #getAltNameCtx
@see #setAltNameCtx
@see #altName
@see javax.naming.spi.ObjectFactory#getObjectInstance

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2096923 // altNameCtx (<unidirectional association>)
	  b parent class_ref 289819 // Context
      end

      operation 8457627 "CannotProceedException"
	public explicit_return_type ""
	nparams 1
	  param in name "explanation" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of CannotProceedException using an
explanation. All unspecified fields default to null.

@param	explanation	A possibly null string containing additional
				detail about this exception.
	 If null, this exception has no detail message.
@see java.lang.Throwable#getMessage"
      end

      operation 8457755 "CannotProceedException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of CannotProceedException.
All fields default to null."
      end

      operation 8457883 "getEnvironment"
	public return_type class_ref 139035 // Hashtable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?,?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the environment that was in effect when this exception
was created.
@return Possibly null environment property set.
		null means no environment was recorded for this exception.
@see #setEnvironment"
      end

      operation 8458011 "setEnvironment"
	public explicit_return_type "void"
	nparams 1
	  param inout name "environment" type class_ref 139035 // Hashtable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?,?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the environment that will be returned when getEnvironment()
is called.
@param environment A possibly null environment property set.
		null means no environment is being recorded for 
		this exception.
@see #getEnvironment"
      end

      operation 8458139 "getRemainingNewName"
	public return_type class_ref 289691 // Name
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the \"remaining new name\" field of this exception, which is
used when this exception is thrown during a rename() operation.

@return The possibly null part of the new name that has not been resolved.
		It is a composite name. It can be null, which means
		the remaining new name field has not been set.

@see #setRemainingNewName"
      end

      operation 8458267 "setRemainingNewName"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newName" type class_ref 289691 // Name
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the \"remaining new name\" field of this exception.
This is the value returned by <code>getRemainingNewName()</code>.
<p>
<tt>newName</tt> is a composite name. If the intent is to set
this field using a compound name or string, you must 
\"stringify\" the compound name, and create a composite
name with a single component using the string. You can then
invoke this method using the resulting composite name.
<p>
A copy of <code>newName</code> is made and stored.
Subsequent changes to <code>name</code> does not
affect the copy in this NamingException and vice versa.

@param newName The possibly null name to set the \"remaining new name\" to.
		If null, it sets the remaining name field to null.

@see #getRemainingNewName"
      end

      operation 8458395 "getAltName"
	public return_type class_ref 289691 // Name
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the <code>altName</code> field of this exception.
This is the name of the resolved object, relative to the context
<code>altNameCtx</code>. It will be used during a subsequent call to the
<code>javax.naming.spi.ObjectFactory.getObjectInstance</code> method.

@return The name of the resolved object, relative to
		<code>altNameCtx</code>.
		It is a composite name.  If null, then no name is specified.

@see #setAltName
@see #getAltNameCtx
@see javax.naming.spi.ObjectFactory#getObjectInstance"
      end

      operation 8458523 "setAltName"
	public explicit_return_type "void"
	nparams 1
	  param inout name "altName" type class_ref 289691 // Name
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the <code>altName</code> field of this exception.

@param altName	The name of the resolved object, relative to
			<code>altNameCtx</code>.
			It is a composite name.
			If null, then no name is specified.

@see #getAltName
@see #setAltNameCtx"
      end

      operation 8458651 "getAltNameCtx"
	public return_type class_ref 289819 // Context
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the <code>altNameCtx</code> field of this exception.
This is the context relative to which <code>altName</code> is named.
It will be used during a subsequent call to the
<code>javax.naming.spi.ObjectFactory.getObjectInstance</code> method.

@return	The context relative to which <code>altName</code> is named.
		If null, then the default initial context is implied.

@see #setAltNameCtx
@see #getAltName
@see javax.naming.spi.ObjectFactory#getObjectInstance"
      end

      operation 8458779 "setAltNameCtx"
	public explicit_return_type "void"
	nparams 1
	  param inout name "altNameCtx" type class_ref 289819 // Context
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the <code>altNameCtx</code> field of this exception.

@param altNameCtx
			The context relative to which <code>altName</code>
			is named.  If null, then the default initial context
			is implied.

@see #getAltNameCtx
@see #setAltName"
      end

      attribute 3078939 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  1219724816191576813L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Use serialVersionUID from JNDI 1.1.1 for interoperability
"
      end
    end

    class 1048987 "CommunicationException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This exception is thrown when the client is 
unable to communicate with the directory or naming service.
The inability to communicate with the service might be a result
of many factors, such as network partitioning, hardware or interface problems,
failures on either the client or server side.
This exception is meant to be used to capture such communication problems.
<p>
Synchronization and serialization issues that apply to NamingException
apply directly here.

@author Rosanna Lee
@author Scott Seligman
@version 1.7 03/12/19
@since 1.3"
      classrelation 2097051 // <generalisation>
	relation 2097051 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2097051 // <generalisation>
	  b parent class_ref 289947 // NamingException
      end

      operation 8458907 "CommunicationException"
	public explicit_return_type ""
	nparams 1
	  param in name "explanation" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of CommunicationException using the
arguments supplied.

@param	explanation	Additional detail about this exception.
@see java.lang.Throwable#getMessage"
      end

      operation 8459035 "CommunicationException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of CommunicationException."
      end

      attribute 3079067 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  3618507780299986611L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Use serialVersionUID from JNDI 1.1.1 for interoperability
"
      end
    end

    class 1049115 "CompositeName"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class represents a composite name -- a sequence of 
component names spanning multiple namespaces.
Each component is a string name from the namespace of a
naming system. If the component comes from a hierarchical
namespace, that component can be further parsed into
its atomic parts by using the CompoundName class.
<p>
The components of a composite name are numbered.  The indexes of a
composite name with N components range from 0 up to, but not including, N.
This range may be written as [0,N).
The most significant component is at index 0.
An empty composite name has no components.
<p> 
<h4>JNDI Composite Name Syntax</h4>
JNDI defines a standard string representation for composite names. This
representation is the concatenation of the components of a composite name
from left to right using the component separator (a forward 
slash character (/)) to separate each component. 
The JNDI syntax defines the following meta characters:
<ul>
<li>escape (backward slash \\),
<li>quote characters  (single (') and double quotes (\")), and
<li>component separator (forward slash character (/)).
</ul>
Any occurrence of a leading quote, an escape preceding any meta character,
an escape at the end of a component, or a component separator character 
in an unquoted component must be preceded by an escape character when 
that component is being composed into a composite name string.
Alternatively, to avoid adding escape characters as described,
the entire component can be quoted using matching single quotes
or matching double quotes. A single quote occurring within a double-quoted
component is not considered a meta character (and need not be escaped),
and vice versa.
<p>
When two composite names are compared, the case of the characters
is significant.
<p> 
A leading component separator (the composite name string begins with
a separator) denotes a leading empty component (a component consisting
of an empty string).
A trailing component separator (the composite name string ends with
a separator) denotes a trailing empty component.
Adjacent component separators denote an empty component.
<p>
<h4>Composite Name Examples</h4>
This table shows examples of some composite names. Each row shows
the string form of a composite name and its corresponding structural form
(<tt>CompositeName</tt>).
<p>
<table border=\"1\" cellpadding=3 width=\"70%\" summary=\"examples showing string form of composite name and its corresponding structural form (CompositeName)\">

<tr>
<th>String Name</th>
<th>CompositeName</th>
</tr>

<tr>
<td>
\"\"
</td>
<td>{} (the empty name == new CompositeName(\"\") == new CompositeName())
</td>
</tr>

<tr>
<td>
\"x\"
</td>
<td>{\"x\"}
</td>
</tr>

<tr>
<td>
\"x/y\"
</td>
<td>{\"x\", \"y\"}</td>
</tr>

<tr>
<td>\"x/\"</td>
<td>{\"x\", \"\"}</td>
</tr>

<tr>
<td>\"/x\"</td>
<td>{\"\", \"x\"}</td>
</tr>

<tr>
<td>\"/\"</td>
<td>{\"\"}</td>
</tr>

<tr>
<td>\"//\"</td>
<td>{\"\", \"\"}</td>
</tr>

<tr><td>\"/x/\"</td>
<td>{\"\", \"x\", \"\"}</td>
</tr>

<tr><td>\"x//y\"</td>
<td>{\"x\", \"\", \"y\"}</td>
</tr>
</table>  
<p>
<h4>Composition Examples</h4>
Here are some composition examples.  The right column shows composing
string composite names while the left column shows composing the
corresponding <tt>CompositeName</tt>s.  Notice that composing the
string forms of two composite names simply involves concatenating
their string forms together.  

<p> <table border=\"1\" cellpadding=3 width=\"70%\" summary=\"composition examples showing string names and composite names\">

<tr>
<th>String Names</th>
<th>CompositeNames</th>
</tr>

<tr>
<td>
\"x/y\"		+ \"/\"	= x/y/
</td>
<td>
{\"x\", \"y\"}	+ {\"\"}	= {\"x\", \"y\", \"\"}
</td>
</tr>

<tr>
<td>
\"\"		+ \"x\"	= \"x\"
</td>
<td>
{}		+ {\"x\"}	= {\"x\"}
</td>
</tr>

<tr>
<td>
\"/\"		+ \"x\"	= \"/x\"
</td>
<td>
{\"\"}		+ {\"x\"} = {\"\", \"x\"}
</td>
</tr>

<tr>
<td>
\"x\"   + \"\"	+ \"\"	= \"x\"
</td>
<td>
{\"x\"} + {}	+ {}	= {\"x\"}
</td>
</tr>

</table>
<p>
<h4>Multithreaded Access</h4>
A <tt>CompositeName</tt> instance is not synchronized against concurrent
multithreaded access. Multiple threads trying to access and modify a
<tt>CompositeName</tt> should lock the object.

@author Rosanna Lee
@author Scott Seligman
@version 1.14 04/05/05
@since 1.3"
      classrelation 2097563 // <realization>
	relation 2097563 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2097563 // <realization>
	  b parent class_ref 289691 // Name
      end

      classrelation 2097691 // impl (<unidirectional association>)
	relation 2097691 --->
	  a role_name "impl" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2097691 // impl (<unidirectional association>)
	  b parent class_ref 1049371 // NameImpl
      end

      operation 8461083 "CompositeName"
	protected explicit_return_type ""
	nparams 1
	  param inout name "comps" type class_ref 144411 // Enumeration
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<String> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new composite name instance using the components
specified by 'comps'. This protected method is intended to be
to be used by subclasses of CompositeName when they override
methods such as clone(), getPrefix(), getSuffix().

@param comps A non-null enumeration containing the components for the new
             composite name. Each element is of class String.
              The enumeration will be consumed to extract its
              elements."
      end

      operation 8461211 "CompositeName"
	public explicit_return_type ""
	nparams 1
	  param in name "n" explicit_type "String"
	nexceptions 1
	  exception class_ref 1049243 // InvalidNameException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new composite name instance by parsing the string n
using the composite name syntax (left-to-right, slash separated).
The composite name syntax is described in detail in the class
description.

@param	n	The non-null string to parse.
@exception InvalidNameException If n has invalid composite name syntax."
      end

      operation 8461339 "CompositeName"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new empty composite name. Such a name returns true
when <code>isEmpty()</code> is invoked on it."
      end

      operation 8461467 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates the string representation of this composite name.
The string representation consists of enumerating in order
each component of the composite name and separating
each component by a forward slash character. Quoting and
escape characters are applied where necessary according to
the JNDI syntax, which is described in the class description.
An empty component is represented by an empty string.

The string representation thus generated can be passed to
the CompositeName constructor to create a new equivalent
composite name.

@return	A non-null string representation of this composite name."
      end

      operation 8461595 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether two composite names are equal.
If obj is null or not a composite name, false is returned.
Two composite names are equal if each component in one is equal
to the corresponding component in the other. This implies
both have the same number of components, and each component's
equals() test against the corresponding component in the other name
returns true.

@param	obj	The possibly null object to compare against.
@return	true if obj is equal to this composite name, false otherwise.
@see #hashCode"
      end

      operation 8461723 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Computes the hash code of this composite name.
The hash code is the sum of the hash codes of individual components
of this composite name.

@return An int representing the hash code of this name.
@see #equals"
      end

      operation 8461851 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this CompositeName with the specified Object for order.  
Returns a
negative integer, zero, or a positive integer as this Name is less
than, equal to, or greater than the given Object.
<p>
If obj is null or not an instance of CompositeName, ClassCastException
is thrown.
<p>
See equals() for what it means for two composite names to be equal.
If two composite names are equal, 0 is returned.
<p>
Ordering of composite names follows the lexicographical rules for
string comparison, with the extension that this applies to all
the components in the composite name. The effect is as if all the
components were lined up in their specified ordered and the
lexicographical rules applied over the two line-ups.
If this composite name is \"lexicographically\" lesser than obj,
a negative number is returned.
If this composite name is \"lexicographically\" greater than obj,
a positive number is returned.
@param obj The non-null object to compare against.

@return  a negative integer, zero, or a positive integer as this Name
		is less than, equal to, or greater than the given Object.
@exception ClassCastException if obj is not a CompositeName."
      end

      operation 8461979 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates a copy of this composite name.
Changes to the components of this composite name won't
affect the new copy and vice versa.

@return A non-null copy of this composite name."
      end

      operation 8462107 "size"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the number of components in this composite name.

@return	The nonnegative number of components in this composite name."
      end

      operation 8462235 "isEmpty"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether this composite name is empty. A composite name
is empty if it has zero components.

@return true if this composite name is empty, false otherwise."
      end

      operation 8462363 "getAll"
	public return_type class_ref 144411 // Enumeration
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the components of this composite name as an enumeration
of strings.
The effects of updates to this composite name on this enumeration
is undefined.

@return	A non-null enumeration of the components of
	this composite name. Each element of the enumeration is of
		class String."
      end

      operation 8462491 "get"
	public explicit_return_type "String"
	nparams 1
	  param in name "posn" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a component of this composite name.

@param	posn	The 0-based index of the component to retrieve.
			Must be in the range [0,size()).
@return The non-null component at index posn.
@exception ArrayIndexOutOfBoundsException if posn is outside the
	specified range."
      end

      operation 8462619 "getPrefix"
	public return_type class_ref 289691 // Name
	nparams 1
	  param in name "posn" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a composite name whose components consist of a prefix of the
components in this composite name. Subsequent changes to
this composite name does not affect the name that is returned.

@param	posn	The 0-based index of the component at which to stop.
			Must be in the range [0,size()].
@return	A composite name consisting of the components at indexes in
		the range [0,posn).
@exception ArrayIndexOutOfBoundsException
		If posn is outside the specified range."
      end

      operation 8462747 "getSuffix"
	public return_type class_ref 289691 // Name
	nparams 1
	  param in name "posn" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a composite name whose components consist of a suffix of the
components in this composite name. Subsequent changes to
this composite name does not affect the name that is returned.

@param	posn	The 0-based index of the component at which to start.
			Must be in the range [0,size()].
@return	A composite name consisting of the components at indexes in
		the range [posn,size()).  If posn is equal to 
	size(), an empty composite name is returned.
@exception ArrayIndexOutOfBoundsException
		If posn is outside the specified range."
      end

      operation 8462875 "startsWith"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "n" type class_ref 289691 // Name
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether a composite name is a prefix of this composite name.
A composite name 'n' is a prefix if it is equal to
getPrefix(n.size())--in other words, this composite name
starts with 'n'. If 'n' is null or not a composite name, false is returned.

@param	n	The possibly null name to check.
@return	true if n is a CompositeName and
	is a prefix of this composite name, false otherwise."
      end

      operation 8463003 "endsWith"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "n" type class_ref 289691 // Name
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether a composite name is a suffix of this composite name.
A composite name 'n' is a suffix if it it is equal to
getSuffix(size()-n.size())--in other words, this
composite name ends with 'n'.
If n is null or not a composite name, false is returned.

@param	n	The possibly null name to check.
@return	true if n is a CompositeName and
	is a suffix of this composite name, false otherwise."
      end

      operation 8463131 "addAll"
	public return_type class_ref 289691 // Name
	nparams 1
	  param inout name "suffix" type class_ref 289691 // Name
	nexceptions 1
	  exception class_ref 1049243 // InvalidNameException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the components of a composite name -- in order -- to the end of
this composite name.

@param suffix	The non-null components to add.
@return The updated CompositeName, not a new one. Cannot be null.
@exception InvalidNameException If suffix is not a composite name."
      end

      operation 8463259 "addAll"
	public return_type class_ref 289691 // Name
	nparams 2
	  param in name "posn" explicit_type "int"
	  param inout name "n" type class_ref 289691 // Name
	nexceptions 1
	  exception class_ref 1049243 // InvalidNameException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the components of a composite name -- in order -- at a specified
position within this composite name.
Components of this composite name at or after the index of the first
new component are shifted up (away from index 0)
to accommodate the new components.

@param n 	The non-null components to add.
@param posn	The index in this name at which to add the new
			components.  Must be in the range [0,size()].
@return The updated CompositeName, not a new one. Cannot be null.
@exception InvalidNameException If n is not a composite name.
@exception ArrayIndexOutOfBoundsException
		If posn is outside the specified range."
      end

      operation 8463387 "add"
	public return_type class_ref 289691 // Name
	nparams 1
	  param in name "comp" explicit_type "String"
	nexceptions 1
	  exception class_ref 1049243 // InvalidNameException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a single component to the end of this composite name.

@param comp	The non-null component to add.
@return The updated CompositeName, not a new one. Cannot be null.
@exception InvalidNameException If adding comp at end of the name
				would violate the name's syntax."
      end

      operation 8463515 "add"
	public return_type class_ref 289691 // Name
	nparams 2
	  param in name "posn" explicit_type "int"
	  param in name "comp" explicit_type "String"
	nexceptions 1
	  exception class_ref 1049243 // InvalidNameException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a single component at a specified position within this
composite name.
Components of this composite name at or after the index of the new
component are shifted up by one (away from index 0) to accommodate
the new component.

@param 	comp	The non-null component to add.
@param	posn	The index at which to add the new component.
			Must be in the range [0,size()].
@return The updated CompositeName, not a new one. Cannot be null.
@exception ArrayIndexOutOfBoundsException
		If posn is outside the specified range.
@exception InvalidNameException If adding comp at the specified position
				would violate the name's syntax."
      end

      operation 8463643 "remove"
	public explicit_return_type "Object"
	nparams 1
	  param in name "posn" explicit_type "int"
	nexceptions 1
	  exception class_ref 1049243 // InvalidNameException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deletes a component from this composite name.
The component of this composite name at position 'posn' is removed,
and components at indices greater than 'posn'
are shifted down (towards index 0) by one.

@param	posn	The index of the component to delete.
			Must be in the range [0,size()).
@return The component removed (a String).
@exception ArrayIndexOutOfBoundsException
		If posn is outside the specified range (includes case where
		composite name is empty).
@exception InvalidNameException If deleting the component
				would violate the name's syntax."
      end

      operation 8463771 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 205339 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Overridden to avoid implementation dependency.
@serialData The number of components (an <tt>int</tt>) followed by
the individual components (each a <tt>String</tt>)."
      end

      operation 8463899 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 201115 // ObjectInputStream
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Overridden to avoid implementation dependency."
      end

      attribute 3079323 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  1667768148915813118L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Use serialVersionUID from JNDI 1.1.1 for interoperability
"
      end
    end

    class 1049243 "InvalidNameException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This exception indicates that the name being specified does
not conform to the naming syntax of a naming system.
This exception is thrown by any of the methods that does name
parsing (such as those in Context, DirContext, CompositeName and CompoundName).
<p>
Synchronization and serialization issues that apply to NamingException
apply directly here.

@author Rosanna Lee
@author Scott Seligman
@version 1.7 03/12/19

@see Context
@see javax.naming.directory.DirContext
@see CompositeName
@see CompoundName
@see NameParser
@since 1.3"
      classrelation 2099099 // <generalisation>
	relation 2099099 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2099099 // <generalisation>
	  b parent class_ref 289947 // NamingException
      end

      operation 8476315 "InvalidNameException"
	public explicit_return_type ""
	nparams 1
	  param in name "explanation" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of InvalidNameException using an
explanation of the problem.
All other fields are initialized to null.
@param explanation	A possibly null message explaining the problem.
@see java.lang.Throwable#getMessage"
      end

      operation 8476443 "InvalidNameException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of InvalidNameException with
all fields set to null."
      end

      attribute 3082139 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -8370672380823801105L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Use serialVersionUID from JNDI 1.1.1 for interoperability
"
      end
    end

    class 1049371 "NameImpl"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The implementation class for CompoundName and CompositeName.
This class is package private.

@author Rosanna Lee
@author Scott Seligman
@author Aravindan Ranganathan
@version 1.9 03/12/19
@since 1.3"
      attribute 3084059 "LEFT_TO_RIGHT"
	class_attribute const_attribute private explicit_type "byte"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 3084187 "RIGHT_TO_LEFT"
	class_attribute const_attribute private explicit_type "byte"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 3084315 "FLAT"
	class_attribute const_attribute private explicit_type "byte"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 2100635 // components (<unidirectional association>)
	relation 2100635 --->
	  a role_name "components" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2100635 // components (<unidirectional association>)
	  b parent class_ref 153883 // Vector
      end

      attribute 3084443 "syntaxDirection"
	private explicit_type "byte"
	init_value "=  LEFT_TO_RIGHT"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 3084571 "syntaxSeparator"
	private explicit_type "String"
	init_value "=  \"/\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 3084699 "syntaxSeparator2"
	private explicit_type "String"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 3084827 "syntaxCaseInsensitive"
	private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 3084955 "syntaxTrimBlanks"
	private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 3085083 "syntaxEscape"
	private explicit_type "String"
	init_value "=  \"\\\\\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 3085211 "syntaxBeginQuote1"
	private explicit_type "String"
	init_value "=  \"\\\"\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 3085339 "syntaxEndQuote1"
	private explicit_type "String"
	init_value "=  \"\\\"\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 3085467 "syntaxBeginQuote2"
	private explicit_type "String"
	init_value "=  \"'\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 3085595 "syntaxEndQuote2"
	private explicit_type "String"
	init_value "=  \"'\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 3085723 "syntaxAvaSeparator"
	private explicit_type "String"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 3085851 "syntaxTypevalSeparator"
	private explicit_type "String"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 3085979 "STYLE_NONE"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " escapingStyle gives the method used at creation time for
 quoting or escaping characters in the name.  It is set to the
 first style of quote or escape encountered if and when the name
 is parsed."
      end

      attribute 3086107 "STYLE_QUOTE1"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 3086235 "STYLE_QUOTE2"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 3086363 "STYLE_ESCAPE"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 3086491 "escapingStyle"
	private explicit_type "int"
	init_value "=  STYLE_NONE"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 8481947 "isA"
	private explicit_return_type "boolean"
	nparams 3
	  param in name "n" explicit_type "String"
	  param in name "i" explicit_type "int"
	  param in name "match" explicit_type "String"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns true if \"match\" is not null, and n contains \"match\" at
 position i."
      end

      operation 8482075 "isMeta"
	private explicit_return_type "boolean"
	nparams 2
	  param in name "n" explicit_type "String"
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8482203 "isSeparator"
	private explicit_return_type "boolean"
	nparams 2
	  param in name "n" explicit_type "String"
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8482331 "skipSeparator"
	private explicit_return_type "int"
	nparams 2
	  param in name "name" explicit_type "String"
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8482459 "extractComp"
	private explicit_return_type "int"
	nparams 4
	  param in name "name" explicit_type "String"
	  param in name "i" explicit_type "int"
	  param in name "len" explicit_type "int"
	  param inout name "comps" type class_ref 153883 // Vector
	nexceptions 1
	  exception class_ref 1049243 // InvalidNameException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8482587 "getBoolean"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param inout name "p" type class_ref 154907 // Properties
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8482715 "toBoolean"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8482843 "recordNamingConvention"
	private explicit_return_type "void"
	nparams 1
	  param inout name "p" type class_ref 154907 // Properties
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8482971 "NameImpl"
	package explicit_return_type ""
	nparams 1
	  param inout name "syntax" type class_ref 154907 // Properties
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8483099 "NameImpl"
	package explicit_return_type ""
	nparams 2
	  param inout name "syntax" type class_ref 154907 // Properties
	  param in name "n" explicit_type "String"
	nexceptions 1
	  exception class_ref 1049243 // InvalidNameException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8483227 "NameImpl"
	package explicit_return_type ""
	nparams 2
	  param inout name "syntax" type class_ref 154907 // Properties
	  param inout name "comps" type class_ref 144411 // Enumeration
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8483355 "stringifyComp"
	private explicit_return_type "String"
	nparams 1
	  param in name "comp" explicit_type "String"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "// Determines whether this component needs any escaping.
private final boolean escapingNeeded(String comp) {
int len = comp.length();
for (int i = 0; i < len; i++) {
if (i == 0) {
if (isA(comp, 0, syntaxBeginQuote1) ||
isA(comp, 0, syntaxBeginQuote2)) {
return (true);
}
}
if (isSeparator(comp, i)) {
return (true);
}
if (isA(comp, i, syntaxEscape)) {
i += syntaxEscape.length();
if (i >= len || isMeta(comp, i)) {
return (true);
}
}
}
return (false);
}"
      end

      operation 8483483 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8483611 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8483739 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "obj" type class_ref 1049371 // NameImpl
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares obj to this NameImpl to determine ordering.
Takes into account syntactic properties such as
elimination of blanks, case-ignore, etc, if relevant.

Note: using syntax of this NameImpl and ignoring
that of comparison target."
      end

      operation 8483867 "size"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8483995 "getAll"
	public return_type class_ref 144411 // Enumeration
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8484123 "get"
	public explicit_return_type "String"
	nparams 1
	  param in name "posn" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8484251 "getPrefix"
	public return_type class_ref 144411 // Enumeration
	nparams 1
	  param in name "posn" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8484379 "getSuffix"
	public return_type class_ref 144411 // Enumeration
	nparams 1
	  param in name "posn" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8484507 "isEmpty"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8484635 "startsWith"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "posn" explicit_type "int"
	  param inout name "prefix" type class_ref 144411 // Enumeration
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8484763 "endsWith"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "posn" explicit_type "int"
	  param inout name "suffix" type class_ref 144411 // Enumeration
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8484891 "addAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "comps" type class_ref 144411 // Enumeration
	nexceptions 1
	  exception class_ref 1049243 // InvalidNameException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8485019 "addAll"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "posn" explicit_type "int"
	  param inout name "comps" type class_ref 144411 // Enumeration
	nexceptions 1
	  exception class_ref 1049243 // InvalidNameException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8485147 "add"
	public explicit_return_type "void"
	nparams 1
	  param in name "comp" explicit_type "String"
	nexceptions 1
	  exception class_ref 1049243 // InvalidNameException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8485275 "add"
	public explicit_return_type "void"
	nparams 2
	  param in name "posn" explicit_type "int"
	  param in name "comp" explicit_type "String"
	nexceptions 1
	  exception class_ref 1049243 // InvalidNameException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8485403 "remove"
	public explicit_return_type "Object"
	nparams 1
	  param in name "posn" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8485531 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1049499 "CompoundName"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class represents a compound name -- a name from
a hierarchical name space.  
Each component in a compound name is an atomic name.
<p>
The components of a compound name are numbered.  The indexes of a
compound name with N components range from 0 up to, but not including, N.
This range may be written as [0,N).
The most significant component is at index 0.
An empty compound name has no components.
<p> 
<h4>Compound Name Syntax</h4>
The syntax of a compound name is specified using a set of properties:
<dl>
 <dt>jndi.syntax.direction
 <dd>Direction for parsing (\"right_to_left\", \"left_to_right\", \"flat\"). 
     If unspecified, defaults to \"flat\", which means the namespace is flat
     with no hierarchical structure.

 <dt>jndi.syntax.separator
 <dd>Separator between atomic name components.  
     Required unless direction is \"flat\".

 <dt>jndi.syntax.ignorecase
 <dd>If present, \"true\" means ignore the case when comparing name 
     components. If its value is not \"true\", or if the property is not
     present, case is considered when comparing name components.

 <dt>jndi.syntax.escape
 <dd>If present, specifies the escape string for overriding separator, 
     escapes and quotes.

 <dt>jndi.syntax.beginquote
 <dd>If present, specifies the string delimiting start of a quoted string.

 <dt>jndi.syntax.endquote
 <dd>String delimiting end of quoted string.
     If present, specifies the string delimiting the end of a quoted string.
	If not present, use syntax.beginquote as end quote.
 <dt>jndi.syntax.beginquote2
 <dd>Alternative set of begin/end quotes.

 <dt>jndi.syntax.endquote2
 <dd>Alternative set of begin/end quotes.

 <dt>jndi.syntax.trimblanks
 <dd>If present, \"true\" means trim any leading and trailing whitespaces 
     in a name component for comparison purposes. If its value is not
     \"true\", or if the property is not present, blanks are significant.
 <dt>jndi.syntax.separator.ava
 <dd>If present, specifies the string that separates 
     attribute-value-assertions when specifying multiple attribute/value
     pairs. (e.g. \",\"  in age=65,gender=male).
 <dt>jndi.syntax.separator.typeval
 <dd>If present, specifies the string that separators attribute
		from value (e.g. \"=\" in \"age=65\")
</dl>
These properties are interpreted according to the following rules:
<ol>
<li>
In a string without quotes or escapes, any instance of the 
separator delimits two atomic names. Each atomic name is referred
to as a <em>component</em>.
<li>
A separator, quote or escape is escaped if preceded immediately 
(on the left) by the escape.
<li>
If there are two sets of quotes, a specific begin-quote must be matched
by its corresponding end-quote.
<li>
A non-escaped begin-quote which precedes a component must be
matched by a non-escaped end-quote at the end of the component.
A component thus quoted is referred to as a 
<em>quoted component</em>. It is parsed by
removing the being- and end- quotes, and by treating the intervening
characters as ordinary characters unless one of the rules involving
quoted components listed below applies.
<li>
Quotes embedded in non-quoted components are treated as ordinary strings
and need not be matched.
<li>
A separator that is escaped or appears between non-escaped 
quotes is treated as an ordinary string and not a separator.
<li>
An escape string within a quoted component acts as an escape only when
followed by the corresponding end-quote string.
This can be used to embed an escaped quote within a quoted component.
<li>
An escaped escape string is not treated as an escape string.
<li>
An escape string that does not precede a meta string (quotes or separator)
and is not at the end of a component is treated as an ordinary string.
<li>
A leading separator (the compound name string begins with
a separator) denotes a leading empty atomic component (consisting
of an empty string).
A trailing separator (the compound name string ends with
a separator) denotes a trailing empty atomic component.
Adjacent separators denote an empty atomic component.
</ol>
<p>
The string form of the compound name follows the syntax described above.
When the components of the compound name are turned into their
string representation, the reserved syntax rules described above are
applied (e.g. embedded separators are escaped or quoted)
so that when the same string is parsed, it will yield the same components
of the original compound name.
<p>
<h4>Multithreaded Access</h4>
A <tt>CompoundName</tt> instance is not synchronized against concurrent
multithreaded access. Multiple threads trying to access and modify a
<tt>CompoundName</tt> should lock the object.

@author Rosanna Lee
@author Scott Seligman
@version 1.11 04/05/05
@since 1.3"
      classrelation 2097819 // <realization>
	relation 2097819 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2097819 // <realization>
	  b parent class_ref 289691 // Name
      end

      classrelation 2097947 // impl (<unidirectional association>)
	relation 2097947 --->
	  a role_name "impl" protected
	    comment "
Implementation of this compound name.
This field is initialized by the constructors and cannot be null.
It should be treated as a read-only variable by subclasses.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2097947 // impl (<unidirectional association>)
	  b parent class_ref 1049371 // NameImpl
      end

      classrelation 2098075 // mySyntax (<unidirectional association>)
	relation 2098075 --->
	  a role_name "mySyntax" protected
	    comment "
Syntax properties for this compound name.
This field is initialized by the constructors and cannot be null.
It should be treated as a read-only variable by subclasses.
Any necessary changes to mySyntax should be made within constructors
and not after the compound name has been instantiated.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2098075 // mySyntax (<unidirectional association>)
	  b parent class_ref 154907 // Properties
      end

      operation 8464027 "CompoundName"
	protected explicit_return_type ""
	nparams 2
	  param inout name "comps" type class_ref 144411 // Enumeration
	  param inout name "syntax" type class_ref 154907 // Properties
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<String> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new compound name instance using the components
specified in comps and syntax. This protected method is intended to be
to be used by subclasses of CompoundName when they override
methods such as clone(), getPrefix(), getSuffix().

@param comps  A non-null enumeration of the components to add.
  Each element of the enumeration is of class String.
              The enumeration will be consumed to extract its
              elements. 
@param syntax	A non-null properties that specify the syntax of
			this compound name. See class description for
			contents of properties."
      end

      operation 8464155 "CompoundName"
	public explicit_return_type ""
	nparams 2
	  param in name "n" explicit_type "String"
	  param inout name "syntax" type class_ref 154907 // Properties
	nexceptions 1
	  exception class_ref 1049243 // InvalidNameException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new compound name instance by parsing the string n
using the syntax specified by the syntax properties supplied.

@param	n	The non-null string to parse.
@param syntax	A non-null list of properties that specify the syntax of
			this compound name.  See class description for
			contents of properties.
@exception	InvalidNameException If 'n' violates the syntax specified
			by <code>syntax</code>."
      end

      operation 8464283 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates the string representation of this compound name, using
the syntax rules of the compound name. The syntax rules
are described in the class description.
An empty component is represented by an empty string.

The string representation thus generated can be passed to
the CompoundName constructor with the same syntax properties
to create a new equivalent compound name.

@return A non-null string representation of this compound name."
      end

      operation 8464411 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether obj is syntactically equal to this compound name.
If obj is null or not a CompoundName, false is returned.
Two compound names are equal if each component in one is \"equal\"
to the corresponding component in the other. 
<p>
Equality is also defined in terms of the syntax of this compound name.
The default implementation of CompoundName uses the syntax properties
jndi.syntax.ignorecase and jndi.syntax.trimblanks when comparing
two components for equality.  If case is ignored, two strings
with the same sequence of characters but with different cases
are considered equal. If blanks are being trimmed, leading and trailing
blanks are ignored for the purpose of the comparison.
<p>
Both compound names must have the same number of components.
<p>
Implementation note: Currently the syntax properties of the two compound
names are not compared for equality. They might be in the future.

@param	obj	The possibly null object to compare against.
@return	true if obj is equal to this compound name, false otherwise.
@see #compareTo(java.lang.Object obj)"
      end

      operation 8464539 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Computes the hash code of this compound name.
The hash code is the sum of the hash codes of the \"canonicalized\" 
forms of individual components of this compound name.
Each component is \"canonicalized\" according to the 
compound name's syntax before its hash code is computed.
For a case-insensitive name, for example, the uppercased form of 
a name has the same hash code as its lowercased equivalent.

@return An int representing the hash code of this name."
      end

      operation 8464667 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a copy of this compound name.
Changes to the components of this compound name won't
affect the new copy and vice versa.
The clone and this compound name share the same syntax.

@return	A non-null copy of this compound name."
      end

      operation 8464795 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this CompoundName with the specified Object for order.  
Returns a
negative integer, zero, or a positive integer as this Name is less
than, equal to, or greater than the given Object. 
<p>
If obj is null or not an instance of CompoundName, ClassCastException
is thrown.
<p>
See equals() for what it means for two compound names to be equal.
If two compound names are equal, 0 is returned.
<p>
Ordering of compound names depend on the syntax of the compound name.
By default, they follow lexicographical rules for string comparison
with the extension that this applies to all the components in the
compound name and that comparison of individual components is
affected by the jndi.syntax.ignorecase and jndi.syntax.trimblanks
properties, identical to how they affect equals().
If this compound name is \"lexicographically\" lesser than obj,
a negative number is returned.
If this compound name is \"lexicographically\" greater than obj,
a positive number is returned.
<p>
Implementation note: Currently the syntax properties of the two compound
names are not compared when checking order. They might be in the future.
@param	obj	The non-null object to compare against.
@return  a negative integer, zero, or a positive integer as this Name
		is less than, equal to, or greater than the given Object.
@exception ClassCastException if obj is not a CompoundName.
@see #equals(java.lang.Object)"
      end

      operation 8464923 "size"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the number of components in this compound name.

@return The nonnegative number of components in this compound name."
      end

      operation 8465051 "isEmpty"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether this compound name is empty.
A compound name is empty if it has zero components.

@return true if this compound name is empty, false otherwise."
      end

      operation 8465179 "getAll"
	public return_type class_ref 144411 // Enumeration
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the components of this compound name as an enumeration
of strings.
The effects of updates to this compound name on this enumeration
is undefined.

@return	A non-null enumeration of the components of this
compound name. Each element of the enumeration is of class String."
      end

      operation 8465307 "get"
	public explicit_return_type "String"
	nparams 1
	  param in name "posn" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a component of this compound name.

@param	posn	The 0-based index of the component to retrieve.
			Must be in the range [0,size()).
@return The component at index posn.
@exception ArrayIndexOutOfBoundsException if posn is outside the
	specified range."
      end

      operation 8465435 "getPrefix"
	public return_type class_ref 289691 // Name
	nparams 1
	  param in name "posn" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a compound name whose components consist of a prefix of the
components in this compound name.
The result and this compound name share the same syntax.
Subsequent changes to
this compound name does not affect the name that is returned and
vice versa.

@param	posn	The 0-based index of the component at which to stop.
			Must be in the range [0,size()].
@return	A compound name consisting of the components at indexes in
		the range [0,posn).
@exception ArrayIndexOutOfBoundsException
		If posn is outside the specified range."
      end

      operation 8465563 "getSuffix"
	public return_type class_ref 289691 // Name
	nparams 1
	  param in name "posn" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a compound name whose components consist of a suffix of the
components in this compound name.
The result and this compound name share the same syntax.
Subsequent changes to
this compound name does not affect the name that is returned.

@param	posn	The 0-based index of the component at which to start.
			Must be in the range [0,size()].
@return	A compound name consisting of the components at indexes in
		the range [posn,size()).  If posn is equal to 
	size(), an empty compound name is returned.
@exception ArrayIndexOutOfBoundsException
		If posn is outside the specified range."
      end

      operation 8465691 "startsWith"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "n" type class_ref 289691 // Name
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether a compound name is a prefix of this compound name.
A compound name 'n' is a prefix if it is equal to 
getPrefix(n.size())--in other words, this compound name
starts with 'n'.
If n is null or not a compound name, false is returned.
<p>
Implementation note: Currently the syntax properties of n
 are not used when doing the comparison. They might be in the future.
@param	n	The possibly null compound name to check.
@return	true if n is a CompoundName and
		is a prefix of this compound name, false otherwise."
      end

      operation 8465819 "endsWith"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "n" type class_ref 289691 // Name
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether a compound name is a suffix of this compound name.
A compound name 'n' is a suffix if it it is equal to
getSuffix(size()-n.size())--in other words, this
compound name ends with 'n'.
If n is null or not a compound name, false is returned.
<p>
Implementation note: Currently the syntax properties of n
 are not used when doing the comparison. They might be in the future.
@param	n	The possibly null compound name to check.
@return	true if n is a CompoundName and
	is a suffix of this compound name, false otherwise."
      end

      operation 8465947 "addAll"
	public return_type class_ref 289691 // Name
	nparams 1
	  param inout name "suffix" type class_ref 289691 // Name
	nexceptions 1
	  exception class_ref 1049243 // InvalidNameException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the components of a compound name -- in order -- to the end of
this compound name.
<p>
Implementation note: Currently the syntax properties of suffix
 is not used or checked. They might be in the future.
@param suffix	The non-null components to add.
@return The updated CompoundName, not a new one. Cannot be null.
@exception InvalidNameException If suffix is not a compound name,
		   or if the addition of the components violates the syntax
		   of this compound name (e.g. exceeding number of components)."
      end

      operation 8466075 "addAll"
	public return_type class_ref 289691 // Name
	nparams 2
	  param in name "posn" explicit_type "int"
	  param inout name "n" type class_ref 289691 // Name
	nexceptions 1
	  exception class_ref 1049243 // InvalidNameException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the components of a compound name -- in order -- at a specified
position within this compound name.
Components of this compound name at or after the index of the first
new component are shifted up (away from index 0)
to accommodate the new components.
<p>
Implementation note: Currently the syntax properties of suffix
 is not used or checked. They might be in the future.

@param n 	The non-null components to add.
@param posn	The index in this name at which to add the new
			components.  Must be in the range [0,size()].
@return The updated CompoundName, not a new one. Cannot be null.
@exception ArrayIndexOutOfBoundsException
		If posn is outside the specified range.
@exception InvalidNameException If n is not a compound name,
		   or if the addition of the components violates the syntax
		   of this compound name (e.g. exceeding number of components)."
      end

      operation 8466203 "add"
	public return_type class_ref 289691 // Name
	nparams 1
	  param in name "comp" explicit_type "String"
	nexceptions 1
	  exception class_ref 1049243 // InvalidNameException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a single component to the end of this compound name.

@param comp	The non-null component to add.
@return The updated CompoundName, not a new one. Cannot be null.
@exception InvalidNameException If adding comp at end of the name
				would violate the compound name's syntax."
      end

      operation 8466331 "add"
	public return_type class_ref 289691 // Name
	nparams 2
	  param in name "posn" explicit_type "int"
	  param in name "comp" explicit_type "String"
	nexceptions 1
	  exception class_ref 1049243 // InvalidNameException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a single component at a specified position within this
compound name.
Components of this compound name at or after the index of the new
component are shifted up by one (away from index 0)
to accommodate the new component.

@param 	comp	The non-null component to add.
@param	posn	The index at which to add the new component.
			Must be in the range [0,size()].
@exception ArrayIndexOutOfBoundsException
		If posn is outside the specified range.
@return The updated CompoundName, not a new one. Cannot be null.
@exception InvalidNameException If adding comp at the specified position
				would violate the compound name's syntax."
      end

      operation 8466459 "remove"
	public explicit_return_type "Object"
	nparams 1
	  param in name "posn" explicit_type "int"
	nexceptions 1
	  exception class_ref 1049243 // InvalidNameException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deletes a component from this compound name.
The component of this compound name at position 'posn' is removed,
and components at indices greater than 'posn'
are shifted down (towards index 0) by one.

@param	posn	The index of the component to delete.
			Must be in the range [0,size()).
@return The component removed (a String).
@exception ArrayIndexOutOfBoundsException
		If posn is outside the specified range (includes case where
		compound name is empty).
@exception InvalidNameException If deleting the component
				would violate the compound name's syntax."
      end

      operation 8466587 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 205339 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Overridden to avoid implementation dependency.
@serialData The syntax <tt>Properties</tt>, followed by
the number of components (an <tt>int</tt>), and the individual
components (each a <tt>String</tt>)."
      end

      operation 8466715 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 201115 // ObjectInputStream
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Overridden to avoid implementation dependency."
      end

      attribute 3079451 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  3513100557083972036L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Use serialVersionUID from JNDI 1.1.1 for interoperability
"
      end
    end

    class 1049627 "ConfigurationException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This exception is thrown when there is a configuration problem.
This can arise when installation of a provider was
not done correctly, or if there are configuration problems with the
server, or if configuration information required to access
the provider or service is malformed or missing.
For example, a request to use SSL as the security protocol when
the service provider software was not configured with the SSL
component would cause such an exception. Another example is
if the provider requires that a URL be specified as one of the
environment properties but the client failed to provide it.
<p>
Synchronization and serialization issues that apply to NamingException
apply directly here.

@author Rosanna Lee
@author Scott Seligman
@version 1.7 03/12/19
@since 1.3"
      classrelation 2098203 // <generalisation>
	relation 2098203 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2098203 // <generalisation>
	  b parent class_ref 289947 // NamingException
      end

      operation 8466843 "ConfigurationException"
	public explicit_return_type ""
	nparams 1
	  param in name "explanation" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of ConfigurationException using an
explanation. All other fields default to null.

@param	explanation	A possibly null string containing
				additional detail about this exception.
@see java.lang.Throwable#getMessage"
      end

      operation 8466971 "ConfigurationException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of ConfigurationException with
all name resolution fields and explanation initialized to null."
      end

      attribute 3079579 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -2535156726228855704L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Use serialVersionUID from JNDI 1.1.1 for interoperability
"
      end
    end

    class 1049755 "NameParser"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This interface is used for parsing names from a hierarchical
namespace.  The NameParser contains knowledge of the syntactic
information (like left-to-right orientation, name separator, etc.)
needed to parse names.

The equals() method, when used to compare two NameParsers, returns
true if and only if they serve the same namespace.

@author Rosanna Lee
@author Scott Seligman
@version 1.8 04/05/05

@see CompoundName
@see Name
@since 1.3"
      operation 8486299 "parse"
	public return_type class_ref 289691 // Name
	nparams 1
	  param in name "name" explicit_type "String"
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parses a name into its components.

@param name The non-null string name to parse.
@return A non-null parsed form of the name using the naming convention
of this parser.
@exception InvalidNameException If name does not conform to
	syntax defined for the namespace.
@exception NamingException If a naming exception was encountered."
      end
    end

    class 1049883 "ContextNotEmptyException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This exception is thrown when attempting to destroy a context that
is not empty.
<p>
If the program wants to handle this exception in particular, it
should catch ContextNotEmptyException explicitly before attempting to
catch NamingException. For example, after catching ContextNotEmptyException, 
the program might try to remove the contents of the context before
reattempting the destroy.
<p>
Synchronization and serialization issues that apply to NamingException
apply directly here.

@author Rosanna Lee
@author Scott Seligman
@version 1.7 03/12/19

@see Context#destroySubcontext
@since 1.3"
      classrelation 2098331 // <generalisation>
	relation 2098331 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2098331 // <generalisation>
	  b parent class_ref 289947 // NamingException
      end

      operation 8470811 "ContextNotEmptyException"
	public explicit_return_type ""
	nparams 1
	  param in name "explanation" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of ContextNotEmptyException using an
explanation. All other fields default to null.

@param	explanation	Possibly null string containing
additional detail about this exception.
@see java.lang.Throwable#getMessage"
      end

      operation 8470939 "ContextNotEmptyException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of ContextNotEmptyException with
all name resolution fields and explanation initialized to null."
      end

      attribute 3081627 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  1090963683348219877L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Use serialVersionUID from JNDI 1.1.1 for interoperability
"
      end
    end

    class 1050011 "InitialContext"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class is the starting context for performing naming operations.
<p>
All naming operations are relative to a context.
The initial context implements the Context interface and
provides the starting point for resolution of names.
<p>
<a name=ENVIRONMENT></a>
When the initial context is constructed, its environment
is initialized with properties defined in the environment parameter
passed to the constructor, and in any
<a href=Context.html#RESOURCEFILES>application resource files</a>.
In addition, a small number of standard JNDI properties may
be specified as system properties or as applet parameters
(through the use of {@link Context#APPLET}).
These special properties are listed in the field detail sections of the
<a href=Context.html#field_detail><tt>Context</tt></a> and
<a href=ldap/LdapContext.html#field_detail><tt>LdapContext</tt></a>
interface documentation.
<p>
JNDI determines each property's value by merging
the values from the following two sources, in order:
<ol>
<li>
The first occurrence of the property from the constructor's
environment parameter and (for appropriate properties) the applet
parameters and system properties.
<li>
The application resource files (<tt>jndi.properties</tt>).
</ol>
For each property found in both of these two sources, or in
more than one application resource file, the property's value
is determined as follows.  If the property is
one of the standard JNDI properties that specify a list of JNDI
factories (see <a href=Context.html#LISTPROPS><tt>Context</tt></a>),
all of the values are
concatenated into a single colon-separated list.  For other
properties, only the first value found is used.

<p>
The initial context implementation is determined at runtime.
The default policy uses the environment property
\"{@link Context#INITIAL_CONTEXT_FACTORY java.naming.factory.initial}\",
which contains the class name of the initial context factory.
An exception to this policy is made when resolving URL strings, as described
below.
<p>
When a URL string (a <tt>String</tt> of the form
<em>scheme_id:rest_of_name</em>) is passed as a name parameter to
any method, a URL context factory for handling that scheme is
located and used to resolve the URL.  If no such factory is found,
the initial context specified by
<tt>\"java.naming.factory.initial\"</tt> is used.  Similarly, when a
<tt>CompositeName</tt> object whose first component is a URL string is
passed as a name parameter to any method, a URL context factory is
located and used to resolve the first name component.
See {@link NamingManager#getURLContext
<tt>NamingManager.getURLContext()</tt>} for a description of how URL
context factories are located.
<p>
This default policy of locating the initial context and URL context
factories may be overridden
by calling
<tt>NamingManager.setInitialContextFactoryBuilder()</tt>.
<p>
NoInitialContextException is thrown when an initial context cannot
be instantiated. This exception can be thrown during any interaction 
with the InitialContext, not only when the InitialContext is constructed.
For example, the implementation of the initial context might lazily
retrieve the context only when actual methods are invoked on it.
The application should not have any dependency on when the existence
of an initial context is determined.
<p>
When the environment property \"java.naming.factory.initial\" is
non-null, the InitialContext constructor will attempt to create the
initial context specified therein. At that time, the initial context factory
involved might throw an exception if a problem is encountered. However,
it is provider implementation-dependent when it verifies and indicates
to the users of the initial context any environment property- or
connection- related problems. It can do so lazily--delaying until
an operation is performed on the context, or eagerly, at the time
the context is constructed.
<p>
An InitialContext instance is not synchronized against concurrent
access by multiple threads. Multiple threads each manipulating a
different InitialContext instance need not synchronize.
Threads that need to access a single InitialContext instance
concurrently should synchronize amongst themselves and provide the
necessary locking.

@author Rosanna Lee
@author Scott Seligman
@version 1.13 04/07/16

@see Context
@see NamingManager#setInitialContextFactoryBuilder
	NamingManager.setInitialContextFactoryBuilder
@since JNDI 1.1 / Java 2 Platform, Standard Edition, v 1.3"
      classrelation 2098459 // <realization>
	relation 2098459 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2098459 // <realization>
	  b parent class_ref 289819 // Context
      end

      classrelation 2098587 // myProps (<unidirectional association>)
	relation 2098587 --->
	  a role_name "myProps" init_value "=  null" protected
	    comment "
The environment associated with this InitialContext.
It is initialized to null and is updated by the constructor
that accepts an environment or by the <tt>init()</tt> method.
@see #addToEnvironment
@see #removeFromEnvironment
@see #getEnvironment

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Object,Object> ${name}${value};
"
	    classrelation_ref 2098587 // myProps (<unidirectional association>)
	  b parent class_ref 139035 // Hashtable
      end

      classrelation 2098715 // defaultInitCtx (<unidirectional association>)
	relation 2098715 --->
	  a role_name "defaultInitCtx" init_value "=  null" protected
	    comment "
Field holding the result of calling NamingManager.getInitialContext().
It is set by getDefaultInitCtx() the first time getDefaultInitCtx()
is called. Subsequent invocations of getDefaultInitCtx() return
the value of defaultInitCtx.
@see #getDefaultInitCtx

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2098715 // defaultInitCtx (<unidirectional association>)
	  b parent class_ref 289819 // Context
      end

      attribute 3081755 "gotDefault"
	protected explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Field indicating whether the initial context has been obtained
by calling NamingManager.getInitialContext().
If true, its result is in <code>defaultInitCtx</code>.
"
      end

      operation 8471067 "InitialContext"
	protected explicit_return_type ""
	nparams 1
	  param inout name "lazy" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an initial context with the option of not
initializing it.  This may be used by a constructor in
a subclass when the value of the environment parameter
is not yet known at the time the <tt>InitialContext</tt>
constructor is called.  The subclass's constructor will
call this constructor, compute the value of the environment,
and then call <tt>init()</tt> before returning.

@param lazy
		true means do not initialize the initial context; false
		is equivalent to calling <tt>new InitialContext()</tt>
@throws	NamingException if a naming exception is encountered

@see #init(Hashtable)
@since 1.3"
      end

      operation 8471195 "InitialContext"
	public explicit_return_type ""
	nparams 0
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an initial context.
No environment properties are supplied.
Equivalent to <tt>new InitialContext(null)</tt>.

@throws	NamingException if a naming exception is encountered

@see #InitialContext(Hashtable)"
      end

      operation 8471323 "InitialContext"
	public explicit_return_type ""
	nparams 1
	  param inout name "environment" type class_ref 139035 // Hashtable
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?,?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an initial context using the supplied environment.
Environment properties are discussed in the class description.

<p> This constructor will not modify <tt>environment</tt>
or save a reference to it, but may save a clone.

@param environment
		environment used to create the initial context.
		Null indicates an empty environment.

@throws	NamingException if a naming exception is encountered"
      end

      operation 8471451 "init"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "environment" type class_ref 139035 // Hashtable
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?,?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes the initial context using the supplied environment.
Environment properties are discussed in the class description.

<p> This method will modify <tt>environment</tt> and save
a reference to it.  The caller may no longer modify it.

@param environment
		environment used to create the initial context.
		Null indicates an empty environment.

@throws	NamingException if a naming exception is encountered

@see #InitialContext(boolean)
@since 1.3"
      end

      operation 8471579 "getURLScheme"
	class_operation private explicit_return_type "String"
	nparams 1
	  param in name "str" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8471707 "getDefaultInitCtx"
	protected return_type class_ref 289819 // Context
	nparams 0
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the initial context by calling 
<code>NamingManager.getInitialContext()</code>
and cache it in defaultInitCtx.
Set <code>gotDefault</code> so that we know we've tried this before.
@return The non-null cached initial context.
@exception NoInitialContextException If cannot find an initial context.
@exception NamingException If a naming exception was encountered."
      end

      operation 8471835 "getURLOrDefaultInitCtx"
	protected return_type class_ref 289819 // Context
	nparams 1
	  param in name "name" explicit_type "String"
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a context for resolving the string name <code>name</code>.
If <code>name</code> name is a URL string, then attempt
to find a URL context for it. If none is found, or if
<code>name</code> is not a URL string, then return
<code>getDefaultInitCtx()</code>.
<p>
See getURLOrDefaultInitCtx(Name) for description
of how a subclass should use this method.
@param name The non-null name for which to get the context.
@return A URL context for <code>name</code> or the cached 
	       initial context. The result cannot be null.
@exception NoInitialContextException If cannot find an initial context.
@exception NamingException In a naming exception is encountered.
@see javax.naming.spi.NamingManager#getURLContext"
      end

      operation 8471963 "getURLOrDefaultInitCtx"
	protected return_type class_ref 289819 // Context
	nparams 1
	  param inout name "name" type class_ref 289691 // Name
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a context for resolving <code>name</code>.
If the first component of <code>name</code> name is a URL string,
then attempt to find a URL context for it. If none is found, or if
the first component of <code>name</code> is not a URL string, 
then return <code>getDefaultInitCtx()</code>.
<p>
When creating a subclass of InitialContext, use this method as 
follows.
Define a new method that uses this method to get an initial
context of the desired subclass.
<p><blockquote><pre>
protected XXXContext getURLOrDefaultInitXXXCtx(Name name) 
throws NamingException {
 Context answer = getURLOrDefaultInitCtx(name);
 if (!(answer instanceof XXXContext)) {
   if (answer == null) {
	    throw new NoInitialContextException();
   } else {
	    throw new NotContextException(\"Not an XXXContext\");
   }
	}
	return (XXXContext)answer;
}
</pre></blockquote>
When providing implementations for the new methods in the subclass,
use this newly defined method to get the initial context.
<p><blockquote><pre>
public Object XXXMethod1(Name name, ...) {
	throws NamingException {
   return getURLOrDefaultInitXXXCtx(name).XXXMethod1(name, ...);
}
</pre></blockquote>

@param name The non-null name for which to get the context.
@return A URL context for <code>name</code> or the cached 
	       initial context. The result cannot be null.
@exception NoInitialContextException If cannot find an initial context.
@exception NamingException In a naming exception is encountered.

@see javax.naming.spi.NamingManager#getURLContext"
      end

      operation 8472091 "lookup"
	public explicit_return_type "Object"
	nparams 1
	  param in name "name" explicit_type "String"
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Context methods
 Most Javadoc is deferred to the Context interface."
      end

      operation 8472219 "lookup"
	public explicit_return_type "Object"
	nparams 1
	  param inout name "name" type class_ref 289691 // Name
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8472347 "bind"
	public explicit_return_type "void"
	nparams 2
	  param in name "name" explicit_type "String"
	  param inout name "obj" explicit_type "Object"
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8472475 "bind"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 289691 // Name
	  param inout name "obj" explicit_type "Object"
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8472603 "rebind"
	public explicit_return_type "void"
	nparams 2
	  param in name "name" explicit_type "String"
	  param inout name "obj" explicit_type "Object"
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8472731 "rebind"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 289691 // Name
	  param inout name "obj" explicit_type "Object"
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8472859 "unbind"
	public explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "String"
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8472987 "unbind"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 289691 // Name
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8473115 "rename"
	public explicit_return_type "void"
	nparams 2
	  param in name "oldName" explicit_type "String"
	  param in name "newName" explicit_type "String"
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8473243 "rename"
	public explicit_return_type "void"
	nparams 2
	  param inout name "oldName" type class_ref 289691 // Name
	  param inout name "newName" type class_ref 289691 // Name
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8473371 "list"
	public return_type class_ref 565659 // NamingEnumeration
	nparams 1
	  param in name "name" explicit_type "String"
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<NameClassPair> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8473499 "list"
	public return_type class_ref 565659 // NamingEnumeration
	nparams 1
	  param inout name "name" type class_ref 289691 // Name
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<NameClassPair> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8473627 "listBindings"
	public return_type class_ref 565659 // NamingEnumeration
	nparams 1
	  param in name "name" explicit_type "String"
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Binding> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8473755 "listBindings"
	public return_type class_ref 565659 // NamingEnumeration
	nparams 1
	  param inout name "name" type class_ref 289691 // Name
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Binding> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8473883 "destroySubcontext"
	public explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "String"
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8474011 "destroySubcontext"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 289691 // Name
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8474139 "createSubcontext"
	public return_type class_ref 289819 // Context
	nparams 1
	  param in name "name" explicit_type "String"
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8474267 "createSubcontext"
	public return_type class_ref 289819 // Context
	nparams 1
	  param inout name "name" type class_ref 289691 // Name
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8474395 "lookupLink"
	public explicit_return_type "Object"
	nparams 1
	  param in name "name" explicit_type "String"
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8474523 "lookupLink"
	public explicit_return_type "Object"
	nparams 1
	  param inout name "name" type class_ref 289691 // Name
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8474651 "getNameParser"
	public return_type class_ref 1049755 // NameParser
	nparams 1
	  param in name "name" explicit_type "String"
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8474779 "getNameParser"
	public return_type class_ref 1049755 // NameParser
	nparams 1
	  param inout name "name" type class_ref 289691 // Name
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8474907 "composeName"
	public explicit_return_type "String"
	nparams 2
	  param in name "name" explicit_type "String"
	  param in name "prefix" explicit_type "String"
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Composes the name of this context with a name relative to
this context.
Since an initial context may never be named relative
to any context other than itself, the value of the
<tt>prefix</tt> parameter must be an empty name (<tt>\"\"</tt>)."
      end

      operation 8475035 "composeName"
	public return_type class_ref 289691 // Name
	nparams 2
	  param inout name "name" type class_ref 289691 // Name
	  param inout name "prefix" type class_ref 289691 // Name
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Composes the name of this context with a name relative to
this context.
Since an initial context may never be named relative
to any context other than itself, the value of the
<tt>prefix</tt> parameter must be an empty name."
      end

      operation 8475163 "addToEnvironment"
	public explicit_return_type "Object"
	nparams 2
	  param in name "propName" explicit_type "String"
	  param inout name "propVal" explicit_type "Object"
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8475291 "removeFromEnvironment"
	public explicit_return_type "Object"
	nparams 1
	  param in name "propName" explicit_type "String"
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8475419 "getEnvironment"
	public return_type class_ref 139035 // Hashtable
	nparams 0
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?,?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8475547 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8475675 "getNameInNamespace"
	public explicit_return_type "String"
	nparams 0
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1050139 "InsufficientResourcesException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This exception is thrown when resources are not available to complete
the requested operation. This might due to a lack of resources on
the server or on the client. There are no restrictions to resource types,
as different services might make use of different resources. Such
restrictions might be due to physical limits and/or adminstrative quotas.
Examples of limited resources are internal buffers, memory, network bandwidth.
<p>
InsufficientResourcesException is different from LimitExceededException in that
the latter is due to user/system specified limits. See LimitExceededException
for details.
<p>
Synchronization and serialization issues that apply to NamingException
apply directly here.

@author Rosanna Lee
@author Scott Seligman
@version 1.7 03/12/19
@since 1.3"
      classrelation 2098843 // <generalisation>
	relation 2098843 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2098843 // <generalisation>
	  b parent class_ref 289947 // NamingException
      end

      operation 8475803 "InsufficientResourcesException"
	public explicit_return_type ""
	nparams 1
	  param in name "explanation" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of InsufficientResourcesException using an
explanation. All other fields default to null.

@param	explanation	Possibly null additional detail about this exception.
@see java.lang.Throwable#getMessage"
      end

      operation 8475931 "InsufficientResourcesException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of InsufficientResourcesException with
all name resolution fields and explanation initialized to null."
      end

      attribute 3081883 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  6227672693037844532L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Use serialVersionUID from JNDI 1.1.1 for interoperability
"
      end
    end

    class 1050267 "InterruptedNamingException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This exception is thrown when the naming operation
being invoked has been interrupted. For example, an application
might interrupt a thread that is performing a search. If the
search supports being interrupted, it will throw
InterruptedNamingException. Whether an operation is interruptible
and when depends on its implementation (as provided by the
service providers). Different implementations have different ways
of protecting their resources and objects from being damaged
due to unexpected interrupts.
<p>
Synchronization and serialization issues that apply to NamingException
apply directly here.

@author Rosanna Lee
@author Scott Seligman
@version 1.8 03/12/19

@see Context
@see javax.naming.directory.DirContext
@see java.lang.Thread#interrupt
@see java.lang.InterruptedException
@since 1.3"
      classrelation 2098971 // <generalisation>
	relation 2098971 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2098971 // <generalisation>
	  b parent class_ref 289947 // NamingException
      end

      operation 8476059 "InterruptedNamingException"
	public explicit_return_type ""
	nparams 1
	  param in name "explanation" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of InterruptedNamingException using an
explanation of the problem.
All name resolution-related fields are initialized to null.
@param explanation	A possibly null message explaining the problem.
@see java.lang.Throwable#getMessage"
      end

      operation 8476187 "InterruptedNamingException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of InterruptedNamingException with
all name resolution fields and explanation initialized to null."
      end

      attribute 3082011 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  6404516648893194728L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Use serialVersionUID from JNDI 1.1.1 for interoperability
"
      end
    end

    class 1050395 "LimitExceededException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This exception is thrown when a method
terminates abnormally due to a user or system specified limit.
This is different from a InsufficientResourceException in that
LimitExceededException is due to a user/system specified limit.
For example, running out of memory to complete the request would
be an insufficient resource. The client asking for 10 answers and
getting back 11 is a size limit exception.
<p>
Examples of these limits include client and server configuration
limits such as size, time, number of hops, etc.
<p>
Synchronization and serialization issues that apply to NamingException
apply directly here.

@author Rosanna Lee
@author Scott Seligman
@version 1.7 03/12/19
@since 1.3"
      classrelation 2099227 // <generalisation>
	relation 2099227 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2099227 // <generalisation>
	  b parent class_ref 289947 // NamingException
      end

      operation 8476571 "LimitExceededException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of LimitExceededException with
all name resolution fields and explanation initialized to null."
      end

      operation 8476699 "LimitExceededException"
	public explicit_return_type ""
	nparams 1
	  param in name "explanation" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of LimitExceededException using an
explanation. All other fields default to null.
@param explanation Possibly null detail about this exception.
@see java.lang.Throwable#getMessage"
      end

      attribute 3082267 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -776898738660207856L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Use serialVersionUID from JNDI 1.1.1 for interoperability
"
      end
    end

    class 1050523 "LinkException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This exception is used to describe problems encounter while resolving links.
Addition information is added to the base NamingException for pinpointing
the problem with the link. 
<p>
Analogous to how NamingException captures name resolution information,
LinkException captures \"link\"-name resolution information pinpointing
the problem encountered while resolving a link. All these fields may
be null.
<ul>
<li> Link Resolved Name. Portion of link name that has been resolved.
<li> Link Resolved Object. Object to which resolution of link name proceeded.
<li> Link Remaining Name. Portion of link name that has not been resolved.
<li> Link Explanation. Detail explaining why link resolution failed.
</ul>

<p>
A LinkException instance is not synchronized against concurrent 
multithreaded access. Multiple threads trying to access and modify
a single LinkException instance should lock the object.

@author Rosanna Lee
@author Scott Seligman
@version 1.8 03/12/19

@see Context#lookupLink
@see LinkRef
@since 1.3

<p>
The serialized form of a LinkException object consists of the
serialized fields of its NamingException superclass, the link resolved
name (a Name object), the link resolved object, link remaining name
(a Name object), and the link explanation String."
      classrelation 2099355 // <generalisation>
	relation 2099355 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2099355 // <generalisation>
	  b parent class_ref 289947 // NamingException
      end

      classrelation 2099483 // linkResolvedName (<unidirectional association>)
	relation 2099483 --->
	  a role_name "linkResolvedName" protected
	    comment "
Contains the part of the link that has been successfully resolved.
It is a composite name and can be null.
This field is initialized by the constructors.
You should access and manipulate this field
through its get and set methods.
@serial
@see #getLinkResolvedName
@see #setLinkResolvedName

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2099483 // linkResolvedName (<unidirectional association>)
	  b parent class_ref 289691 // Name
      end

      attribute 3082395 "linkResolvedObj"
	protected explicit_type "Object"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Contains the object to which resolution of the part of the link was successful.
Can be null. This field is initialized by the constructors.
You should access and manipulate this field
through its get and set methods.
@serial
@see #getLinkResolvedObj
@see #setLinkResolvedObj
"
      end

      classrelation 2099611 // linkRemainingName (<unidirectional association>)
	relation 2099611 --->
	  a role_name "linkRemainingName" protected
	    comment "
Contains the remaining link name that has not been resolved yet.
It is a composite name and can be null. 
This field is initialized by the constructors.
You should access and manipulate this field
through its get and set methods.
@serial
@see #getLinkRemainingName
@see #setLinkRemainingName

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2099611 // linkRemainingName (<unidirectional association>)
	  b parent class_ref 289691 // Name
      end

      attribute 3082523 "linkExplanation"
	protected explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Contains the exception of why resolution of the link failed.
Can be null. This field is initialized by the constructors.
You should access and manipulate this field
through its get and set methods.
@serial
@see #getLinkExplanation
@see #setLinkExplanation
"
      end

      operation 8476827 "LinkException"
	public explicit_return_type ""
	nparams 1
	  param in name "explanation" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of LinkException with an explanation
All the other fields are initialized to null.
@param	explanation	A possibly null string containing additional
				detail about this exception.
@see java.lang.Throwable#getMessage"
      end

      operation 8476955 "LinkException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of LinkException.
All the non-link-related and link-related fields are initialized to null."
      end

      operation 8477083 "getLinkResolvedName"
	public return_type class_ref 289691 // Name
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the leading portion of the link name that was resolved
successfully.

@return The part of the link name that was resolved successfully.
		It is a composite name. It can be null, which means
		the link resolved name field has not been set.
@see #getLinkResolvedObj
@see #setLinkResolvedName"
      end

      operation 8477211 "getLinkRemainingName"
	public return_type class_ref 289691 // Name
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the remaining unresolved portion of the link name.
@return The part of the link name that has not been resolved.
		It is a composite name. It can be null, which means
		the link remaining name field has not been set.
@see #setLinkRemainingName"
      end

      operation 8477339 "getLinkResolvedObj"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the object to which resolution was successful.
This is the object to which the resolved link name is bound.

@return The possibly null object that was resolved so far.
If null, it means the link resolved object field has not been set.
@see #getLinkResolvedName
@see #setLinkResolvedObj"
      end

      operation 8477467 "getLinkExplanation"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the explanation associated with the problem encounter
when resolving a link.

@return The possibly null detail string explaining more about the problem
with resolving a link.
	If null, it means there is no
		link detail message for this exception.
@see #setLinkExplanation"
      end

      operation 8477595 "setLinkExplanation"
	public explicit_return_type "void"
	nparams 1
	  param in name "msg" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the explanation associated with the problem encounter
when resolving a link.

@param msg The possibly null detail string explaining more about the problem
with resolving a link. If null, it means no detail will be recorded.
@see #getLinkExplanation"
      end

      operation 8477723 "setLinkResolvedName"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 289691 // Name
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the resolved link name field of this exception.
<p>
<tt>name</tt> is a composite name. If the intent is to set
this field using a compound name or string, you must 
\"stringify\" the compound name, and create a composite
name with a single component using the string. You can then
invoke this method using the resulting composite name.
<p>
A copy of <code>name</code> is made and stored.
Subsequent changes to <code>name</code> does not
affect the copy in this NamingException and vice versa.


@param name The name to set resolved link name to. This can be null.
		If null, it sets the link resolved name field to null.
@see #getLinkResolvedName"
      end

      operation 8477851 "setLinkRemainingName"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 289691 // Name
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the remaining link name field of this exception.
<p>
<tt>name</tt> is a composite name. If the intent is to set
this field using a compound name or string, you must 
\"stringify\" the compound name, and create a composite
name with a single component using the string. You can then
invoke this method using the resulting composite name.
<p>
A copy of <code>name</code> is made and stored.
Subsequent changes to <code>name</code> does not
affect the copy in this NamingException and vice versa.

@param name The name to set remaining link name to. This can be null.
 If null, it sets the remaining name field to null.
@see #getLinkRemainingName"
      end

      operation 8477979 "setLinkResolvedObj"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the link resolved object field of this exception.
This indicates the last successfully resolved object of link name.
@param obj The object to set link resolved object to. This can be null.
		  If null, the link resolved object field is set to null.
@see #getLinkResolvedObj"
      end

      operation 8478107 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates the string representation of this exception.
This string consists of the NamingException information plus
the link's remaining name.
This string is used for debugging and not meant to be interpreted
programmatically.
@return The non-null string representation of this link exception."
      end

      operation 8478235 "toString"
	public explicit_return_type "String"
	nparams 1
	  param inout name "detail" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates the string representation of this exception.
This string consists of the NamingException information plus
the additional information of resolving the link.
If 'detail' is true, the string also contains information on
the link resolved object. If false, this method is the same
as the form of toString() that accepts no parameters.
This string is used for debugging and not meant to be interpreted
programmatically.

@param	detail	If true, add information about the link resolved
			object.
@return The non-null string representation of this link exception."
      end

      attribute 3082651 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -7967662604076777712L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Use serialVersionUID from JNDI 1.1.1 for interoperability
"
      end
    end

    class 1050651 "LinkLoopException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This exception is thrown when
a loop was detected will attempting to resolve a link, or an implementation
specific limit on link counts has been reached.
<p>
Synchronization and serialization issues that apply to LinkException
apply directly here.

@author Rosanna Lee
@author Scott Seligman
@version 1.7 03/12/19

@see LinkRef
@since 1.3"
      classrelation 2099739 // <generalisation>
	relation 2099739 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2099739 // <generalisation>
	  b parent class_ref 1050523 // LinkException
      end

      operation 8478363 "LinkLoopException"
	public explicit_return_type ""
	nparams 1
	  param in name "explanation" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of LinkLoopException with an explanation
All the other fields are initialized to null.
@param	explanation	A possibly null string containing additional
				detail about this exception.
@see java.lang.Throwable#getMessage"
      end

      operation 8478491 "LinkLoopException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of LinkLoopException.
All the non-link-related and link-related fields are initialized to null."
      end

      attribute 3082779 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -3119189944325198009L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Use serialVersionUID from JNDI 1.1.1 for interoperability
"
      end
    end

    class 1050779 "LinkRef"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class represents a Reference whose contents is a name, called the link name,
that is bound to an atomic name in a context. 
<p>
The name is a URL, or a name to be resolved relative to the initial
context, or if the first character of the name is \".\", the name
is relative to the context in which the link is bound.
<p>
Normal resolution of names in context operations always follow links.
Resolution of the link name itself may cause resolution to pass through
other  links. This gives rise to the possibility of a cycle of links whose
resolution could not terminate normally. As a simple means to avoid such
non-terminating resolutions, service providers may define limits on the
number of links that may be involved in any single operation invoked
by the caller.
<p>
A LinkRef contains a single StringRefAddr, whose type is \"LinkAddress\",
and whose contents is the link name. The class name field of the
Reference is that of this (LinkRef) class.
<p>
LinkRef is bound to a name using the normal Context.bind()/rebind(), and
DirContext.bind()/rebind(). Context.lookupLink() is used to retrieve the link
itself if the terminal atomic name is bound to a link.
<p>
Many naming systems support a native notion of link that may be used
within the naming system itself. JNDI does not specify whether
there is any relationship between such native links and JNDI links.
<p>
A LinkRef instance is not synchronized against concurrent access by multiple
threads. Threads that need to access a LinkRef instance concurrently should
synchronize amongst themselves and provide the necessary locking.

@author Rosanna Lee
@author Scott Seligman
@version 1.7 03/12/19

@see LinkException
@see LinkLoopException
@see MalformedLinkException
@see Context#lookupLink
@since 1.3

<p>
The serialized form of a LinkRef object consists of the serialized
fields of its Reference superclass."
      classrelation 2100251 // <generalisation>
	relation 2100251 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2100251 // <generalisation>
	  b parent class_ref 1050907 // Reference
      end

      attribute 3083419 "linkClassName"
	class_attribute const_attribute package explicit_type "String"
	init_value "=  LinkRef.class.getName()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " code for link handling "
      end

      attribute 3083547 "linkAddrType"
	class_attribute const_attribute package explicit_type "String"
	init_value "=  \"LinkAddress\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 8481051 "LinkRef"
	public explicit_return_type ""
	nparams 1
	  param inout name "linkName" type class_ref 289691 // Name
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a LinkRef for a name.
@param linkName The non-null name for which to create this link."
      end

      operation 8481179 "LinkRef"
	public explicit_return_type ""
	nparams 1
	  param in name "linkName" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a LinkRef for a string name.
@param linkName The non-null name for which to create this link."
      end

      operation 8481307 "getLinkName"
	public explicit_return_type "String"
	nparams 0
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the name of this link.

@return The non-null name of this link.
@exception MalformedLinkException If a link name could not be extracted
@exception NamingException If a naming exception was encountered."
      end

      attribute 3083675 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -5386290613498931298L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Use serialVersionUID from JNDI 1.1.1 for interoperability
"
      end
    end

    class 1050907 "Reference"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class represents a reference to an object that is found outside of 
the naming/directory system.
<p>
Reference provides a way of recording address information about
objects which themselves are not directly bound to the naming/directory system.
<p>
A Reference consists of an ordered list of addresses and class information
about the object being referenced.
Each address in the list identifies a communications endpoint
for the same conceptual object.  The \"communications endpoint\"
is information that indicates how to contact the object. It could
be, for example, a network address, a location in memory on the
local machine, another process on the same machine, etc.
The order of the addresses in the list may be of significance
to object factories that interpret the reference.
<p> 
Multiple addresses may arise for
various reasons, such as replication or the object offering interfaces
over more than one communication mechanism.  The addresses are indexed
starting with zero.
<p>
A Reference also contains information to assist in creating an instance
of the object to which this Reference refers.  It contains the class name
of that object, and the class name and location of the factory to be used
to create the object.
The class factory location is a space-separated list of URLs representing
the class path used to load the factory.  When the factory class (or
any class or resource upon which it depends) needs to be loaded,
each URL is used (in order) to attempt to load the class.
<p>
A Reference instance is not synchronized against concurrent access by multiple
threads. Threads that need to access a single Reference concurrently should
synchronize amongst themselves and provide the necessary locking.

@author Rosanna Lee
@author Scott Seligman
@version 1.9 04/05/05

@see RefAddr
@see StringRefAddr
@see BinaryRefAddr
@since 1.3

<p>
The serialized form of a Reference object consists of the class
name of the object being referenced (a String), a Vector of the
addresses (each a RefAddr), the name of the class factory (a
String), and the location of the class factory (a String)."
      classrelation 2099867 // <realization>
	relation 2099867 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2099867 // <realization>
	  b parent class_ref 339867 // Cloneable
      end

      classrelation 2099995 // <realization>
	relation 2099995 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2099995 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      attribute 3082907 "className"
	protected explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Contains the fully-qualified name of the class of the object to which
this Reference refers.
@serial
@see java.lang.Class#getName
"
      end

      classrelation 2100123 // addrs (<unidirectional association>)
	relation 2100123 --->
	  a role_name "addrs" init_value "=  null" protected
	    comment "
Contains the addresses contained in this Reference.
Initialized by constructor.
@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<RefAddr> ${name}${value};
"
	    classrelation_ref 2100123 // addrs (<unidirectional association>)
	  b parent class_ref 153883 // Vector
      end

      attribute 3083035 "classFactory"
	protected explicit_type "String"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Contains the name of the factory class for creating
an instance of the object to which this Reference refers.
Initialized to null.
@serial
"
      end

      attribute 3083163 "classFactoryLocation"
	protected explicit_type "String"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Contains the location of the factory class.
Initialized to null.
@serial
"
      end

      operation 8478619 "Reference"
	public explicit_return_type ""
	nparams 1
	  param in name "className" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new reference for an object with class name 'className'.
Class factory and class factory location are set to null.
The newly created reference contains zero addresses.

@param className The non-null class name of the object to which
this reference refers."
      end

      operation 8478747 "Reference"
	public explicit_return_type ""
	nparams 2
	  param in name "className" explicit_type "String"
	  param inout name "addr" type class_ref 1048475 // RefAddr
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new reference for an object with class name 'className' and
an address.
Class factory and class factory location are set to null.

@param className The non-null class name of the object to
which this reference refers.
@param addr The non-null address of the object."
      end

      operation 8478875 "Reference"
	public explicit_return_type ""
	nparams 3
	  param in name "className" explicit_type "String"
	  param in name "factory" explicit_type "String"
	  param in name "factoryLocation" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new reference for an object with class name 'className',
and the class name and location of the object's factory.

@param className The non-null class name of the object to which
				this reference refers.
@param factory 	The possibly null class name of the object's factory.
@param factoryLocation
		The possibly null location from which to load
	the factory (e.g. URL)
@see javax.naming.spi.ObjectFactory
@see javax.naming.spi.NamingManager#getObjectInstance"
      end

      operation 8479003 "Reference"
	public explicit_return_type ""
	nparams 4
	  param in name "className" explicit_type "String"
	  param inout name "addr" type class_ref 1048475 // RefAddr
	  param in name "factory" explicit_type "String"
	  param in name "factoryLocation" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new reference for an object with class name 'className',
the class name and location of the object's factory, and the address for
the object.

@param className The non-null class name of the object to
	which this reference refers.
@param factory	The possibly null class name of the object's factory.
@param factoryLocation	The possibly null location from which
			to load the factory (e.g. URL)
@param addr 	The non-null address of the object.
@see javax.naming.spi.ObjectFactory
@see javax.naming.spi.NamingManager#getObjectInstance"
      end

      operation 8479131 "getClassName"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the class name of the object to which this reference refers.

@return The non-null fully-qualified class name of the object.
	(e.g. \"java.lang.String\")"
      end

      operation 8479259 "getFactoryClassName"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the class name of the factory of the object
to which this reference refers.

@return The possibly null fully-qualified class name of the factory.
	(e.g. \"java.lang.String\")"
      end

      operation 8479387 "getFactoryClassLocation"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the location of the factory of the object
to which this reference refers.
If it is a codebase, then it is an ordered list of URLs,
separated by spaces, listing locations from where the factory
class definition should be loaded.

@return The possibly null string containing the
		location for loading in the factory's class. "
      end

      operation 8479515 "get"
	public return_type class_ref 1048475 // RefAddr
	nparams 1
	  param in name "addrType" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the first address that has the address type 'addrType'.
String.compareTo() is used to test the equality of the address types.

@param addrType The non-null address type for which to find the address.
@return The address in this reference with address type 'addrType;
	null if no such address exist."
      end

      operation 8479643 "get"
	public return_type class_ref 1048475 // RefAddr
	nparams 1
	  param in name "posn" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the address at index posn.
@param posn The index of the address to retrieve.
@return The address at the 0-based index posn. It must be in the
		range [0,getAddressCount()).
@exception ArrayIndexOutOfBoundsException If posn not in the specified
		range."
      end

      operation 8479771 "getAll"
	public return_type class_ref 144411 // Enumeration
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<RefAddr> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves an enumeration of the addresses in this reference.
When addresses are added, changed or removed from this reference,
its effects on this enumeration are undefined.

@return An non-null enumeration of the addresses
	(<tt>RefAddr</tt>) in this reference.
        If this reference has zero addresses, an enumeration with
		zero elements is returned."
      end

      operation 8479899 "size"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the number of addresses in this reference.

@return The nonnegative number of addresses in this reference."
      end

      operation 8480027 "add"
	public explicit_return_type "void"
	nparams 1
	  param inout name "addr" type class_ref 1048475 // RefAddr
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds an address to the end of the list of addresses.

@param addr The non-null address to add."
      end

      operation 8480155 "add"
	public explicit_return_type "void"
	nparams 2
	  param in name "posn" explicit_type "int"
	  param inout name "addr" type class_ref 1048475 // RefAddr
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds an address to the list of addresses at index posn.
All addresses at index posn or greater are shifted up
the list by one (away from index 0).

@param posn The 0-based index of the list to insert addr.
@param addr The non-null address to add.
@exception ArrayIndexOutOfBoundsException If posn not in the specified
		range."
      end

      operation 8480283 "remove"
	public explicit_return_type "Object"
	nparams 1
	  param in name "posn" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deletes the address at index posn from the list of addresses.
All addresses at index greater than posn are shifted down
the list by one (towards index 0).

@param posn The 0-based index of in address to delete.
@return The address removed.
@exception ArrayIndexOutOfBoundsException If posn not in the specified
		range."
      end

      operation 8480411 "clear"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deletes all addresses from this reference."
      end

      operation 8480539 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether obj is a reference with the same addresses
(in same order) as this reference.
The addresses are checked using RefAddr.equals().
In addition to having the same addresses, the Reference also needs to
have the same class name as this reference.
The class factory and class factory location are not checked.
If obj is null or not an instance of Reference, null is returned.

@param obj The possibly null object to check.
@return true if obj is equal to this reference; false otherwise."
      end

      operation 8480667 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Computes the hash code of this reference.
The hash code is the sum of the hash code of its addresses.

@return A hash code of this reference as an int."
      end

      operation 8480795 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates the string representation of this reference.
The string consists of the class name to which this reference refers,
and the string representation of each of its addresses.
This representation is intended for display only and not to be parsed.

@return The non-null string representation of this reference."
      end

      operation 8480923 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Makes a copy of this reference using its class name
list of addresses, class factory name and class factory location.
Changes to the newly created copy does not affect this Reference
and vice versa."
      end

      attribute 3083291 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -1673475790065791735L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Use serialVersionUID from JNDI 1.1.1 for interoperability
"
      end
    end

    class 1051035 "MalformedLinkException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This exception is thrown when a malformed link was encountered while
resolving or constructing a link.
<p>
Synchronization and serialization issues that apply to LinkException
apply directly here.

@author Rosanna Lee
@author Scott Seligman
@version 1.7 03/12/19

@see LinkRef#getLinkName
@see LinkRef
@since 1.3"
      classrelation 2100379 // <generalisation>
	relation 2100379 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2100379 // <generalisation>
	  b parent class_ref 1050523 // LinkException
      end

      operation 8481435 "MalformedLinkException"
	public explicit_return_type ""
	nparams 1
	  param in name "explanation" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of MalformedLinkException with an explanation
All the other fields are initialized to null.
@param	explanation	A possibly null string containing additional
				detail about this exception."
      end

      operation 8481563 "MalformedLinkException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of Malformed LinkException.
All fields are initialized to null."
      end

      attribute 3083803 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -3066740437737830242L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Use serialVersionUID from JNDI 1.1.1 for interoperability
"
      end
    end

    class 1051163 "NameAlreadyBoundException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This exception is thrown by methods to indicate that
a binding cannot be added because the name is already bound to
another object.
<p>
Synchronization and serialization issues that apply to NamingException
apply directly here.

@author Rosanna Lee
@author Scott Seligman
@version 1.7 03/12/19

@see Context#bind
@see Context#rebind
@see Context#createSubcontext
@see javax.naming.directory.DirContext#bind
@see javax.naming.directory.DirContext#rebind
@see javax.naming.directory.DirContext#createSubcontext
@since 1.3"
      classrelation 2100507 // <generalisation>
	relation 2100507 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2100507 // <generalisation>
	  b parent class_ref 289947 // NamingException
      end

      operation 8481691 "NameAlreadyBoundException"
	public explicit_return_type ""
	nparams 1
	  param in name "explanation" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of NameAlreadyBoundException using the
explanation supplied. All other fields default to null.


@param	explanation	Possibly null additional detail about this exception.
@see java.lang.Throwable#getMessage"
      end

      operation 8481819 "NameAlreadyBoundException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of NameAlreadyBoundException.
All fields are set to null;"
      end

      attribute 3083931 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -8491441000356780586L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Use serialVersionUID from JNDI 1.1.1 for interoperability
"
      end
    end

    class 1051291 "NameImplEnumerator"
      visibility package 
      nactuals 4
      actual class class_ref 144411 // Enumeration
        rank 0 explicit_value ""
      actual class class_ref 144411 // Enumeration
        rank 1 explicit_value ""
      actual class class_ref 144411 // Enumeration
        rank 2 explicit_value ""
      actual class class_ref 144411 // Enumeration
        rank 3 explicit_value ""
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 2100763 // <realization>
	relation 2100763 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 2100763 // <realization>
	  b parent class_ref 144411 // Enumeration
      end

      classrelation 2100891 // vector (<unidirectional association>)
	relation 2100891 --->
	  a role_name "vector" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2100891 // vector (<unidirectional association>)
	  b parent class_ref 153883 // Vector
      end

      attribute 3086619 "count"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 3086747 "limit"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 8485659 "NameImplEnumerator"
	package explicit_return_type ""
	nparams 3
	  param inout name "v" type class_ref 153883 // Vector
	  param in name "start" explicit_type "int"
	  param in name "lim" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8485787 "hasMoreElements"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8485915 "nextElement"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1051419 "NameNotFoundException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This exception is thrown when a component of the name cannot be resolved
because it is not bound. 
<p>
Synchronization and serialization issues that apply to NamingException
apply directly here.

@author Rosanna Lee
@author Scott Seligman
@version 1.7 03/12/19
@since 1.3"
      classrelation 2101019 // <generalisation>
	relation 2101019 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2101019 // <generalisation>
	  b parent class_ref 289947 // NamingException
      end

      operation 8486043 "NameNotFoundException"
	public explicit_return_type ""
	nparams 1
	  param in name "explanation" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of NameNotFoundException using the
explanation supplied. All other fields default to null.

@param	explanation	Possibly null additional detail about
				this exception.
@see java.lang.Throwable#getMessage"
      end

      operation 8486171 "NameNotFoundException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of NameNotFoundException.
all name resolution fields and explanation initialized to null."
      end

      attribute 3086875 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -8007156725367842053L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Use serialVersionUID from JNDI 1.1.1 for interoperability
"
      end
    end

    class 1051547 "NoInitialContextException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This exception is thrown when no initial context implementation
can be created.  The policy of how an initial context implementation
is selected is described in the documentation of the InitialContext class.
<p>
This exception can be thrown during any interaction with the
InitialContext, not only when the InitialContext is constructed.
For example, the implementation of the initial context might lazily
retrieve the context only when actual methods are invoked on it.
The application should not have any dependency on when the existence
of an initial context is determined.
<p>
Synchronization and serialization issues that apply to NamingException
apply directly here.

@author Rosanna Lee
@author Scott Seligman
@version 1.7 03/12/19

@see InitialContext
@see javax.naming.directory.InitialDirContext
@see javax.naming.spi.NamingManager#getInitialContext
@see javax.naming.spi.NamingManager#setInitialContextFactoryBuilder
@since 1.3"
      classrelation 2101147 // <generalisation>
	relation 2101147 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2101147 // <generalisation>
	  b parent class_ref 289947 // NamingException
      end

      operation 8486427 "NoInitialContextException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of NoInitialContextException.
All fields are initialized to null."
      end

      operation 8486555 "NoInitialContextException"
	public explicit_return_type ""
	nparams 1
	  param in name "explanation" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of NoInitialContextException with an
explanation. All other fields are initialized to null.
@param	explanation	Possibly null additional detail about this exception.
@see java.lang.Throwable#getMessage"
      end

      attribute 3087003 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -3413733186901258623L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Use serialVersionUID from JNDI 1.1.1 for interoperability
"
      end
    end

    class 1051675 "NoPermissionException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This exception is thrown when attempting to perform an operation
for which the client has no permission. The access control/permission
model is dictated by the directory/naming server.

<p>
Synchronization and serialization issues that apply to NamingException
apply directly here.

@author Rosanna Lee
@author Scott Seligman
@version 1.7 03/12/19
@since 1.3"
      classrelation 2101275 // <generalisation>
	relation 2101275 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2101275 // <generalisation>
	  b parent class_ref 1048091 // NamingSecurityException
      end

      operation 8486683 "NoPermissionException"
	public explicit_return_type ""
	nparams 1
	  param in name "explanation" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of NoPermissionException using an
explanation. All other fields default to null.

@param	explanation	Possibly null additional detail about this exception."
      end

      operation 8486811 "NoPermissionException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of NoPermissionException.
All fields are initialized to null."
      end

      attribute 3087131 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  8395332708699751775L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Use serialVersionUID from JNDI 1.1.1 for interoperability
"
      end
    end

    class 1051803 "NotContextException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This exception is thrown when a naming operation proceeds to a point
where a context is required to continue the operation, but the
resolved object is not a context. For example, Context.destroy() requires
that the named object be a context. If it is not, NotContextException
is thrown. Another example is a non-context being encountered during
the resolution phase of the Context methods.
<p>
It is also thrown when a particular subtype of context is required,
such as a DirContext, and the resolved object is a context but not of
the required subtype.
<p>
Synchronization and serialization issues that apply to NamingException
apply directly here.
@see Context#destroySubcontext

@author Rosanna Lee
@author Scott Seligman
@version 1.7 03/12/19
@since 1.3"
      classrelation 2101403 // <generalisation>
	relation 2101403 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2101403 // <generalisation>
	  b parent class_ref 289947 // NamingException
      end

      operation 8486939 "NotContextException"
	public explicit_return_type ""
	nparams 1
	  param in name "explanation" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of NotContextException using an
explanation. All other fields default to null.

@param	explanation	Possibly null additional detail about this exception.
@see java.lang.Throwable#getMessage"
      end

      operation 8487067 "NotContextException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of NotContextException.
All fields default to null."
      end

      attribute 3087259 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  849752551644540417L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Use serialVersionUID from JNDI 1.1.1 for interoperability
"
      end
    end

    class 1051931 "OperationNotSupportedException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This exception is thrown when a context implementation does not support
the operation being invoked.
For example, if a server does not support the Context.bind() method
it would throw OperationNotSupportedException when the bind() method
is invoked on it.
<p>
Synchronization and serialization issues that apply to NamingException
apply directly here.

@author Rosanna Lee
@author Scott Seligman
@version 1.7 03/12/19
@since 1.3"
      classrelation 2101531 // <generalisation>
	relation 2101531 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2101531 // <generalisation>
	  b parent class_ref 289947 // NamingException
      end

      operation 8487195 "OperationNotSupportedException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of OperationNotSupportedException.
All fields default to null."
      end

      operation 8487323 "OperationNotSupportedException"
	public explicit_return_type ""
	nparams 1
	  param in name "explanation" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of OperationNotSupportedException using an
explanation. All other fields default to null.

@param	explanation	Possibly null additional detail about this exception
@see java.lang.Throwable#getMessage"
      end

      attribute 3087387 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  5493232822427682064L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Use serialVersionUID from JNDI 1.1.1 for interoperability
"
      end
    end

    class 1052059 "PartialResultException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This exception is thrown to indicate that the result being returned
or returned so far is partial, and that the operation cannot
be completed.  For example, when listing a context, this exception
indicates that returned results only represents some of the bindings
in the context.
<p>
Synchronization and serialization issues that apply to NamingException
apply directly here.

@author Rosanna Lee
@version 1.7 03/12/19
@author Scott Seligman
@since 1.3"
      classrelation 2101659 // <generalisation>
	relation 2101659 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2101659 // <generalisation>
	  b parent class_ref 289947 // NamingException
      end

      operation 8487451 "PartialResultException"
	public explicit_return_type ""
	nparams 1
	  param in name "explanation" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of the exception using the explanation
message specified. All other fields default to null.

@param	explanation	Possibly null detail explaining the exception."
      end

      operation 8487579 "PartialResultException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of PartialResultException.
All fields default to null."
      end

      attribute 3087515 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  2572144970049426786L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Use serialVersionUID from JNDI 1.1.1 for interoperability
"
      end
    end

    class 1052187 "Referenceable"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This interface is implemented by an object that can provide a
Reference to itself.
<p>
A Reference represents a way of recording address information about
objects which themselves are not directly bound to the naming system.
Such objects can implement the Referenceable interface as a way
for programs that use that object to determine what its Reference is.
For example, when binding a object, if an object implements the
Referenceable interface, getReference() can be invoked on the object to
get its Reference to use for binding.

@author Rosanna Lee
@author Scott Seligman
@author R. Vasudevan
@version 1.7 03/12/19

@see Context#bind
@see javax.naming.spi.NamingManager#getObjectInstance
@see Reference
@since 1.3"
      operation 8487707 "getReference"
	public return_type class_ref 1050907 // Reference
	nparams 0
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the Reference of this object.

@return The non-null Reference of this object.
@exception NamingException If a naming exception was encountered
		while retrieving the reference."
      end
    end

    class 1052315 "ReferralException"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This abstract class is used to represent a referral exception,
which is generated in response to a <em>referral</em>
such as that returned by LDAP v3 servers.
<p>
A service provider provides
a subclass of <tt>ReferralException</tt> by providing implementations
for <tt>getReferralInfo()</tt> and <tt>getReferralContext()</tt> (and appropriate
constructors and/or corresponding \"set\" methods).
<p>
The following code sample shows how <tt>ReferralException</tt> can be used.
<p><blockquote><pre>
	while (true) {
	    try {
		bindings = ctx.listBindings(name);
		while (bindings.hasMore()) {
		    b = bindings.next();
		    ...
		}
		break;
	    } catch (ReferralException e) {
		ctx = e.getReferralContext();
	    }
	}
</pre></blockquote></p>
<p>
<tt>ReferralException</tt> is an abstract class. Concrete implementations
determine its synchronization and serialization properties.
<p>
An environment parameter passed to the <tt>getReferralContext()</tt>
method is owned by the caller.
The service provider will not modify the object or keep a reference to it,
but may keep a reference to a clone of it.

@author Rosanna Lee
@author Scott Seligman
@version 1.11 04/07/16

@since 1.3
"
      classrelation 2101787 // <generalisation>
	relation 2101787 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2101787 // <generalisation>
	  b parent class_ref 289947 // NamingException
      end

      operation 8487835 "ReferralException"
	protected explicit_return_type ""
	nparams 1
	  param in name "explanation" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of ReferralException using the
explanation supplied. All other fields are set to null.

@param	explanation	Additional detail about this exception. Can be null.
@see java.lang.Throwable#getMessage"
      end

      operation 8487963 "ReferralException"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of ReferralException.
All fields are set to null."
      end

      operation 8488091 "getReferralInfo"
	abstract public explicit_return_type "Object"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves information (such as URLs) related to this referral.
The program may examine or display this information
to the user to determine whether to continue with the referral,
or to determine additional information needs to be supplied in order
to continue with the referral.

@return Non-null referral information related to this referral."
      end

      operation 8488219 "getReferralContext"
	abstract public return_type class_ref 289819 // Context
	nparams 0
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the context at which to continue the method.
Regardless of whether a referral is encountered directly during a 
context operation, or indirectly, for example, during a search
enumeration, the referral exception should provide a context
at which to continue the operation. The referral context is
created using the environment properties of the context
that threw the ReferralException.

<p>
To continue the operation, the client program should re-invoke
the method using the same arguments as the original invocation.

@return The non-null context at which to continue the method.
@exception NamingException If a naming exception was encountered.
Call either <tt>retryReferral()</tt> or <tt>skipReferral()</tt>
to continue processing referrals."
      end

      operation 8488347 "getReferralContext"
	abstract public return_type class_ref 289819 // Context
	nparams 1
	  param inout name "env" type class_ref 139035 // Hashtable
	nexceptions 1
	  exception class_ref 289947 // NamingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?,?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the context at which to continue the method using 
environment properties.
Regardless of whether a referral is encountered directly during a 
context operation, or indirectly, for example, during a search
enumeration, the referral exception should provide a context
at which to continue the operation.
<p>
The referral context is created using <tt>env</tt> as its environment
properties.
This method should be used instead of the no-arg overloaded form
when the caller needs to use different environment properties for
the referral context. It might need to do this, for example, when
it needs to supply different authentication information to the referred
server in order to create the referral context.
<p>
To continue the operation, the client program should re-invoke
the method using the same arguments as the original invocation.

@param env The possibly null environment to use when retrieving the 
		referral context. If null, no environment properties will be used.

@return The non-null context at which to continue the method.
@exception NamingException If a naming exception was encountered.
Call either <tt>retryReferral()</tt> or <tt>skipReferral()</tt>
to continue processing referrals."
      end

      operation 8488475 "skipReferral"
	abstract public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Discards the referral about to be processed.
A call to this method should be followed by a call to
<code>getReferralContext</code> to allow the processing of
other referrals to continue.
The following code fragment shows a typical usage pattern.
<p><blockquote><pre>
	} catch (ReferralException e) {
	    if (!shallIFollow(e.getReferralInfo())) {
		if (!e.skipReferral()) {
		    return;
		}
	    }
	    ctx = e.getReferralContext();
	}
</pre></blockquote>

@return true If more referral processing is pending; false otherwise."
      end

      operation 8488603 "retryReferral"
	abstract public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retries the referral currently being processed.
A call to this method should be followed by a call to
<code>getReferralContext</code> to allow the current
referral to be retried.
The following code fragment shows a typical usage pattern.
<p><blockquote><pre>
	} catch (ReferralException e) {
	    while (true) {
		try {
		    ctx = e.getReferralContext(env);
		    break;
		} catch (NamingException ne) {
		    if (! shallIRetry()) {
			return;
		    }
		    // modify environment properties (env), if necessary
		    e.retryReferral();
		}
	    }
	}
</pre></blockquote>
"
      end

      attribute 3087643 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -2881363844695698876L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Use serialVersionUID from JNDI 1.1.1 for interoperability
"
      end
    end

    class 1052443 "ServiceUnavailableException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This exception is thrown when attempting to communicate with a
directory or naming service and that service is not available.
It might be unavailable for different reasons. For example,
the server might be too busy to service the request, or the server
might not be registered to service any requests, etc.
<p>
Synchronization and serialization issues that apply to NamingException
apply directly here.

@author Rosanna Lee
@author Scott Seligman

@version 1.8 03/12/19
@since 1.3"
      classrelation 2101915 // <generalisation>
	relation 2101915 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2101915 // <generalisation>
	  b parent class_ref 289947 // NamingException
      end

      operation 8488731 "ServiceUnavailableException"
	public explicit_return_type ""
	nparams 1
	  param in name "explanation" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of ServiceUnavailableException using an
explanation. All other fields default to null.

@param	explanation	Possibly null additional detail about this exception.
@see java.lang.Throwable#getMessage"
      end

      operation 8488859 "ServiceUnavailableException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of ServiceUnavailableException.
All fields default to null."
      end

      attribute 3087771 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -4996964726566773444L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Use serialVersionUID from JNDI 1.1.1 for interoperability
"
      end
    end

    class 1052571 "SizeLimitExceededException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This exception is thrown when a method
produces a result that exceeds a size-related limit.
This can happen, for example, if the result contains
more objects than the user requested, or when the size
of the result exceeds some implementation-specific limit.
<p>
Synchronization and serialization issues that apply to NamingException
apply directly here.

@author Rosanna Lee
@author Scott Seligman

@version 1.7 03/12/19
@since 1.3"
      classrelation 2102043 // <generalisation>
	relation 2102043 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2102043 // <generalisation>
	  b parent class_ref 1050395 // LimitExceededException
      end

      operation 8488987 "SizeLimitExceededException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of SizeLimitExceededException.
All fields default to null."
      end

      operation 8489115 "SizeLimitExceededException"
	public explicit_return_type ""
	nparams 1
	  param in name "explanation" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of SizeLimitExceededException using an
explanation. All other fields default to null.

@param explanation Possibly null detail about this exception."
      end

      attribute 3087899 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  7129289564879168579L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Use serialVersionUID from JNDI 1.1.1 for interoperability
"
      end
    end

    class 1052699 "StringRefAddr"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class represents the string form of the address of
a communications end-point.
It consists of a type that describes the communication mechanism
and a string contents specific to that communication mechanism.
The format and interpretation of
the address type and the contents of the address are based on 
the agreement of three parties: the client that uses the address,
the object/server that can be reached using the address, and the
administrator or program that creates the address.

<p> An example of a string reference address is a host name.
Another example of a string reference address is a URL.

<p> A string reference address is immutable:
once created, it cannot be changed.  Multithreaded access to 
a single StringRefAddr need not be synchronized.

@author Rosanna Lee
@author Scott Seligman
@version 1.7 03/12/19

@see RefAddr
@see BinaryRefAddr
@since 1.3"
      classrelation 2102171 // <generalisation>
	relation 2102171 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2102171 // <generalisation>
	  b parent class_ref 1048475 // RefAddr
      end

      attribute 3088027 "contents"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Contains the contents of this address.
Can be null.
@serial
"
      end

      operation 8489243 "StringRefAddr"
	public explicit_return_type ""
	nparams 2
	  param in name "addrType" explicit_type "String"
	  param in name "addr" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of StringRefAddr using its address type 
and contents.

@param addrType A non-null string describing the type of the address.
@param addr The possibly null contents of the address in the form of a string."
      end

      operation 8489371 "getContent"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the contents of this address. The result is a string.

@return The possibly null address contents."
      end

      attribute 3088155 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -8913762495138505527L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Use serialVersionUID from JNDI 1.1.1 for interoperability
"
      end
    end

    class 1052827 "TimeLimitExceededException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This exception is thrown when a method
does not terminate within the specified time limit.
This can happen, for example, if the user specifies that
the method should take no longer than 10 seconds, and the
method fails to complete with 10 seconds.

<p> Synchronization and serialization issues that apply to NamingException
apply directly here.

@author Rosanna Lee
@author Scott Seligman
@version 1.7 03/12/19

@since 1.3"
      classrelation 2102299 // <generalisation>
	relation 2102299 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2102299 // <generalisation>
	  b parent class_ref 1050395 // LimitExceededException
      end

      operation 8489499 "TimeLimitExceededException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of TimeLimitExceededException.
All fields default to null."
      end

      operation 8489627 "TimeLimitExceededException"
	public explicit_return_type ""
	nparams 1
	  param in name "explanation" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of TimeLimitExceededException
using the argument supplied.
@param explanation possibly null detail about this exception.
@see java.lang.Throwable#getMessage"
      end

      attribute 3088283 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -3597009011385034696L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Use serialVersionUID from JNDI 1.1.1 for interoperability
"
      end
    end
  end

  deploymentview 152603 "naming"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 385051 "NamingEnumeration"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Enumeration;
${definition}"
      associated_classes
	class_ref 565659 // NamingEnumeration
      end
      comment "@(#)NamingEnumeration.java	1.8 04/05/05

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 800027 "NamingException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 289947 // NamingException
      end
      comment "@(#)NamingException.java	1.10 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 800155 "NamingSecurityException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1048091 // NamingSecurityException
      end
      comment "@(#)NamingSecurityException.java	1.8 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 800283 "AuthenticationException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1047963 // AuthenticationException
      end
      comment "@(#)AuthenticationException.java	1.7 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 800411 "AuthenticationNotSupportedException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1048219 // AuthenticationNotSupportedException
      end
      comment "@(#)AuthenticationNotSupportedException.java	1.7 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 800539 "RefAddr"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1048475 // RefAddr
      end
      comment "@(#)RefAddr.java	1.8 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 800667 "BinaryRefAddr"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1048347 // BinaryRefAddr
      end
      comment "@(#)BinaryRefAddr.java	1.7 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 800795 "NameClassPair"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1048731 // NameClassPair
      end
      comment "@(#)NameClassPair.java	1.10 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 800923 "Binding"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1048603 // Binding
      end
      comment "@(#)Binding.java	1.8 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 801051 "CannotProceedException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Hashtable;
${definition}"
      associated_classes
	class_ref 1048859 // CannotProceedException
      end
      comment "@(#)CannotProceedException.java	1.11 04/07/16

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 801179 "CommunicationException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1048987 // CommunicationException
      end
      comment "@(#)CommunicationException.java	1.7 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 801307 "Name"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Enumeration;
${definition}"
      associated_classes
	class_ref 289691 // Name
      end
      comment "@(#)Name.java	1.11 04/05/05

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 801435 "CompositeName"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Enumeration;
import java.util.Properties;
${definition}"
      associated_classes
	class_ref 1049115 // CompositeName
      end
      comment "@(#)CompositeName.java	1.14 04/05/05

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 801563 "CompoundName"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Enumeration;
import java.util.Properties;
${definition}"
      associated_classes
	class_ref 1049499 // CompoundName
      end
      comment "@(#)CompoundName.java	1.11 04/05/05

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 801691 "ConfigurationException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1049627 // ConfigurationException
      end
      comment "@(#)ConfigurationException.java	1.7 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 801819 "Context"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Hashtable;
${definition}"
      associated_classes
	class_ref 289819 // Context
      end
      comment "@(#)Context.java	1.12 04/07/16

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 801947 "ContextNotEmptyException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1049883 // ContextNotEmptyException
      end
      comment "@(#)ContextNotEmptyException.java	1.7 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 802075 "InitialContext"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Hashtable;
import javax.naming.spi.NamingManager;
import com.sun.naming.internal.ResourceManager;
${definition}"
      associated_classes
	class_ref 1050011 // InitialContext
      end
      comment "@(#)InitialContext.java	1.13 04/07/16

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 802203 "InsufficientResourcesException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1050139 // InsufficientResourcesException
      end
      comment "@(#)InsufficientResourcesException.java	1.7 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 802331 "InterruptedNamingException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1050267 // InterruptedNamingException
      end
      comment "@(#)InterruptedNamingException.java	1.8 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 802459 "InvalidNameException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1049243 // InvalidNameException
      end
      comment "@(#)InvalidNameException.java	1.7 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 802587 "LimitExceededException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.naming.Name;
${definition}"
      associated_classes
	class_ref 1050395 // LimitExceededException
      end
      comment "@(#)LimitExceededException.java	1.7 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 802715 "LinkException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1050523 // LinkException
      end
      comment "@(#)LinkException.java	1.8 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 802843 "LinkLoopException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1050651 // LinkLoopException
      end
      comment "@(#)LinkLoopException.java	1.7 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 802971 "Reference"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Vector;
import java.util.Enumeration;
${definition}"
      associated_classes
	class_ref 1050907 // Reference
      end
      comment "@(#)Reference.java	1.9 04/05/05

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 803099 "LinkRef"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1050779 // LinkRef
      end
      comment "@(#)LinkRef.java	1.7 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 803227 "MalformedLinkException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1051035 // MalformedLinkException
      end
      comment "@(#)MalformedLinkException.java	1.7 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 803355 "NameAlreadyBoundException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1051163 // NameAlreadyBoundException
      end
      comment "@(#)NameAlreadyBoundException.java	1.7 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 803483 "NameImpl"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Vector;
import java.util.Enumeration;
import java.util.Properties;
import java.util.NoSuchElementException;
${definition}"
      associated_classes
	class_ref 1049371 // NameImpl
	class_ref 1051291 // NameImplEnumerator
      end
      comment "@(#)NameImpl.java	1.9 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 803611 "NameNotFoundException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1051419 // NameNotFoundException
      end
      comment "@(#)NameNotFoundException.java	1.7 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 803739 "NameParser"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1049755 // NameParser
      end
      comment "@(#)NameParser.java	1.8 04/05/05

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 803867 "NoInitialContextException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1051547 // NoInitialContextException
      end
      comment "@(#)NoInitialContextException.java	1.7 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 803995 "NoPermissionException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1051675 // NoPermissionException
      end
      comment "@(#)NoPermissionException.java	1.7 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 804123 "NotContextException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1051803 // NotContextException
      end
      comment "@(#)NotContextException.java	1.7 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 804251 "OperationNotSupportedException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1051931 // OperationNotSupportedException
      end
      comment "@(#)OperationNotSupportedException.java	1.7 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 804379 "PartialResultException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1052059 // PartialResultException
      end
      comment "@(#)PartialResultException.java	1.7 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 804507 "Referenceable"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1052187 // Referenceable
      end
      comment "@(#)Referenceable.java	1.7 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 804635 "ReferralException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Hashtable;
${definition}"
      associated_classes
	class_ref 1052315 // ReferralException
      end
      comment "@(#)ReferralException.java	1.11 04/07/16

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 804763 "ServiceUnavailableException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1052443 // ServiceUnavailableException
      end
      comment "@(#)ServiceUnavailableException.java	1.8 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 804891 "SizeLimitExceededException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.naming.Name;
${definition}"
      associated_classes
	class_ref 1052571 // SizeLimitExceededException
      end
      comment "@(#)SizeLimitExceededException.java	1.7 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 805019 "StringRefAddr"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1052699 // StringRefAddr
      end
      comment "@(#)StringRefAddr.java	1.7 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 805147 "TimeLimitExceededException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.naming.Name;
${definition}"
      associated_classes
	class_ref 1052827 // TimeLimitExceededException
      end
      comment "@(#)TimeLimitExceededException.java	1.7 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end
  end

  package_ref 177819 // directory

  package_ref 182811 // event

  package_ref 182939 // ldap
end
