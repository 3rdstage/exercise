class TextField
!!!6376091.java!!!	TextField()
	this("", 0);
!!!6376219.java!!!	TextField(in text : String)
        this(text, (text != null) ? text.length() : 0);
!!!6376347.java!!!	TextField(in columns : int)
	this("", columns);
!!!6376475.java!!!	TextField(in text : String, in columns : int)
	super(text);
        this.columns = (columns >= 0) ? columns : 0;
!!!6376603.java!!!	constructComponentName() : String
        synchronized (getClass()) {
	    return base + nameCounter++;
	}
!!!6376731.java!!!	addNotify() : void
        synchronized (getTreeLock()) {
	    if (peer == null)
	        peer = getToolkit().createTextField(this);
	    super.addNotify();
	}
!!!6376859.java!!!	getEchoChar() : char
	return echoChar;
!!!6376987.java!!!	setEchoChar(in c : char) : void
	setEchoCharacter(c);
!!!6377115.java!!!	setEchoCharacter(in c : char) : void
        if (echoChar != c) {
            echoChar = c;
            TextFieldPeer peer = (TextFieldPeer)this.peer;
            if (peer != null) {
                peer.setEchoCharacter(c);
            }
        }
!!!6377243.java!!!	setText(in t : String) : void
        super.setText(t);

	// This could change the preferred size of the Component.
	if (valid) {
	    invalidate();
	}
!!!6377371.java!!!	echoCharIsSet() : boolean
	return echoChar != 0;
!!!6377499.java!!!	getColumns() : int
	return columns;
!!!6377627.java!!!	setColumns(in columns : int) : void
	int oldVal = this.columns;
	if (columns < 0) {
	    throw new IllegalArgumentException("columns less than zero.");
	}
	if (columns != oldVal) {
	    this.columns = columns;
	    invalidate();
	}
!!!6377755.java!!!	getPreferredSize(in columns : int) : Dimension
    	return preferredSize(columns);
!!!6377883.java!!!	preferredSize(in columns : int) : Dimension
        synchronized (getTreeLock()) {
	    TextFieldPeer peer = (TextFieldPeer)this.peer;
	    return (peer != null) ?
		       peer.preferredSize(columns) :
		       super.preferredSize();
        }
!!!6378011.java!!!	getPreferredSize() : Dimension
    	return preferredSize();
!!!6378139.java!!!	preferredSize() : Dimension
        synchronized (getTreeLock()) {
	    return (columns > 0) ?
		       preferredSize(columns) :
		       super.preferredSize();
        }
!!!6378267.java!!!	getMinimumSize(in columns : int) : Dimension
    	return minimumSize(columns);
!!!6378395.java!!!	minimumSize(in columns : int) : Dimension
        synchronized (getTreeLock()) {
	    TextFieldPeer peer = (TextFieldPeer)this.peer;
	    return (peer != null) ?
		       peer.minimumSize(columns) :
		       super.minimumSize();
        }
!!!6378523.java!!!	getMinimumSize() : Dimension
    	return minimumSize();
!!!6378651.java!!!	minimumSize() : Dimension
        synchronized (getTreeLock()) {
	    return (columns > 0) ?
		       minimumSize(columns) :
		       super.minimumSize();
        }
!!!6378779.java!!!	addActionListener(inout l : ActionListener) : void
	if (l == null) {
	    return;
	}
	actionListener = AWTEventMulticaster.add(actionListener, l);
        newEventsOnly = true;
!!!6378907.java!!!	removeActionListener(inout l : ActionListener) : void
	if (l == null) {
	    return;
	}
	actionListener = AWTEventMulticaster.remove(actionListener, l);
!!!6379035.java!!!	getActionListeners() : ActionListener
        return (ActionListener[])(getListeners(ActionListener.class));
!!!6379163.java!!!	getListeners(inout listenerType : Class) : T
	EventListener l = null; 
	if  (listenerType == ActionListener.class) { 
	    l = actionListener;
	} else {
	    return super.getListeners(listenerType);
	}
	return AWTEventMulticaster.getListeners(l, listenerType);
!!!6379291.java!!!	eventEnabled(inout e : AWTEvent) : boolean
        if (e.id == ActionEvent.ACTION_PERFORMED) {
            if ((eventMask & AWTEvent.ACTION_EVENT_MASK) != 0 ||
                actionListener != null) {
                return true;
            }
            return false;
        }
        return super.eventEnabled(e);
!!!6379419.java!!!	processEvent(inout e : AWTEvent) : void
        if (e instanceof ActionEvent) {
            processActionEvent((ActionEvent)e);
            return;
        }
	super.processEvent(e);
!!!6379547.java!!!	processActionEvent(inout e : ActionEvent) : void
        ActionListener listener = actionListener;
        if (listener != null) {
            listener.actionPerformed(e);
        }
!!!6379675.java!!!	paramString() : String
	String str = super.paramString();
	if (echoChar != 0) {
	    str += ",echo=" + echoChar;
	}
	return str;
!!!6379803.java!!!	writeObject(inout s : ObjectOutputStream) : void
        s.defaultWriteObject();

        AWTEventMulticaster.save(s, actionListenerK, actionListener);
        s.writeObject(null);
!!!6379931.java!!!	readObject(inout s : ObjectInputStream) : void
        // HeadlessException will be thrown by TextComponent's readObject
        s.defaultReadObject();

        // Make sure the state we just read in for columns has legal values
        if (columns < 0) {
            columns = 0;
        }

        // Read in listeners, if any
        Object keyOrNull;
        while(null != (keyOrNull = s.readObject())) {
	    String key = ((String)keyOrNull).intern();

	    if (actionListenerK == key) {
                addActionListener((ActionListener)(s.readObject()));
            } else { 
                // skip value for unrecognized key
                s.readObject();
            }
        }
!!!6380059.java!!!	getAccessibleContext() : AccessibleContext
        if (accessibleContext == null) {
            accessibleContext = new AccessibleAWTTextField();
        }
        return accessibleContext;
