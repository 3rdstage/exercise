class Math
!!!7007899.java!!!	sin(in a : double) : double
	return StrictMath.sin(a); // default impl. delegates to StrictMath
!!!7008027.java!!!	cos(in a : double) : double
	return StrictMath.cos(a); // default impl. delegates to StrictMath
!!!7008155.java!!!	tan(in a : double) : double
	return StrictMath.tan(a); // default impl. delegates to StrictMath
!!!7008283.java!!!	asin(in a : double) : double
	return StrictMath.asin(a); // default impl. delegates to StrictMath
!!!7008411.java!!!	acos(in a : double) : double
	return StrictMath.acos(a); // default impl. delegates to StrictMath
!!!7008539.java!!!	atan(in a : double) : double
	return StrictMath.atan(a); // default impl. delegates to StrictMath
!!!7008667.java!!!	toRadians(in angdeg : double) : double
	return angdeg / 180.0 * PI;
!!!7008795.java!!!	toDegrees(in angrad : double) : double
	return angrad * 180.0 / PI;
!!!7008923.java!!!	exp(in a : double) : double
	return StrictMath.exp(a); // default impl. delegates to StrictMath
!!!7009051.java!!!	log(in a : double) : double
	return StrictMath.log(a); // default impl. delegates to StrictMath
!!!7009179.java!!!	log10(in a : double) : double
	return StrictMath.log10(a); // default impl. delegates to StrictMath
!!!7009307.java!!!	sqrt(in a : double) : double
	return StrictMath.sqrt(a); // default impl. delegates to StrictMath
				   // Note that hardware sqrt instructions
				   // frequently can be directly used by JITs
				   // and should be much faster than doing
				   // Math.sqrt in software.
!!!7009435.java!!!	cbrt(in a : double) : double
	return StrictMath.cbrt(a);
!!!7009563.java!!!	IEEEremainder(in f1 : double, in f2 : double) : double
        return StrictMath.IEEEremainder(f1, f2); // delegate to StrictMath
!!!7009691.java!!!	ceil(in a : double) : double
	return StrictMath.ceil(a); // default impl. delegates to StrictMath
!!!7009819.java!!!	floor(in a : double) : double
	return StrictMath.floor(a); // default impl. delegates to StrictMath
!!!7009947.java!!!	rint(in a : double) : double
	return StrictMath.rint(a); // default impl. delegates to StrictMath
!!!7010075.java!!!	atan2(in y : double, in x : double) : double
	return StrictMath.atan2(y, x); // default impl. delegates to StrictMath
!!!7010203.java!!!	pow(in a : double, in b : double) : double
	return StrictMath.pow(a, b); // default impl. delegates to StrictMath
!!!7010331.java!!!	round(in a : float) : int
	return (int)floor(a + 0.5f);
!!!7010459.java!!!	round(in a : double) : long
	return (long)floor(a + 0.5d);
!!!7010587.java!!!	initRNG() : void
        if (randomNumberGenerator == null) 
            randomNumberGenerator = new Random();
!!!7010715.java!!!	random() : double
        if (randomNumberGenerator == null) initRNG();
        return randomNumberGenerator.nextDouble();
!!!7010843.java!!!	abs(in a : int) : int
	return (a < 0) ? -a : a;
!!!7010971.java!!!	abs(in a : long) : long
	return (a < 0) ? -a : a;
!!!7011099.java!!!	abs(in a : float) : float
        return (a <= 0.0F) ? 0.0F - a : a;
!!!7011227.java!!!	abs(in a : double) : double
        return (a <= 0.0D) ? 0.0D - a : a;
!!!7011355.java!!!	max(in a : int, in b : int) : int
	return (a >= b) ? a : b;
!!!7011483.java!!!	max(in a : long, in b : long) : long
	return (a >= b) ? a : b;
!!!7011611.java!!!	max(in a : float, in b : float) : float
        if (a != a) return a;	// a is NaN
	if ((a == 0.0f) && (b == 0.0f)
	    && (Float.floatToIntBits(a) == negativeZeroFloatBits)) {
	    return b;
	}
	return (a >= b) ? a : b;
!!!7011739.java!!!	max(in a : double, in b : double) : double
        if (a != a) return a;	// a is NaN
	if ((a == 0.0d) && (b == 0.0d)
	    && (Double.doubleToLongBits(a) == negativeZeroDoubleBits)) {
	    return b;
	}
	return (a >= b) ? a : b;
!!!7011867.java!!!	min(in a : int, in b : int) : int
	return (a <= b) ? a : b;
!!!7011995.java!!!	min(in a : long, in b : long) : long
	return (a <= b) ? a : b;
!!!7012123.java!!!	min(in a : float, in b : float) : float
        if (a != a) return a;	// a is NaN
	if ((a == 0.0f) && (b == 0.0f)
	    && (Float.floatToIntBits(b) == negativeZeroFloatBits)) {
	    return b;
	}
	return (a <= b) ? a : b;
!!!7012251.java!!!	min(in a : double, in b : double) : double
        if (a != a) return a;	// a is NaN
	if ((a == 0.0d) && (b == 0.0d)
	    && (Double.doubleToLongBits(b) == negativeZeroDoubleBits)) {
	    return b;
	}
	return (a <= b) ? a : b;
!!!7012379.java!!!	ulp(in d : double) : double
	return sun.misc.FpUtils.ulp(d);
!!!7012507.java!!!	ulp(in f : float) : float
	return sun.misc.FpUtils.ulp(f);
!!!7012635.java!!!	signum(in d : double) : double
	return sun.misc.FpUtils.signum(d);
!!!7012763.java!!!	signum(in f : float) : float
	return sun.misc.FpUtils.signum(f);
!!!7012891.java!!!	sinh(in x : double) : double
	return StrictMath.sinh(x);
!!!7013019.java!!!	cosh(in x : double) : double
	return StrictMath.cosh(x);
!!!7013147.java!!!	tanh(in x : double) : double
	return StrictMath.tanh(x);
!!!7013275.java!!!	hypot(in x : double, in y : double) : double
	return StrictMath.hypot(x, y);
!!!7013403.java!!!	expm1(in x : double) : double
	return StrictMath.expm1(x);
!!!7013531.java!!!	log1p(in x : double) : double
	return StrictMath.log1p(x);
