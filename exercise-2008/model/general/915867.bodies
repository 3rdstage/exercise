class Runtime
!!!7029915.java!!!	getRuntime() : Runtime
 
	return currentRuntime;
!!!7030171.java!!!	exit(in status : int) : void
	SecurityManager security = System.getSecurityManager();
	if (security != null) {
	    security.checkExit(status);
	}
	Shutdown.exit(status);
!!!7030299.java!!!	addShutdownHook(inout hook : Thread) : void
	SecurityManager sm = System.getSecurityManager();
	if (sm != null) {
	    sm.checkPermission(new RuntimePermission("shutdownHooks"));
	}
	Shutdown.add(hook);
!!!7030427.java!!!	removeShutdownHook(inout hook : Thread) : boolean
	SecurityManager sm = System.getSecurityManager();
	if (sm != null) {
	    sm.checkPermission(new RuntimePermission("shutdownHooks"));
	}
	return Shutdown.remove(hook);
!!!7030555.java!!!	halt(in status : int) : void
	SecurityManager sm = System.getSecurityManager();
	if (sm != null) {
	    sm.checkExit(status);
	}
	Shutdown.halt(status);
!!!7030683.java!!!	runFinalizersOnExit(inout value : boolean) : void
	SecurityManager security = System.getSecurityManager();
	if (security != null) {
	    try {
		security.checkExit(0); 
	    } catch (SecurityException e) {
		throw new SecurityException("runFinalizersOnExit");
	    }
	}
	Shutdown.setRunFinalizersOnExit(value);
!!!7030811.java!!!	exec(in command : String) : Process
	return exec(command, null, null);
!!!7030939.java!!!	exec(in command : String, in envp : String) : Process
        return exec(command, envp, null);
!!!7031067.java!!!	exec(in command : String, in envp : String, inout dir : File) : Process
        if (command.length() == 0)
            throw new IllegalArgumentException("Empty command");

	StringTokenizer st = new StringTokenizer(command);
	String[] cmdarray = new String[st.countTokens()];
 	for (int i = 0; st.hasMoreTokens(); i++)
	    cmdarray[i] = st.nextToken();
	return exec(cmdarray, envp, dir);
!!!7031195.java!!!	exec(in cmdarray : String) : Process
	return exec(cmdarray, null, null);
!!!7031323.java!!!	exec(in cmdarray : String, in envp : String) : Process
	return exec(cmdarray, envp, null);
!!!7031451.java!!!	exec(in cmdarray : String, in envp : String, inout dir : File) : Process
	return new ProcessBuilder(cmdarray)
	    .environment(envp)
	    .directory(dir)
	    .start();
!!!7032347.java!!!	runFinalization() : void
	runFinalization0();
!!!7032731.java!!!	load(in filename : String) : void
        load0(System.getCallerClass(), filename);
!!!7032859.java!!!	load0(inout fromClass : Class, in filename : String) : void
	SecurityManager security = System.getSecurityManager();
	if (security != null) {
	    security.checkLink(filename);
	}
	if (!(new File(filename).isAbsolute())) {
	    throw new UnsatisfiedLinkError(
	        "Expecting an absolute path of the library: " + filename);
	}
	ClassLoader.loadLibrary(fromClass, filename, true);
!!!7032987.java!!!	loadLibrary(in libname : String) : void
        loadLibrary0(System.getCallerClass(), libname); 
!!!7033115.java!!!	loadLibrary0(inout fromClass : Class, in libname : String) : void
	SecurityManager security = System.getSecurityManager();
	if (security != null) {
	    security.checkLink(libname);
	}
	if (libname.indexOf((int)File.separatorChar) != -1) {
	    throw new UnsatisfiedLinkError(
    "Directory separator should not appear in library name: " + libname);
	}
	ClassLoader.loadLibrary(fromClass, libname, false);
!!!7033243.java!!!	getLocalizedInputStream(inout in : InputStream) : InputStream
	return in;
!!!7033371.java!!!	getLocalizedOutputStream(inout out : OutputStream) : OutputStream
	return out;
