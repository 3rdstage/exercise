class XString
!!!6057243.java!!!	XString(inout val : Object)
    super(val);
!!!6057371.java!!!	XString(in val : String)
    super(val);
!!!6057499.java!!!	getType() : int
    return CLASS_STRING;
!!!6057627.java!!!	getTypeString() : String
    return "#STRING";
!!!6057755.java!!!	hasString() : boolean
    return true;
!!!6057883.java!!!	num() : double
    return toDouble();
!!!6058011.java!!!	toDouble() : double
    int end = length();
    
    if(0 == end)
      return Double.NaN;

    double result = 0.0;
    int start = 0;
    int punctPos = end-1;

    // Scan to first whitespace character.
    for (int i = start; i < end; i++)
    {
      char c = charAt(i);

      if (!XMLCharacterRecognizer.isWhiteSpace(c))
      {
        break;
      }
      else
        start++;
    }

    double sign = 1.0;

    if (start < end && charAt(start) == '-')
    {
      sign = -1.0;

      start++;
    }

    int digitsFound = 0;

    for (int i = start; i < end; i++)  // parse the string from left to right converting the integer part
    {
      char c = charAt(i);

      if (c != '.')
      {
        if (XMLCharacterRecognizer.isWhiteSpace(c))
          break;
        else if (Character.isDigit(c))
        {
          result = result * 10.0 + (c - 0x30);

          digitsFound++;
        }
        else
        {
          return Double.NaN;
        }
      }
      else
      {
        punctPos = i;

        break;
      }
    }

    if (charAt(punctPos) == '.')  // parse the string from the end to the '.' converting the fractional part
    {
      double fractPart = 0.0;

      for (int i = end - 1; i > punctPos; i--)
      {
        char c = charAt(i);

        if (XMLCharacterRecognizer.isWhiteSpace(c))
          break;
        else if (Character.isDigit(c))
        {
          fractPart = fractPart / 10.0 + (c - 0x30);

          digitsFound++;
        }
        else
        {
          return Double.NaN;
        }
      }

      result += fractPart / 10.0;
    }

    if (0 == digitsFound)
      return Double.NaN;

    return result * sign;
!!!6058139.java!!!	bool() : boolean
    return str().length() > 0;
!!!6058267.java!!!	xstr() : XMLString
    return this;
!!!6058395.java!!!	str() : String
    return (null != m_obj) ? ((String) m_obj) : "";
!!!6058523.java!!!	rtf(inout support : XPathContext) : int

    DTM frag = support.createDocumentFragment();

    frag.appendTextChild(str());

    return frag.getDocument();
!!!6058651.java!!!	dispatchCharactersEvents(inout ch : ContentHandler) : void

    String str = str();

    ch.characters(str.toCharArray(), 0, str.length());
!!!6058779.java!!!	dispatchAsComment(inout lh : LexicalHandler) : void

    String str = str();

    lh.comment(str.toCharArray(), 0, str.length());
!!!6058907.java!!!	length() : int
    return str().length();
!!!6059035.java!!!	charAt(in index : int) : char
    return str().charAt(index);
!!!6059163.java!!!	getChars(in srcBegin : int, in srcEnd : int, in dst : char, in dstBegin : int) : void
    str().getChars(srcBegin, srcEnd, dst, dstBegin);
!!!6059291.java!!!	equals(inout obj2 : XObject) : boolean

    // In order to handle the 'all' semantics of 
    // nodeset comparisons, we always call the 
    // nodeset function.
    int t = obj2.getType();
    try
    {
	    if (XObject.CLASS_NODESET == t)
	      return obj2.equals(this);
	    // If at least one object to be compared is a boolean, then each object 
	    // to be compared is converted to a boolean as if by applying the 
	    // boolean function. 
	    else if(XObject.CLASS_BOOLEAN == t)
	    	return obj2.bool() == bool();
	    // Otherwise, if at least one object to be compared is a number, then each object 
	    // to be compared is converted to a number as if by applying the number function. 
	    else if(XObject.CLASS_NUMBER == t)
	    	return obj2.num() == num();
    }
    catch(javax.xml.transform.TransformerException te)
    {
    	throw new com.sun.org.apache.xml.internal.utils.WrappedRuntimeException(te);
    }

    // Otherwise, both objects to be compared are converted to strings as 
    // if by applying the string function. 
    return xstr().equals(obj2.xstr());
!!!6059419.java!!!	equals(inout obj2 : XMLString) : boolean

    if (!obj2.hasString())
      return obj2.equals(this);
    else
      return str().equals(obj2.toString());
!!!6059547.java!!!	equals(inout obj2 : Object) : boolean

    if (null == obj2)
      return false;

      // In order to handle the 'all' semantics of 
      // nodeset comparisons, we always call the 
      // nodeset function.
    else if (obj2 instanceof XNodeSet)
      return obj2.equals(this);
    else if(obj2 instanceof XNumber)
    	return obj2.equals(this);
    else
      return str().equals(obj2.toString());
!!!6059675.java!!!	equalsIgnoreCase(in anotherString : String) : boolean
    return str().equalsIgnoreCase(anotherString);
!!!6059803.java!!!	compareTo(inout xstr : XMLString) : int

    int len1 = this.length();
    int len2 = xstr.length();
    int n = Math.min(len1, len2);
    int i = 0;
    int j = 0;

    while (n-- != 0)
    {
      char c1 = this.charAt(i);
      char c2 = xstr.charAt(j);

      if (c1 != c2)
      {
        return c1 - c2;
      }

      i++;
      j++;
    }

    return len1 - len2;
!!!6059931.java!!!	compareToIgnoreCase(inout str : XMLString) : int
    // %REVIEW%  Like it says, @since 1.2. Doesn't exist in earlier
    // versions of Java, hence we can't yet shell out to it. We can implement
    // it as character-by-character compare, but doing so efficiently
    // is likely to be (ahem) interesting.
    //  
    // However, since nobody is actually _using_ this method yet:
    //    return str().compareToIgnoreCase(str.toString());
    
    throw new com.sun.org.apache.xml.internal.utils.WrappedRuntimeException(
      new java.lang.NoSuchMethodException(
        "Java 1.2 method, not yet implemented"));
!!!6060059.java!!!	startsWith(in prefix : String, in toffset : int) : boolean
    return str().startsWith(prefix, toffset);
!!!6060187.java!!!	startsWith(in prefix : String) : boolean
    return startsWith(prefix, 0);
!!!6060315.java!!!	startsWith(inout prefix : XMLString, in toffset : int) : boolean

    int to = toffset;
    int tlim = this.length();
    int po = 0;
    int pc = prefix.length();

    // Note: toffset might be near -1>>>1.
    if ((toffset < 0) || (toffset > tlim - pc))
    {
      return false;
    }

    while (--pc >= 0)
    {
      if (this.charAt(to) != prefix.charAt(po))
      {
        return false;
      }

      to++;
      po++;
    }

    return true;
!!!6060443.java!!!	startsWith(inout prefix : XMLString) : boolean
    return startsWith(prefix, 0);
!!!6060571.java!!!	endsWith(in suffix : String) : boolean
    return str().endsWith(suffix);
!!!6060699.java!!!	hashCode() : int
    return str().hashCode();
!!!6060827.java!!!	indexOf(in ch : int) : int
    return str().indexOf(ch);
!!!6060955.java!!!	indexOf(in ch : int, in fromIndex : int) : int
    return str().indexOf(ch, fromIndex);
!!!6061083.java!!!	lastIndexOf(in ch : int) : int
    return str().lastIndexOf(ch);
!!!6061211.java!!!	lastIndexOf(in ch : int, in fromIndex : int) : int
    return str().lastIndexOf(ch, fromIndex);
!!!6061339.java!!!	indexOf(in str : String) : int
    return str().indexOf(str);
!!!6061467.java!!!	indexOf(inout str : XMLString) : int
    return str().indexOf(str.toString());
!!!6061595.java!!!	indexOf(in str : String, in fromIndex : int) : int
    return str().indexOf(str, fromIndex);
!!!6061723.java!!!	lastIndexOf(in str : String) : int
    return str().lastIndexOf(str);
!!!6061851.java!!!	lastIndexOf(in str : String, in fromIndex : int) : int
    return str().lastIndexOf(str, fromIndex);
!!!6061979.java!!!	substring(in beginIndex : int) : XMLString
    return new XString(str().substring(beginIndex));
!!!6062107.java!!!	substring(in beginIndex : int, in endIndex : int) : XMLString
    return new XString(str().substring(beginIndex, endIndex));
!!!6062235.java!!!	concat(in str : String) : XMLString

    // %REVIEW% Make an FSB here?
    return new XString(str().concat(str));
!!!6062363.java!!!	toLowerCase(inout locale : Locale) : XMLString
    return new XString(str().toLowerCase(locale));
!!!6062491.java!!!	toLowerCase() : XMLString
    return new XString(str().toLowerCase());
!!!6062619.java!!!	toUpperCase(inout locale : Locale) : XMLString
    return new XString(str().toUpperCase(locale));
!!!6062747.java!!!	toUpperCase() : XMLString
    return new XString(str().toUpperCase());
!!!6062875.java!!!	trim() : XMLString
    return new XString(str().trim());
!!!6063003.java!!!	isSpace(in ch : char) : boolean
    return XMLCharacterRecognizer.isWhiteSpace(ch);  // Take the easy way out for now.
!!!6063131.java!!!	fixWhiteSpace(inout trimHead : boolean, inout trimTail : boolean, inout doublePunctuationSpaces : boolean) : XMLString

    // %OPT% !!!!!!!
    int len = this.length();
    char[] buf = new char[len];

    this.getChars(0, len, buf, 0);

    boolean edit = false;
    int s;

    for (s = 0; s < len; s++)
    {
      if (isSpace(buf[s]))
      {
        break;
      }
    }

    /* replace S to ' '. and ' '+ -> single ' '. */
    int d = s;
    boolean pres = false;

    for (; s < len; s++)
    {
      char c = buf[s];

      if (isSpace(c))
      {
        if (!pres)
        {
          if (' ' != c)
          {
            edit = true;
          }

          buf[d++] = ' ';

          if (doublePunctuationSpaces && (s != 0))
          {
            char prevChar = buf[s - 1];

            if (!((prevChar == '.') || (prevChar == '!')
                  || (prevChar == '?')))
            {
              pres = true;
            }
          }
          else
          {
            pres = true;
          }
        }
        else
        {
          edit = true;
          pres = true;
        }
      }
      else
      {
        buf[d++] = c;
        pres = false;
      }
    }

    if (trimTail && 1 <= d && ' ' == buf[d - 1])
    {
      edit = true;

      d--;
    }

    int start = 0;

    if (trimHead && 0 < d && ' ' == buf[0])
    {
      edit = true;

      start++;
    }

    XMLStringFactory xsf = XMLStringFactoryImpl.getFactory();

    return edit ? xsf.newstr(new String(buf, start, d - start)) : this;
!!!6063259.java!!!	callVisitors(inout owner : ExpressionOwner, inout visitor : XPathVisitor) : void
  	visitor.visitStringLiteral(owner, this);
