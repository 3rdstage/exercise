class ReentrantMutex
!!!1511963.java!!!	ReentrantMutex()
	this( false ) ;
!!!1512091.java!!!	ReentrantMutex(inout debug : boolean)
	this.debug = debug ;
!!!1512219.java!!!	acquire() : void
	if (Thread.interrupted()) 
	    throw new InterruptedException();

	synchronized(this) {
	    try {
		if (debug)
		    ORBUtility.dprintTrace( this, 
			"acquire enter: holder_=" + 
			ORBUtility.getThreadName(holder_) + 
			" counter_=" + counter_ ) ;

		Thread thr = Thread.currentThread();
		if (holder_ != thr) {
		    try {
			while (counter_ > 0) 
			    wait();

			// This can't happen, but make sure anyway
			if (counter_ != 0)
			    throw new INTERNAL(
				"counter not 0 when first acquiring mutex" ) ;
			
			holder_ = thr;
		    } catch (InterruptedException ex) {
			notify();
			throw ex;
		    }
		}

		counter_ ++ ;
	    } finally {
		if (debug)
		    ORBUtility.dprintTrace( this, "acquire exit: holder_=" + 
		    ORBUtility.getThreadName(holder_) + " counter_=" + 
		    counter_ ) ;
	    }
	}
!!!1512347.java!!!	acquireAll(in count : int) : void
	if (Thread.interrupted()) 
	    throw new InterruptedException();

	synchronized(this) {
	    try {
		if (debug)
		    ORBUtility.dprintTrace( this, 
			"acquireAll enter: count=" + count + " holder_=" + 
			ORBUtility.getThreadName(holder_) + " counter_=" + 
			counter_ ) ;
		Thread thr = Thread.currentThread();
		if (holder_ == thr) {
		    throw new INTERNAL(
			"Cannot acquireAll while holding the mutex" ) ;
		} else {
		    try {
			while (counter_ > 0) 
			    wait();

			// This can't happen, but make sure anyway
			if (counter_ != 0)
			    throw new INTERNAL(
				"counter not 0 when first acquiring mutex" ) ;
			
			holder_ = thr;
		    } catch (InterruptedException ex) {
			notify();
			throw ex;
		    }
		}

		counter_ = count ;
	    } finally {
		if (debug)
		    ORBUtility.dprintTrace( this, "acquireAll exit: count=" +
		    count + " holder_=" + ORBUtility.getThreadName(holder_) +
		    " counter_=" + counter_ ) ;
	    }
	}
!!!1512475.java!!!	release() : void
	try {
	    if (debug)
		ORBUtility.dprintTrace( this, "release enter: " + 
		    " holder_=" + ORBUtility.getThreadName(holder_) + 
		    " counter_=" + counter_ ) ;

	    Thread thr = Thread.currentThread();
	    if (thr != holder_)
		throw new INTERNAL( 
		    "Attempt to release Mutex by thread not holding the Mutex" ) ;
	    else
		counter_ -- ;

	    if (counter_ == 0) {
		holder_ = null;
		notify(); 
	    } 
	} finally {
	    if (debug)
		ORBUtility.dprintTrace( this, "release exit: " + 
		    " holder_=" + ORBUtility.getThreadName(holder_) + 
		    " counter_=" + counter_ ) ;
	}
!!!1512603.java!!!	releaseAll() : int
	try {
	    if (debug)
		ORBUtility.dprintTrace( this, "releaseAll enter: " + 
		    " holder_=" + ORBUtility.getThreadName(holder_) + 
		    " counter_=" + counter_ ) ;

	    Thread thr = Thread.currentThread();
	    if (thr != holder_)
		throw new INTERNAL( 
		    "Attempt to releaseAll Mutex by thread not holding the Mutex" ) ;

	    int result = counter_ ;
	    counter_ = 0 ;
	    holder_ = null ;
	    notify() ;
	    return result ;
	} finally {
	    if (debug)
		ORBUtility.dprintTrace( this, "releaseAll exit: " + 
		    " holder_=" + ORBUtility.getThreadName(holder_) + 
		    " counter_=" + counter_ ) ;
	}
!!!1512731.java!!!	attempt(in msecs : long) : boolean
	if (Thread.interrupted()) 
	    throw new InterruptedException();

	synchronized(this) {
	    try {
		if (debug)
		    ORBUtility.dprintTrace( this, "attempt enter: msecs=" + 
			msecs + " holder_=" + 
			ORBUtility.getThreadName(holder_) + 
			" counter_=" + counter_ ) ;

		Thread thr = Thread.currentThread() ;

		if (counter_==0) {
		    holder_ = thr;
		    counter_ = 1 ;
		    return true;
		} else if (msecs <= 0) {
		    return false;
		} else {
		    long waitTime = msecs;
		    long start = System.currentTimeMillis();
		    try {
			for (;;) {
			    wait(waitTime);
			    if (counter_==0) {
				holder_ = thr;
				counter_ = 1 ;
				return true;
			    } else {
				waitTime = msecs - 
				    (System.currentTimeMillis() - start);

				if (waitTime <= 0) 
				    return false;
			    }
			}
		    } catch (InterruptedException ex) {
			notify();
			throw ex;
		    }
		}
	    } finally {
		if (debug)
		    ORBUtility.dprintTrace( this, "attempt exit: " + 
			" holder_=" + ORBUtility.getThreadName(holder_) + 
			" counter_=" + counter_ ) ;
	    }
	}  
