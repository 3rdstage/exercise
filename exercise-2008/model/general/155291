format 66
"sampled" // src::javax::sound::sampled
  revision 3
  modified_by 27 "3rdstage"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "javax/sound/sampled"
  java_package "javax.sound.sampled"
  classview 153499 "sampled"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 391195 "Clip"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The <code>Clip</code> interface represents a special kind of data line whose
audio data can be loaded prior to playback, instead of being streamed in
real time.
<p>
Because the data is pre-loaded and has a known length, you can set a clip
to start playing at any position in its audio data.  You can also create a
loop, so that when the clip is played it will cycle repeatedly.  Loops are
specified with a starting and ending sample frame, along with the number of
times that the loop should be played.
<p>
Clips may be obtained from a <code>{@link Mixer}</code> that supports lines
of this type.  Data is loaded into a clip when it is opened.
<p>
Playback of an audio clip may be started and stopped using the <code>start</code>
and <code>stop</code> methods.  These methods do not reset the media position;
<code>start</code> causes playback to continue from the position where playback
was last stopped.  To restart playback from the beginning of the clip's audio
data, simply follow the invocation of <code>{@link DataLine#stop stop}</code>
with setFramePosition(0), which rewinds the media to the beginning
of the clip.

@author Kara Kytle
@version 1.38, 03/12/19
@since 1.3"
      classrelation 2226459 // <generalisation>
	relation 2226459 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2226459 // <generalisation>
	  b parent class_ref 1092763 // DataLine
      end

      attribute 3154587 "LOOP_CONTINUOUSLY"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A value indicating that looping should continue indefinitely rather than
complete after a specific number of loops.
@see #loop
"
      end

      operation 8737691 "open"
	public explicit_return_type "void"
	nparams 4
	  param inout name "format" type class_ref 1090459 // AudioFormat
	  param in name "data" explicit_type "byte"
	  param in name "offset" explicit_type "int"
	  param in name "bufferSize" explicit_type "int"
	nexceptions 1
	  exception class_ref 1091867 // LineUnavailableException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Opens the clip, meaning that it should acquire any required
system resources and become operational.  The clip is opened
with the format and audio data indicated.
If this operation succeeds, the line is marked as open and an
<code>{@link LineEvent.Type#OPEN OPEN}</code> event is dispatched
to the line's listeners.
<p>
Invoking this method on a line which is already open is illegal
and may result in an IllegalStateException.
<p>
Note that some lines, once closed, cannot be reopened.  Attempts
to reopen such a line will always result in a
<code>{@link LineUnavailableException}</code>.

@param format the format of the supplied audio data
@param data a byte array containing audio data to load into the clip
@param offset the point at which to start copying, expressed in
<em>bytes</em> from the beginning of the array
@param bufferSize the number of <em>bytes</em>
of data to load into the clip from the array.
@throws LineUnavailableException if the line cannot be
opened due to resource restrictions
@throws IllegalArgumentException if the buffer size does not represent
an integral number of sample frames,
or if <code>format</code> is not fully specified or invalid
@throws IllegalStateException if the line is already open
@throws SecurityException if the line cannot be
opened due to security restrictions

@see #close
@see #isOpen
@see LineListener"
      end

      operation 8737819 "open"
	public explicit_return_type "void"
	nparams 1
	  param inout name "stream" type class_ref 1090715 // AudioInputStream
	nexceptions 2
	  exception class_ref 1091867 // LineUnavailableException
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Opens the clip with the format and audio data present in the provided audio
input stream.  Opening a clip means that it should acquire any required
system resources and become operational.  If this operation
input stream.  If this operation
succeeds, the line is marked open and an
<code>{@link LineEvent.Type#OPEN OPEN}</code> event is dispatched
to the line's listeners.
<p>
Invoking this method on a line which is already open is illegal
and may result in an IllegalStateException.
<p>
Note that some lines, once closed, cannot be reopened.  Attempts
to reopen such a line will always result in a
<code>{@link LineUnavailableException}</code>.

@param stream an audio input stream from which audio data will be read into
the clip
@throws LineUnavailableException if the line cannot be
opened due to resource restrictions
@throws IOException if an I/O exception occurs during reading of
the stream
@throws IllegalArgumentException if the stream's audio format
is not fully specified or invalid
@throws IllegalStateException if the line is already open
@throws SecurityException if the line cannot be
opened due to security restrictions

@see #close
@see #isOpen
@see LineListener"
      end

      operation 8737947 "getFrameLength"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the media length in sample frames.
@return the media length, expressed in sample frames,
or <code>AudioSystem.NOT_SPECIFIED</code> if the line is not open.
@see AudioSystem#NOT_SPECIFIED"
      end

      operation 8738075 "getMicrosecondLength"
	public explicit_return_type "long"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the media duration in microseconds
@return the media duration, expressed in microseconds,
or <code>AudioSystem.NOT_SPECIFIED</code> if the line is not open.
@see AudioSystem#NOT_SPECIFIED"
      end

      operation 8738203 "setFramePosition"
	public explicit_return_type "void"
	nparams 1
	  param in name "frames" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the media position in sample frames.  The position is zero-based;
the first frame is frame number zero.  When the clip begins playing the
next time, it will start by playing the frame at this position.
<p>
To obtain the current position in sample frames, use the
<code>{@link DataLine#getFramePosition getFramePosition}</code>
method of <code>DataLine</code>.

@param frames the desired new media position, expressed in sample frames"
      end

      operation 8738331 "setMicrosecondPosition"
	public explicit_return_type "void"
	nparams 1
	  param in name "microseconds" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the media position in microseconds.  When the clip begins playing the
next time, it will start at this position.
The level of precision is not guaranteed.  For example, an implementation
might calculate the microsecond position from the current frame position
and the audio sample frame rate.  The precision in microseconds would
then be limited to the number of microseconds per sample frame.
<p>
To obtain the current position in microseconds, use the
<code>{@link DataLine#getMicrosecondPosition getMicrosecondPosition}</code>
method of <code>DataLine</code>.

@param microseconds the desired new media position, expressed in microseconds"
      end

      operation 8738459 "setLoopPoints"
	public explicit_return_type "void"
	nparams 2
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the first and last sample frames that will be played in
the loop.  The ending point must be greater than
or equal to the starting point, and both must fall within the
the size of the loaded media.  A value of 0 for the starting
point means the beginning of the loaded media.  Similarly, a value of -1
for the ending point indicates the last frame of the media.
@param start the loop's starting position, in sample frames (zero-based)
@param end the loop's ending position, in sample frames (zero-based), or
-1 to indicate the final frame
@throws IllegalArgumentException if the requested
loop points cannot be set, usually because one or both falls outside
the media's duration or because the ending point is
before the starting point"
      end

      operation 8738587 "loop"
	public explicit_return_type "void"
	nparams 1
	  param in name "count" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Starts looping playback from the current position.   Playback will
continue to the loop's end point, then loop back to the loop start point
<code>count</code> times, and finally continue playback to the end of
the clip.
<p>
If the current position when this method is invoked is greater than the
loop end point, playback simply continues to the
end of the clip without looping.
<p>
A <code>count</code> value of 0 indicates that any current looping should
cease and playback should continue to the end of the clip.  The behavior
is undefined when this method is invoked with any other value during a
loop operation.
<p>
If playback is stopped during looping, the current loop status is
cleared; the behavior of subsequent loop and start requests is not
affected by an interrupted loop operation.

@param count the number of times playback should loop back from the
loop's end position to the loop's  start position, or
<code>{@link #LOOP_CONTINUOUSLY}</code> to indicate that looping should
continue until interrupted"
      end
    end

    class 391579 "LineListener"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Instances of classes that implement the <code>LineListener</code> interface can register to 
receive events when a line's status changes.

@author Kara Kytle
@version 1.9 03/12/19

@see Line
@see Line#addLineListener
@see Line#removeLineListener
@see LineEvent

@since 1.3


Instances of classes that implement the <code>LineListener</code> interface can register to 
receive events when a line's status changes.

@see Line
@see Line#addLineListener
@see Line#removeLineListener
@see LineEvent

@version 1.9 03/12/19
@author Kara Kytle"
      classrelation 585371 // <generalisation>
	relation 585371 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 585371 // <generalisation>
	  b parent class_ref 147099 // EventListener
      end

      operation 2261147 "update"
	public explicit_return_type "void"
	nparams 1
	  param inout name "event" type class_ref 391707 // LineEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Informs the listener that a line's state has changed.  The listener can then invoke 
<code>LineEvent</code> methods to obtain information about the event.
@param event a line event that describes the change


Informs the listener that a line's state has changed.  The listener can then invoke 
<code>LineEvent</code> methods to obtain information about the event.
@param event a line event that describes the change"
      end
    end

    class 391707 "LineEvent"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The <code>LineEvent</code> class encapsulates information that a line
sends its listeners whenever the line opens, closes, starts, or stops.
Each of these four state changes is represented by a corresponding
type of event.  A listener receives the event as a parameter to its
{@link LineListener#update update} method.  By querying the event,
the listener can learn the type of event, the line responsible for
the event, and how much data the line had processed when the event occurred.

<p>Although this class implements Serializable, attempts to
serialize a <code>LineEvent</code> object will fail.

@author Kara Kytle
@version 1.26, 03/12/19

@see Line
@see LineListener#update
@since 1.3

@serial exclude"
      classrelation 2227099 // <generalisation>
	relation 2227099 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2227099 // <generalisation>
	  b parent class_ref 147355 // EventObject
      end

      class 1093275 "Type"
	visibility public 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 3156251 "name"
	  private explicit_type "String"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Type name.

 $$kk: 03.25.99: why can't this be final??
final"
	end

	operation 8742299 "Type"
	  protected explicit_return_type ""
	  nparams 1
	    param in name "name" explicit_type "String"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs a new event type.
@param name name of the type"
	end

	operation 8742427 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "obj" explicit_type "Object"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "$$fb 2002-11-26: fix for 4695001: SPEC: description of equals() method contains typo

Indicates whether the specified object is equal to this event type,
returning <code>true</code> if the objects are identical.
@param obj the reference object with which to compare
@return <code>true</code> if this event type is the same as 
<code>obj</code>; <code>false</code> otherwise"
	end

	operation 8742555 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Finalizes the hashcode method."
	end

	operation 8742683 "toString"
	  public explicit_return_type "String"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the type name as the string representation."
	end

	classrelation 2227355 // OPEN (<unidirectional association>)
	  relation 2227355 --->
	    a role_name "OPEN" init_value "=  new Type(\"Open\")" class_relation const_relation public
	      comment " LINE EVENT TYPE DEFINES

A type of event that is sent when a line opens, reserving system
resources for itself.
@see #CLOSE
@see Line#open

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 2227355 // OPEN (<unidirectional association>)
	    b parent class_ref 1093275 // Type
	end

	classrelation 2227483 // CLOSE (<unidirectional association>)
	  relation 2227483 --->
	    a role_name "CLOSE" init_value "=  new Type(\"Close\")" class_relation const_relation public
	      comment "
A type of event that is sent when a line closes, freeing the system
resources it had obtained when it was opened.
@see #OPEN
@see Line#close

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 2227483 // CLOSE (<unidirectional association>)
	    b parent class_ref 1093275 // Type
	end

	classrelation 2227611 // START (<unidirectional association>)
	  relation 2227611 --->
	    a role_name "START" init_value "=  new Type(\"Start\")" class_relation const_relation public
	      comment "
A type of event that is sent when a line begins to engage in active 
input or output of audio data in response to a 
{@link DataLine#start start} request.
@see #STOP
@see DataLine#start

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 2227611 // START (<unidirectional association>)
	    b parent class_ref 1093275 // Type
	end

	classrelation 2227739 // STOP (<unidirectional association>)
	  relation 2227739 --->
	    a role_name "STOP" init_value "=  new Type(\"Stop\")" class_relation const_relation public
	      comment "
A type of event that is sent when a line ceases active input or output 
of audio data in response to a {@link DataLine#stop stop} request,
or because the end of media has been reached.
@see #START
@see DataLine#stop

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 2227739 // STOP (<unidirectional association>)
	    b parent class_ref 1093275 // Type
	end
      end

      classrelation 2227227 // type (<unidirectional association>)
	relation 2227227 --->
	  a role_name "type" const_relation private
	    comment " INSTANCE VARIABLES

The kind of line event (<code>OPEN</code>, <code>CLOSE</code>, 
<code>START</code>, or <code>STOP</code>).
@see #getType
@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2227227 // type (<unidirectional association>)
	  b parent class_ref 1093275 // Type
      end

      attribute 3156123 "position"
	const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The media position when the event occurred, expressed in sample frames.
Note that this field is only relevant to certain events generated by
data lines, such as <code>START</code> and <code>STOP</code>.  For 
events generated by lines that do not count sample frames, and for any 
other events for which this value is not known, the position value 
should be {@link AudioSystem#NOT_SPECIFIED}.
@serial
@see #getFramePosition
"
      end

      operation 8741659 "LineEvent"
	public explicit_return_type ""
	nparams 3
	  param inout name "line" type class_ref 1091611 // Line
	  param inout name "type" type class_ref 1093275 // Type
	  param in name "position" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new event of the specified type, originating from the specified line.
@param line the source of this event
@param type the event type (<code>OPEN</code>, <code>CLOSE</code>, <code>START</code>, or <code>STOP</code>)
@param position the number of sample frames that the line had already processed when the event occurred,
or {@link AudioSystem#NOT_SPECIFIED}

@throws IllegalArgumentException if <code>line</code> is
<code>null</code>."
      end

      operation 8741787 "getLine"
	public return_type class_ref 1091611 // Line
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the audio line that is the source of this event.
@return the line responsible for this event"
      end

      operation 8741915 "getType"
	public return_type class_ref 1093275 // Type
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the event's type.  
@return this event's type ({@link Type#OPEN}, {@link Type#CLOSE}, 
{@link Type#START}, or {@link Type#STOP})"
      end

      operation 8742043 "getFramePosition"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the position in the line's audio data when the event occurred, expressed in sample frames.  
For example, if a source line had already played back 14 sample frames at the time it was 
paused, the pause event would report the line's position as 14.  The next frame to be processed
would be frame number 14 using zero-based numbering, or 15 using one-based numbering.
<p>
Note that this field is relevant only to certain events generated by
data lines, such as <code>START</code> and <code>STOP</code>.  For 
events generated by lines that do not count sample frames, and for any 
other events for which this value is not known, the position value 
should be {@link AudioSystem#NOT_SPECIFIED}.

@return the line's position as a sample frame number


$$kk: 04.20.99: note to myself: should make sure our implementation is consistent with this.
which is a reasonable definition...."
      end

      operation 8742171 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a string representation of the event.  The contents of the string may vary
between implementations of Java Sound.
@return a string describing the event."
      end
    end

    class 1090203 "AudioFileFormat"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An instance of the <code>AudioFileFormat</code> class describes
an audio file, including the file type, the file's length in bytes,
the length in sample frames of the audio data contained in the file,
and the format of the audio data.
<p>
The <code>{@link AudioSystem}</code> class includes methods for determining the format
of an audio file, obtaining an audio input stream from an audio file, and
writing an audio file from an audio input stream.

<p>An <code>AudioFileFormat</code> object can
include a set of properties. A property is a pair of key and value:
the key is of type <code>String</code>, the associated property
value is an arbitrary object.
Properties specify additional informational
meta data (like a author, copyright, or file duration).
Properties are optional information, and file reader and file
writer implementations are not required to provide or
recognize properties.

<p>The following table lists some common properties that should
be used in implementations:

<table border=1>
 <tr>
  <th>Property key</th>
  <th>Value type</th>
  <th>Description</th>
 </tr>
 <tr>
  <td>&quot;duration&quot;</td>
  <td>{@link java.lang.Long Long}</td>
  <td>playback duration of the file in microseconds</td>
 </tr>
 <tr>
  <td>&quot;author&quot;</td>
  <td>{@link java.lang.String String}</td>
  <td>name of the author of this file</td>
 </tr>
 <tr>
  <td>&quot;title&quot;</td>
  <td>{@link java.lang.String String}</td>
  <td>title of this file</td>
 </tr>
 <tr>
  <td>&quot;copyright&quot;</td>
  <td>{@link java.lang.String String}</td>
  <td>copyright message</td>
 </tr>
 <tr>
  <td>&quot;date&quot;</td>
  <td>{@link java.util.Date Date}</td>
  <td>date of the recording or release</td>
 </tr>
 <tr>
  <td>&quot;comment&quot;</td>
  <td>{@link java.lang.String String}</td>
  <td>an arbitrary text</td>
 </tr>
</table>


@author David Rivas
@author Kara Kytle
@author Florian Bomers
@version 1.23 03/12/19
@see AudioInputStream
@since 1.3"
      class 1090331 "Type"
	visibility public 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 2223771 // WAVE (<unidirectional association>)
	  relation 2223771 --->
	    a role_name "WAVE" init_value "=  new Type(\"WAVE\", \"wav\")" class_relation const_relation public
	      comment " FILE FORMAT TYPE DEFINES

Specifies a WAVE file.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 2223771 // WAVE (<unidirectional association>)
	    b parent class_ref 1090331 // Type
	end

	classrelation 2223899 // AU (<unidirectional association>)
	  relation 2223899 --->
	    a role_name "AU" init_value "=  new Type(\"AU\", \"au\")" class_relation const_relation public
	      comment "
Specifies an AU file.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 2223899 // AU (<unidirectional association>)
	    b parent class_ref 1090331 // Type
	end

	classrelation 2224027 // AIFF (<unidirectional association>)
	  relation 2224027 --->
	    a role_name "AIFF" init_value "=  new Type(\"AIFF\", \"aif\")" class_relation const_relation public
	      comment "
Specifies an AIFF file.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 2224027 // AIFF (<unidirectional association>)
	    b parent class_ref 1090331 // Type
	end

	classrelation 2224155 // AIFC (<unidirectional association>)
	  relation 2224155 --->
	    a role_name "AIFC" init_value "=  new Type(\"AIFF-C\", \"aifc\")" class_relation const_relation public
	      comment "
Specifies an AIFF-C file.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 2224155 // AIFC (<unidirectional association>)
	    b parent class_ref 1090331 // Type
	end

	classrelation 2224283 // SND (<unidirectional association>)
	  relation 2224283 --->
	    a role_name "SND" init_value "=  new Type(\"SND\", \"snd\")" class_relation const_relation public
	      comment "
Specifies a SND file.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 2224283 // SND (<unidirectional association>)
	    b parent class_ref 1090331 // Type
	end

	attribute 3151771 "name"
	  const_attribute private explicit_type "String"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " INSTANCE VARIABLES

File type name.
"
	end

	attribute 3151899 "extension"
	  const_attribute private explicit_type "String"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "File type extension.
"
	end

	operation 8721435 "Type"
	  public explicit_return_type ""
	  nparams 2
	    param in name "name" explicit_type "String"
	    param in name "extension" explicit_type "String"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " CONSTRUCTOR

Constructs a file type.
@param name the string that names the file type
@param extension the string that commonly marks the file type
without leading dot."
	end

	operation 8721563 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "obj" explicit_type "Object"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " METHODS

Finalizes the equals method"
	end

	operation 8721691 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Finalizes the hashCode method"
	end

	operation 8721819 "toString"
	  public explicit_return_type "String"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Provides the file type's name as the <code>String</code> representation
of the file type.
@return the file type's name"
	end

	operation 8721947 "getExtension"
	  public explicit_return_type "String"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Obtains the common file name extension for this file type.
@return file type extension"
	end
      end

      classrelation 2223387 // type (<unidirectional association>)
	relation 2223387 --->
	  a role_name "type" private
	    comment " INSTANCE VARIABLES

File type.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2223387 // type (<unidirectional association>)
	  b parent class_ref 1090331 // Type
      end

      attribute 3151515 "byteLength"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "File length in bytes
"
      end

      classrelation 2223515 // format (<unidirectional association>)
	relation 2223515 --->
	  a role_name "format" private
	    comment "
Format of the audio data contained in the file.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2223515 // format (<unidirectional association>)
	  b parent class_ref 1090459 // AudioFormat
      end

      attribute 3151643 "frameLength"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Audio data length in sample frames
"
      end

      classrelation 2223643 // properties (<unidirectional association>)
	relation 2223643 --->
	  a role_name "properties" private
	    comment " The set of properties 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, Object> ${name}${value};
"
	    classrelation_ref 2223643 // properties (<unidirectional association>)
	  b parent class_ref 144923 // HashMap
      end

      operation 8720155 "AudioFileFormat"
	protected explicit_return_type ""
	nparams 4
	  param inout name "type" type class_ref 1090331 // Type
	  param in name "byteLength" explicit_type "int"
	  param inout name "format" type class_ref 1090459 // AudioFormat
	  param in name "frameLength" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an audio file format object.
This protected constructor is intended for use by providers of file-reading
services when returning information about an audio file or about supported audio file
formats.
@param type the type of the audio file
@param byteLength the length of the file in bytes, or <code>AudioSystem.NOT_SPECIFIED</code>
@param format the format of the audio data contained in the file
@param frameLength the audio data length in sample frames, or <code>AudioSystem.NOT_SPECIFIED</code>

@see #getType"
      end

      operation 8720283 "AudioFileFormat"
	public explicit_return_type ""
	nparams 3
	  param inout name "type" type class_ref 1090331 // Type
	  param inout name "format" type class_ref 1090459 // AudioFormat
	  param in name "frameLength" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an audio file format object.
This public constructor may be used by applications to describe the
properties of a requested audio file.
@param type the type of the audio file
@param format the format of the audio data contained in the file
@param frameLength the audio data length in sample frames, or <code>AudioSystem.NOT_SPECIFIED</code>"
      end

      operation 8720411 "AudioFileFormat"
	public explicit_return_type ""
	nparams 4
	  param inout name "type" type class_ref 1090331 // Type
	  param inout name "format" type class_ref 1090459 // AudioFormat
	  param in name "frameLength" explicit_type "int"
	  param inout name "properties" type class_ref 136603 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}<String, Object> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct an audio file format object with a set of
defined properties.
This public constructor may be used by applications to describe the
properties of a requested audio file. The properties map
will be copied to prevent any changes to it.

@param type        the type of the audio file
@param format      the format of the audio data contained in the file
@param frameLength the audio data length in sample frames, or
                   <code>AudioSystem.NOT_SPECIFIED</code>
@param properties  a <code>Map&lt;String,Object&gt;</code> object
       with properties

@since 1.5"
      end

      operation 8720539 "getType"
	public return_type class_ref 1090331 // Type
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the audio file type, such as <code>WAVE</code> or <code>AU</code>.
@return the audio file type

@see Type#WAVE
@see Type#AU
@see Type#AIFF
@see Type#AIFC
@see Type#SND"
      end

      operation 8720667 "getByteLength"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the size in bytes of the entire audio file (not just its audio data).
@return the audio file length in bytes
@see AudioSystem#NOT_SPECIFIED"
      end

      operation 8720795 "getFormat"
	public return_type class_ref 1090459 // AudioFormat
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the format of the audio data contained in the audio file.
@return the audio data format"
      end

      operation 8720923 "getFrameLength"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the length of the audio data contained in the file, expressed in sample frames.
@return the number of sample frames of audio data in the file
@see AudioSystem#NOT_SPECIFIED"
      end

      operation 8721051 "properties"
	public return_type class_ref 136603 // Map
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String,Object> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtain an unmodifiable map of properties.
The concept of properties is further explained in
the {@link AudioFileFormat class description}.

@return a <code>Map&lt;String,Object&gt;</code> object containing
        all properties. If no properties are recognized, an empty map is
        returned.

@see #getProperty(String)
@since 1.5"
      end

      operation 8721179 "getProperty"
	public explicit_return_type "Object"
	nparams 1
	  param in name "key" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtain the property value specified by the key.
The concept of properties is further explained in
the {@link AudioFileFormat class description}.

<p>If the specified property is not defined for a
particular file format, this method returns
<code>null</code>.

@param key the key of the desired property
@return the value of the property with the specified key,
        or <code>null</code> if the property does not exist.

@see #properties
@since 1.5"
      end

      operation 8721307 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Provides a string representation of the file format.
@return the file format as a string"
      end
    end

    class 1090459 "AudioFormat"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<code>AudioFormat</code> is the class that specifies a particular arrangement of data in a sound stream.
By examing the information stored in the audio format, you can discover how to interpret the bits in the
binary sound data.
<p>
Every data line has an audio format associated with its data stream. The audio format of a source (playback) data line indicates
what kind of data the data line expects to receive for output.  For a target (capture) data line, the audio format specifies the kind
of the data that can be read from the line.
Sound files also have audio formats, of course.  The <code>{@link AudioFileFormat}</code>
class encapsulates an <code>AudioFormat</code> in addition to other,
file-specific information.  Similarly, an <code>{@link AudioInputStream}</code> has an
<code>AudioFormat</code>.
<p>
The <code>AudioFormat</code> class accommodates a number of common sound-file encoding techniques, including
pulse-code modulation (PCM), mu-law encoding, and a-law encoding.  These encoding techniques are predefined,
but service providers can create new encoding types.
The encoding that a specific format uses is named by its <code>encoding</code> field.
<p>
In addition to the encoding, the audio format includes other properties that further specify the exact
arrangement of the data.
These include the number of channels, sample rate, sample size, byte order, frame rate, and frame size.
Sounds may have different numbers of audio channels: one for mono, two for stereo.
The sample rate measures how many \"snapshots\" (samples) of the sound pressure are taken per second, per channel.
(If the sound is stereo rather than mono, two samples are actually measured at each instant of time: one for the left channel,
and another for the right channel; however, the sample rate still measures the number per channel, so the rate is the same
regardless of the number of channels.   This is the standard use of the term.)
The sample size indicates how many bits are used to store each snapshot; 8 and 16 are typical values.
For 16-bit samples (or any other sample size larger than a byte),
byte order is important; the bytes in each sample are arranged in
either the \"little-endian\" or \"big-endian\" style.
For encodings like PCM, a frame consists of the set of samples for all channels at a given
point in time, and so the size of a frame (in bytes) is always equal to the size of a sample (in bytes) times
the number of channels.  However, with some other sorts of encodings a frame can contain
a bundle of compressed data for a whole series of samples, as well as additional, non-sample
data.  For such encodings, the sample rate and sample size refer to the data after it is decoded into PCM,
and so they are completely different from the frame rate and frame size.

<p>An <code>AudioFormat</code> object can include a set of
properties. A property is a pair of key and value: the key
is of type <code>String</code>, the associated property
value is an arbitrary object. Properties specify
additional format specifications, like the bit rate for
compressed formats. Properties are mainly used as a means
to transport additional information of the audio format
to and from the service providers. Therefore, properties
are ignored in the {@link #matches(AudioFormat)} method.
However, methods which rely on the installed service
providers, like {@link AudioSystem#isConversionSupported
(AudioFormat, AudioFormat) isConversionSupported} may consider
properties, depending on the respective service provider
implementation.

<p>The following table lists some common properties which
service providers should use, if applicable:

<table border=0>
 <tr>
  <th>Property key</th>
  <th>Value type</th>
  <th>Description</th>
 </tr>
 <tr>
  <td>&quot;bitrate&quot;</td>
  <td>{@link java.lang.Integer Integer}</td>
  <td>average bit rate in bits per second</td>
 </tr>
 <tr>
  <td>&quot;vbr&quot;</td>
  <td>{@link java.lang.Boolean Boolean}</td>
  <td><code>true</code>, if the file is encoded in variable bit
      rate (VBR)</td>
 </tr>
 <tr>
  <td>&quot;quality&quot;</td>
  <td>{@link java.lang.Integer Integer}</td>
  <td>encoding/conversion quality, 1..100</td>
 </tr>
</table>

<p>Vendors of service providers (plugins) are encouraged
to seek information about other already established
properties in third party plugins, and follow the same
conventions.

@author Kara Kytle
@author Florian Bomers
@version 1.35 04/03/15
@see DataLine#getFormat
@see AudioInputStream#getFormat
@see AudioFileFormat
@see javax.sound.sampled.spi.FormatConversionProvider
@since 1.3"
      class 1090587 "Encoding"
	visibility public 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 2224667 // PCM_SIGNED (<unidirectional association>)
	  relation 2224667 --->
	    a role_name "PCM_SIGNED" init_value "=  new Encoding(\"PCM_SIGNED\")" class_relation const_relation public
	      comment " ENCODING DEFINES

Specifies signed, linear PCM data.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 2224667 // PCM_SIGNED (<unidirectional association>)
	    b parent class_ref 1090587 // Encoding
	end

	classrelation 2224795 // PCM_UNSIGNED (<unidirectional association>)
	  relation 2224795 --->
	    a role_name "PCM_UNSIGNED" init_value "=  new Encoding(\"PCM_UNSIGNED\")" class_relation const_relation public
	      comment "
Specifies unsigned, linear PCM data.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 2224795 // PCM_UNSIGNED (<unidirectional association>)
	    b parent class_ref 1090587 // Encoding
	end

	classrelation 2224923 // ULAW (<unidirectional association>)
	  relation 2224923 --->
	    a role_name "ULAW" init_value "=  new Encoding(\"ULAW\")" class_relation const_relation public
	      comment "
Specifies u-law encoded data.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 2224923 // ULAW (<unidirectional association>)
	    b parent class_ref 1090587 // Encoding
	end

	classrelation 2225051 // ALAW (<unidirectional association>)
	  relation 2225051 --->
	    a role_name "ALAW" init_value "=  new Encoding(\"ALAW\")" class_relation const_relation public
	      comment "
Specifies a-law encoded data.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 2225051 // ALAW (<unidirectional association>)
	    b parent class_ref 1090587 // Encoding
	end

	attribute 3152795 "name"
	  private explicit_type "String"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " INSTANCE VARIABLES

Encoding name.
"
	end

	operation 8723867 "Encoding"
	  public explicit_return_type ""
	  nparams 1
	    param in name "name" explicit_type "String"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " CONSTRUCTOR

Constructs a new encoding.
@param name	the name of the new type of encoding"
	end

	operation 8723995 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "obj" explicit_type "Object"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " METHODS

Finalizes the equals method"
	end

	operation 8724123 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Finalizes the hashCode method"
	end

	operation 8724251 "toString"
	  public explicit_return_type "String"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Provides the <code>String</code> representation of the encoding.  This <code>String</code> is
the same name that was passed to the constructor.  For the predefined encodings, the name
is similar to the encoding's variable (field) name.  For example, <code>PCM_SIGNED.toString()</code> returns
the name \"pcm_signed\".

@return the encoding name"
	end
      end

      classrelation 2224411 // encoding (<unidirectional association>)
	relation 2224411 --->
	  a role_name "encoding" protected
	    comment " INSTANCE VARIABLES

The audio encoding technique used by this format.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2224411 // encoding (<unidirectional association>)
	  b parent class_ref 1090587 // Encoding
      end

      attribute 3152027 "sampleRate"
	protected explicit_type "float"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The number of samples played or recorded per second, for sounds that have this format.
"
      end

      attribute 3152155 "sampleSizeInBits"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The number of bits in each sample of a sound that has this format.
"
      end

      attribute 3152283 "channels"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The number of audio channels in this format (1 for mono, 2 for stereo).
"
      end

      attribute 3152411 "frameSize"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The number of bytes in each frame of a sound that has this format.
"
      end

      attribute 3152539 "frameRate"
	protected explicit_type "float"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The number of frames played or recorded per second, for sounds that have this format.
"
      end

      attribute 3152667 "bigEndian"
	protected explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates whether the audio data is stored in big-endian or little-endian order.
"
      end

      classrelation 2224539 // properties (<unidirectional association>)
	relation 2224539 --->
	  a role_name "properties" private
	    comment " The set of properties 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, Object> ${name}${value};
"
	    classrelation_ref 2224539 // properties (<unidirectional association>)
	  b parent class_ref 144923 // HashMap
      end

      operation 8722075 "AudioFormat"
	public explicit_return_type ""
	nparams 7
	  param inout name "encoding" type class_ref 1090587 // Encoding
	  param in name "sampleRate" explicit_type "float"
	  param in name "sampleSizeInBits" explicit_type "int"
	  param in name "channels" explicit_type "int"
	  param in name "frameSize" explicit_type "int"
	  param in name "frameRate" explicit_type "float"
	  param inout name "bigEndian" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>AudioFormat</code> with the given parameters.
The encoding specifies the convention used to represent the data.
The other parameters are further explained in the {@link AudioFormat
class description}.
@param encoding			the audio encoding technique
@param sampleRate		the number of samples per second
@param sampleSizeInBits	the number of bits in each sample
@param channels			the number of channels (1 for mono, 2 for stereo, and so on)
@param frameSize			the number of bytes in each frame
@param frameRate			the number of frames per second
@param bigEndian			indicates whether the data for a single sample
							is stored in big-endian byte order (<code>false</code>
							means little-endian)"
      end

      operation 8722203 "AudioFormat"
	public explicit_return_type ""
	nparams 8
	  param inout name "encoding" type class_ref 1090587 // Encoding
	  param in name "sampleRate" explicit_type "float"
	  param in name "sampleSizeInBits" explicit_type "int"
	  param in name "channels" explicit_type "int"
	  param in name "frameSize" explicit_type "int"
	  param in name "frameRate" explicit_type "float"
	  param inout name "bigEndian" explicit_type "boolean"
	  param inout name "properties" type class_ref 136603 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7}<String, Object> ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>AudioFormat</code> with the given parameters.
The encoding specifies the convention used to represent the data.
The other parameters are further explained in the {@link AudioFormat
class description}.
@param encoding         the audio encoding technique
@param sampleRate       the number of samples per second
@param sampleSizeInBits the number of bits in each sample
@param channels         the number of channels (1 for mono, 2 for
                        stereo, and so on)
@param frameSize        the number of bytes in each frame
@param frameRate        the number of frames per second
@param bigEndian        indicates whether the data for a single sample
                        is stored in big-endian byte order
                        (<code>false</code> means little-endian)
@param properties       a <code>Map&lt;String,Object&gt;</code> object
                        containing format properties

@since 1.5"
      end

      operation 8722331 "AudioFormat"
	public explicit_return_type ""
	nparams 5
	  param in name "sampleRate" explicit_type "float"
	  param in name "sampleSizeInBits" explicit_type "int"
	  param in name "channels" explicit_type "int"
	  param inout name "signed" explicit_type "boolean"
	  param inout name "bigEndian" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>AudioFormat</code> with a linear PCM encoding and
the given parameters.  The frame size is set to the number of bytes
required to contain one sample from each channel, and the frame rate
is set to the sample rate.

@param sampleRate		the number of samples per second
@param sampleSizeInBits	the number of bits in each sample
@param channels			the number of channels (1 for mono, 2 for stereo, and so on)
@param signed			indicates whether the data is signed or unsigned
@param bigEndian			indicates whether the data for a single sample
							is stored in big-endian byte order (<code>false</code>
							means little-endian)"
      end

      operation 8722459 "getEncoding"
	public return_type class_ref 1090587 // Encoding
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the type of encoding for sounds in this format.

@return the encoding type
@see Encoding#PCM_SIGNED
@see Encoding#PCM_UNSIGNED
@see Encoding#ULAW
@see Encoding#ALAW"
      end

      operation 8722587 "getSampleRate"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the sample rate.
For compressed formats, the return value is the sample rate of the uncompressed
audio data.
When this AudioFormat is used for queries (e.g. {@link
AudioSystem#isConversionSupported(AudioFormat, AudioFormat)
AudioSystem.isConversionSupported}) or capabilities (e.g. {@link
DataLine.Info#getFormats() DataLine.Info.getFormats}), a sample rate of
<code>AudioSystem.NOT_SPECIFIED</code> means that any sample rate is
acceptable. <code>AudioSystem.NOT_SPECIFIED</code> is also returned when
the sample rate is not defined for this audio format.
@return the number of samples per second,
or <code>AudioSystem.NOT_SPECIFIED</code>

@see #getFrameRate()
@see AudioSystem#NOT_SPECIFIED"
      end

      operation 8722715 "getSampleSizeInBits"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the size of a sample.
For compressed formats, the return value is the sample size of the
uncompressed audio data.
When this AudioFormat is used for queries (e.g. {@link
AudioSystem#isConversionSupported(AudioFormat, AudioFormat)
AudioSystem.isConversionSupported}) or capabilities (e.g. {@link
DataLine.Info#getFormats() DataLine.Info.getFormats}), a sample size of
<code>AudioSystem.NOT_SPECIFIED</code> means that any sample size is
acceptable. <code>AudioSystem.NOT_SPECIFIED</code> is also returned when
the sample size is not defined for this audio format.
@return the number of bits in each sample,
or <code>AudioSystem.NOT_SPECIFIED</code>

@see #getFrameSize()
@see AudioSystem#NOT_SPECIFIED"
      end

      operation 8722843 "getChannels"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the number of channels.
When this AudioFormat is used for queries (e.g. {@link
AudioSystem#isConversionSupported(AudioFormat, AudioFormat)
AudioSystem.isConversionSupported}) or capabilities (e.g. {@link
DataLine.Info#getFormats() DataLine.Info.getFormats}), a return value of
<code>AudioSystem.NOT_SPECIFIED</code> means that any (positive) number of channels is
acceptable.
@return The number of channels (1 for mono, 2 for stereo, etc.),
or <code>AudioSystem.NOT_SPECIFIED</code>

@see AudioSystem#NOT_SPECIFIED"
      end

      operation 8722971 "getFrameSize"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the frame size in bytes.
When this AudioFormat is used for queries (e.g. {@link
AudioSystem#isConversionSupported(AudioFormat, AudioFormat)
AudioSystem.isConversionSupported}) or capabilities (e.g. {@link
DataLine.Info#getFormats() DataLine.Info.getFormats}), a frame size of
<code>AudioSystem.NOT_SPECIFIED</code> means that any frame size is
acceptable. <code>AudioSystem.NOT_SPECIFIED</code> is also returned when
the frame size is not defined for this audio format.
@return the number of bytes per frame,
or <code>AudioSystem.NOT_SPECIFIED</code>

@see #getSampleSizeInBits()
@see AudioSystem#NOT_SPECIFIED"
      end

      operation 8723099 "getFrameRate"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the frame rate in frames per second.
When this AudioFormat is used for queries (e.g. {@link
AudioSystem#isConversionSupported(AudioFormat, AudioFormat)
AudioSystem.isConversionSupported}) or capabilities (e.g. {@link
DataLine.Info#getFormats() DataLine.Info.getFormats}), a frame rate of
<code>AudioSystem.NOT_SPECIFIED</code> means that any frame rate is
acceptable. <code>AudioSystem.NOT_SPECIFIED</code> is also returned when
the frame rate is not defined for this audio format.
@return the number of frames per second,
or <code>AudioSystem.NOT_SPECIFIED</code>

@see #getSampleRate()
@see AudioSystem#NOT_SPECIFIED"
      end

      operation 8723227 "isBigEndian"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether the audio data is stored in big-endian or little-endian
byte order.  If the sample size is not more than one byte, the return value is
irrelevant.
@return <code>true</code> if the data is stored in big-endian byte order,
<code>false</code> if little-endian"
      end

      operation 8723355 "properties"
	public return_type class_ref 136603 // Map
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String,Object> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtain an unmodifiable map of properties.
The concept of properties is further explained in
the {@link AudioFileFormat class description}.

@return a <code>Map&lt;String,Object&gt;</code> object containing
        all properties. If no properties are recognized, an empty map is
        returned.

@see #getProperty(String)
@since 1.5"
      end

      operation 8723483 "getProperty"
	public explicit_return_type "Object"
	nparams 1
	  param in name "key" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtain the property value specified by the key.
The concept of properties is further explained in
the {@link AudioFileFormat class description}.

<p>If the specified property is not defined for a
particular file format, this method returns
<code>null</code>.

@param key the key of the desired property
@return the value of the property with the specified key,
        or <code>null</code> if the property does not exist.

@see #properties
@since 1.5"
      end

      operation 8723611 "matches"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "format" type class_ref 1090459 // AudioFormat
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether this format matches the one specified.  To match,
two formats must have the same encoding, the same number of channels,
and the same number of bits per sample and bytes per frame.
The two formats must also have the same sample rate,
unless the specified format has the sample rate value <code>AudioSystem.NOT_SPECIFIED</code>,
which any sample rate will match.  The frame rates must
similarly be equal, unless the specified format has the frame rate
value <code>AudioSystem.NOT_SPECIFIED</code>.  The byte order (big-endian or little-endian)
must match if the sample size is greater than one byte.

@param format format to test for match
@return <code>true</code> if this format matches the one specified,
<code>false</code> otherwise.


$$kk: 04.20.99: i changed the semantics of this."
      end

      operation 8723739 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string that describes the format, such as:
\"PCM SIGNED 22050 Hz 16 bit mono big-endian\".  The contents of the string
may vary between implementations of Java Sound.

@return a string that describes the format parameters"
      end
    end

    class 1090715 "AudioInputStream"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An audio input stream is an input stream with a specified audio format and
length.  The length is expressed in sample frames, not bytes.
Several methods are provided for reading a certain number of bytes from
the stream, or an unspecified number of bytes.
The audio input stream keeps track  of the last byte that was read.
You can skip over an arbitrary number of bytes to get to a later position
for reading. An audio input stream may support marks.  When you set a mark,
the current position is remembered so that you can return to it later.
<p>
The <code>AudioSystem</code> class includes many methods that manipulate
<code>AudioInputStream</code> objects.
For example, the methods let you:
<ul>
<li> obtain an
audio input stream from an external audio file, stream, or URL
<li> write an external file from an audio input stream
<li> convert an audio input stream to a different audio format
</ul>

@author David Rivas
@author Kara Kytle
@author Florian Bomers
@version 1.32, 03/12/19

@see AudioSystem
@see Clip#open(AudioInputStream) Clip.open(AudioInputStream)
@since 1.3"
      classrelation 2225179 // <generalisation>
	relation 2225179 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2225179 // <generalisation>
	  b parent class_ref 179099 // InputStream
      end

      classrelation 2225307 // stream (<unidirectional association>)
	relation 2225307 --->
	  a role_name "stream" private
	    comment "
The <code>InputStream</code> from which this <code>AudioInputStream</code>
object was constructed.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2225307 // stream (<unidirectional association>)
	  b parent class_ref 179099 // InputStream
      end

      classrelation 2225435 // format (<unidirectional association>)
	relation 2225435 --->
	  a role_name "format" protected
	    comment "
The format of the audio data contained in the stream.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2225435 // format (<unidirectional association>)
	  b parent class_ref 1090459 // AudioFormat
      end

      attribute 3152923 "frameLength"
	protected explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "This stream's length, in sample frames.
"
      end

      attribute 3153051 "frameSize"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The size of each frame, in bytes.
"
      end

      attribute 3153179 "framePos"
	protected explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The current position in this stream, in sample frames (zero-based).
"
      end

      attribute 3153307 "markpos"
	private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The position where a mark was set.
"
      end

      attribute 3153435 "pushBackBuffer"
	private explicit_type "byte"
	multiplicity "[]"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "When the underlying stream could only return
a non-integral number of frames, store
the remainder in a temporary buffer
"
      end

      attribute 3153563 "pushBackLen"
	private explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "number of valid bytes in the pushBackBuffer
"
      end

      attribute 3153691 "markPushBackBuffer"
	private explicit_type "byte"
	multiplicity "[]"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "MarkBuffer at mark position
"
      end

      attribute 3153819 "markPushBackLen"
	private explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "number of valid bytes in the markPushBackBuffer
"
      end

      operation 8724379 "AudioInputStream"
	public explicit_return_type ""
	nparams 3
	  param inout name "stream" type class_ref 179099 // InputStream
	  param inout name "format" type class_ref 1090459 // AudioFormat
	  param in name "length" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an audio input stream that has the requested format and length in sample frames,
using audio data from the specified input stream.
@param stream the stream on which this <code>AudioInputStream</code>
object is based
@param format the format of this stream's audio data
@param length the length in sample frames of the data in this stream"
      end

      operation 8724507 "AudioInputStream"
	public explicit_return_type ""
	nparams 1
	  param inout name "line" type class_ref 1090843 // TargetDataLine
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an audio input stream that reads its data from the target
data line indicated.  The format of the stream is the same as that of
the target data line, and the length is AudioSystem#NOT_SPECIFIED.
@param line the target data line from which this stream obtains its data.
@see AudioSystem#NOT_SPECIFIED"
      end

      operation 8724635 "getFormat"
	public return_type class_ref 1090459 // AudioFormat
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the audio format of the sound data in this audio input stream.
@return an audio format object describing this stream's format"
      end

      operation 8724763 "getFrameLength"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the length of the stream, expressed in sample frames rather than bytes.
@return the length in sample frames"
      end

      operation 8724891 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the next byte of data from the audio input stream.  The audio input
stream's frame size must be one byte, or an <code>IOException</code>
will be thrown.

@return the next byte of data, or -1 if the end of the stream is reached
@throws IOException if an input or output error occurs
@see #read(byte[], int, int)
@see #read(byte[])
@see #available
<p>"
      end

      operation 8725019 "read"
	public explicit_return_type "int"
	nparams 1
	  param in name "b" explicit_type "byte"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads some number of bytes from the audio input stream and stores them into
the buffer array <code>b</code>. The number of bytes actually read is
returned as an integer. This method blocks until input data is
available, the end of the stream is detected, or an exception is thrown.
<p>This method will always read an integral number of frames.
If the length of the array is not an integral number
of frames, a maximum of <code>b.length - (b.length % frameSize)
</code> bytes will be read.

@param b the buffer into which the data is read
@return the total number of bytes read into the buffer, or -1 if there
is no more data because the end of the stream has been reached
@throws IOException if an input or output error occurs
@see #read(byte[], int, int)
@see #read()
@see #available"
      end

      operation 8725147 "read"
	public explicit_return_type "int"
	nparams 3
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads up to a specified maximum number of bytes of data from the audio
stream, putting them into the given byte array.
<p>This method will always read an integral number of frames.
If <code>len</code> does not specify an integral number
of frames, a maximum of <code>len - (len % frameSize)
</code> bytes will be read.

@param b the buffer into which the data is read
@param off the offset, from the beginning of array <code>b</code>, at which
the data will be written
@param len the maximum number of bytes to read
@return the total number of bytes read into the buffer, or -1 if there
is no more data because the end of the stream has been reached
@throws IOException if an input or output error occurs
@see #read(byte[])
@see #read()
@see #skip
@see #available"
      end

      operation 8725275 "skip"
	public explicit_return_type "long"
	nparams 1
	  param in name "n" explicit_type "long"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Skips over and discards a specified number of bytes from this
audio input stream.
@param n the requested number of bytes to be skipped
@return the actual number of bytes skipped
@throws IOException if an input or output error occurs
@see #read
@see #available"
      end

      operation 8725403 "available"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maximum number of bytes that can be read (or skipped over) from this
audio input stream without blocking.  This limit applies only to the next invocation of
a <code>read</code> or <code>skip</code> method for this audio input stream; the limit
can vary each time these methods are invoked.
Depending on the underlying stream,an IOException may be thrown if this
stream is closed.
@return the number of bytes that can be read from this audio input stream without blocking
@throws IOException if an input or output error occurs
@see #read(byte[], int, int)
@see #read(byte[])
@see #read()
@see #skip"
      end

      operation 8725531 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this audio input stream and releases any system resources associated
with the stream.
@throws IOException if an input or output error occurs"
      end

      operation 8725659 "mark"
	public explicit_return_type "void"
	nparams 1
	  param in name "readlimit" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Marks the current position in this audio input stream.
@param readlimit the maximum number of bytes that can be read before
the mark position becomes invalid.
@see #reset
@see #markSupported"
      end

      operation 8725787 "reset"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Repositions this audio input stream to the position it had at the time its
<code>mark</code> method was last invoked.
@throws IOException if an input or output error occurs.
@see #mark
@see #markSupported"
      end

      operation 8725915 "markSupported"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether this audio input stream supports the <code>mark</code> and
<code>reset</code> methods.
@return <code>true</code> if this stream supports the <code>mark</code>
and <code>reset</code> methods; <code>false</code> otherwise
@see #mark
@see #reset"
      end

      class 1090971 "TargetDataLineInputStream"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 2225563 // <generalisation>
	  relation 2225563 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 2225563 // <generalisation>
	    b parent class_ref 179099 // InputStream
	end

	classrelation 2225691 // line (<unidirectional association>)
	  relation 2225691 --->
	    a role_name "line" package
	      comment "
The TargetDataLine on which this TargetDataLineInputStream is based.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 2225691 // line (<unidirectional association>)
	    b parent class_ref 1090843 // TargetDataLine
	end

	operation 8726043 "TargetDataLineInputStream"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "line" type class_ref 1090843 // TargetDataLine
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8726171 "available"
	  public explicit_return_type "int"
	  nparams 0
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8726299 "close"
	  public explicit_return_type "void"
	  nparams 0
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "$$fb 2001-07-16: added this method to correctly close the underlying TargetDataLine.
 fixes bug 4479984"
	end

	operation 8726427 "read"
	  public explicit_return_type "int"
	  nparams 0
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8726555 "read"
	  public explicit_return_type "int"
	  nparams 3
	    param in name "b" explicit_type "byte"
	    param in name "off" explicit_type "int"
	    param in name "len" explicit_type "int"
	  nexceptions 1
	    exception class_ref 179355 // IOException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end
    end

    class 1090843 "TargetDataLine"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A target data line is a type of <code>{@link DataLine}</code> from which 
audio data can be read.  The most common example is a data line that gets
its data from an audio capture device.  (The device is implemented as a
mixer that writes to the target data line.)
<p>
Note that the naming convention for this interface reflects the relationship
between the line and its mixer.  From the perspective of an application,
a target data line may act as a source for audio data.
<p>
The target data line can be obtained from a mixer by invoking the 
<code>{@link Mixer#getLine getLine}</code> 
method of <code>Mixer</code> with an appropriate 
<code>{@link DataLine.Info}</code> object.
<p>
The <code>TargetDataLine</code> interface provides a method for reading the
captured data from the target data line's buffer.Applications 
that record audio should read data from the target data line quickly enough 
to keep the buffer from overflowing, which could cause discontinuities in 
the captured data that are perceived as clicks.  Applications can use the 
<code>{@link DataLine#available available}</code> method defined in the
<code>DataLine</code> interface to determine the amount of data currently
queued in the data line's buffer.  If the buffer does overflow,
the oldest queued data is discarded and replaced by new data.

@author Kara Kytle
@version 1.20 03/12/19
@see Mixer
@see DataLine
@see SourceDataLine
@since 1.3"
      classrelation 2228379 // <generalisation>
	relation 2228379 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2228379 // <generalisation>
	  b parent class_ref 1092763 // DataLine
      end

      operation 8746395 "open"
	public explicit_return_type "void"
	nparams 2
	  param inout name "format" type class_ref 1090459 // AudioFormat
	  param in name "bufferSize" explicit_type "int"
	nexceptions 1
	  exception class_ref 1091867 // LineUnavailableException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Opens the line with the specified format and requested buffer size,
causing the line to acquire any required system resources and become 
operational.  
<p>
The buffer size is specified in bytes, but must represent an integral 
number of sample frames.  Invoking this method with a requested buffer 
size that does not meet this requirement may result in an 
IllegalArgumentException.  The actual buffer size for the open line may 
differ from the requested buffer size.  The value actually set may be 
queried by subsequently calling <code>{@link DataLine#getBufferSize}</code>  
<p>
If this operation succeeds, the line is marked as open, and an 
<code>{@link LineEvent.Type#OPEN OPEN}</code> event is dispatched to the 
line's listeners.
<p>
Invoking this method on a line that is already open is illegal
and may result in an <code>IllegalStateException</code>.
<p>
Some lines, once closed, cannot be reopened.  Attempts
to reopen such a line will always result in a 
<code>LineUnavailableException</code>.

@param format the desired audio format
@param bufferSize the desired buffer size, in bytes.
@throws LineUnavailableException if the line cannot be
opened due to resource restrictions
@throws IllegalArgumentException if the buffer size does not represent
an integral number of sample frames,
or if <code>format</code> is not fully specified or invalid
@throws IllegalStateException if the line is already open
@throws SecurityException if the line cannot be
opened due to security restrictions

@see #open(AudioFormat)
@see Line#open
@see Line#close
@see Line#isOpen
@see LineEvent"
      end

      operation 8746523 "open"
	public explicit_return_type "void"
	nparams 1
	  param inout name "format" type class_ref 1090459 // AudioFormat
	nexceptions 1
	  exception class_ref 1091867 // LineUnavailableException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Opens the line with the specified format, causing the line to acquire any 
required system resources and become operational.  
  
<p>
The implementation chooses a buffer size, which is measured in bytes but 
which encompasses an integral number of sample frames.  The buffer size 
that the system has chosen may be queried by subsequently calling <code>{@link DataLine#getBufferSize}</code>  
<p>
If this operation succeeds, the line is marked as open, and an 
<code>{@link LineEvent.Type#OPEN OPEN}</code> event is dispatched to the 
line's listeners.
<p>
Invoking this method on a line that is already open is illegal
and may result in an <code>IllegalStateException</code>.
<p>
Some lines, once closed, cannot be reopened.  Attempts
to reopen such a line will always result in a 
<code>LineUnavailableException</code>.

@param format the desired audio format
@throws LineUnavailableException if the line cannot be
opened due to resource restrictions
@throws IllegalArgumentException if <code>format</code>
is not fully specified or invalid
@throws IllegalStateException if the line is already open
@throws SecurityException if the line cannot be
opened due to security restrictions

@see #open(AudioFormat, int)
@see Line#open
@see Line#close
@see Line#isOpen
@see LineEvent"
      end

      operation 8746651 "read"
	public explicit_return_type "int"
	nparams 3
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads audio data from the data line's input buffer.   The requested 
number of bytes is read into the specified array, starting at
the specified offset into the array in bytes.  This method blocks until
the requested amount of data has been read.  However, if the data line 
is closed, stopped, drained, or flushed before the requested amount has 
been read, the method no longer blocks, but returns the number of bytes
read thus far. 
<p>
The number of bytes that can be read without blocking can be ascertained
using the <code>{@link DataLine#available available}</code> method of the
<code>DataLine</code> interface.  (While it is guaranteed that
this number of bytes can be read without blocking, there is no guarantee
that attempts to read additional data will block.)
<p>
The number of bytes to be read must represent an integral number of
sample frames, such that:
<br>
<center><code>[ bytes read ] % [frame size in bytes ] == 0</code></center>
<br>
The return value will always meet this requirement.  A request to read a 
number of bytes representing a non-integral number of sample frames cannot 
be fulfilled and may result in an IllegalArgumentException.

@param b a byte array that will contain the requested input data when 
this method returns
@param off the offset from the beginning of the array, in bytes
@param len the requested number of bytes to read
@return the number of bytes actually read
@throws IllegalArgumentException if the requested number of bytes does
not represent an integral number of sample frames.
or if <code>len</code> is negative.
@throws ArrayIndexOutOfBoundsException if <code>off</code> is negative,
or <code>off+len</code> is greater than the length of the array
<code>b</code>. 

@see SourceDataLine#write
@see DataLine#available"
      end
    end

    class 1091099 "AudioPermission"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The <code>AudioPermission</code> class represents access rights to the audio
system resources.  An <code>AudioPermission</code> contains a target name
but no actions list; you either have the named permission or you don't.
<p>
The target name is the name of the audio permission (see the table below).
The names follow the hierarchical property-naming convention. Also, an asterisk
can be used to represent all the audio permissions.
<p>
The following table lists the possible <code>AudioPermission</code> target names.
For each name, the table provides a description of exactly what that permission
allows, as well as a discussion of the risks of granting code the permission.
<p>

<table border=1 cellpadding=5 summary=\"permission target name, what the permission allows, and associated risks\">
<tr>
<th>Permission Target Name</th>
<th>What the Permission Allows</th>
<th>Risks of Allowing this Permission</th>
</tr>

<tr>
<td>play</td>
<td>Audio playback through the audio device or devices on the system.
Allows the application to obtain and manipulate lines and mixers for
audio playback (rendering).</td>
<td>In some cases use of this permission may affect other
applications because the audio from one line may be mixed with other audio
being played on the system, or because manipulation of a mixer affects the
audio for all lines using that mixer.</td>
</tr>

<tr>
<td>record</td>
<td>Audio recording through the audio device or devices on the system.
Allows the application to obtain and manipulate lines and mixers for
audio recording (capture).</td>
<td>In some cases use of this permission may affect other
applications because manipulation of a mixer affects the audio for all lines
using that mixer.
This permission can enable an applet or application to eavesdrop on a user.</td>
</tr>
</table>
<p>

@author Kara Kytle
@version 1.17 03/12/19
@since 1.3


(OLD PERMISSIONS TAKEN OUT FOR 1.2 BETA)

<tr>
<td>playback device access</td>
<td>Direct access to the audio playback device(s), including configuration of the
playback format, volume, and balance, explicit opening and closing of the device,
etc.</td>
<td>Changes the properties of a shared system device and therefore
can affect other applications.</td>
</tr>

<tr>
<td>playback device override</td>
<td>Manipulation of the audio playback device(s) in a way that directly conflicts
with use by other applications.  This includes closing the device while it is in
use by another application, changing the device format while another application
is using it, etc. </td>
<td>Changes the properties of a shared system device and therefore
can affect other applications.</td>
</tr>

<tr>
<td>record device access</td>
<td>Direct access to the audio recording device(s), including configuration of the
the record format, volume, and balance, explicit opening and closing of the device,
etc.</td>
<td>Changes the properties of a shared system device and therefore
can affect other applications.</td>
</tr>

<tr>
<td>record device override</td>
<td>Manipulation of the audio recording device(s) in a way that directly conflicts
with use by other applications.  This includes closing the device while it is in
use by another application, changing the device format while another application
is using it, etc. </td>
<td>Changes the properties of a shared system device and therefore
can affect other applications.</td>
</tr>

</table>
<p>

@author Kara Kytle
@version 1.17 03/12/19
@since 1.3


The <code>AudioPermission</code> class represents access rights to the audio
system resources.  An <code>AudioPermission</code> contains a target name
but no actions list; you either have the named permission or you don't.
<p>
The target name is the name of the audio permission (see the table below).
The names follow the hierarchical property-naming convention. Also, an asterisk
can be used to represent all the audio permissions.
<p>
The following table lists all the possible AudioPermission target names.
For each name, the table provides a description of exactly what that permission
allows, as well as a discussion of the risks of granting code the permission.
<p>

<table border=1 cellpadding=5>
<tr>
<th>Permission Target Name</th>
<th>What the Permission Allows</th>
<th>Risks of Allowing this Permission</th>
</tr>

<tr>
<td>play</td>
<td>Audio playback through the audio device or devices on the system.</td>
<td>Allows the application to use a system device.  Can affect other applications,
because the result will be mixed with other audio being played on the system.</td>
</tr>

<tr>
<td>record</td>
<td>Recording audio from the audio device or devices on the system,
commonly through a microphone.</td>
<td>Can enable an applet or application to eavesdrop on a user.</td>
</tr>

<tr>
<td>playback device access</td>
<td>Direct access to the audio playback device(s), including configuration of the
playback format, volume, and balance, explicit opening and closing of the device,
etc.</td>
<td>Changes the properties of a shared system device and therefore
can affect other applications.</td>
</tr>

<tr>
<td>playback device override</td>
<td>Manipulation of the audio playback device(s) in a way that directly conflicts
with use by other applications.  This includes closing the device while it is in
use by another application, changing the device format while another application
is using it, etc. </td>
<td>Changes the properties of a shared system device and therefore
can affect other applications.</td>
</tr>

<tr>
<td>record device access</td>
<td>Direct access to the audio recording device(s), including configuration of the
the record format, volume, and balance, explicit opening and closing of the device,
etc.</td>
<td>Changes the properties of a shared system device and therefore
can affect other applications.</td>
</tr>

<tr>
<td>record device override</td>
<td>Manipulation of the audio recording device(s) in a way that directly conflicts
with use by other applications.  This includes closing the device while it is in
use by another application, changing the device format while another application
is using it, etc. </td>
<td>Changes the properties of a shared system device and therefore
can affect other applications.</td>
</tr>

</table>
<p>

@version 1.17 03/12/19
@author Kara Kytle"
      classrelation 2225819 // <generalisation>
	relation 2225819 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2225819 // <generalisation>
	  b parent class_ref 285083 // BasicPermission
      end

      operation 8726683 "AudioPermission"
	public explicit_return_type ""
	nparams 1
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <code>AudioPermission</code> object that has the specified
symbolic name, such as \"play\" or \"record\". An asterisk can be used to indicate
all audio permissions.
@param name the name of the new <code>AudioPermission</code>
@throws IllegalArgumentException if <code>name</code> is empty


Creates a new <code>AudioPermission</code> object that has the specified
symbolic name, such as \"play\" or \"record\". An asterisk can be used to indicate
all audio permissions.
@param name the name of the new <code>AudioPermission</code>"
      end

      operation 8726811 "AudioPermission"
	public explicit_return_type ""
	nparams 2
	  param in name "name" explicit_type "String"
	  param in name "actions" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <code>AudioPermission</code> object that has the specified
symbolic name, such as \"play\" or \"record\".  The <code>actions</code>
parameter is currently unused and should be <code>null</code>.
@param name the name of the new <code>AudioPermission</code>
@param actions (unused; should be <code>null</code>)
@throws IllegalArgumentException if <code>name</code> is empty


Creates a new AudioPermission object that has the specified
symbolic name, such as \"play\" or \"record\".  The <code>actions</code>
parameter is currently unused and should be <code>null</code>.
@param name the name of the new <code>AudioPermission</code>
@param actions (unused; should be <code>null</code>)"
      end
    end

    class 1091227 "AudioSystem"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " $fb TODO:
- consistent usage of (typed) collections


The <code>AudioSystem</code> class acts as the entry point to the
sampled-audio system resources. This class lets you query and
access the mixers that are installed on the system.
<code>AudioSystem</code> includes a number of
methods for converting audio data between different formats, and for
translating between audio files and streams. It also provides a method
for obtaining a <code>{@link Line}</code> directly from the
<code>AudioSystem</code> without dealing explicitly
with mixers.

<p>Properties can be used to specify the default mixer
for specific line types.
Both system properties and a properties file are considered.
In the Sun reference implementation, the properties file is
&quot;lib/sound.properties&quot; in the JRE
directory. If a property exists both as a system property and in the
properties file, the system property takes precedence. If none is
specified, a suitable default is chosen among the available devices.
The syntax of the properties file is specified in
{@link java.util.Properties#load(InputStream) Properties.load}. The
following table lists the available property keys and which methods
consider them:

<table border=0>
 <tr>
  <th>Property Key</th>
  <th>Interface</th>
  <th>Affected Method(s)</th>
 </tr>
 <tr>
  <td><code>javax.sound.sampled.Clip</code></td>
  <td>{@link Clip}</td>
  <td>{@link #getLine}, {@link #getClip}</td>
 </tr>
 <tr>
  <td><code>javax.sound.sampled.Port</code></td>
  <td>{@link Port}</td>
  <td>{@link #getLine}</td>
 </tr>
 <tr>
  <td><code>javax.sound.sampled.SourceDataLine</code></td>
  <td>{@link SourceDataLine}</td>
  <td>{@link #getLine}, {@link #getSourceDataLine}</td>
 </tr>
 <tr>
  <td><code>javax.sound.sampled.TargetDataLine</code></td>
  <td>{@link TargetDataLine}</td>
  <td>{@link #getLine}, {@link #getTargetDataLine}</td>
 </tr>
</table>

The property value consists of the provider class name
and the mixer name, separated by the hash mark (&quot;#&quot;).
The provider class name is the fully-qualified
name of a concrete {@link javax.sound.sampled.spi.MixerProvider
mixer provider} class. The mixer name is matched against
the <code>String</code> returned by the <code>getName</code>
method of <code>Mixer.Info</code>.
Either the class name, or the mixer name may be omitted.
If only the class name is specified, the trailing hash mark
is optional.

<p>If the provider class is specified, and it can be
successully retrieved from the installed providers, the list of
<code>Mixer.Info</code> objects is retrieved
from the provider. Otherwise, or when these mixers
do not provide a subsequent match, the list is retrieved
from {@link #getMixerInfo} to contain
all available <code>Mixer.Info</code> objects.

<p>If a mixer name is specified, the resulting list of
<code>Mixer.Info</code> objects is searched:
the first one with a matching name, and whose
<code>Mixer</code> provides the
respective line interface, will be returned.
If no matching <code>Mixer.Info</code> object
is found, or the mixer name is not specified,
the first mixer from the resulting
list, which provides the respective line
interface, will be returned.

For example, the property <code>javax.sound.sampled.Clip</code>
with a value
<code>&quot;com.sun.media.sound.MixerProvider#SunClip&quot;</code>
will have the following consequences when
<code>getLine</code> is called requesting a <code>Clip</code>
instance:
if the class <code>com.sun.media.sound.MixerProvider</code> exists
in the list of installed mixer providers,
the first <code>Clip</code> from the first mixer with name
<code>&quot;SunClip&quot;</code> will be returned. If it cannot
be found, the first <code>Clip</code> from the first mixer
of the specified provider will be returned, regardless of name.
If there is none, the first <code>Clip</code> from the first
<code>Mixer</code> with name
<code>&quot;SunClip&quot;</code> in the list of all mixers
(as returned by <code>getMixerInfo</code>) will be returned,
or, if not found, the first <code>Clip</code> of the first
<code>Mixer</code>that can be found in the list of all
mixers is returned.
If that fails, too, an <code>IllegalArgumentException</code>
is thrown.

@author Kara Kytle
@author Florian Bomers
@author Matthias Pfisterer
@author Kevin P. Smith
@version 1.81, 04/07/14

@see AudioFormat
@see AudioInputStream
@see Mixer
@see Line
@see Line.Info
@since 1.3"
      attribute 3153947 "NOT_SPECIFIED"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "An integer that stands for an unknown numeric value.
This value is appropriate only for signed quantities that do not
normally take negative values.  Examples include file sizes, frame
sizes, buffer sizes, and sample rates.
A number of Java Sound constructors accept
a value of <code>NOT_SPECIFIED</code> for such parameters.  Other
methods may also accept or return this value, as documented.
"
      end

      operation 8726939 "AudioSystem"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Private no-args constructor for ensuring against instantiation."
      end

      operation 8727067 "getMixerInfo"
	class_operation public return_type class_ref 1091483 // Info
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an array of mixer info objects that represents
the set of audio mixers that are currently installed on the system.
@return an array of info objects for the currently installed mixers.  If no mixers
are available on the system, an array of length 0 is returned.
@see #getMixer"
      end

      operation 8727195 "getMixer"
	class_operation public return_type class_ref 1091355 // Mixer
	nparams 1
	  param inout name "info" type class_ref 1091483 // Info
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the requested audio mixer.
@param info a <code>Mixer.Info</code> object representing the desired
mixer, or <code>null</code> for the system default mixer
@return the requested mixer
@throws SecurityException if the requested mixer
is unavailable because of security restrictions
@throws IllegalArgumentException if the info object does not represent
a mixer installed on the system
@see #getMixerInfo"
      end

      operation 8727323 "getSourceLineInfo"
	class_operation public return_type class_ref 1091739 // Info
	nparams 1
	  param inout name "info" type class_ref 1091739 // Info
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "$$fb 2002-11-26: fix for 4757930: DOC: AudioSystem.getTarget/SourceLineInfo() is ambiguous

Obtains information about all source lines of a particular type that are supported
by the installed mixers.
@param info a <code>Line.Info</code> object that specifies the kind of
lines about which information is requested
@return an array of <code>Line.Info</code> objects describing source lines matching
the type requested.  If no matching source lines are supported, an array of length 0
is returned.

@see Mixer#getSourceLineInfo(Line.Info)"
      end

      operation 8727451 "getTargetLineInfo"
	class_operation public return_type class_ref 1091739 // Info
	nparams 1
	  param inout name "info" type class_ref 1091739 // Info
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains information about all target lines of a particular type that are supported
by the installed mixers.
@param info a <code>Line.Info</code> object that specifies the kind of
lines about which information is requested
@return an array of <code>Line.Info</code> objects describing target lines matching
the type requested.  If no matching target lines are supported, an array of length 0
is returned.

@see Mixer#getTargetLineInfo(Line.Info)"
      end

      operation 8727579 "isLineSupported"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param inout name "info" type class_ref 1091739 // Info
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether the system supports any lines that match
the specified <code>Line.Info</code> object.  A line is supported if
any installed mixer supports it.
@param info a <code>Line.Info</code> object describing the line for which support is queried
@return <code>true</code> if at least one matching line is
supported, otherwise <code>false</code>

@see Mixer#isLineSupported(Line.Info)"
      end

      operation 8727707 "getLine"
	class_operation public return_type class_ref 1091611 // Line
	nparams 1
	  param inout name "info" type class_ref 1091739 // Info
	nexceptions 1
	  exception class_ref 1091867 // LineUnavailableException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a line that matches the description in the specified
<code>Line.Info</code> object.

<p>If a <code>DataLine</code> is requested, and <code>info</code>
is an instance of <code>DataLine.Info</code> specifying at least
one fully qualified audio format, the last one
will be used as the default format of the returned
<code>DataLine</code>.

<p>If system properties
<code>javax.sound.sampled.Clip</code>,
<code>javax.sound.sampled.Port</code>,
<code>javax.sound.sampled.SourceDataLine</code> and
<code>javax.sound.sampled.TargetDataLine</code> are defined
or they are defined in the file &quot;sound.properties&quot;,
they are used to retrieve default lines.
For details, refer to the {@link AudioSystem class description}.

If the respective property is not set, or the mixer
requested in the property is not installed or does not provide the
requested line, all installed mixers are queried for the
requested line type. A Line will be returned from the first mixer
providing the requested line type.

@param info a <code>Line.Info</code> object describing the desired kind of line
@return a line of the requested kind

@throws LineUnavailableException if a matching line
is not available due to resource restrictions
@throws SecurityException if a matching line
is not available due to security restrictions
@throws IllegalArgumentException if the system does not
support at least one line matching the specified
<code>Line.Info</code> object
through any installed mixer"
      end

      operation 8727835 "getClip"
	class_operation public return_type class_ref 391195 // Clip
	nparams 0
	nexceptions 1
	  exception class_ref 1091867 // LineUnavailableException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a clip that can be used for playing back
an audio file or an audio stream. The returned clip
will be provided by the default system mixer, or,
if not possible, by any other mixer installed in the
system that supports a <code>Clip</code>
object.

<p>The returned clip must be opened with the
<code>open(AudioFormat)</code> or
<code>open(AudioInputStream)</code> method.

<p>This is a high-level method that uses <code>getMixer</code>
and <getLine</code> internally.

<p>If the system property
<code>javax.sound.sampled.Clip</code>
is defined or it is defined in the file &quot;sound.properties&quot;,
it is used to retrieve the default clip.
For details, refer to the {@link AudioSystem class description}.

@return the desired clip object

@throws LineUnavailableException if a clip object
is not available due to resource restrictions
@throws SecurityException if a clip object
is not available due to security restrictions
@throws IllegalArgumentException if the system does not
support at least one clip instance through any installed mixer

@see #getClip(Mixer.Info)
@since 1.5"
      end

      operation 8727963 "getClip"
	class_operation public return_type class_ref 391195 // Clip
	nparams 1
	  param inout name "mixerInfo" type class_ref 1091483 // Info
	nexceptions 1
	  exception class_ref 1091867 // LineUnavailableException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a clip from the specified mixer that can be
used for playing back an audio file or an audio stream.

<p>The returned clip must be opened with the
<code>open(AudioFormat)</code> or
<code>open(AudioInputStream)</code> method.

<p>This is a high-level method that uses <code>getMixer</code>
and <getLine</code> internally.

@param mixerInfo a <code>Mixer.Info</code> object representing the
desired mixer, or <code>null</code> for the system default mixer
@return a clip object from the specified mixer

@throws LineUnavailableException if a clip
is not available from this mixer due to resource restrictions
@throws SecurityException if a clip
is not available from this mixer due to security restrictions
@throws IllegalArgumentException if the system does not
support at least one clip through the specified mixer

@see #getClip()
@since 1.5"
      end

      operation 8728091 "getSourceDataLine"
	class_operation public return_type class_ref 1091995 // SourceDataLine
	nparams 1
	  param inout name "format" type class_ref 1090459 // AudioFormat
	nexceptions 1
	  exception class_ref 1091867 // LineUnavailableException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a source data line that can be used for playing back
audio data in the format specified by the
<code>AudioFormat</code> object. The returned line
will be provided by the default system mixer, or,
if not possible, by any other mixer installed in the
system that supports a matching
<code>SourceDataLine</code> object.

<p>The returned line should be opened with the
<code>open(AudioFormat)</code> or
<code>open(AudioFormat, int)</code> method.

<p>This is a high-level method that uses <code>getMixer</code>
and <getLine</code> internally.

<p>The returned <code>SourceDataLine</code>'s default
audio format will be initialized with <code>format</code>.

<p>If the system property
<code>javax.sound.sampled.SourceDataLine</code>
is defined or it is defined in the file &quot;sound.properties&quot;,
it is used to retrieve the default source data line.
For details, refer to the {@link AudioSystem class description}.

@param format an <code>AudioFormat</code> object specifying
       the supported audio format of the returned line,
       or <code>null</code> for any audio format
@return the desired <code>SourceDataLine</code> object

@throws LineUnavailableException if a matching source data line
        is not available due to resource restrictions
@throws SecurityException if a matching source data line
        is not available due to security restrictions
@throws IllegalArgumentException if the system does not
        support at least one source data line supporting the
        specified audio format through any installed mixer

@see #getSourceDataLine(AudioFormat, Mixer.Info)
@since 1.5"
      end

      operation 8728219 "getSourceDataLine"
	class_operation public return_type class_ref 1091995 // SourceDataLine
	nparams 2
	  param inout name "format" type class_ref 1090459 // AudioFormat
	  param inout name "mixerinfo" type class_ref 1091483 // Info
	nexceptions 1
	  exception class_ref 1091867 // LineUnavailableException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a source data line that can be used for playing back
audio data in the format specified by the
<code>AudioFormat</code> object, provided by the mixer
specified by the <code>Mixer.Info</code> object.

<p>The returned line should be opened with the
<code>open(AudioFormat)</code> or
<code>open(AudioFormat, int)</code> method.

<p>This is a high-level method that uses <code>getMixer</code>
and <getLine</code> internally.

<p>The returned <code>SourceDataLine</code>'s default
audio format will be initialized with <code>format</code>.

@param format an <code>AudioFormat</code> object specifying
       the supported audio format of the returned line,
       or <code>null</code> for any audio format
@param mixerinfo a <code>Mixer.Info</code> object representing
       the desired mixer, or <code>null</code> for the system
       default mixer
@return the desired <code>SourceDataLine</code> object

@throws LineUnavailableException if a matching source data
        line is not available from the specified mixer due
        to resource restrictions
@throws SecurityException if a matching source data line
        is not available from the specified mixer due to
        security restrictions
@throws IllegalArgumentException if the specified mixer does
        not support at least one source data line supporting
        the specified audio format

@see #getSourceDataLine(AudioFormat)
@since 1.5"
      end

      operation 8728347 "getTargetDataLine"
	class_operation public return_type class_ref 1090843 // TargetDataLine
	nparams 1
	  param inout name "format" type class_ref 1090459 // AudioFormat
	nexceptions 1
	  exception class_ref 1091867 // LineUnavailableException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a target data line that can be used for recording
audio data in the format specified by the
<code>AudioFormat</code> object. The returned line
will be provided by the default system mixer, or,
if not possible, by any other mixer installed in the
system that supports a matching
<code>TargetDataLine</code> object.

<p>The returned line should be opened with the
<code>open(AudioFormat)</code> or
<code>open(AudioFormat, int)</code> method.

<p>This is a high-level method that uses <code>getMixer</code>
and <getLine</code> internally.

<p>The returned <code>TargetDataLine</code>'s default
audio format will be initialized with <code>format</code>.

@param format an <code>AudioFormat</code> object specifying
       the supported audio format of the returned line,
       or <code>null</code> for any audio format
@return the desired <code>TargetDataLine</code> object

@throws LineUnavailableException if a matching target data line
        is not available due to resource restrictions
@throws SecurityException if a matching target data line
        is not available due to security restrictions
@throws IllegalArgumentException if the system does not
        support at least one target data line supporting the
        specified audio format through any installed mixer

@see #getTargetDataLine(AudioFormat, Mixer.Info)
@see AudioPermission
@since 1.5"
      end

      operation 8728475 "getTargetDataLine"
	class_operation public return_type class_ref 1090843 // TargetDataLine
	nparams 2
	  param inout name "format" type class_ref 1090459 // AudioFormat
	  param inout name "mixerinfo" type class_ref 1091483 // Info
	nexceptions 1
	  exception class_ref 1091867 // LineUnavailableException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a target data line that can be used for recording
audio data in the format specified by the
<code>AudioFormat</code> object, provided by the mixer
specified by the <code>Mixer.Info</code> object.

<p>The returned line should be opened with the
<code>open(AudioFormat)</code> or
<code>open(AudioFormat, int)</code> method.

<p>This is a high-level method that uses <code>getMixer</code>
and <getLine</code> internally.

<p>The returned <code>TargetDataLine</code>'s default
audio format will be initialized with <code>format</code>.

<p>If the system property
<code>javax.sound.sampled.TargetDataLine</code>
is defined or it is defined in the file &quot;sound.properties&quot;,
it is used to retrieve the default target data line.
For details, refer to the {@link AudioSystem class description}.

@param format an <code>AudioFormat</code> object specifying
       the supported audio format of the returned line,
       or <code>null</code> for any audio format
@param mixerinfo a <code>Mixer.Info</code> object representing the
       desired mixer, or <code>null</code> for the system default mixer
@return the desired <code>TargetDataLine</code> object

@throws LineUnavailableException if a matching target data
        line is not available from the specified mixer due
        to resource restrictions
@throws SecurityException if a matching target data line
        is not available from the specified mixer due to
        security restrictions
@throws IllegalArgumentException if the specified mixer does
        not support at least one target data line supporting
        the specified audio format

@see #getTargetDataLine(AudioFormat)
@see AudioPermission
@since 1.5"
      end

      operation 8728603 "getTargetEncodings"
	class_operation public return_type class_ref 1090587 // Encoding
	nparams 1
	  param inout name "sourceEncoding" type class_ref 1090587 // Encoding
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " $$fb 2002-04-12: fix for 4662082: behavior of AudioSystem.getTargetEncodings() methods doesn't match the spec

Obtains the encodings that the system can obtain from an
audio input stream with the specified encoding using the set
of installed format converters.
@param sourceEncoding the encoding for which conversion support
is queried
@return array of encodings.  If <code>sourceEncoding</code>is not supported,
an array of length 0 is returned. Otherwise, the array will have a length
of at least 1, representing <code>sourceEncoding</code> (no conversion)."
      end

      operation 8728731 "getTargetEncodings"
	class_operation public return_type class_ref 1090587 // Encoding
	nparams 1
	  param inout name "sourceFormat" type class_ref 1090459 // AudioFormat
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " $$fb 2002-04-12: fix for 4662082: behavior of AudioSystem.getTargetEncodings() methods doesn't match the spec

Obtains the encodings that the system can obtain from an
audio input stream with the specified format using the set
of installed format converters.
@param sourceFormat the audio format for which conversion
is queried
@return array of encodings. If <code>sourceFormat</code>is not supported,
an array of length 0 is returned. Otherwise, the array will have a length
of at least 1, representing the encoding of <code>sourceFormat</code> (no conversion)."
      end

      operation 8728859 "isConversionSupported"
	class_operation public explicit_return_type "boolean"
	nparams 2
	  param inout name "targetEncoding" type class_ref 1090587 // Encoding
	  param inout name "sourceFormat" type class_ref 1090459 // AudioFormat
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether an audio input stream of the specified encoding
can be obtained from an audio input stream that has the specified
format.
@param targetEncoding the desired encoding after conversion
@param sourceFormat the audio format before conversion
@return <code>true</code> if the conversion is supported,
otherwise <code>false</code>"
      end

      operation 8728987 "getAudioInputStream"
	class_operation public return_type class_ref 1090715 // AudioInputStream
	nparams 2
	  param inout name "targetEncoding" type class_ref 1090587 // Encoding
	  param inout name "sourceStream" type class_ref 1090715 // AudioInputStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an audio input stream of the indicated encoding, by converting the
provided audio input stream.
@param targetEncoding the desired encoding after conversion
@param sourceStream the stream to be converted
@return an audio input stream of the indicated encoding
@throws IllegalArgumentException if the conversion is not supported
@see #getTargetEncodings(AudioFormat.Encoding)
@see #getTargetEncodings(AudioFormat)
@see #isConversionSupported(AudioFormat.Encoding, AudioFormat)
@see #getAudioInputStream(AudioFormat, AudioInputStream)"
      end

      operation 8729115 "getTargetFormats"
	class_operation public return_type class_ref 1090459 // AudioFormat
	nparams 2
	  param inout name "targetEncoding" type class_ref 1090587 // Encoding
	  param inout name "sourceFormat" type class_ref 1090459 // AudioFormat
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the formats that have a particular encoding and that the system can
obtain from a stream of the specified format using the set of
installed format converters.
@param targetEncoding the desired encoding after conversion
@param sourceFormat the audio format before conversion
@return array of formats.  If no formats of the specified
encoding are supported, an array of length 0 is returned."
      end

      operation 8729243 "isConversionSupported"
	class_operation public explicit_return_type "boolean"
	nparams 2
	  param inout name "targetFormat" type class_ref 1090459 // AudioFormat
	  param inout name "sourceFormat" type class_ref 1090459 // AudioFormat
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether an audio input stream of a specified format
can be obtained from an audio input stream of another specified format.
@param targetFormat the desired audio format after conversion
@param sourceFormat the audio format before conversion
@return <code>true</code> if the conversion is supported,
otherwise <code>false</code>"
      end

      operation 8729371 "getAudioInputStream"
	class_operation public return_type class_ref 1090715 // AudioInputStream
	nparams 2
	  param inout name "targetFormat" type class_ref 1090459 // AudioFormat
	  param inout name "sourceStream" type class_ref 1090715 // AudioInputStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an audio input stream of the indicated format, by converting the
provided audio input stream.
@param targetFormat the desired audio format after conversion
@param sourceStream the stream to be converted
@return an audio input stream of the indicated format
@throws IllegalArgumentException if the conversion is not supported
#see #getTargetEncodings(AudioFormat)
@see #getTargetFormats(AudioFormat.Encoding, AudioFormat)
@see #isConversionSupported(AudioFormat, AudioFormat)
@see #getAudioInputStream(AudioFormat.Encoding, AudioInputStream)"
      end

      operation 8729499 "getAudioFileFormat"
	class_operation public return_type class_ref 1090203 // AudioFileFormat
	nparams 1
	  param inout name "stream" type class_ref 179099 // InputStream
	nexceptions 2
	  exception class_ref 1092123 // UnsupportedAudioFileException
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the audio file format of the provided input stream.  The stream must
point to valid audio file data.  The implementation of this method may require
multiple parsers to examine the stream to determine whether they support it.
These parsers must be able to mark the stream, read enough data to determine whether they
support the stream, and, if not, reset the stream's read pointer to its original
position.  If the input stream does not support these operations, this method may fail
with an <code>IOException</code>.
@param stream the input stream from which file format information should be
extracted
@return an <code>AudioFileFormat</code> object describing the stream's audio file format
@throws UnsupportedAudioFileException if the stream does not point to valid audio
file data recognized by the system
@throws IOException if an input/output exception occurs
@see InputStream#markSupported
@see InputStream#mark"
      end

      operation 8729627 "getAudioFileFormat"
	class_operation public return_type class_ref 1090203 // AudioFileFormat
	nparams 1
	  param inout name "url" type class_ref 269467 // URL
	nexceptions 2
	  exception class_ref 1092123 // UnsupportedAudioFileException
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the audio file format of the specified URL.  The URL must
point to valid audio file data.
@param url the URL from which file format information should be
extracted
@return an <code>AudioFileFormat</code> object describing the audio file format
@throws UnsupportedAudioFileException if the URL does not point to valid audio
file data recognized by the system
@throws IOException if an input/output exception occurs"
      end

      operation 8729755 "getAudioFileFormat"
	class_operation public return_type class_ref 1090203 // AudioFileFormat
	nparams 1
	  param inout name "file" type class_ref 165147 // File
	nexceptions 2
	  exception class_ref 1092123 // UnsupportedAudioFileException
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the audio file format of the specified <code>File</code>.  The <code>File</code> must
point to valid audio file data.
@param file the <code>File</code> from which file format information should be
extracted
@return an <code>AudioFileFormat</code> object describing the audio file format
@throws UnsupportedAudioFileException if the <code>File</code> does not point to valid audio
file data recognized by the system
@throws IOException if an I/O exception occurs"
      end

      operation 8729883 "getAudioInputStream"
	class_operation public return_type class_ref 1090715 // AudioInputStream
	nparams 1
	  param inout name "stream" type class_ref 179099 // InputStream
	nexceptions 2
	  exception class_ref 1092123 // UnsupportedAudioFileException
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an audio input stream from the provided input stream.  The stream must
point to valid audio file data.  The implementation of this method may
require multiple parsers to
examine the stream to determine whether they support it.  These parsers must
be able to mark the stream, read enough data to determine whether they
support the stream, and, if not, reset the stream's read pointer to its original
position.  If the input stream does not support these operation, this method may fail
with an <code>IOException</code>.
@param stream the input stream from which the <code>AudioInputStream</code> should be
constructed
@return an <code>AudioInputStream</code> object based on the audio file data contained
in the input stream.
@throws UnsupportedAudioFileException if the stream does not point to valid audio
file data recognized by the system
@throws IOException if an I/O exception occurs
@see InputStream#markSupported
@see InputStream#mark"
      end

      operation 8730011 "getAudioInputStream"
	class_operation public return_type class_ref 1090715 // AudioInputStream
	nparams 1
	  param inout name "url" type class_ref 269467 // URL
	nexceptions 2
	  exception class_ref 1092123 // UnsupportedAudioFileException
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an audio input stream from the URL provided.  The URL must
point to valid audio file data.
@param url the URL for which the <code>AudioInputStream</code> should be
constructed
@return an <code>AudioInputStream</code> object based on the audio file data pointed
to by the URL
@throws UnsupportedAudioFileException if the URL does not point to valid audio
file data recognized by the system
@throws IOException if an I/O exception occurs"
      end

      operation 8730139 "getAudioInputStream"
	class_operation public return_type class_ref 1090715 // AudioInputStream
	nparams 1
	  param inout name "file" type class_ref 165147 // File
	nexceptions 2
	  exception class_ref 1092123 // UnsupportedAudioFileException
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an audio input stream from the provided <code>File</code>.  The <code>File</code> must
point to valid audio file data.
@param file the <code>File</code> for which the <code>AudioInputStream</code> should be
constructed
@return an <code>AudioInputStream</code> object based on the audio file data pointed
to by the <code>File</code>
@throws UnsupportedAudioFileException if the <code>File</code> does not point to valid audio
file data recognized by the system
@throws IOException if an I/O exception occurs"
      end

      operation 8730267 "getAudioFileTypes"
	class_operation public return_type class_ref 1090331 // Type
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the file types for which file writing support is provided by the system.
@return array of unique file types.  If no file types are supported,
an array of length 0 is returned."
      end

      operation 8730395 "isFileTypeSupported"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param inout name "fileType" type class_ref 1090331 // Type
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether file writing support for the specified file type is provided
by the system.
@param fileType the file type for which write capabilities are queried
@return <code>true</code> if the file type is supported,
otherwise <code>false</code>"
      end

      operation 8730523 "getAudioFileTypes"
	class_operation public return_type class_ref 1090331 // Type
	nparams 1
	  param inout name "stream" type class_ref 1090715 // AudioInputStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the file types that the system can write from the
audio input stream specified.
@param stream the audio input stream for which audio file type support
is queried
@return array of file types.  If no file types are supported,
an array of length 0 is returned."
      end

      operation 8730651 "isFileTypeSupported"
	class_operation public explicit_return_type "boolean"
	nparams 2
	  param inout name "fileType" type class_ref 1090331 // Type
	  param inout name "stream" type class_ref 1090715 // AudioInputStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether an audio file of the specified file type can be written
from the indicated audio input stream.
@param fileType the file type for which write capabilities are queried
@param stream the stream for which file-writing support is queried
@return <code>true</code> if the file type is supported for this audio input stream,
otherwise <code>false</code>"
      end

      operation 8730779 "write"
	class_operation public explicit_return_type "int"
	nparams 3
	  param inout name "stream" type class_ref 1090715 // AudioInputStream
	  param inout name "fileType" type class_ref 1090331 // Type
	  param inout name "out" type class_ref 183835 // OutputStream
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a stream of bytes representing an audio file of the specified file type
to the output stream provided.  Some file types require that
the length be written into the file header; such files cannot be written from
start to finish unless the length is known in advance.  An attempt
to write a file of such a type will fail with an IOException if the length in
the audio file type is <code>AudioSystem.NOT_SPECIFIED</code>.

@param stream the audio input stream containing audio data to be
written to the file
@param fileType the kind of audio file to write
@param out the stream to which the file data should be written
@return the number of bytes written to the output stream
@throws IOException if an input/output exception occurs
@throws IllegalArgumentException if the file type is not supported by
the system
@see #isFileTypeSupported
@see	#getAudioFileTypes"
      end

      operation 8730907 "write"
	class_operation public explicit_return_type "int"
	nparams 3
	  param inout name "stream" type class_ref 1090715 // AudioInputStream
	  param inout name "fileType" type class_ref 1090331 // Type
	  param inout name "out" type class_ref 165147 // File
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a stream of bytes representing an audio file of the specified file type
to the external file provided.
@param stream the audio input stream containing audio data to be
written to the file
@param fileType the kind of audio file to write
@param out the external file to which the file data should be written
@return the number of bytes written to the file
@throws IOException if an I/O exception occurs
@throws IllegalArgumentException if the file type is not supported by
the system
@see #isFileTypeSupported
@see	#getAudioFileTypes"
      end

      operation 8731035 "getMixerProviders"
	class_operation private return_type class_ref 135579 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " METHODS FOR INTERNAL IMPLEMENTATION USE

Obtains the set of MixerProviders on the system."
      end

      operation 8731163 "getFormatConversionProviders"
	class_operation private return_type class_ref 135579 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the set of format converters (codecs, transcoders, etc.)
that are currently installed on the system.
@return an array of
{@link javax.sound.sampled.spi.FormatConversionProvider
FormatConversionProvider}
objects representing the available format converters.  If no format
converters readers are available on the system, an array of length 0 is
returned."
      end

      operation 8731291 "getAudioFileReaders"
	class_operation private return_type class_ref 135579 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the set of audio file readers that are currently installed on the system.
@return a List of
{@link javax.sound.sampled.spi.AudioFileReader
AudioFileReader}
objects representing the installed audio file readers.  If no audio file
readers are available on the system, an empty List is returned."
      end

      operation 8731419 "getAudioFileWriters"
	class_operation private return_type class_ref 135579 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the set of audio file writers that are currently installed on the system.
@return a List of
{@link javax.sound.samples.spi.AudioFileWriter AudioFileWriter}
objects representing the available audio file writers.  If no audio file
writers are available on the system, an empty List is returned."
      end

      operation 8731547 "getDefaultMixer"
	class_operation private return_type class_ref 1091355 // Mixer
	nparams 2
	  param inout name "providers" type class_ref 135579 // List
	  param inout name "info" type class_ref 1091739 // Info
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Attempts to locate and return a default Mixer that provides lines
of the specified type.

@param providers the installed mixer providers
@param info The requested line type
TargetDataLine.class, Clip.class or Port.class.
@return a Mixer that matches the requirements, or null if no default mixer found"
      end

      operation 8731675 "getNamedProvider"
	class_operation private return_type class_ref 1092251 // MixerProvider
	nparams 2
	  param in name "providerClassName" explicit_type "String"
	  param inout name "providers" type class_ref 135579 // List
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Return a MixerProvider of a given class from the list of
MixerProviders.

This method never requires the returned Mixer to do mixing.
@param providerClassName The class name of the provider to be returned.
@param providers The list of MixerProviders that is searched.
@return A MixerProvider of the requested class, or null if none is
found."
      end

      operation 8731803 "getNamedMixer"
	class_operation private return_type class_ref 1091355 // Mixer
	nparams 3
	  param in name "mixerName" explicit_type "String"
	  param inout name "provider" type class_ref 1092251 // MixerProvider
	  param inout name "info" type class_ref 1091739 // Info
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Return a Mixer with a given name from a given MixerProvider.
This method never requires the returned Mixer to do mixing.
@param mixerName The name of the Mixer to be returned.
@param provider The MixerProvider to check for Mixers.
@param info The type of line the returned Mixer is required to
support.

@return A Mixer matching the requirements, or null if none is found."
      end

      operation 8731931 "getNamedMixer"
	class_operation private return_type class_ref 1091355 // Mixer
	nparams 3
	  param in name "mixerName" explicit_type "String"
	  param inout name "providers" type class_ref 135579 // List
	  param inout name "info" type class_ref 1091739 // Info
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " From a List of MixerProviders, return a Mixer with a given name.
This method never requires the returned Mixer to do mixing.
@param mixerName The name of the Mixer to be returned.
@param providers The List of MixerProviders to check for Mixers.
@param info The type of line the returned Mixer is required to
support.
@return A Mixer matching the requirements, or null if none is found."
      end

      operation 8732059 "getFirstMixer"
	class_operation private return_type class_ref 1091355 // Mixer
	nparams 3
	  param inout name "provider" type class_ref 1092251 // MixerProvider
	  param inout name "info" type class_ref 1091739 // Info
	  param inout name "isMixingRequired" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " From a given MixerProvider, return the first appropriate Mixer.
@param provider The MixerProvider to check for Mixers.
@param info The type of line the returned Mixer is required to
support.
@param isMixingRequired If true, only Mixers that support mixing are
returned for line types of SourceDataLine and Clip.

@return A Mixer that is considered appropriate, or null
if none is found."
      end

      operation 8732187 "isAppropriateMixer"
	class_operation private explicit_return_type "boolean"
	nparams 3
	  param inout name "mixer" type class_ref 1091355 // Mixer
	  param inout name "lineInfo" type class_ref 1091739 // Info
	  param inout name "isMixingRequired" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Checks if a Mixer is appropriate.
A Mixer is considered appropriate if it support the given line type.
If isMixingRequired is true and the line type is an output one
(SourceDataLine, Clip), the mixer is appropriate if it supports
at least 2 (concurrent) lines of the given type.

@return true if the mixer is considered appropriate according to the
rules given above, false otherwise."
      end

      operation 8732315 "getMixerInfoList"
	class_operation private return_type class_ref 135579 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Like getMixerInfo, but return List"
      end

      operation 8732443 "getMixerInfoList"
	class_operation private return_type class_ref 135579 // List
	nparams 1
	  param inout name "providers" type class_ref 135579 // List
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Like getMixerInfo, but return List"
      end

      operation 8732571 "getProviders"
	class_operation private return_type class_ref 135579 // List
	nparams 1
	  param inout name "providerClass" type class_ref 164635 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the set of services currently installed on the system
using sun.misc.Service, the SPI mechanism in 1.3.
@return a List of instances of providers for the requested service.
If no providers are available, a vector of length 0 will be returned."
      end
    end

    class 1091355 "Mixer"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A mixer is an audio device with one or more lines.  It need not be
designed for mixing audio signals.  A mixer that actually mixes audio
has multiple input (source) lines and at least one output (target) line.
The former are often instances of classes that implement
<code>{@link SourceDataLine}</code>,
and the latter, <code>{@link TargetDataLine}</code>.  <code>{@link Port}</code>
objects, too, are either source lines or target lines.
A mixer can accept prerecorded, loopable sound as input, by having
some of its source lines be instances of objects that implement the
<code>{@link Clip}</code> interface.
<p>
Through methods of the <code>Line</code> interface, which <code>Mixer</code> extends,
a mixer might provide a set of controls that are global to the mixer.  For example,
the mixer can have a master gain control.  These global controls are distinct
from the controls belonging to each of the mixer's individual lines.
<p>
Some mixers, especially
those with internal digital mixing capabilities, may provide
additional capabilities by implementing the <code>DataLine</code> interface.
<p>
A mixer can support synchronization of its lines.  When one line in
a synchronized group is started or stopped, the other lines in the group
automatically start or stop simultaneously with the explicitly affected one.

@author Kara Kytle
@version 1.31, 04/07/14
@since 1.3"
      class 1091483 "Info"
	visibility package 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      classrelation 2227995 // <generalisation>
	relation 2227995 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2227995 // <generalisation>
	  b parent class_ref 1091611 // Line
      end

      operation 8743067 "getMixerInfo"
	public return_type class_ref 1091739 // Info
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains information about this mixer, including the product's name,
version, vendor, etc.
@return a mixer info object that describes this mixer
@see Mixer.Info"
      end

      operation 8743195 "getSourceLineInfo"
	public return_type class_ref 1091739 // Info
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains information about the set of source lines supported
by this mixer.
Some source lines may only be available when this mixer is open.
@return array of <code>Line.Info</code> objects representing source lines
for this mixer.  If no source lines are supported,
an array of length 0 is returned."
      end

      operation 8743323 "getTargetLineInfo"
	public return_type class_ref 1091739 // Info
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains information about the set of target lines supported
by this mixer.
Some target lines may only be available when this mixer is open.
@return array of <code>Line.Info</code> objects representing target lines
for this mixer.  If no target lines are supported,
an array of length 0 is returned."
      end

      operation 8743451 "getSourceLineInfo"
	public return_type class_ref 1091739 // Info
	nparams 1
	  param inout name "info" type class_ref 1091739 // Info
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains information about source lines of a particular type supported
by the mixer.
Some source lines may only be available when this mixer is open.
@param info a <code>Line.Info</code> object describing lines about which information
is queried
@return an array of <code>Line.Info</code> objects describing source lines matching
the type requested.  If no matching source lines are supported, an array of length 0
is returned."
      end

      operation 8743579 "getTargetLineInfo"
	public return_type class_ref 1091739 // Info
	nparams 1
	  param inout name "info" type class_ref 1091739 // Info
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains information about target lines of a particular type supported
by the mixer.
Some target lines may only be available when this mixer is open.
@param info a <code>Line.Info</code> object describing lines about which information
is queried
@return an array of <code>Line.Info</code> objects describing target lines matching
the type requested.  If no matching target lines are supported, an array of length 0
is returned."
      end

      operation 8743707 "isLineSupported"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "info" type class_ref 1091739 // Info
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether the mixer supports a line (or lines) that match
the specified <code>Line.Info</code> object.
Some lines may only be supported when this mixer is open.
@param info describes the line for which support is queried
@return <code>true</code> if at least one matching line is
supported, <code>false</code> otherwise"
      end

      operation 8743835 "getLine"
	public return_type class_ref 1091611 // Line
	nparams 1
	  param inout name "info" type class_ref 1091739 // Info
	nexceptions 1
	  exception class_ref 1091867 // LineUnavailableException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a line that is available for use and that matches the description
in the specified <code>Line.Info</code> object.

<p>If a <code>DataLine</code> is requested, and <code>info</code>
is an instance of <code>DataLine.Info</code> specifying at
least one fully qualified audio format, the last one
will be used as the default format of the returned
<code>DataLine</code>.

@param info describes the desired line
@throws LineUnavailableException if a matching line
is not available due to resource restrictions
@throws IllegalArgumentException if this mixer does
not support any lines matching the description
@throws SecurityException if a matching line
is not available due to security restrictions"
      end

      operation 8743963 "getMaxLines"
	public explicit_return_type "int"
	nparams 1
	  param inout name "info" type class_ref 1091739 // Info
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "$$fb 2002-04-12: fix for 4667258: behavior of Mixer.getMaxLines(Line.Info) method doesn't match the spec

Obtains the approximate maximum number of lines of the requested type that can be open
simultaneously on the mixer.

Certain types of mixers do not have a hard bound and may allow opening more lines.
Since certain lines are a shared resource, a mixer may not be able to open the maximum
number of lines if another process has opened lines of this mixer.

The requested type is any line that matches the description in
the provided <code>Line.Info</code> object.  For example, if the info
object represents a speaker
port, and the mixer supports exactly one speaker port, this method
should return 1.  If the info object represents a source data line
and the mixer supports the use of 32 source data lines simultaneously,
the return value should be 32.
If there is no limit, this function returns <code>AudioSystem.NOT_SPECIFIED</code>.
@param info a <code>Line.Info</code> that describes the line for which
the number of supported instances is queried
@return the maximum number of matching lines supported, or <code>AudioSystem.NOT_SPECIFIED</code>"
      end

      operation 8744091 "getSourceLines"
	public return_type class_ref 1091611 // Line
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the set of all source lines currently open to this mixer.

@return the source lines currently open to the mixer.
If no source lines are currently open to this mixer,  an
array of length 0 is returned.
@throws SecurityException if the matching lines
are not available due to security restrictions"
      end

      operation 8744219 "getTargetLines"
	public return_type class_ref 1091611 // Line
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the set of all target lines currently open from this mixer.

@return target lines currently open from the mixer.
If no target lines are currently open from this mixer, an
array of length 0 is returned.
@throws SecurityException if the matching lines
are not available due to security restrictions"
      end

      operation 8744347 "synchronize"
	public explicit_return_type "void"
	nparams 2
	  param inout name "lines" type class_ref 1091611 // Line
	  param inout name "maintainSync" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Synchronizes two or more lines.  Any subsequent command that starts or stops
audio playback or capture for one of these lines will exert the
same effect on the other lines in the group, so that they start or stop playing or
capturing data simultaneously.

@param lines the lines that should be synchronized
@param maintainSync <code>true</code> if the synchronization
must be precisely maintained (i.e., the synchronization must be sample-accurate)
at all times during operation of the lines , or <code>false</code>
if precise synchronization is required only during start and stop operations

@throws IllegalArgumentException if the lines cannot be synchronized.
This may occur if the lines are of different types or have different
formats for which this mixer does not support synchronization, or if
all lines specified do not belong to this mixer."
      end

      operation 8744475 "unsynchronize"
	public explicit_return_type "void"
	nparams 1
	  param inout name "lines" type class_ref 1091611 // Line
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Releases synchronization for the specified lines.  The array must
be identical to one for which synchronization has already been
established; otherwise an exception may be thrown.  However, <code>null</code>
may be specified, in which case all currently synchronized lines that belong
to this mixer are unsynchronized.
@param lines the synchronized lines for which synchronization should be
released, or <code>null</code> for all this mixer's synchronized lines

@throws IllegalArgumentException if the lines cannot be unsynchronized.
This may occur if the argument specified does not exactly match a set
of lines for which synchronization has already been established."
      end

      operation 8744603 "isSynchronizationSupported"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "lines" type class_ref 1091611 // Line
	  param inout name "maintainSync" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports whether this mixer supports synchronization of the specified set of lines.

@param lines the set of lines for which synchronization support is queried
@param maintainSync <code>true</code> if the synchronization
must be precisely maintained (i.e., the synchronization must be sample-accurate)
at all times during operation of the lines , or <code>false</code>
if precise synchronization is required only during start and stop operations

@return <code>true</code> if the lines can be synchronized, <code>false</code>
otherwise"
      end
    end

    class 1091611 "Line"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The <code>Line</code> interface represents a mono or multi-channel
audio feed. A line is an element of the digital audio
\"pipeline,\" such as a mixer, an input or output port,
or a data path into or out of a mixer.
<p>
A line can have controls, such as gain, pan, and reverb.
The controls themselves are instances of classes that extend the
base <code>{@link Control}</code> class.
The <code>Line</code> interface provides two accessor methods for
obtaining the line's controls: <code>{@link #getControls getControls}</code> returns the
entire set, and <code>{@link #getControl getControl}</code> returns a single control of
specified type.
<p>
Lines exist in various states at different times.  When a line opens, it reserves system
resources for itself, and when it closes, these resources are freed for
other objects or applications. The <code>{@link #isOpen()}</code> method lets
you discover whether a line is open or closed.
An open line need not be processing data, however.  Such processing is
typically initiated by subinterface methods such as
<code>{@link SourceDataLine#write SourceDataLine.write}</code> and
<code>{@link TargetDataLine#read TargetDataLine.read}</code>.
<p>
You can register an object to receive notifications whenever the line's
state changes.  The object must implement the <code>{@link LineListener}</code>
interface, which consists of the single method
<code>{@link LineListener#update update}</code>.
This method will be invoked when a line opens and closes (and, if it's a
{@link DataLine}, when it starts and stops).
<p>
An object can be registered to listen to multiple lines.  The event it
receives in its <code>update</code> method will specify which line created
the event, what type of event it was
(<code>OPEN</code>, <code>CLOSE</code>, <code>START</code>, or <code>STOP</code>),
and how many sample frames the line had processed at the time the event occurred.
<p>
Certain line operations, such as open and close, can generate security
exceptions if invoked by unprivileged code when the line is a shared audio
resource.

@author Kara Kytle
@version 1.29, 04/07/14

@see LineEvent
@since 1.3"
      class 1091739 "Info"
	visibility public 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 2226203 // lineClass (<unidirectional association>)
	  relation 2226203 --->
	    a role_name "lineClass" const_relation private
	      comment "
The class of the line described by the info object.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 2226203 // lineClass (<unidirectional association>)
	    b parent class_ref 164635 // Class
	end

	operation 8735515 "Info"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "lineClass" type class_ref 164635 // Class
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs an info object that describes a line of the specified class.
This constructor is typically used by an application to
describe a desired line.
@param lineClass the class of the line that the new Line.Info object describes"
	end

	operation 8735643 "getLineClass"
	  public return_type class_ref 164635 // Class
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Obtains the class of the line that this Line.Info object describes.
@return the described line's class"
	end

	operation 8735771 "matches"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "info" type class_ref 1091739 // Info
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Indicates whether the specified info object matches this one.
To match, the specified object must be identical to or
a special case of this one.  The specified info object
must be either an instance of the same class as this one,
or an instance of a sub-type of this one.  In addition, the
attributes of the specified object must be compatible with the
capabilities of this one.  Specifically, the routing configuration
for the specified info object must be compatible with that of this
one.
Subclasses may add other criteria to determine whether the two objects
match.

@param info the info object which is being compared to this one
@return <code>true</code> if the specified object matches this one,
<code>false</code> otherwise"
	end

	operation 8735899 "toString"
	  public explicit_return_type "String"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Obtains a textual description of the line info.
@return a string description"
	end
      end

      operation 8734363 "getLineInfo"
	public return_type class_ref 1091739 // Info
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the <code>Line.Info</code> object describing this
line.
@return description of the line"
      end

      operation 8734491 "open"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1091867 // LineUnavailableException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Opens the line, indicating that it should acquire any required
system resources and become operational.
If this operation
succeeds, the line is marked as open, and an <code>OPEN</code> event is dispatched
to the line's listeners.
<p>
Note that some lines, once closed, cannot be reopened.  Attempts
to reopen such a line will always result in an <code>LineUnavailableException</code>.
<p>
Some types of lines have configurable properties that may affect
resource allocation.   For example, a <code>DataLine</code> must
be opened with a particular format and buffer size.  Such lines
should provide a mechanism for configuring these properties, such
as an additional <code>open</code> method or methods which allow
an application to specify the desired settings.
<p>
This method takes no arguments, and opens the line with the current
settings.  For <code>{@link SourceDataLine}</code> and
<code>{@link TargetDataLine}</code> objects, this means that the line is
opened with default settings.  For a <code>{@link Clip}</code>, however,
the buffer size is determined when data is loaded.  Since this method does not
allow the application to specify any data to load, an IllegalArgumentException
is thrown. Therefore, you should instead use one of the <code>open</code> methods
provided in the <code>Clip</code> interface to load data into the <code>Clip</code>.
<p>
For <code>DataLine</code>'s, if the <code>DataLine.Info</code>
object which was used to retrieve the line, specifies at least
one fully qualified audio format, the last one will be used
as the default format.

@throws IllegalArgumentException if this method is called on a Clip instance.
@throws LineUnavailableException if the line cannot be
opened due to resource restrictions.
@throws SecurityException if the line cannot be
opened due to security restrictions.

@see #close
@see #isOpen
@see LineEvent
@see DataLine
@see Clip#open(AudioFormat, byte[], int, int)
@see Clip#open(AudioInputStream)"
      end

      operation 8734619 "close"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes the line, indicating that any system resources
in use by the line can be released.  If this operation
succeeds, the line is marked closed and a <code>CLOSE</code> event is dispatched
to the line's listeners.
@throws SecurityException if the line cannot be
closed due to security restrictions.

@see #open
@see #isOpen
@see LineEvent"
      end

      operation 8734747 "isOpen"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether the line is open, meaning that it has reserved
system resources and is operational, although it might not currently be
playing or capturing sound.
@return <code>true</code> if the line is open, otherwise <code>false</code>

@see #open()
@see #close()"
      end

      operation 8734875 "getControls"
	public return_type class_ref 1092507 // Control
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the set of controls associated with this line.
Some controls may only be available when the line is open.
If there are no controls, this method returns an array of length 0.
@return the array of controls
@see #getControl"
      end

      operation 8735003 "isControlSupported"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "control" type class_ref 1092635 // Type
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether the line supports a control of the specified type.
Some controls may only be available when the line is open.
@param control the type of the control for which support is queried
@return <code>true</code> if at least one control of the specified type is
supported, otherwise <code>false</code>."
      end

      operation 8735131 "getControl"
	public return_type class_ref 1092507 // Control
	nparams 1
	  param inout name "control" type class_ref 1092635 // Type
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a control of the specified type,
if there is any.
Some controls may only be available when the line is open.
@param control the type of the requested control
@return a control of the specified type
@throws IllegalArgumentException if a control of the specified type
is not supported
@see #getControls
@see #isControlSupported(Control.Type control)"
      end

      operation 8735259 "addLineListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 391579 // LineListener
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a listener to this line.  Whenever the line's status changes, the
listener's <code>update()</code> method is called with a <code>LineEvent</code> object
that describes the change.
@param listener the object to add as a listener to this line
@see #removeLineListener
@see LineListener#update
@see LineEvent"
      end

      operation 8735387 "removeLineListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 391579 // LineListener
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the specified listener from this line's list of listeners.
@param listener listener to remove
@see #addLineListener"
      end
    end

    class 1091867 "LineUnavailableException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A <code>LineUnavailableException</code> is an exception indicating that a 
line cannot be opened because it is unavailable.  This situation
arises most commonly when a requested line is already in use 
by another application.

@author Kara Kytle
@version 1.9 03/12/19
@since 1.3


A <code>LinenavailableException</code> is an exception indicating that a 
line annot be opened because it is unavailable.  This situation
arises most commonly when a line is requested when it is already in use 
by another application.

@version 1.9 03/12/19
@author Kara Kytle"
      classrelation 2227867 // <generalisation>
	relation 2227867 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2227867 // <generalisation>
	  b parent class_ref 165403 // Exception
      end

      operation 8742811 "LineUnavailableException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>LineUnavailableException</code> that has 
<code>null</code> as its error detail message."
      end

      operation 8742939 "LineUnavailableException"
	public explicit_return_type ""
	nparams 1
	  param in name "message" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>LineUnavailableException</code> that has 
the specified detail message.

@param message a string containing the error detail message"
      end
    end

    class 1091995 "SourceDataLine"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A source data line is a data line to which data may be written.  It acts as
a source to its mixer. An application writes audio bytes to a source data line,
which handles the buffering of the bytes and delivers them to the mixer.
The mixer may mix the samples with those from other sources and then deliver
the mix to a target such as an output port (which may represent an audio output    
device on a sound card).
<p>
Note that the naming convention for this interface reflects the relationship
between the line and its mixer.  From the perspective of an application,
a source data line may act as a target for audio data.
<p>
A source data line can be obtained from a mixer by invoking the 
<code>{@link Mixer#getLine getLine}</code> method of <code>Mixer</code> with 
an appropriate <code>{@link DataLine.Info}</code> object.
<p>
The <code>SourceDataLine</code> interface provides a method for writing 
audio data to the data line's buffer. Applications that play or mix 
audio should write data to the source data line quickly enough to keep the 
buffer from underflowing (emptying), which could cause discontinuities in 
the audio that are perceived as clicks.  Applications can use the 
<code>{@link DataLine#available available}</code> method defined in the
<code>DataLine</code> interface to determine the amount of data currently
queued in the data line's buffer.  The amount of data which can be written
to the buffer without blocking is the difference between the buffer size
and the amount of queued data.  If the delivery of audio output 
stops due to underflow, a <code>{@link LineEvent.Type#STOP STOP}</code> event is 
generated.  A <code>{@link LineEvent.Type#START START}</code> event is generated
when the audio output resumes. 

@author Kara Kytle
@version 1.20 03/12/19
@see Mixer
@see DataLine
@see TargetDataLine
@since 1.3"
      classrelation 2228251 // <generalisation>
	relation 2228251 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2228251 // <generalisation>
	  b parent class_ref 1092763 // DataLine
      end

      operation 8746011 "open"
	public explicit_return_type "void"
	nparams 2
	  param inout name "format" type class_ref 1090459 // AudioFormat
	  param in name "bufferSize" explicit_type "int"
	nexceptions 1
	  exception class_ref 1091867 // LineUnavailableException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Opens the line with the specified format and suggested buffer size,
causing the line to acquire any required
system resources and become operational.
<p>
The buffer size is specified in bytes, but must represent an integral 
number of sample frames.  Invoking this method with a requested buffer 
size that does not meet this requirement may result in an 
IllegalArgumentException.  The actual buffer size for the open line may 
differ from the requested buffer size.  The value actually set may be 
queried by subsequently calling <code>{@link DataLine#getBufferSize}</code>.  
<p>
If this operation succeeds, the line is marked as open, and an 
<code>{@link LineEvent.Type#OPEN OPEN}</code> event is dispatched to the 
line's listeners.
<p>
Invoking this method on a line which is already open is illegal
and may result in an <code>IllegalStateException</code>.
<p>
Note that some lines, once closed, cannot be reopened.  Attempts
to reopen such a line will always result in a 
<code>LineUnavailableException</code>.

@param format the desired audio format
@param bufferSize the desired buffer size
@throws LineUnavailableException if the line cannot be
opened due to resource restrictions
@throws IllegalArgumentException if the buffer size does not represent
an integral number of sample frames,
or if <code>format</code> is not fully specified or invalid
@throws IllegalStateException if the line is already open
@throws SecurityException if the line cannot be
opened due to security restrictions

@see #open(AudioFormat)
@see Line#open
@see Line#close
@see Line#isOpen
@see LineEvent"
      end

      operation 8746139 "open"
	public explicit_return_type "void"
	nparams 1
	  param inout name "format" type class_ref 1090459 // AudioFormat
	nexceptions 1
	  exception class_ref 1091867 // LineUnavailableException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Opens the line with the specified format, causing the line to acquire any 
required system resources and become operational.  
  
<p>
The implementation chooses a buffer size, which is measured in bytes but 
which encompasses an integral number of sample frames.  The buffer size 
that the system has chosen may be queried by subsequently calling 
<code>{@link DataLine#getBufferSize}</code>.
<p>
If this operation succeeds, the line is marked as open, and an 
<code>{@link LineEvent.Type#OPEN OPEN}</code> event is dispatched to the 
line's listeners.
<p>
Invoking this method on a line which is already open is illegal
and may result in an <code>IllegalStateException</code>.
<p>
Note that some lines, once closed, cannot be reopened.  Attempts
to reopen such a line will always result in a 
<code>LineUnavailableException</code>.

@param format the desired audio format
@throws LineUnavailableException if the line cannot be
opened due to resource restrictions
@throws IllegalArgumentException if <code>format</code>
is not fully specified or invalid
@throws IllegalStateException if the line is already open
@throws SecurityException if the line cannot be
opened due to security restrictions

@see #open(AudioFormat, int)
@see Line#open
@see Line#close
@see Line#isOpen
@see LineEvent"
      end

      operation 8746267 "write"
	public explicit_return_type "int"
	nparams 3
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes audio data to the mixer via this source data line.  The requested 
number of bytes of data are read from the specified array, 
starting at the given offset into the array, and written to the data 
line's buffer.  If the caller attempts to write more data than can 
currently be written (see <code>{@link DataLine#available available}</code>), 
this method blocks until the requested amount of data has been written.  
This applies even if the requested amount of data to write is greater 
than the data line's buffer size.  However, if the data line is closed, 
stopped, or flushed before the requested amount has been written,
the method no longer blocks, but returns the number of bytes 
written thus far. 
<p>
The number of bytes that can be written without blocking can be ascertained
using the <code>{@link DataLine#available available}</code> method of the
<code>DataLine</code> interface.  (While it is guaranteed that
this number of bytes can be written without blocking, there is no guarantee
that attempts to write additional data will block.)
<p>
The number of bytes to write must represent an integral number of
sample frames, such that:
<br>
<center><code>[ bytes written ] % [frame size in bytes ] == 0</code></center>
<br>
The return value will always meet this requirement.  A request to write a 
number of bytes representing a non-integral number of sample frames cannot 
be fulfilled and may result in an <code>IllegalArgumentException</code>.

@param b a byte array containing data to be written to the data line
@param len the length, in bytes, of the valid data in the array 
(in other words, the requested amount of data to write, in bytes)
@param off the offset from the beginning of the array, in bytes
@return the number of bytes actually written
@throws IllegalArgumentException if the requested number of bytes does
not represent an integral number of sample frames,
or if <code>len</code> is negative
@throws ArrayIndexOutOfBoundsException if <code>off</code> is negative,
or <code>off+len</code> is greater than the length of the array
<code>b</code>.

@see TargetDataLine#read
@see DataLine#available"
      end
    end

    class 1092123 "UnsupportedAudioFileException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An <code>UnsupportedAudioFileException</code> is an exception indicating that an
operation failed because a file did not contain valid data of a recognized file
type and format.

@author Kara Kytle
@version 1.9 03/12/19
@since 1.3


An <code>UnsupportedAudioFileException</code> is an exception indicating that an
operation failed because a file did not contain valid data of a recognized file
type and format.

@version 1.9 03/12/19
@author Kara Kytle"
      classrelation 2228507 // <generalisation>
	relation 2228507 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2228507 // <generalisation>
	  b parent class_ref 165403 // Exception
      end

      operation 8746779 "UnsupportedAudioFileException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>UnsupportedAudioFileException</code> that has 
<code>null</code> as its error detail message."
      end

      operation 8746907 "UnsupportedAudioFileException"
	public explicit_return_type ""
	nparams 1
	  param in name "message" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>UnsupportedAudioFileException</code> that has 
the specified detail message.

@param message a string containing the error detail message"
      end
    end

    class 1092379 "BooleanControl"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A <code>BooleanControl</code> provides the ability to switch between
two possible settings that affect a line's audio.  The settings are boolean
values (<code>true</code> and <code>false</code>).  A graphical user interface
might represent the control by a two-state button, an on/off switch, two
mutually exclusive buttons, or a checkbox (among other possibilities).
For example, depressing a button might activate a
<code>{@link BooleanControl.Type#MUTE MUTE}</code> control to silence
the line's audio.
<p>
As with other <code>{@link Control}</code> subclasses, a method is
provided that returns string labels for the values, suitable for
display in the user interface.

@author Kara Kytle
@version 1.15, 03/12/19
@since 1.3"
      classrelation 2226075 // <generalisation>
	relation 2226075 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2226075 // <generalisation>
	  b parent class_ref 1092507 // Control
      end

      attribute 3154203 "trueStateLabel"
	const_attribute private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " INSTANCE VARIABLES

The <code>true</code> state label, such as \"true\" or \"on.\"
"
      end

      attribute 3154331 "falseStateLabel"
	const_attribute private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The <code>false</code> state label, such as \"false\" or \"off.\"
"
      end

      attribute 3154459 "value"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The current value.
"
      end

      operation 8733595 "BooleanControl"
	protected explicit_return_type ""
	nparams 4
	  param inout name "type" type class_ref 1092635 // Type
	  param inout name "initialValue" explicit_type "boolean"
	  param in name "trueStateLabel" explicit_type "String"
	  param in name "falseStateLabel" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " CONSTRUCTORS

Constructs a new boolean control object with the given parameters.

@param type the type of control represented this float control object
@param initialValue the initial control value
@param trueStateLabel the label for the state represented by <code>true</code>,
such as \"true\" or \"on.\"
@param falseStateLabel the label for the state represented by <code>false</code>,
such as \"false\" or \"off.\""
      end

      operation 8733723 "BooleanControl"
	protected explicit_return_type ""
	nparams 2
	  param inout name "type" type class_ref 1092635 // Type
	  param inout name "initialValue" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new boolean control object with the given parameters.
The labels for the <code>true</code> and <code>false</code> states
default to \"true\" and \"false.\"

@param type the type of control represented by this float control object
@param initialValue the initial control value"
      end

      operation 8733851 "setValue"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " METHODS

Sets the current value for the control.  The default
implementation simply sets the value as indicated.
Some controls require that their line be open before they can be affected
by setting a value.
@param value desired new value."
      end

      operation 8733979 "getValue"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains this control's current value.
@return current value."
      end

      operation 8734107 "getStateLabel"
	public explicit_return_type "String"
	nparams 1
	  param inout name "state" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the label for the specified state.
@return the label for the specified state, such as \"true\" or \"on\"
for <code>true</code>, or \"false\" or \"off\" for <code>false</code>."
      end

      operation 8734235 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ABSTRACT METHOD IMPLEMENTATIONS: CONTROL

Provides a string representation of the control
@return a string description"
      end
    end

    class 1092507 "Control"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "{@link Line Lines} often have a set of controls, such as gain and pan, that affect
the audio signal passing through the line.  Java Sound's <code>Line</code> objects
let you obtain a particular control object by passing its class as the
argument to a {@link Line#getControl(Control.Type) getControl} method.
<p>
Because the various types of controls have different purposes and features,
all of their functionality is accessed from the subclasses that define
each kind of control.

@author Kara Kytle
@version 1.25, 03/12/19

@see Line#getControls
@see Line#isControlSupported
@since 1.3"
      class 1092635 "Type"
	visibility public 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 3154075 "name"
	  private explicit_type "String"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " CONTROL TYPE DEFINES
 INSTANCE VARIABLES

Type name.
"
	end

	operation 8733083 "Type"
	  protected explicit_return_type ""
	  nparams 1
	    param in name "name" explicit_type "String"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " CONSTRUCTOR

Constructs a new control type with the name specified.
The name should be a descriptive string appropriate for
labelling the control in an application, such as \"Gain\" or \"Balance.\"
@param name	the name of the new control type."
	end

	operation 8733211 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "obj" explicit_type "Object"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " METHODS

Finalizes the equals method"
	end

	operation 8733339 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Finalizes the hashCode method"
	end

	operation 8733467 "toString"
	  public explicit_return_type "String"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Provides the <code>String</code> representation of the control type.  This <code>String</code> is
the same name that was passed to the constructor.

@return the control type name"
	end
      end

      classrelation 2225947 // type (<unidirectional association>)
	relation 2225947 --->
	  a role_name "type" const_relation private
	    comment " INSTANCE VARIABLES

The control type.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2225947 // type (<unidirectional association>)
	  b parent class_ref 1092635 // Type
      end

      operation 8732699 "Control"
	protected explicit_return_type ""
	nparams 1
	  param inout name "type" type class_ref 1092635 // Type
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " CONSTRUCTORS

Constructs a Control with the specified type.
@param type the kind of control desired"
      end

      operation 8732827 "getType"
	public return_type class_ref 1092635 // Type
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " METHODS

Obtains the control's type.
@return the control's type."
      end

      operation 8732955 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ABSTRACT METHODS

Obtains a String describing the control type and its current state.
@return a String representation of the Control."
      end
    end

    class 1092763 "DataLine"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<code>DataLine</code> adds media-related functionality to its
superinterface, <code>{@link Line}</code>.  This functionality includes
transport-control methods that start, stop, drain, and flush
the audio data that passes through the line.  A data line can also
report the current position, volume, and audio format of the media.
Data lines are used for output of audio by means of the
subinterfaces <code>{@link SourceDataLine}</code> or
<code>{@link Clip}</code>, which allow an application program to write data.  Similarly,
audio input is handled by the subinterface <code>{@link TargetDataLine}</code>,
which allows data to be read.
<p>
A data line has an internal buffer in which
the incoming or outgoing audio data is queued.  The
<code>{@link #drain()}</code> method blocks until this internal buffer
becomes empty, usually because all queued data has been processed.  The
<code>{@link #flush()}</code> method discards any available queued data
from the internal buffer.
<p>
A data line produces <code>{@link LineEvent.Type#START START}</code> and
<code>{@link LineEvent.Type#STOP STOP}</code> events whenever
it begins or ceases active presentation or capture of data.  These events
can be generated in response to specific requests, or as a result of
less direct state changes.  For example, if <code>{@link #start()}</code> is called
on an inactive data line, and data is available for capture or playback, a
<code>START</code> event will be generated shortly, when data playback
or capture actually begins.  Or, if the flow of data to an active data
line is constricted so that a gap occurs in the presentation of data,
a <code>STOP</code> event is generated.
<p>
Mixers often support synchronized control of multiple data lines.
Synchronization can be established through the Mixer interface's
<code>{@link Mixer#synchronize synchronize}</code> method.
See the description of the <code>{@link Mixer Mixer}</code> interface
for a more complete description.

@author Kara Kytle
@version 1.33, 04/07/14
@see LineEvent
@since 1.3"
      classrelation 2226331 // <generalisation>
	relation 2226331 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2226331 // <generalisation>
	  b parent class_ref 1091611 // Line
      end

      operation 8736027 "drain"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Drains queued data from the line by continuing data I/O until the
data line's internal buffer has been emptied.
This method blocks until the draining is complete.  Because this is a
blocking method, it should be used with care.  If <code>drain()</code>
is invoked on a stopped line that has data in its queue, the method will
block until the line is running and the data queue becomes empty.  If
<code>drain()</code> is invoked by one thread, and another continues to
fill the data queue, the operation will not complete.
This method always returns when the data line is closed.

@see #flush()"
      end

      operation 8736155 "flush"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flushes queued data from the line.  The flushed data is discarded.
In some cases, not all queued data can be discarded.  For example, a
mixer can flush data from the buffer for a specific input line, but any
unplayed data already in the output buffer (the result of the mix) will
still be played.  You can invoke this method after pausing a line (the
normal case) if you want to skip the \"stale\" data when you restart
playback or capture. (It is legal to flush a line that is not stopped,
but doing so on an active line is likely to cause a discontinuity in the
data, resulting in a perceptible click.)

@see #stop()
@see #drain()"
      end

      operation 8736283 "start"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allows a line to engage in data I/O.  If invoked on a line
that is already running, this method does nothing.  Unless the data in
the buffer has been flushed, the line resumes I/O starting
with the first frame that was unprocessed at the time the line was
stopped. When audio capture or playback starts, a
<code>{@link LineEvent.Type#START START}</code> event is generated.

@see #stop()
@see #isRunning()
@see LineEvent"
      end

      operation 8736411 "stop"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Stops the line.  A stopped line should cease I/O activity.
If the line is open and running, however, it should retain the resources required
to resume activity.  A stopped line should retain any audio data in its buffer
instead of discarding it, so that upon resumption the I/O can continue where it left off,
if possible.  (This doesn't guarantee that there will never be discontinuities beyond the
current buffer, of course; if the stopped condition continues
for too long, input or output samples might be dropped.)  If desired, the retained data can be
discarded by invoking the <code>flush</code> method.
When audio capture or playback stops, a <code>{@link LineEvent.Type#STOP STOP}</code> event is generated.

@see #start()
@see #isRunning()
@see #flush()
@see LineEvent"
      end

      operation 8736539 "isRunning"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether the line is running.  The default is <code>false</code>.
An open line begins running when the first data is presented in response to an
invocation of the <code>start</code> method, and continues
until presentation ceases in response to a call to <code>stop</code> or
because playback completes.
@return <code>true</code> if the line is running, otherwise <code>false</code>
@see #start()
@see #stop()"
      end

      operation 8736667 "isActive"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether the line is engaging in active I/O (such as playback
or capture).  When an inactive line becomes active, it sends a
<code>{@link LineEvent.Type#START START}</code> event to its listeners.  Similarly, when
an active line becomes inactive, it sends a
<code>{@link LineEvent.Type#STOP STOP}</code> event.
@return <code>true</code> if the line is actively capturing or rendering
sound, otherwise <code>false</code>
@see #isOpen
@see #addLineListener
@see #removeLineListener
@see LineEvent
@see LineListener"
      end

      operation 8736795 "getFormat"
	public return_type class_ref 1090459 // AudioFormat
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the current format (encoding, sample rate, number of channels,
etc.) of the data line's audio data.

<p>If the line is not open and has never been opened, it returns
the default format. The default format is an implementation
specific audio format, or, if the <code>DataLine.Info</code>
object, which was used to retrieve this <code>DataLine</code>,
specifies at least one fully qualified audio format, the
last one will be used as the default format. Opening the
line with a specific audio format (e.g.
{@link SourceDataLine#open(AudioFormat)}) will override the
default format.

@return current audio data format
@see AudioFormat"
      end

      operation 8736923 "getBufferSize"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the maximum number of bytes of data that will fit in the data line's
internal buffer.  For a source data line, this is the size of the buffer to
which data can be written.  For a target data line, it is the size of
the buffer from which data can be read.  Note that
the units used are bytes, but will always correspond to an integral
number of sample frames of audio data.

@return the size of the buffer in bytes"
      end

      operation 8737051 "available"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the number of bytes of data currently available to the
application for processing in the data line's internal buffer.  For a
source data line, this is the amount of data that can be written to the
buffer without blocking.  For a target data line, this is the amount of data
available to be read by the application.  For a clip, this value is always
0 because the audio data is loaded into the buffer when the clip is opened,
and persists without modification until the clip is closed.
<p>
Note that the units used are bytes, but will always
correspond to an integral number of sample frames of audio data.
<p>
An application is guaranteed that a read or
write operation of up to the number of bytes returned from
<code>available()</code> will not block; however, there is no guarantee
that attempts to read or write more data will block.

@return the amount of data available, in bytes"
      end

      operation 8737179 "getFramePosition"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the current position in the audio data, in sample frames.
The frame position measures the number of sample
frames captured by, or rendered from, the line since it was opened.
This return value will wrap around after 2^31 frames. It is recommended
to use <code>getLongFramePosition</code> instead.

@return the number of frames already processed since the line was opened
@see #getLongFramePosition()"
      end

      operation 8737307 "getLongFramePosition"
	public explicit_return_type "long"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the current position in the audio data, in sample frames.
The frame position measures the number of sample
frames captured by, or rendered from, the line since it was opened.

@return the number of frames already processed since the line was opened
@since 1.5"
      end

      operation 8737435 "getMicrosecondPosition"
	public explicit_return_type "long"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the current position in the audio data, in microseconds.
The microsecond position measures the time corresponding to the number
of sample frames captured by, or rendered from, the line since it was opened.
The level of precision is not guaranteed.  For example, an implementation
might calculate the microsecond position from the current frame position
and the audio sample frame rate.  The precision in microseconds would
then be limited to the number of microseconds per sample frame.

@return the number of microseconds of data processed since the line was opened"
      end

      operation 8737563 "getLevel"
	public explicit_return_type "float"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the current volume level for the line.  This level is a measure
of the signal's current amplitude, and should not be confused with the
current setting of a gain control. The range is from 0.0 (silence) to
1.0 (maximum possible amplitude for the sound waveform).  The units
measure linear amplitude, not decibels.

@return the current amplitude of the signal in this line, or
<code>{@link AudioSystem#NOT_SPECIFIED}</code>"
      end
    end

    class 1092891 "CompoundControl"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A <code>CompoundControl</code>, such as a graphic equalizer, provides control
over two or more related properties, each of which is itself represented as
a <code>Control</code>.

@author Kara Kytle
@version 1.10, 03/12/19
@since 1.3"
      classrelation 2226587 // <generalisation>
	relation 2226587 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2226587 // <generalisation>
	  b parent class_ref 1092507 // Control
      end

      classrelation 2226715 // controls (<unidirectional association>)
	relation 2226715 --->
	  a role_name "controls" multiplicity "[]" private
	    comment " TYPE DEFINES
 INSTANCE VARIABLES

The set of member controls.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 2226715 // controls (<unidirectional association>)
	  b parent class_ref 1092507 // Control
      end

      operation 8738715 "CompoundControl"
	protected explicit_return_type ""
	nparams 2
	  param inout name "type" type class_ref 1092635 // Type
	  param inout name "memberControls" type class_ref 1092507 // Control
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " CONSTRUCTORS

Constructs a new compound control object with the given parameters.

@param type the type of control represented this compound control object
@param memberControls the set of member controls"
      end

      operation 8738843 "getMemberControls"
	public return_type class_ref 1092507 // Control
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " METHODS

Returns the set of member controls that comprise the compound control.
@return the set of member controls."
      end

      operation 8738971 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ABSTRACT METHOD IMPLEMENTATIONS: CONTROL

Provides a string representation of the control
@return a string description"
      end
    end

    class 1093019 "EnumControl"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A <code>EnumControl</code> provides control over a set of
discrete possible values, each represented by an object.  In a
graphical user interface, such a control might be represented
by a set of buttons, each of which chooses one value or setting.  For
example, a reverb control might provide several preset reverberation
settings, instead of providing continuously adjustable parameters
of the sort that would be represented by <code>{@link FloatControl}</code>
objects.
<p>
Controls that provide a choice between only two settings can often be implemented
instead as a <code>{@link BooleanControl}</code>, and controls that provide
a set of values along some quantifiable dimension might be implemented
instead as a <code>FloatControl</code> with a coarse resolution.
However, a key feature of <code>EnumControl</code> is that the returned values
are arbitrary objects, rather than numerical or boolean values.  This means that each
returned object can provide further information.  As an example, the settings
of a <code>{@link EnumControl.Type#REVERB REVERB}</code> control are instances of
<code>{@link ReverbType}</code> that can be queried for the parameter values
used for each setting.

@author Kara Kytle
@version 1.14, 03/12/19
@since 1.3"
      classrelation 2226843 // <generalisation>
	relation 2226843 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2226843 // <generalisation>
	  b parent class_ref 1092507 // Control
      end

      attribute 3154715 "values"
	private explicit_type "Object"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " TYPE DEFINES
 INSTANCE VARIABLES

The set of possible values.
"
      end

      attribute 3154843 "value"
	private explicit_type "Object"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The current value.
"
      end

      operation 8739099 "EnumControl"
	protected explicit_return_type ""
	nparams 3
	  param inout name "type" type class_ref 1092635 // Type
	  param inout name "values" explicit_type "Object"
	  param inout name "value" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " CONSTRUCTORS

Constructs a new enumerated control object with the given parameters.

@param type the type of control represented this enumerated control object
@param values the set of possible values for the control
@param value the initial control value"
      end

      operation 8739227 "setValue"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " METHODS

Sets the current value for the control.  The default implementation
simply sets the value as indicated.  If the value indicated is not
supported, an IllegalArgumentException is thrown.
Some controls require that their line be open before they can be affected
by setting a value.
@param value the desired new value
@throws IllegalArgumentException if the value indicated does not fall
within the allowable range"
      end

      operation 8739355 "getValue"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains this control's current value.
@return the current value"
      end

      operation 8739483 "getValues"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the set of possible values for this control.
@return the set of possible values"
      end

      operation 8739611 "isValueSupported"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "value" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether the value specified is supported.
@param value the value for which support is queried
@return <code>true</code> if the value is supported,
otherwise <code>false</code>"
      end

      operation 8739739 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ABSTRACT METHOD IMPLEMENTATIONS: CONTROL

Provides a string representation of the control.
@return a string description"
      end
    end

    class 1093147 "FloatControl"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A <code>FloatControl</code> object provides control over a range of
floating-point values.  Float controls are often
represented in graphical user interfaces by continuously
adjustable objects such as sliders or rotary knobs.  Concrete subclasses
of <code>FloatControl</code> implement controls, such as gain and pan, that
affect a line's audio signal in some way that an application can manipulate.
The <code>{@link FloatControl.Type}</code>
inner class provides static instances of types that are used to
identify some common kinds of float control.
<p>
The <code>FloatControl</code> abstract class provides methods to set and get
the control's current floating-point value.  Other methods obtain the possible
range of values and the control's resolution (the smallest increment between
returned values).  Some float controls allow ramping to a
new value over a specified period of time.  <code>FloatControl</code> also
includes methods that return string labels for the minimum, maximum, and midpoint
positions of the control.

@see Line#getControls
@see Line#isControlSupported

@author David Rivas
@author Kara Kytle
@version 1.16, 03/12/19
@since 1.3"
      classrelation 2226971 // <generalisation>
	relation 2226971 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2226971 // <generalisation>
	  b parent class_ref 1092507 // Control
      end

      attribute 3154971 "minimum"
	private explicit_type "float"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " INSTANCE VARIABLES
 FINAL VARIABLES

The minimum supported value.
"
      end

      attribute 3155099 "maximum"
	private explicit_type "float"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The maximum supported value.
"
      end

      attribute 3155227 "precision"
	private explicit_type "float"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The control's precision.
"
      end

      attribute 3155355 "updatePeriod"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The smallest time increment in which a value change
can be effected during a value shift, in microseconds.
"
      end

      attribute 3155483 "units"
	const_attribute private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A label for the units in which the control values are expressed,
such as \"dB\" for decibels.
"
      end

      attribute 3155611 "minLabel"
	const_attribute private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A label for the minimum value, such as \"Left.\"
"
      end

      attribute 3155739 "maxLabel"
	const_attribute private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A label for the maximum value, such as \"Right.\"
"
      end

      attribute 3155867 "midLabel"
	const_attribute private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A label for the mid-point value, such as \"Center.\"
"
      end

      attribute 3155995 "value"
	private explicit_type "float"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " STATE VARIABLES

The current value.
"
      end

      operation 8739867 "FloatControl"
	protected explicit_return_type ""
	nparams 10
	  param inout name "type" type class_ref 1092635 // Type
	  param in name "minimum" explicit_type "float"
	  param in name "maximum" explicit_type "float"
	  param in name "precision" explicit_type "float"
	  param in name "updatePeriod" explicit_type "int"
	  param in name "initialValue" explicit_type "float"
	  param in name "units" explicit_type "String"
	  param in name "minLabel" explicit_type "String"
	  param in name "midLabel" explicit_type "String"
	  param in name "maxLabel" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " CONSTRUCTORS

Constructs a new float control object with the given parameters

@param type the kind of control represented by this float control object
@param minimum the smallest value permitted for the control
@param maximum the largest value permitted for the control
@param precision the resolution or granularity of the control.
This is the size of the increment between discrete valid values.
@param updatePeriod the smallest time interval, in microseconds, over which the control
can change from one discrete value to the next during a {@link #shift(float,float,int) shift}
@param initialValue the value that the control starts with when constructed
@param units the label for the units in which the control's values are expressed,
such as \"dB\" or \"frames per second\"
@param minLabel the label for the minimum value, such as \"Left\" or \"Off\"
@param midLabel the label for the midpoint value, such as \"Center\" or \"Default\"
@param maxLabel the label for the maximum value, such as \"Right\" or \"Full\""
      end

      operation 8739995 "FloatControl"
	protected explicit_return_type ""
	nparams 7
	  param inout name "type" type class_ref 1092635 // Type
	  param in name "minimum" explicit_type "float"
	  param in name "maximum" explicit_type "float"
	  param in name "precision" explicit_type "float"
	  param in name "updatePeriod" explicit_type "int"
	  param in name "initialValue" explicit_type "float"
	  param in name "units" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new float control object with the given parameters.
The labels for the minimum, maximum, and mid-point values are set
to zero-length strings.

@param type the kind of control represented by this float control object
@param minimum the smallest value permitted for the control
@param maximum the largest value permitted for the control
@param precision the resolution or granularity of the control.
This is the size of the increment between discrete valid values.
@param updatePeriod the smallest time interval, in microseconds, over which the control
can change from one discrete value to the next during a {@link #shift(float,float,int) shift}
@param initialValue the value that the control starts with when constructed
@param units the label for the units in which the control's values are expressed,
such as \"dB\" or \"frames per second\""
      end

      operation 8740123 "setValue"
	public explicit_return_type "void"
	nparams 1
	  param in name "newValue" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " METHODS

Sets the current value for the control.  The default implementation
simply sets the value as indicated.  If the value indicated is greater
than the maximum value, or smaller than the minimum value, an
IllegalArgumentException is thrown.
Some controls require that their line be open before they can be affected
by setting a value.
@param newValue desired new value
@throws IllegalArgumentException if the value indicated does not fall
within the allowable range"
      end

      operation 8740251 "getValue"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains this control's current value.
@return the current value"
      end

      operation 8740379 "getMaximum"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the maximum value permitted.
@return the maximum allowable value"
      end

      operation 8740507 "getMinimum"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the minimum value permitted.
@return the minimum allowable value"
      end

      operation 8740635 "getUnits"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the label for the units in which the control's values are expressed,
such as \"dB\" or \"frames per second.\"
@return the units label, or a zero-length string if no label"
      end

      operation 8740763 "getMinLabel"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the label for the minimum value, such as \"Left\" or \"Off.\"
@return the minimum value label, or a zero-length string if no label	 * has been set"
      end

      operation 8740891 "getMidLabel"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the label for the mid-point value, such as \"Center\" or \"Default.\"
@return the mid-point value label, or a zero-length string if no label	 * has been set"
      end

      operation 8741019 "getMaxLabel"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the label for the maximum value, such as \"Right\" or \"Full.\"
@return the maximum value label, or a zero-length string if no label	 * has been set"
      end

      operation 8741147 "getPrecision"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the resolution or granularity of the control, in the units
that the control measures.
The precision is the size of the increment between discrete valid values
for this control, over the set of supported floating-point values.
@return the control's precision"
      end

      operation 8741275 "getUpdatePeriod"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the smallest time interval, in microseconds, over which the control's value can
change during a shift.  The update period is the inverse of the frequency with which
the control updates its value during a shift.  If the implementation does not support value shifting over
time, it should set the control's value to the final value immediately
and return -1 from this method.

@return update period in microseconds, or -1 if shifting over time is unsupported
@see #shift"
      end

      operation 8741403 "shift"
	public explicit_return_type "void"
	nparams 3
	  param in name "from" explicit_type "float"
	  param in name "to" explicit_type "float"
	  param in name "microseconds" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Changes the control value from the initial value to the final
value linearly over the specified time period, specified in microseconds.
This method returns without blocking; it does not wait for the shift
to complete.  An implementation should complete the operation within the time
specified.  The default implementation simply changes the value
to the final value immediately.

@param from initial value at the beginning of the shift
@param to final value after the shift
@param microseconds maximum duration of the shift in microseconds

@see #getUpdatePeriod"
      end

      operation 8741531 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ABSTRACT METHOD IMPLEMENTATIONS: CONTROL

Provides a string representation of the control
@return a string description"
      end
    end

    class 1093403 "Port"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Ports are simple lines for input or output of audio to or from audio devices.  
Common examples of ports that act as source lines (mixer inputs) include the microphone, 
line input, and CD-ROM drive.  Ports that act as target lines (mixer outputs) include the 
speaker, headphone, and line output.  You can access port using a <code>{@link Port.Info}</code>
object.

@author Kara Kytle
@version 1.26, 04/05/05
@since 1.3"
      classrelation 2228123 // <generalisation>
	relation 2228123 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2228123 // <generalisation>
	  b parent class_ref 1091611 // Line
      end
    end

    class 1093531 "ReverbType"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The <code>ReverbType</code> class provides methods for 
accessing various reverberation settings to be applied to
an audio signal.
<p>
Reverberation simulates the reflection of sound off of
the walls, ceiling, and floor of a room.  Depending on 
the size of the room, and how absorbent or reflective the materials in the
room's surfaces are, the sound might bounce around for a 
long time before dying away.
<p>
The reverberation parameters provided by <code>ReverbType</code> consist 
of the delay time and intensity of early reflections, the delay time and
intensity of late reflections, and an overall decay time.  
Early reflections are the initial individual low-order reflections of the 
direct signal off the surfaces in the room.
The late Relections are the dense, high-order reflections that characterize 
the room's reverberation.
The delay times for the start of these two reflection types give the listener
a sense of the overall size and complexity of the room's shape and contents.
The larger the room, the longer the reflection delay times.
The early and late reflections' intensities define the gain (in decibels) of the reflected
signals as compared to the direct signal.  These intensities give the
listener an impression of the absorptive nature of the surfaces and objects
in the room.
The decay time defines how long the reverberation takes to exponentially
decay until it is no longer perceptible (\"effective zero\").
The larger and less absorbent the surfaces, the longer the decay time.
<p>
The set of parameters defined here may not include all aspects of reverberation
as specified by some systems.  For example, the Midi Manufacturer's Association
(MMA) has an Interactive Audio Special Interest Group (IASIG), which has a
3-D Working Group that has defined a Level 2 Spec (I3DL2).  I3DL2
supports filtering of reverberation and 
control of reverb density.  These properties are not included in the JavaSound 1.0
definition of a reverb control.  In such a case, the implementing system
should either extend the defined reverb control to include additional
parameters, or else interpret the system's additional capabilities in a way that fits
the model described here.  
<p>
If implementing JavaSound on a I3DL2-compliant device:
<ul>
<li>Filtering is disabled (high-frequency attenuations are set to 0.0 dB)
<li>Density parameters are set to midway between minimum and maximum
</ul>
<p>
The following table shows what parameter values an implementation might use for a 
representative set of reverberation settings.  
<p>

<b>Reverberation Types and Parameters</b>
<p>
<table border=1 cellpadding=5 summary=\"reverb types and params: decay time, late intensity, late delay, early intensity, and early delay\">

<tr>
 <th>Type</th>
 <th>Decay Time (ms)</th>
 <th>Late Intensity (dB)</th>
 <th>Late Delay (ms)</th>
 <th>Early Intensity (dB)</th>
 <th>Early Delay(ms)</th>
</tr>

<tr>
 <td>Cavern</td>
 <td>2250</td>
 <td>-2.0</td>
 <td>41.3</td>
 <td>-1.4</td>
 <td>10.3</td>
</tr>

<tr>
 <td>Dungeon</td>
 <td>1600</td>
 <td>-1.0</td>
 <td>10.3</td>
 <td>-0.7</td>
 <td>2.6</td>
</tr>

<tr>
 <td>Garage</td>
 <td>900</td>
 <td>-6.0</td>
 <td>14.7</td>
 <td>-4.0</td>
 <td>3.9</td>
</tr>

<tr>
 <td>Acoustic Lab</td>
 <td>280</td>
 <td>-3.0</td>
 <td>8.0</td>
 <td>-2.0</td>
 <td>2.0</td>
</tr>

<tr>
 <td>Closet</td>
 <td>150</td>
 <td>-10.0</td>
 <td>2.5</td>
 <td>-7.0</td>
 <td>0.6</td>
</tr>

</table>

@author Kara Kytle
@version 1.13, 03/12/19
@since 1.3"
      attribute 3156379 "name"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Descriptive name of the reverb type..
"
      end

      attribute 3156507 "earlyReflectionDelay"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Early reflection delay in microseconds.
"
      end

      attribute 3156635 "earlyReflectionIntensity"
	private explicit_type "float"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Early reflection intensity.
"
      end

      attribute 3156763 "lateReflectionDelay"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Late reflection delay in microseconds.
"
      end

      attribute 3156891 "lateReflectionIntensity"
	private explicit_type "float"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Late reflection intensity.
"
      end

      attribute 3157019 "decayTime"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Total decay time
"
      end

      operation 8744731 "ReverbType"
	protected explicit_return_type ""
	nparams 6
	  param in name "name" explicit_type "String"
	  param in name "earlyReflectionDelay" explicit_type "int"
	  param in name "earlyReflectionIntensity" explicit_type "float"
	  param in name "lateReflectionDelay" explicit_type "int"
	  param in name "lateReflectionIntensity" explicit_type "float"
	  param in name "decayTime" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new reverb type that has the specified reverberation
parameter values.
@param name the name of the new reverb type, or a zero-length <code>String</code>
@param earlyReflectionDelay the new type's early reflection delay time in microseconds
@param earlyReflectionIntensity the new type's early reflection intensity in dB
@param lateReflectionDelay the new type's late reflection delay time in microseconds
@param lateReflectionIntensity the new type's late reflection intensity in dB
@param decayTime the new type's decay time in microseconds"
      end

      operation 8744859 "getName"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the name of this reverb type.
@return the name of this reverb type
@since 1.5"
      end

      operation 8744987 "getEarlyReflectionDelay"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the early reflection delay time in microseconds. 
This is the amount of time between when the direct signal is
heard and when the first early reflections are heard.
@return  early reflection delay time for this reverb type, in microseconds"
      end

      operation 8745115 "getEarlyReflectionIntensity"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the early reflection intensity in decibels. 
This is the amplitude attenuation of the first early reflections
relative to the direct signal.
@return  early reflection intensity for this reverb type, in dB"
      end

      operation 8745243 "getLateReflectionDelay"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the late reflection delay time in microseconds. 
This is the amount of time between when the first early reflections 
are heard and when the first late reflections are heard.
@return  late reflection delay time for this reverb type, in microseconds"
      end

      operation 8745371 "getLateReflectionIntensity"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the late reflection intensity in decibels. 
This is the amplitude attenuation of the first late reflections
relative to the direct signal.
@return  late reflection intensity for this reverb type, in dB"
      end

      operation 8745499 "getDecayTime"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the decay time, which is the amount of time over which the
late reflections attenuate to effective zero.  The effective zero
value is implementation-dependent.
@return  the decay time of the late reflections, in microseconds"
      end

      operation 8745627 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether the specified object is equal to this reverb type,
returning <code>true</code> if the objects are identical.
@param obj the reference object with which to compare
@return <code>true</code> if this reverb type is the same as 
<code>obj</code>; <code>false</code> otherwise"
      end

      operation 8745755 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finalizes the hashcode method."
      end

      operation 8745883 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Provides a <code>String</code> representation of the reverb type,
including its name and its parameter settings.  
The exact contents of the string may vary between implementations of 
Java Sound.
@return reverberation type name and description"
      end
    end
  end

  deploymentview 145563 "sampled"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 290971 "LineListener"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 391579 // LineListener
      end
      comment "@(#)LineListener.java	1.9 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 838683 "AudioFileFormat"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.File;
import java.io.OutputStream;
import java.io.IOException;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
${definition}"
      associated_classes
	class_ref 1090203 // AudioFileFormat
      end
      comment "@(#)AudioFileFormat.java	1.23 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 838811 "AudioFormat"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
${definition}"
      associated_classes
	class_ref 1090459 // AudioFormat
      end
      comment "@(#)AudioFormat.java	1.35 04/03/15

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 838939 "AudioInputStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.InputStream;
import java.io.PushbackInputStream;
import java.io.IOException;
${definition}"
      associated_classes
	class_ref 1090715 // AudioInputStream
      end
      comment "@(#)AudioInputStream.java	1.32 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 839067 "AudioPermission"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.BasicPermission;
${definition}"
      associated_classes
	class_ref 1091099 // AudioPermission
      end
      comment "@(#)AudioPermission.java	1.17 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 839195 "AudioSystem"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.File;
import java.io.InputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.net.URL;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.Vector;
import java.util.ArrayList;
import javax.sound.sampled.spi.AudioFileWriter;
import javax.sound.sampled.spi.AudioFileReader;
import javax.sound.sampled.spi.FormatConversionProvider;
import javax.sound.sampled.spi.MixerProvider;
import com.sun.media.sound.JDK13Services;
${definition}"
      associated_classes
	class_ref 1091227 // AudioSystem
      end
      comment "@(#)AudioSystem.java	1.81 04/07/14

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 839323 "Control"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1092507 // Control
      end
      comment "@(#)Control.java	1.25 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 839451 "Line"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1091611 // Line
      end
      comment "@(#)Line.java	1.29 04/07/14

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 839579 "Clip"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.InputStream;
import java.io.IOException;
${definition}"
      associated_classes
	class_ref 391195 // Clip
      end
      comment "@(#)Clip.java	1.38 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 839707 "LineEvent"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 391707 // LineEvent
      end
      comment "@(#)LineEvent.java	1.26 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 839835 "LineUnavailableException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1091867 // LineUnavailableException
      end
      comment "@(#)LineUnavailableException.java	1.9 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 839963 "ReverbType"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1093531 // ReverbType
      end
      comment "@(#)ReverbType.java	1.13 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 840091 "SourceDataLine"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1091995 // SourceDataLine
      end
      comment "@(#)SourceDataLine.java	1.20 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 840219 "TargetDataLine"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1090843 // TargetDataLine
      end
      comment "@(#)TargetDataLine.java	1.20 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 840347 "UnsupportedAudioFileException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1092123 // UnsupportedAudioFileException
      end
      comment "@(#)UnsupportedAudioFileException.java	1.9 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end
  end

  package_ref 183835 // spi
end
