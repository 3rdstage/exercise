class SwatchPanel
!!!9345435.java!!!	SwatchPanel()
        initValues();
        initColors();
	setToolTipText(""); // register for events
	setOpaque(true);
	setBackground(Color.white);
	setRequestFocusEnabled(false);
!!!9345563.java!!!	isFocusTraversable() : boolean
        return false;
!!!9345691.java!!!	initValues() : void

!!!9345819.java!!!	paintComponent(inout g : Graphics) : void
         g.setColor(getBackground());
         g.fillRect(0,0,getWidth(), getHeight());
	 for (int row = 0; row < numSwatches.height; row++) {
	    for (int column = 0; column < numSwatches.width; column++) {

	      g.setColor( getColorForCell(column, row) ); 
		int x;
		if ((!this.getComponentOrientation().isLeftToRight()) &&
		    (this instanceof RecentSwatchPanel)) {
		    x = (numSwatches.width - column - 1) * (swatchSize.width + gap.width);
		} else {
		    x = column * (swatchSize.width + gap.width);
		}
		int y = row * (swatchSize.height + gap.height);
	        g.fillRect( x, y, swatchSize.width, swatchSize.height);
		g.setColor(Color.black);
		g.drawLine( x+swatchSize.width-1, y, x+swatchSize.width-1, y+swatchSize.height-1);
		g.drawLine( x, y+swatchSize.height-1, x+swatchSize.width-1, y+swatchSize.height-1);
	    }
	 }
!!!9345947.java!!!	getPreferredSize() : Dimension
        int x = numSwatches.width * (swatchSize.width + gap.width) -1;
	int y = numSwatches.height * (swatchSize.height + gap.height) -1;
        return new Dimension( x, y );
!!!9346075.java!!!	initColors() : void

      
!!!9346203.java!!!	getToolTipText(inout e : MouseEvent) : String
        Color color = getColorForLocation(e.getX(), e.getY());
        return color.getRed()+", "+ color.getGreen() + ", " + color.getBlue();
!!!9346331.java!!!	getColorForLocation(in x : int, in y : int) : Color
        int column;
        if ((!this.getComponentOrientation().isLeftToRight()) &&
            (this instanceof RecentSwatchPanel)) {
            column = numSwatches.width - x / (swatchSize.width + gap.width) - 1;
        } else {
            column = x / (swatchSize.width + gap.width);
        }
        int row = y / (swatchSize.height + gap.height);
	return getColorForCell(column, row);
!!!9346459.java!!!	getColorForCell(in column : int, in row : int) : Color
	return colors[ (row * numSwatches.width) + column ]; // (STEVE) - change data orientation here
