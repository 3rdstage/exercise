class Thread
!!!397467.java!!!	nextThreadNum() : int
	return threadInitNumber++;
!!!397595.java!!!	nextThreadID() : long
	return ++threadSeqNumber;
!!!397723.java!!!	blockedOn(inout b : Interruptible) : void
	synchronized (blockerLock) {
	    blocker = b;
	}
!!!398235.java!!!	sleep(in millis : long, in nanos : int) : void
	if (millis < 0) {
            throw new IllegalArgumentException("timeout value is negative");
	}

	if (nanos < 0 || nanos > 999999) {
            throw new IllegalArgumentException(
				"nanosecond timeout value out of range");
	}

	if (nanos >= 500000 || (nanos != 0 && millis == 0)) {
	    millis++;
	}

	sleep(millis);
!!!398363.java!!!	init(inout g : ThreadGroup, inout target : Runnable, in name : String, in stackSize : long) : void
	Thread parent = currentThread();
	SecurityManager security = System.getSecurityManager();
	if (g == null) {
	    /* Determine if it's an applet or not */
	    
	    /* If there is a security manager, ask the security manager
	       what to do. */
	    if (security != null) {
		g = security.getThreadGroup();
	    }

	    /* If the security doesn't have a strong opinion of the matter
	       use the parent thread group. */
	    if (g == null) {
		g = parent.getThreadGroup();
	    }
	}

	/* checkAccess regardless of whether or not threadgroup is
           explicitly passed in. */
	g.checkAccess();

	/*
	 * Do we have the required permissions?
	 */
	if (security != null) {
	    if (isCCLOverridden(getClass())) {
	        security.checkPermission(SUBCLASS_IMPLEMENTATION_PERMISSION);
	    }
	}


        g.addUnstarted();

	this.group = g;
	this.daemon = parent.isDaemon();
	this.priority = parent.getPriority();
	this.name = name.toCharArray();
	if (security == null || isCCLOverridden(parent.getClass()))
	    this.contextClassLoader = parent.getContextClassLoader();
	else
	    this.contextClassLoader = parent.contextClassLoader;
	this.inheritedAccessControlContext = AccessController.getContext();
	this.target = target;
	setPriority(priority);
        if (parent.inheritableThreadLocals != null)
	    this.inheritableThreadLocals =
		ThreadLocal.createInheritedMap(parent.inheritableThreadLocals);
        /* Stash the specified stack size in case the VM cares */
        this.stackSize = stackSize;

        /* Set thread ID */
        tid = nextThreadID();
!!!398491.java!!!	Thread()
	init(null, null, "Thread-" + nextThreadNum(), 0);
!!!398619.java!!!	Thread(inout target : Runnable)
	init(null, target, "Thread-" + nextThreadNum(), 0);
!!!398747.java!!!	Thread(inout group : ThreadGroup, inout target : Runnable)
	init(group, target, "Thread-" + nextThreadNum(), 0);
!!!398875.java!!!	Thread(in name : String)
	init(null, null, name, 0);
!!!399003.java!!!	Thread(inout group : ThreadGroup, in name : String)
	init(group, null, name, 0);
!!!399131.java!!!	Thread(inout target : Runnable, in name : String)
	init(null, target, name, 0);
!!!399259.java!!!	Thread(inout group : ThreadGroup, inout target : Runnable, in name : String)
	init(group, target, name, 0);
!!!399387.java!!!	Thread(inout group : ThreadGroup, inout target : Runnable, in name : String, in stackSize : long)
	init(group, target, name, stackSize);
!!!399515.java!!!	start() : void
        if (started)
            throw new IllegalThreadStateException();
        started = true;
        group.add(this);
        start0();
!!!399771.java!!!	run() : void
	if (target != null) {
	    target.run();
	}
!!!399899.java!!!	exit() : void
	if (group != null) {
	    group.remove(this);
	    group = null;
	}
	/* Aggressively null out all reference fields: see bug 4006245 */
	target = null;
	/* Speed the release of some of these resources */
        threadLocals = null;
        inheritableThreadLocals = null;
        inheritedAccessControlContext = null;
        blocker = null;
        uncaughtExceptionHandler = null;
!!!400027.java!!!	stop() : void
	synchronized (this) {
            //if the thread is already dead, return
            if (!this.isAlive()) return;
	    SecurityManager security = System.getSecurityManager();
	    if (security != null) {
		checkAccess();
		if (this != Thread.currentThread()) {
		    security.checkPermission(SecurityConstants.STOP_THREAD_PERMISSION);
		}
	    }
	    resume(); // Wake up thread if it was suspended; no-op otherwise
	    stop0(new ThreadDeath());
	}
!!!400155.java!!!	stop(inout obj : Throwable) : void
	SecurityManager security = System.getSecurityManager();
	if (security != null) {
	    checkAccess();
	    if ((this != Thread.currentThread()) ||
		(!(obj instanceof ThreadDeath))) {
		security.checkPermission(SecurityConstants.STOP_THREAD_PERMISSION);
	    }
	}
	resume(); // Wake up thread if it was suspended; no-op otherwise
	stop0(obj);
!!!400283.java!!!	interrupt() : void
	if (this != Thread.currentThread())
	    checkAccess();

	synchronized (blockerLock) {
	    Interruptible b = blocker;
	    if (b != null) {
		interrupt0();		// Just to set the interrupt flag
		b.interrupt();
		return;
	    }
	}
	interrupt0();
!!!400411.java!!!	interrupted() : boolean
	return currentThread().isInterrupted(true);
!!!400539.java!!!	isInterrupted() : boolean
	return isInterrupted(false);
!!!400795.java!!!	destroy() : void
	throw new NoSuchMethodError();
!!!401051.java!!!	suspend() : void
	checkAccess();
	suspend0();
!!!401179.java!!!	resume() : void
	checkAccess();
	resume0();
!!!401307.java!!!	setPriority(in newPriority : int) : void
	checkAccess();
	if (newPriority > MAX_PRIORITY || newPriority < MIN_PRIORITY) {
	    throw new IllegalArgumentException();
	}
	if (newPriority > group.getMaxPriority()) {
	    newPriority = group.getMaxPriority();
	}
	setPriority0(priority = newPriority);
!!!401435.java!!!	getPriority() : int
	return priority;
!!!401563.java!!!	setName(in name : String) : void
	checkAccess();
	this.name = name.toCharArray();
!!!401691.java!!!	getName() : String
	return String.valueOf(name);
!!!401819.java!!!	getThreadGroup() : ThreadGroup
	return group;
!!!401947.java!!!	activeCount() : int
	return currentThread().getThreadGroup().activeCount();
!!!402075.java!!!	enumerate(inout tarray : Thread) : int
	return currentThread().getThreadGroup().enumerate(tarray);
!!!402331.java!!!	join(in millis : long) : void
	long base = System.currentTimeMillis();
	long now = 0;

	if (millis < 0) {
            throw new IllegalArgumentException("timeout value is negative");
	}

	if (millis == 0) {
	    while (isAlive()) {
		wait(0);
	    }
	} else {
	    while (isAlive()) {
		long delay = millis - now;
		if (delay <= 0) {
		    break;
		}
		wait(delay);
		now = System.currentTimeMillis() - base;
	    }
	}
!!!402459.java!!!	join(in millis : long, in nanos : int) : void

	if (millis < 0) {
            throw new IllegalArgumentException("timeout value is negative");
	}

	if (nanos < 0 || nanos > 999999) {
            throw new IllegalArgumentException(
				"nanosecond timeout value out of range");
	}

	if (nanos >= 500000 || (nanos != 0 && millis == 0)) {
	    millis++;
	}

	join(millis);
!!!402587.java!!!	join() : void
	join(0);
!!!402715.java!!!	dumpStack() : void
	new Exception("Stack trace").printStackTrace();
!!!402843.java!!!	setDaemon(inout on : boolean) : void
	checkAccess();
	if (isAlive()) {
	    throw new IllegalThreadStateException();
	}
	daemon = on;
!!!402971.java!!!	isDaemon() : boolean
	return daemon;
!!!403099.java!!!	checkAccess() : void
	SecurityManager security = System.getSecurityManager();
	if (security != null) {
	    security.checkAccess(this);
	}
!!!403227.java!!!	toString() : String
        ThreadGroup group = getThreadGroup();
	if (group != null) {
	    return "Thread[" + getName() + "," + getPriority() + "," + 
		           group.getName() + "]";
	} else {
	    return "Thread[" + getName() + "," + getPriority() + "," + 
		            "" + "]";
	}
!!!403355.java!!!	getContextClassLoader() : ClassLoader
	if (contextClassLoader == null)
	    return null;
	SecurityManager sm = System.getSecurityManager();
	if (sm != null) {
	    ClassLoader ccl = ClassLoader.getCallerClassLoader();
	    if (ccl != null && ccl != contextClassLoader && 
                    !contextClassLoader.isAncestor(ccl)) {
		sm.checkPermission(SecurityConstants.GET_CLASSLOADER_PERMISSION);
	    }
	}
	return contextClassLoader;
!!!403483.java!!!	setContextClassLoader(inout cl : ClassLoader) : void
	SecurityManager sm = System.getSecurityManager();
	if (sm != null) {
	    sm.checkPermission(new RuntimePermission("setContextClassLoader"));
	}
	contextClassLoader = cl;
!!!403739.java!!!	getStackTrace() : StackTraceElement
        if (this != Thread.currentThread()) {
            // check for getStackTrace permission
            SecurityManager security = System.getSecurityManager();
            if (security != null) {
                security.checkPermission(
                    SecurityConstants.GET_STACK_TRACE_PERMISSION);
            }
        }

        if (!isAlive()) {
            return EMPTY_STACK_TRACE;
        }

        Thread[] threads = new Thread[1];
        threads[0] = this;
        StackTraceElement[][] result = dumpThreads(threads);
        return result[0]; 
!!!403867.java!!!	getAllStackTraces() : Map
        // check for getStackTrace permission
        SecurityManager security = System.getSecurityManager();
        if (security != null) {
            security.checkPermission(
                SecurityConstants.GET_STACK_TRACE_PERMISSION);
            security.checkPermission(
                SecurityConstants.MODIFY_THREADGROUP_PERMISSION);
        }

        // Get a snapshot of the list of all threads 
        Thread[] threads = getThreads(); 
        StackTraceElement[][] traces = dumpThreads(threads);
        Map<Thread, StackTraceElement[]> m
	    = new HashMap<Thread, StackTraceElement[]>(threads.length);
        for (int i = 0; i < threads.length; i++) {
            if (threads[i].isAlive()) { 
                StackTraceElement[] stackTrace = traces[i];
                if (stackTrace == null) {
                    stackTrace = EMPTY_STACK_TRACE;
                } 
                m.put(threads[i], stackTrace);
            }
        }
        return m;
!!!403995.java!!!	isCCLOverridden(inout cl : Class) : boolean
	if (cl == Thread.class)
	    return false;
	Boolean result = null;
	synchronized (subclassAudits) {
	    result = (Boolean) subclassAudits.get(cl);
	    if (result == null) {
		/*
		 * Note: only new Boolean instances (i.e., not Boolean.TRUE or
		 * Boolean.FALSE) must be used as cache values, otherwise cache
		 * entry will pin associated class.
		 */
		result = new Boolean(auditSubclass(cl));
		subclassAudits.put(cl, result);
	    }
	}
	return result.booleanValue();
!!!404123.java!!!	auditSubclass(in subcl : Class) : boolean
	Boolean result = (Boolean) AccessController.doPrivileged(
	    new PrivilegedAction() {
		public Object run() {
		    for (Class cl = subcl;
			 cl != Thread.class;
			 cl = cl.getSuperclass())
		    {
			try {
			    cl.getDeclaredMethod("getContextClassLoader", new Class[0]);
			    return Boolean.TRUE;
			} catch (NoSuchMethodException ex) {
			}
			try {
			    Class[] params = {ClassLoader.class};
			    cl.getDeclaredMethod("setContextClassLoader", params);
			    return Boolean.TRUE;
			} catch (NoSuchMethodException ex) {
			}
		    }
		    return Boolean.FALSE;
		}
	    }
	);
	return result.booleanValue();
!!!404507.java!!!	getId() : long
        return tid;
!!!404635.java!!!	getState() : State
        // get current thread state
        return sun.misc.VM.toThreadState(threadStatus);
!!!404891.java!!!	setDefaultUncaughtExceptionHandler(inout eh : UncaughtExceptionHandler) : void
        SecurityManager sm = System.getSecurityManager();
        if (sm != null) {
            sm.checkPermission(
                new RuntimePermission("setDefaultUncaughtExceptionHandler")
                    );
        }

         defaultUncaughtExceptionHandler = eh;
!!!405019.java!!!	getDefaultUncaughtExceptionHandler() : UncaughtExceptionHandler
        return defaultUncaughtExceptionHandler;
!!!405147.java!!!	getUncaughtExceptionHandler() : UncaughtExceptionHandler
 
        return uncaughtExceptionHandler != null ?
            uncaughtExceptionHandler : group;
!!!405275.java!!!	setUncaughtExceptionHandler(inout eh : UncaughtExceptionHandler) : void
 
        checkAccess();
        uncaughtExceptionHandler = eh;
!!!405403.java!!!	dispatchUncaughtException(inout e : Throwable) : void
        getUncaughtExceptionHandler().uncaughtException(this, e);
