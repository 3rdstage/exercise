class MediumWeightPopup
!!!9245979.java!!!	getMediumWeightPopup(inout owner : Component, inout contents : Component, in ownerX : int, in ownerY : int) : Popup
            MediumWeightPopup popup = getRecycledMediumWeightPopup();

            if (popup == null) {
                popup = new MediumWeightPopup();
            }
            popup.reset(owner, contents, ownerX, ownerY);
            if (!popup.fitsOnScreen() ||
                 popup.overlappedByOwnedWindow()) {
                popup.hide();
                return null;
            }
            return popup;
!!!9246107.java!!!	getMediumWeightPopupCache() : List
            List cache = (List)SwingUtilities.appContextGet(
                                    mediumWeightPopupCacheKey);

            if (cache == null) {
                cache = new ArrayList();
                SwingUtilities.appContextPut(mediumWeightPopupCacheKey, cache);
            }
            return cache;
!!!9246235.java!!!	recycleMediumWeightPopup(inout popup : MediumWeightPopup) : void
            synchronized (MediumWeightPopup.class) {
                List mediumPopupCache = getMediumWeightPopupCache();
                if (mediumPopupCache.size() < MAX_CACHE_SIZE) {
                    mediumPopupCache.add(popup);
                }
            }
!!!9246363.java!!!	getRecycledMediumWeightPopup() : MediumWeightPopup
            synchronized (MediumWeightPopup.class) {
                java.util.List mediumPopupCache =
                                     getMediumWeightPopupCache();
                int c;
                if ((c=mediumPopupCache.size()) > 0) {
                    MediumWeightPopup r = (MediumWeightPopup)mediumPopupCache.
                                                 get(0);
                    mediumPopupCache.remove(0);
                    return r;
                }
                return null;
            }
!!!9246491.java!!!	hide() : void
            super.hide();
            rootPane.getContentPane().removeAll();
            recycleMediumWeightPopup(this);
!!!9246619.java!!!	show() : void
            Component component = getComponent();
            Container parent = null;

            if (owner != null) {
		parent = owner.getParent();
            }
            /*
              Find the top level window,  
              if it has a layered pane,
              add to that, otherwise
              add to the window. */
            while (!(parent instanceof Window || parent instanceof Applet) &&
                   (parent!=null)) {
                parent = parent.getParent();
            }
            // Set the visibility to false before adding to workaround a
            // bug in Solaris in which the Popup gets added at the wrong
            // location, which will result in a mouseExit, which will then
            // result in the ToolTip being removed.
            if (parent instanceof RootPaneContainer) {
                parent = ((RootPaneContainer)parent).getLayeredPane();
                Point p = SwingUtilities.convertScreenLocationToParent(parent,
                                                                       x, y);
                component.setVisible(false);
                component.setLocation(p.x, p.y);
                ((JLayeredPane)parent).add(component, JLayeredPane.POPUP_LAYER,
                                           0);
            } else {
                Point p = SwingUtilities.convertScreenLocationToParent(parent,
                                                                       x, y);

                component.setLocation(p.x, p.y);
                component.setVisible(false);
                parent.add(component);
            }
            component.setVisible(true);
!!!9246747.java!!!	createComponent(inout owner : Component) : Component
            Panel component = new Panel(new BorderLayout());

	    rootPane = new JRootPane();
            // NOTE: this uses setOpaque vs LookAndFeel.installProperty as
            // there is NO reason for the RootPane not to be opaque. For
            // painting to work the contentPane must be opaque, therefor the
            // RootPane can also be opaque.
            rootPane.setOpaque(true);
	    component.add(rootPane, BorderLayout.CENTER);
            return component;
!!!9246875.java!!!	reset(inout owner : Component, inout contents : Component, in ownerX : int, in ownerY : int) : void
            super.reset(owner, contents, ownerX, ownerY);

            Component component = getComponent();

            component.setLocation(ownerX, ownerY);
            rootPane.getContentPane().add(contents, BorderLayout.CENTER);
            contents.invalidate();
            component.validate();
            pack();
