format 66
"acl" // src::java::security::acl
  revision 3
  modified_by 27 "3rdstage"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "java/security/acl"
  java_package "java.security.acl"
  classview 159259 "acl"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 549403 "AclEntry"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This is the interface used for representing one entry in an Access
Control List (ACL).<p>

An ACL can be thought of as a data structure with multiple ACL entry
objects. Each ACL entry object contains a set of permissions associated
with a particular principal. (A principal represents an entity such as
an individual user or a group). Additionally, each ACL entry is specified
as being either positive or negative. If positive, the permissions are
to be granted to the associated principal. If negative, the permissions
are to be denied. Each principal can have at most one positive ACL entry
and one negative entry; that is, multiple positive or negative ACL
entries are not allowed for any principal.

Note: ACL entries are by default positive. An entry becomes a
negative entry only if the
{@link #setNegativePermissions() setNegativePermissions}
method is called on it.

@see java.security.acl.Acl

@author 	Satish Dharmaraj"
      classrelation 934811 // <generalisation>
	relation 934811 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 934811 // <generalisation>
	  b parent class_ref 339867 // Cloneable
      end

      operation 3488795 "setPrincipal"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "user" type class_ref 527131 // Principal
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specifies the principal for which permissions are granted or denied
by this ACL entry. If a principal was already set for this ACL entry,
false is returned, otherwise true is returned.

@param user the principal to be set for this entry.

@return true if the principal is set, false if there was
already a principal set for this entry.

@see #getPrincipal"
      end

      operation 3488923 "getPrincipal"
	public return_type class_ref 527131 // Principal
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the principal for which permissions are granted or denied by
this ACL entry. Returns null if there is no principal set for this
entry yet.

@return the principal associated with this entry.

@see #setPrincipal"
      end

      operation 3489051 "setNegativePermissions"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this ACL entry to be a negative one. That is, the associated
principal (e.g., a user or a group) will be denied the permission set
specified in the entry.

Note: ACL entries are by default positive. An entry becomes a
negative entry only if this <code>setNegativePermissions</code>
method is called on it."
      end

      operation 3489179 "isNegative"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if this is a negative ACL entry (one denying the
associated principal the set of permissions in the entry), false
otherwise.

@return true if this is a negative ACL entry, false if it's not."
      end

      operation 3489307 "addPermission"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "permission" type class_ref 549531 // Permission
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the specified permission to this ACL entry. Note: An entry can
have multiple permissions.

@param permission the permission to be associated with
the principal in this entry.

@return true if the permission was added, false if the
permission was already part of this entry's permission set."
      end

      operation 3489435 "removePermission"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "permission" type class_ref 549531 // Permission
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the specified permission from this ACL entry.

@param permission the permission to be removed from this entry.

@return true if the permission is removed, false if the
permission was not part of this entry's permission set."
      end

      operation 3489563 "checkPermission"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "permission" type class_ref 549531 // Permission
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if the specified permission is part of the
permission set in this entry.

@param permission the permission to be checked for.

@return true if the permission is part of the
permission set in this entry, false otherwise."
      end

      operation 3489691 "permissions"
	public return_type class_ref 144411 // Enumeration
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Permission> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an enumeration of the permissions in this ACL entry.

@return an enumeration of the permissions in this ACL entry."
      end

      operation 3489819 "toString"
	public explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of the contents of this ACL entry.

@return a string representation of the contents."
      end

      operation 3489947 "clone"
	public explicit_return_type "Object"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clones this ACL entry.

@return a clone of this ACL entry."
      end
    end

    class 549531 "Permission"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This interface represents a permission, such as that used to grant
a particular type of access to a resource.

@author Satish Dharmaraj"
      operation 3538459 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "another" explicit_type "Object"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the object passed matches the permission represented 
in this interface.

@param another the Permission object to compare with.

@return true if the Permission objects are equal, false otherwise"
      end

      operation 3538587 "toString"
	public explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints a string representation of this permission.

@return the string representation of the permission."
      end
    end

    class 549915 "Owner"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Interface for managing owners of Access Control Lists (ACLs) or ACL 
configurations. (Note that the Acl interface in the 
<code> java.security.acl </code> package extends this Owner
interface.) The initial owner Principal should be specified as an 
argument to the constructor of the class implementing this interface.   
  
@see java.security.acl.Acl    
"
      operation 3492251 "addOwner"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "caller" type class_ref 527131 // Principal
	  param inout name "owner" type class_ref 527131 // Principal
	nexceptions 1
	  exception class_ref 550043 // NotOwnerException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds an owner. Only owners can modify ACL contents. The caller 
principal must be an owner of the ACL in order to invoke this method.
That is, only an owner can add another owner. The initial owner is 
configured at ACL construction time. 

@param caller the principal invoking this method. It must be an owner 
of the ACL.

@param owner the owner that should be added to the list of owners.

@return true if successful, false if owner is already an owner.
@exception NotOwnerException if the caller principal is not an owner 
of the ACL."
      end

      operation 3492379 "deleteOwner"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "caller" type class_ref 527131 // Principal
	  param inout name "owner" type class_ref 527131 // Principal
	nexceptions 2
	  exception class_ref 550043 // NotOwnerException
	  exception class_ref 550171 // LastOwnerException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deletes an owner. If this is the last owner in the ACL, an exception is 
raised.<p>

The caller principal must be an owner of the ACL in order to invoke 
this method. 

@param caller the principal invoking this method. It must be an owner 
of the ACL.

@param owner the owner to be removed from the list of owners.

@return true if the owner is removed, false if the owner is not part 
of the list of owners.

@exception NotOwnerException if the caller principal is not an owner 
of the ACL.

@exception LastOwnerException if there is only one owner left, so that
deleteOwner would leave the ACL owner-less."
      end

      operation 3492507 "isOwner"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "owner" type class_ref 527131 // Principal
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the given principal is an owner of the ACL.

@param owner the principal to be checked to determine whether or not 
it is an owner.

@return true if the passed principal is in the list of owners, false 
if not."
      end
    end

    class 550043 "NotOwnerException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This is an exception that is thrown whenever the modification of an object  
(such as an Access Control List) is only allowed to be done by an owner of
the object, but the Principal attempting the modification is not an owner.  

@author 	Satish Dharmaraj"
      classrelation 1884955 // <generalisation>
	relation 1884955 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1884955 // <generalisation>
	  b parent class_ref 165403 // Exception
      end

      attribute 2853019 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -5555597911163362399L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7629979 "NotOwnerException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a NotOwnerException."
      end
    end

    class 550171 "LastOwnerException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This is an exception that is thrown whenever an attempt is made to delete
the last owner of an Access Control List.  
 
@see java.security.acl.Owner#deleteOwner

@author Satish Dharmaraj "
      classrelation 1884827 // <generalisation>
	relation 1884827 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1884827 // <generalisation>
	  b parent class_ref 165403 // Exception
      end

      attribute 2852891 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -5141997548211140359L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7629851 "LastOwnerException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a LastOwnerException."
      end
    end

    class 550427 "Acl"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Interface representing an Access Control List (ACL).  An Access
Control List is a data structure used to guard access to
resources.<p>

An ACL can be thought of as a data structure with multiple ACL
entries.  Each ACL entry, of interface type AclEntry, contains a
set of permissions associated with a particular principal. (A
principal represents an entity such as an individual user or a
group). Additionally, each ACL entry is specified as being either
positive or negative. If positive, the permissions are to be
granted to the associated principal. If negative, the permissions
are to be denied.<p>

The ACL Entries in each ACL observe the following rules:<p>

<ul> <li>Each principal can have at most one positive ACL entry and
one negative entry; that is, multiple positive or negative ACL
entries are not allowed for any principal.  Each entry specifies
the set of permissions that are to be granted (if positive) or
denied (if negative). <p>

<li>If there is no entry for a particular principal, then the
principal is considered to have a null (empty) permission set.<p>

<li>If there is a positive entry that grants a principal a
particular permission, and a negative entry that denies the
principal the same permission, the result is as though the
permission was never granted or denied. <p>

<li>Individual permissions always override permissions of the
group(s) to which the individual belongs. That is, individual
negative permissions (specific denial of permissions) override the
groups' positive permissions. And individual positive permissions
override the groups' negative permissions.<p>

</ul>

The <code> java.security.acl </code> package provides the
interfaces to the ACL and related data structures (ACL entries,
groups, permissions, etc.), and the <code> sun.security.acl </code>
classes provide a default implementation of the interfaces. For
example, <code> java.security.acl.Acl </code> provides the
interface to an ACL and the <code> sun.security.acl.AclImpl </code>
class provides the default implementation of the interface.<p>

The <code> java.security.acl.Acl </code> interface extends the
<code> java.security.acl.Owner </code> interface. The Owner
interface is used to maintain a list of owners for each ACL.  Only
owners are allowed to modify an ACL. For example, only an owner can
call the ACL's <code>addEntry</code> method to add a new ACL entry 
to the ACL.

@see java.security.acl.AclEntry
@see java.security.acl.Owner
@see java.security.acl.Acl#getPermissions

@version 1.23, 04/05/05
@author Satish Dharmaraj "
      classrelation 936091 // <generalisation>
	relation 936091 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 936091 // <generalisation>
	  b parent class_ref 549915 // Owner
      end

      operation 3493275 "setName"
	public explicit_return_type "void"
	nparams 2
	  param inout name "caller" type class_ref 527131 // Principal
	  param in name "name" explicit_type "String"
	nexceptions 1
	  exception class_ref 550043 // NotOwnerException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the name of this ACL.

@param caller the principal invoking this method. It must be an
owner of this ACL.

@param name the name to be given to this ACL.

@exception NotOwnerException if the caller principal
is not an owner of this ACL.  

@see #getName"
      end

      operation 3493403 "getName"
	public explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of this ACL. 

@return the name of this ACL.

@see #setName"
      end

      operation 3493531 "addEntry"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "caller" type class_ref 527131 // Principal
	  param inout name "entry" type class_ref 549403 // AclEntry
	nexceptions 1
	  exception class_ref 550043 // NotOwnerException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds an ACL entry to this ACL. An entry associates a principal
(e.g., an individual or a group) with a set of
permissions. Each principal can have at most one positive ACL
entry (specifying permissions to be granted to the principal)
and one negative ACL entry (specifying permissions to be
denied). If there is already an ACL entry of the same type
(negative or positive) already in the ACL, false is returned.

@param caller the principal invoking this method. It must be an
owner of this ACL.

@param entry the ACL entry to be added to this ACL.

@return true on success, false if an entry of the same type
(positive or negative) for the same principal is already
present in this ACL.

@exception NotOwnerException if the caller principal
 is not an owner of this ACL.  "
      end

      operation 3493659 "removeEntry"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "caller" type class_ref 527131 // Principal
	  param inout name "entry" type class_ref 549403 // AclEntry
	nexceptions 1
	  exception class_ref 550043 // NotOwnerException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes an ACL entry from this ACL.

@param caller the principal invoking this method. It must be an
owner of this ACL.
 
@param entry the ACL entry to be removed from this ACL.

@return true on success, false if the entry is not part of this ACL.

@exception NotOwnerException if the caller principal is not
an owner of this Acl."
      end

      operation 3493787 "getPermissions"
	public return_type class_ref 144411 // Enumeration
	nparams 1
	  param inout name "user" type class_ref 527131 // Principal
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Permission> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an enumeration for the set of allowed permissions for the 
specified principal (representing an entity such as an individual or 
a group). This set of allowed permissions is calculated as
follows:<p>

<ul>
 
<li>If there is no entry in this Access Control List for the 
specified principal, an empty permission set is returned.<p>

<li>Otherwise, the principal's group permission sets are determined.
(A principal can belong to one or more groups, where a group is a 
group of principals, represented by the Group interface.)
The group positive permission set is the union of all 
the positive permissions of each group that the principal belongs to.
The group negative permission set is the union of all 
the negative permissions of each group that the principal belongs to.
If there is a specific permission that occurs in both 
the positive permission set and the negative permission set, 
it is removed from both.<p>

The individual positive and negative permission sets are also 
determined. The positive permission set contains the permissions 
specified in the positive ACL entry (if any) for the principal. 
Similarly, the negative permission set contains the permissions
specified in the negative ACL entry (if any) for the principal. 
The individual positive (or negative) permission set is considered 
to be null if there is not a positive (negative) ACL entry for the
principal in this ACL.<p>

The set of permissions granted to the principal is then calculated 
using the simple rule that individual permissions always override 
the group permissions. That is, the principal's individual negative
permission set (specific denial of permissions) overrides the group 
positive permission set, and the principal's individual positive 
permission set overrides the group negative permission set. 

</ul>

@param user the principal whose permission set is to be returned.

@return the permission set specifying the permissions the principal 
is allowed. "
      end

      operation 3493915 "entries"
	public return_type class_ref 144411 // Enumeration
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<AclEntry> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an enumeration of the entries in this ACL. Each element in 
the enumeration is of type AclEntry.

@return an enumeration of the entries in this ACL."
      end

      operation 3494043 "checkPermission"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "principal" type class_ref 527131 // Principal
	  param inout name "permission" type class_ref 549531 // Permission
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks whether or not the specified principal has the specified 
permission. If it does, true is returned, otherwise false is returned.

More specifically, this method checks whether the passed permission
is a member of the allowed permission set of the specified principal.
The allowed permission set is determined by the same algorithm as is 
used by the <code>getPermissions</code> method.

@param principal the principal, assumed to be a valid authenticated 
Principal.

@param permission the permission to be checked for.

@return true if the principal has the specified permission, false 
otherwise.

@see #getPermissions"
      end

      operation 3494171 "toString"
	public explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of the 
ACL contents.

@return a string representation of the ACL contents."
      end
    end

    class 550811 "Group"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This interface is used to represent a group of principals. (A principal
represents an entity such as an individual user or a company). <p>     

Note that Group extends Principal. Thus, either a Principal or a Group can 
be passed as an argument to methods containing a Principal parameter. For 
example, you can add either a Principal or a Group to a Group object by 
calling the object's <code>addMember</code> method, passing it the 
Principal or Group.

@author 	Satish Dharmaraj"
      classrelation 937243 // <generalisation>
	relation 937243 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 937243 // <generalisation>
	  b parent class_ref 527131 // Principal
      end

      operation 3500571 "addMember"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "user" type class_ref 527131 // Principal
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the specified member to the group. 
 
@param user the principal to add to this group.

@return true if the member was successfully added, 
false if the principal was already a member."
      end

      operation 3500699 "removeMember"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "user" type class_ref 527131 // Principal
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the specified member from the group.

@param user the principal to remove from this group.

@return true if the principal was removed, or 
false if the principal was not a member."
      end

      operation 3500827 "isMember"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "member" type class_ref 527131 // Principal
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the passed principal is a member of the group. 
This method does a recursive search, so if a principal belongs to a 
group which is a member of this group, true is returned.

@param member the principal whose membership is to be checked.

@return true if the principal is a member of this group, 
false otherwise."
      end

      operation 3500955 "members"
	public return_type class_ref 144411 // Enumeration
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends Principal> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an enumeration of the members in the group.
The returned objects can be instances of either Principal 
or Group (which is a subclass of Principal).

@return an enumeration of the group members."
      end
    end

    class 969755 "AclNotFoundException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This is an exception that is thrown whenever a reference is made to a 
non-existent ACL (Access Control List).

@author 	Satish Dharmaraj"
      classrelation 1884699 // <generalisation>
	relation 1884699 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1884699 // <generalisation>
	  b parent class_ref 165403 // Exception
      end

      attribute 2852763 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  5684295034092681791L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7629723 "AclNotFoundException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an AclNotFoundException."
      end
    end
  end

  deploymentview 151323 "acl"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 369691 "AclEntry"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Enumeration;
import java.security.Principal;
${definition}"
      associated_classes
	class_ref 549403 // AclEntry
      end
      comment "@(#)AclEntry.java	1.20 04/05/05

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 369947 "Owner"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.Principal;
${definition}"
      associated_classes
	class_ref 549915 // Owner
      end
      comment "@(#)Owner.java	1.16 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 370203 "Acl"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Enumeration;
import java.security.Principal;
${definition}"
      associated_classes
	class_ref 550427 // Acl
      end
      comment "@(#)Acl.java	1.23 04/05/05

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 370843 "Group"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Enumeration;
import java.security.Principal;
${definition}"
      associated_classes
	class_ref 550811 // Group
      end
      comment "@(#)Group.java	1.19 04/05/05

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 375835 "Permission"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 549531 // Permission
      end
      comment "@(#)Permission.java	1.13 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 738331 "AclNotFoundException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 969755 // AclNotFoundException
      end
      comment "@(#)AclNotFoundException.java	1.13 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 738459 "LastOwnerException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 550171 // LastOwnerException
      end
      comment "@(#)LastOwnerException.java	1.15 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 738587 "NotOwnerException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 550043 // NotOwnerException
      end
      comment "@(#)NotOwnerException.java	1.15 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end
  end
end
