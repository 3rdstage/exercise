class Context
!!!5804827.java!!!	Context()
	    copyTables();
!!!5804955.java!!!	setParent(inout parent : Context) : void
	    this.parent = parent;
	    declarations = null;
	    prefixTable = parent.prefixTable;
	    uriTable = parent.uriTable;
	    elementNameTable = parent.elementNameTable;
	    attributeNameTable = parent.attributeNameTable;
	    defaultNS = parent.defaultNS;
	    declSeen = false;
!!!5805083.java!!!	clear() : void
	    parent = null;
	    prefixTable = null;
	    uriTable = null;
	    elementNameTable = null;
	    attributeNameTable = null;
	    defaultNS = null;
!!!5805211.java!!!	declarePrefix(in prefix : String, in uri : String) : void
				// Lazy processing...
//	    if (!declsOK)
//		throw new IllegalStateException (
//		    "can't declare any more prefixes in this context");
	    if (!declSeen) {
		copyTables();
	    }
	    if (declarations == null) {
		declarations = new Vector();
	    }
	    
	    prefix = prefix.intern();
	    uri = uri.intern();
	    if ("".equals(prefix)) {
		if ("".equals(uri)) {
		    defaultNS = null;
		} else {
		    defaultNS = uri;
		}
	    } else {
		prefixTable.put(prefix, uri);
		uriTable.put(uri, prefix); // may wipe out another prefix
	    }
	    declarations.addElement(prefix);
!!!5805339.java!!!	processName(in qName : String, inout isAttribute : boolean) : String
	    String name[];
	    Hashtable table;
	    
				// Select the appropriate table.
	    if (isAttribute) {
		table = attributeNameTable;
	    } else {
		table = elementNameTable;
	    }
	    
				// Start by looking in the cache, and
				// return immediately if the name
				// is already known in this content
	    name = (String[])table.get(qName);
	    if (name != null) {
		return name;
	    }
	    
				// We haven't seen this name in this
				// context before.  Maybe in the parent
				// context, but we can't assume prefix
				// bindings are the same.
	    name = new String[3];
	    name[2] = qName.intern();
	    int index = qName.indexOf(':');
	    
	    
				// No prefix.
	    if (index == -1) {
		if (isAttribute) {
		    if (qName == "xmlns" && namespaceDeclUris)
			name[0] = NSDECL;
		    else
			name[0] = "";
		} else if (defaultNS == null) {
		    name[0] = "";
		} else {
		    name[0] = defaultNS;
		}
		name[1] = name[2];
	    }
	    
				// Prefix
	    else {
		String prefix = qName.substring(0, index);
		String local = qName.substring(index+1);
		String uri;
		if ("".equals(prefix)) {
		    uri = defaultNS;
		} else {
		    uri = (String)prefixTable.get(prefix);
		}
		if (uri == null
			|| (!isAttribute && "xmlns".equals (prefix))) {
		    return null;
		}
		name[0] = uri;
		name[1] = local.intern();
	    }
	    
				// Save in the cache for future use.
				// (Could be shared with parent context...)
	    table.put(name[2], name);
	    return name;
!!!5805467.java!!!	getURI(in prefix : String) : String
	    if ("".equals(prefix)) {
		return defaultNS;
	    } else if (prefixTable == null) {
		return null;
	    } else {
		return (String)prefixTable.get(prefix);
	    }
!!!5805595.java!!!	getPrefix(in uri : String) : String
	    if (uriTable == null) {
		return null;
	    } else {
		return (String)uriTable.get(uri);
	    }
!!!5805723.java!!!	getDeclaredPrefixes() : Enumeration
	    if (declarations == null) {
		return EMPTY_ENUMERATION;
	    } else {
		return declarations.elements();
	    }
!!!5805851.java!!!	getPrefixes() : Enumeration
	    if (prefixTable == null) {
		return EMPTY_ENUMERATION;
	    } else {
		return prefixTable.keys();
	    }
!!!5805979.java!!!	copyTables() : void
	    if (prefixTable != null) {
		prefixTable = (Hashtable)prefixTable.clone();
	    } else {
		prefixTable = new Hashtable();
	    }
	    if (uriTable != null) {
		uriTable = (Hashtable)uriTable.clone();
	    } else {
		uriTable = new Hashtable();
	    }
	    elementNameTable = new Hashtable();
	    attributeNameTable = new Hashtable();
	    declSeen = true;
