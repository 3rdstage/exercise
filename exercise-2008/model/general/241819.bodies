class LogRecord
!!!8060315.java!!!	LogRecord(inout level : Level, in msg : String)
	// Make sure level isn't null, by calling random method.
	level.getClass();
	this.level = level;
	message = msg;
	// Assign a thread ID and a unique sequence number.
	synchronized (LogRecord.class) {
	    sequenceNumber = globalSequenceNumber++;
	    Integer id = (Integer)threadIds.get();
	    if (id == null) {
		id = new Integer(nextThreadId++);
		threadIds.set(id);
	    }
	    threadID = id.intValue();
	}
	millis = System.currentTimeMillis(); 
	needToInferCaller = true;
!!!8060443.java!!!	getLoggerName() : String
	return loggerName;
!!!8060571.java!!!	setLoggerName(in name : String) : void
	loggerName = name;
!!!8060699.java!!!	getResourceBundle() : ResourceBundle
	return resourceBundle;
!!!8060827.java!!!	setResourceBundle(inout bundle : ResourceBundle) : void
	resourceBundle = bundle;
!!!8060955.java!!!	getResourceBundleName() : String
	return resourceBundleName;
!!!8061083.java!!!	setResourceBundleName(in name : String) : void
	resourceBundleName = name;
!!!8061211.java!!!	getLevel() : Level
	return level;
!!!8061339.java!!!	setLevel(inout level : Level) : void
	if (level == null) {
	    throw new NullPointerException();
	}
	this.level = level;
!!!8061467.java!!!	getSequenceNumber() : long
	return sequenceNumber;
!!!8061595.java!!!	setSequenceNumber(in seq : long) : void
	sequenceNumber = seq;
!!!8061723.java!!!	getSourceClassName() : String
	if (needToInferCaller) {
	    inferCaller();
	}
	return sourceClassName;
!!!8061851.java!!!	setSourceClassName(in sourceClassName : String) : void
	this.sourceClassName = sourceClassName;
	needToInferCaller = false;
!!!8061979.java!!!	getSourceMethodName() : String
	if (needToInferCaller) {
	    inferCaller();
	}
	return sourceMethodName;
!!!8062107.java!!!	setSourceMethodName(in sourceMethodName : String) : void
	this.sourceMethodName = sourceMethodName;
	needToInferCaller = false;
!!!8062235.java!!!	getMessage() : String
	return message;
!!!8062363.java!!!	setMessage(in message : String) : void
	this.message = message;
!!!8062491.java!!!	getParameters() : Object
	return parameters;
!!!8062619.java!!!	setParameters(inout parameters : Object) : void
	this.parameters = parameters;
!!!8062747.java!!!	getThreadID() : int
	return threadID;
!!!8062875.java!!!	setThreadID(in threadID : int) : void
	this.threadID = threadID;
!!!8063003.java!!!	getMillis() : long
	return millis;
!!!8063131.java!!!	setMillis(in millis : long) : void
	this.millis = millis;
!!!8063259.java!!!	getThrown() : Throwable
	return thrown;
!!!8063387.java!!!	setThrown(inout thrown : Throwable) : void
	this.thrown = thrown;
!!!8063515.java!!!	writeObject(inout out : ObjectOutputStream) : void
	// We have to call defaultWriteObject first.
	out.defaultWriteObject();

	// Write our version number.
	out.writeByte(1);
	out.writeByte(0);
	if (parameters == null) {
	    out.writeInt(-1);
	    return;
	}
	out.writeInt(parameters.length);
	// Write string values for the parameters.
	for (int i = 0; i < parameters.length; i++) {
	    if (parameters[i] == null) {
	        out.writeObject(null);
	    } else {
	        out.writeObject(parameters[i].toString());
	    }
	}
!!!8063643.java!!!	readObject(inout in : ObjectInputStream) : void
	// We have to call defaultReadObject first.
	in.defaultReadObject();

	// Read version number.
	byte major = in.readByte();
	byte minor = in.readByte();
	if (major != 1) {
	    throw new IOException("LogRecord: bad version: " + major + "." + minor);
	}
	int len = in.readInt();
	if (len == -1) {
	    parameters = null;
	} else {
	    parameters = new Object[len];
	    for (int i = 0; i < parameters.length; i++) {
	        parameters[i] = in.readObject();
	    }
	}
	// If necessary, try to regenerate the resource bundle.
	if (resourceBundleName != null) {
	    try {
	    	resourceBundle = ResourceBundle.getBundle(resourceBundleName);
	    } catch (MissingResourceException ex) {
		// This is not a good place to throw an exception,
		// so we simply leave the resourceBundle null.
		resourceBundle = null;
	    }
	}

	needToInferCaller = false;
!!!8063771.java!!!	inferCaller() : void
	needToInferCaller = false;
	// Get the stack trace.
	StackTraceElement stack[] = (new Throwable()).getStackTrace();
	// First, search back to a method in the Logger class.
	int ix = 0;
	while (ix < stack.length) {
	    StackTraceElement frame = stack[ix];
	    String cname = frame.getClassName();
	    if (cname.equals("java.util.logging.Logger")) {
		break;
	    }
	    ix++;
	}
	// Now search for the first frame before the "Logger" class.
	while (ix < stack.length) {
	    StackTraceElement frame = stack[ix];
	    String cname = frame.getClassName();
	    if (!cname.equals("java.util.logging.Logger")) {
		// We've found the relevant frame.
	        setSourceClassName(cname);
	        setSourceMethodName(frame.getMethodName());
		return;
	    }
	    ix++;
	}
	// We haven't found a suitable frame, so just punt.  This is
        // OK as we are only committed to making a "best effort" here.
