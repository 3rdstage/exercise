class AbstractButton
!!!2430107.java!!!	getText() : String
        return text;
!!!2430235.java!!!	setText(in text : String) : void
        String oldValue = this.text;
        this.text = text;
        firePropertyChange(TEXT_CHANGED_PROPERTY, oldValue, text);
        updateDisplayedMnemonicIndex(text, getMnemonic());

        if (accessibleContext != null) {
            accessibleContext.firePropertyChange(
                AccessibleContext.ACCESSIBLE_VISIBLE_DATA_PROPERTY,
                oldValue, text);
        }
        if (text == null || oldValue == null || !text.equals(oldValue)) {
            revalidate();
            repaint();
        }
!!!2430363.java!!!	isSelected() : boolean
        return model.isSelected();
!!!2430491.java!!!	setSelected(inout b : boolean) : void
        boolean oldValue = isSelected();

        // TIGER - 4840653
        // Removed code which fired an AccessibleState.SELECTED
        // PropertyChangeEvent since this resulted in two
        // identical events being fired since
        // AbstractButton.fireItemStateChanged also fires the
        // same event. This caused screen readers to speak the
        // name of the item twice.

        model.setSelected(b);
!!!2430619.java!!!	doClick() : void
        doClick(68);
!!!2430747.java!!!	doClick(in pressTime : int) : void
        Dimension size = getSize();
        model.setArmed(true);
        model.setPressed(true);
        paintImmediately(new Rectangle(0,0, size.width, size.height));
        try {
            Thread.currentThread().sleep(pressTime);
        } catch(InterruptedException ie) {
        }
        model.setPressed(false);
        model.setArmed(false);
!!!2430875.java!!!	setMargin(inout m : Insets) : void
        // Cache the old margin if it comes from the UI
        if(m instanceof UIResource) {
            defaultMargin = m;
        } else if(margin instanceof UIResource) {
            defaultMargin = margin;
        }
            
        // If the client passes in a null insets, restore the margin
        // from the UI if possible
        if(m == null && defaultMargin != null) {
            m = defaultMargin;
        }

        Insets old = margin;
        margin = m;
        firePropertyChange(MARGIN_CHANGED_PROPERTY, old, m);
        if (old == null || !old.equals(m)) {
            revalidate();
            repaint();
        }
!!!2431003.java!!!	getMargin() : Insets
        return (margin == null) ? null : (Insets) margin.clone();
!!!2431131.java!!!	getIcon() : Icon
        return defaultIcon;
!!!2431259.java!!!	setIcon(inout defaultIcon : Icon) : void
        Icon oldValue = this.defaultIcon;
        this.defaultIcon = defaultIcon;

        /* If the default icon has really changed and we had
         * generated the disabled icon for this component,
         * (i.e. setDisabledIcon() was never called) then
         * clear the disabledIcon field.
         */
        if (defaultIcon != oldValue && (disabledIcon instanceof UIResource)) {
            disabledIcon = null;
        }

        firePropertyChange(ICON_CHANGED_PROPERTY, oldValue, defaultIcon);
        if (accessibleContext != null) {
            accessibleContext.firePropertyChange(
                AccessibleContext.ACCESSIBLE_VISIBLE_DATA_PROPERTY,
                oldValue, defaultIcon);
        }
        if (defaultIcon != oldValue) {
            if (defaultIcon == null || oldValue == null ||
                defaultIcon.getIconWidth() != oldValue.getIconWidth() ||
                defaultIcon.getIconHeight() != oldValue.getIconHeight()) {
                revalidate();
            } 
            repaint();
        }
!!!2431387.java!!!	getPressedIcon() : Icon
        return pressedIcon;
!!!2431515.java!!!	setPressedIcon(inout pressedIcon : Icon) : void
        Icon oldValue = this.pressedIcon;
        this.pressedIcon = pressedIcon;
        firePropertyChange(PRESSED_ICON_CHANGED_PROPERTY, oldValue, pressedIcon);
        if (accessibleContext != null) {
            accessibleContext.firePropertyChange(
                AccessibleContext.ACCESSIBLE_VISIBLE_DATA_PROPERTY,
                oldValue, pressedIcon);
        }
        if (pressedIcon != oldValue) {
            if (getModel().isPressed()) {
                repaint();
            }
        }
!!!2431643.java!!!	getSelectedIcon() : Icon
        return selectedIcon;
!!!2431771.java!!!	setSelectedIcon(inout selectedIcon : Icon) : void
        Icon oldValue = this.selectedIcon;
        this.selectedIcon = selectedIcon;

        /* If the default selected icon has really changed and we had
         * generated the disabled selected icon for this component,
         * (i.e. setDisabledSelectedIcon() was never called) then
         * clear the disabledSelectedIcon field.
         */
        if (selectedIcon != oldValue &&
            disabledSelectedIcon instanceof UIResource) {

            disabledSelectedIcon = null;
        }

        firePropertyChange(SELECTED_ICON_CHANGED_PROPERTY, oldValue, selectedIcon);
        if (accessibleContext != null) {
            accessibleContext.firePropertyChange(
                AccessibleContext.ACCESSIBLE_VISIBLE_DATA_PROPERTY,
                oldValue, selectedIcon);
        }
        if (selectedIcon != oldValue) {
            if (isSelected()) {
                repaint();
            }
        }
!!!2431899.java!!!	getRolloverIcon() : Icon
        return rolloverIcon;
!!!2432027.java!!!	setRolloverIcon(inout rolloverIcon : Icon) : void
        Icon oldValue = this.rolloverIcon;
        this.rolloverIcon = rolloverIcon;
        firePropertyChange(ROLLOVER_ICON_CHANGED_PROPERTY, oldValue, rolloverIcon);
        if (accessibleContext != null) {
            accessibleContext.firePropertyChange(
                AccessibleContext.ACCESSIBLE_VISIBLE_DATA_PROPERTY,
                oldValue, rolloverIcon);
        }
        setRolloverEnabled(true);
        if (rolloverIcon != oldValue) {
            // No way to determine whether we are currently in
            // a rollover state, so repaint regardless
            repaint();
        }
      
!!!2432155.java!!!	getRolloverSelectedIcon() : Icon
        return rolloverSelectedIcon;
!!!2432283.java!!!	setRolloverSelectedIcon(inout rolloverSelectedIcon : Icon) : void
        Icon oldValue = this.rolloverSelectedIcon;
        this.rolloverSelectedIcon = rolloverSelectedIcon;
        firePropertyChange(ROLLOVER_SELECTED_ICON_CHANGED_PROPERTY, oldValue, rolloverSelectedIcon);
        if (accessibleContext != null) {
            accessibleContext.firePropertyChange(
                AccessibleContext.ACCESSIBLE_VISIBLE_DATA_PROPERTY,
                oldValue, rolloverSelectedIcon);
        }
        setRolloverEnabled(true);
        if (rolloverSelectedIcon != oldValue) {
            // No way to determine whether we are currently in
            // a rollover state, so repaint regardless
            if (isSelected()) {
                repaint();
            }
        }
!!!2432411.java!!!	getDisabledIcon() : Icon
        if (disabledIcon == null) {
            disabledIcon = UIManager.getLookAndFeel().getDisabledIcon(this, getIcon());
            if (disabledIcon != null) {
                firePropertyChange(DISABLED_ICON_CHANGED_PROPERTY, null, disabledIcon);
            }
        }
        return disabledIcon;
!!!2432539.java!!!	setDisabledIcon(inout disabledIcon : Icon) : void
        Icon oldValue = this.disabledIcon;
        this.disabledIcon = disabledIcon;
        firePropertyChange(DISABLED_ICON_CHANGED_PROPERTY, oldValue, disabledIcon);
        if (accessibleContext != null) {
            accessibleContext.firePropertyChange(
                AccessibleContext.ACCESSIBLE_VISIBLE_DATA_PROPERTY,
                oldValue, disabledIcon);
        }
        if (disabledIcon != oldValue) {
            if (!isEnabled()) {
                repaint();
            }
        }
!!!2432667.java!!!	getDisabledSelectedIcon() : Icon
        if (disabledSelectedIcon == null) {
             if (selectedIcon != null) {
                 disabledSelectedIcon = UIManager.getLookAndFeel().
                         getDisabledSelectedIcon(this, getSelectedIcon());
             } else {
                 return getDisabledIcon();
             }
        }
        return disabledSelectedIcon;
!!!2432795.java!!!	setDisabledSelectedIcon(inout disabledSelectedIcon : Icon) : void
        Icon oldValue = this.disabledSelectedIcon;
        this.disabledSelectedIcon = disabledSelectedIcon;
        firePropertyChange(DISABLED_SELECTED_ICON_CHANGED_PROPERTY, oldValue, disabledSelectedIcon);
        if (accessibleContext != null) {
            accessibleContext.firePropertyChange(
                AccessibleContext.ACCESSIBLE_VISIBLE_DATA_PROPERTY,
                oldValue, disabledSelectedIcon);
        }
        if (disabledSelectedIcon != oldValue) {
            if (disabledSelectedIcon == null || oldValue == null ||
                disabledSelectedIcon.getIconWidth() != oldValue.getIconWidth() ||
                disabledSelectedIcon.getIconHeight() != oldValue.getIconHeight()) {
                revalidate();
            } 
            if (!isEnabled() && isSelected()) {
                repaint();
            }
        }
!!!2432923.java!!!	getVerticalAlignment() : int
        return verticalAlignment;
!!!2433051.java!!!	setVerticalAlignment(in alignment : int) : void
        if (alignment == verticalAlignment) return;
        int oldValue = verticalAlignment;
        verticalAlignment = checkVerticalKey(alignment, "verticalAlignment");
        firePropertyChange(VERTICAL_ALIGNMENT_CHANGED_PROPERTY, oldValue, verticalAlignment);         repaint();
!!!2433179.java!!!	getHorizontalAlignment() : int
        return horizontalAlignment;
!!!2433307.java!!!	setHorizontalAlignment(in alignment : int) : void
        if (alignment == horizontalAlignment) return;
        int oldValue = horizontalAlignment;
        horizontalAlignment = checkHorizontalKey(alignment,
                                                 "horizontalAlignment");
        firePropertyChange(HORIZONTAL_ALIGNMENT_CHANGED_PROPERTY,
                           oldValue, horizontalAlignment);       
        repaint();
!!!2433435.java!!!	getVerticalTextPosition() : int
        return verticalTextPosition;
!!!2433563.java!!!	setVerticalTextPosition(in textPosition : int) : void
        if (textPosition == verticalTextPosition) return;
        int oldValue = verticalTextPosition;
        verticalTextPosition = checkVerticalKey(textPosition, "verticalTextPosition");
        firePropertyChange(VERTICAL_TEXT_POSITION_CHANGED_PROPERTY, oldValue, verticalTextPosition);
        repaint();
!!!2433691.java!!!	getHorizontalTextPosition() : int
        return horizontalTextPosition;
!!!2433819.java!!!	setHorizontalTextPosition(in textPosition : int) : void
        if (textPosition == horizontalTextPosition) return;
        int oldValue = horizontalTextPosition;
        horizontalTextPosition = checkHorizontalKey(textPosition,
                                                    "horizontalTextPosition");
        firePropertyChange(HORIZONTAL_TEXT_POSITION_CHANGED_PROPERTY,
                           oldValue,
                           horizontalTextPosition);
        repaint();
!!!2433947.java!!!	getIconTextGap() : int
        return iconTextGap;
!!!2434075.java!!!	setIconTextGap(in iconTextGap : int) : void
        int oldValue = this.iconTextGap;
        this.iconTextGap = iconTextGap;
	iconTextGapSet = true;
        firePropertyChange("iconTextGap", oldValue, iconTextGap);
        if (iconTextGap != oldValue) {
            revalidate();
            repaint();
        }
!!!2434203.java!!!	checkHorizontalKey(in key : int, in exception : String) : int
        if ((key == LEFT) ||
            (key == CENTER) ||
            (key == RIGHT) ||
            (key == LEADING) ||
            (key == TRAILING)) {
            return key;
        } else {
            throw new IllegalArgumentException(exception);
        }
!!!2434331.java!!!	checkVerticalKey(in key : int, in exception : String) : int
        if ((key == TOP) || (key == CENTER) || (key == BOTTOM)) {
            return key;
        } else {
            throw new IllegalArgumentException(exception);
        }
!!!2434459.java!!!	setActionCommand(in actionCommand : String) : void
        getModel().setActionCommand(actionCommand);
!!!2434587.java!!!	getActionCommand() : String
        String ac = getModel().getActionCommand();
        if(ac == null) {
            ac = getText();
        }
        return ac;
!!!2434715.java!!!	setAction(inout a : Action) : void
	Action oldValue = getAction();
	if (action==null || !action.equals(a)) {
	    action = a;
	    if (oldValue!=null) {
		removeActionListener(oldValue);
		oldValue.removePropertyChangeListener(actionPropertyChangeListener);
		actionPropertyChangeListener = null;
	    }
	    configurePropertiesFromAction(action);
	    if (action!=null) {		
		// Don't add if it is already a listener
		if (!isListener(ActionListener.class, action)) {
		    addActionListener(action);
		}
		// Reverse linkage:
		actionPropertyChangeListener = createActionPropertyChangeListener(action);
		action.addPropertyChangeListener(actionPropertyChangeListener);
	    }
	    firePropertyChange("action", oldValue, action);
	    revalidate();
	    repaint();
	}
!!!2434843.java!!!	isListener(inout c : Class, inout a : ActionListener) : boolean
	boolean isListener = false;
	Object[] listeners = listenerList.getListenerList();
        for (int i = listeners.length-2; i>=0; i-=2) {
            if (listeners[i]==c && listeners[i+1]==a) {
		    isListener=true;
	    }
	}
	return isListener;
!!!2434971.java!!!	getAction() : Action
	return action;
!!!2435099.java!!!	configurePropertiesFromAction(inout a : Action) : void
        configurePropertiesFromAction(a, null);
!!!2435227.java!!!	configurePropertiesFromAction(inout a : Action, in types : String) : void
        if (types == null) {
            String[] alltypes = { Action.MNEMONIC_KEY, Action.NAME,
                                  Action.SHORT_DESCRIPTION, Action.SMALL_ICON,
                                  Action.ACTION_COMMAND_KEY, "enabled" };
            types = alltypes;
        }
        for (int i=0; i<types.length; i++) {
            String type = types[i];
            if (type == null) continue;

            if (type.equals(Action.MNEMONIC_KEY)) {
                Integer n = (a==null) ? null : (Integer)a.getValue(type);
                setMnemonic(n==null ? '\0' : n.intValue());
            } else if (type.equals(Action.NAME)) {
                // When hideActionText property is set, we don't use
                // Action name for button text. Useful for toolbar buttons.
                Boolean hide = (Boolean)getClientProperty("hideActionText");
                setText(a != null && hide!=Boolean.TRUE ?
                        (String)a.getValue(Action.NAME) :
                        null);
            } else if (type.equals(Action.SHORT_DESCRIPTION)) {
                setToolTipText(a!=null ? (String)a.getValue(type) : null);
            } else if (type.equals(Action.SMALL_ICON)) {
                setIcon(a!=null ? (Icon)a.getValue(type) : null);
            } else if (type.equals(Action.ACTION_COMMAND_KEY)) {
                setActionCommand(a!=null? (String)a.getValue(type) : null);
            } else if (type.equals("enabled")) {
                setEnabled(a!=null ? a.isEnabled() : true);
            }
        }
!!!2435355.java!!!	createActionPropertyChangeListener(inout a : Action) : PropertyChangeListener
        return new ButtonActionPropertyChangeListener(this, a);
!!!2436507.java!!!	isBorderPainted() : boolean
        return paintBorder;
!!!2436635.java!!!	setBorderPainted(inout b : boolean) : void
        boolean oldValue = paintBorder;
        paintBorder = b;
	borderPaintedSet = true;
        firePropertyChange(BORDER_PAINTED_CHANGED_PROPERTY, oldValue, paintBorder);
        if (b != oldValue) {
            revalidate();
            repaint();
        }
!!!2436763.java!!!	paintBorder(inout g : Graphics) : void
    
        if (isBorderPainted()) {
            super.paintBorder(g);
        }
!!!2436891.java!!!	isFocusPainted() : boolean
        return paintFocus;
!!!2437019.java!!!	setFocusPainted(inout b : boolean) : void
        boolean oldValue = paintFocus;
        paintFocus = b;
        firePropertyChange(FOCUS_PAINTED_CHANGED_PROPERTY, oldValue, paintFocus);
        if (b != oldValue && isFocusOwner()) {
            revalidate();
            repaint();
        }
!!!2437147.java!!!	isContentAreaFilled() : boolean
        return contentAreaFilled;
!!!2437275.java!!!	setContentAreaFilled(inout b : boolean) : void
        boolean oldValue = contentAreaFilled;
        contentAreaFilled = b;
	contentAreaFilledSet = true;
        firePropertyChange(CONTENT_AREA_FILLED_CHANGED_PROPERTY, oldValue, contentAreaFilled);
        if (b != oldValue) {
            repaint();
        }
!!!2437403.java!!!	isRolloverEnabled() : boolean
        return rolloverEnabled;
!!!2437531.java!!!	setRolloverEnabled(inout b : boolean) : void
        boolean oldValue = rolloverEnabled;
        rolloverEnabled = b;
        rolloverEnabledSet = true;
        firePropertyChange(ROLLOVER_ENABLED_CHANGED_PROPERTY, oldValue, rolloverEnabled);
        if (b != oldValue) {
            repaint();
        }
!!!2437659.java!!!	getMnemonic() : int
        return mnemonic;
!!!2437787.java!!!	setMnemonic(in mnemonic : int) : void
        int oldValue = getMnemonic();
        model.setMnemonic(mnemonic);
        updateMnemonicProperties();
!!!2437915.java!!!	setMnemonic(in mnemonic : char) : void
        int vk = (int) mnemonic;
        if(vk >= 'a' && vk <='z')
            vk -= ('a' - 'A');
        setMnemonic(vk);
!!!2438043.java!!!	setDisplayedMnemonicIndex(in index : int) : void
        int oldValue = mnemonicIndex;
        if (index == -1) {
            mnemonicIndex = -1;
        } else {
            String text = getText();
            int textLength = (text == null) ? 0 : text.length();
            if (index < -1 || index >= textLength) {  // index out of range
                throw new IllegalArgumentException("index == " + index);
            }
        }
        mnemonicIndex = index;
        firePropertyChange("displayedMnemonicIndex", oldValue, index);
        if (index != oldValue) {
            revalidate();
            repaint();
        }
!!!2438171.java!!!	getDisplayedMnemonicIndex() : int
        return mnemonicIndex;
!!!2438299.java!!!	updateDisplayedMnemonicIndex(in text : String, in mnemonic : int) : void
        setDisplayedMnemonicIndex(
            SwingUtilities.findDisplayedMnemonicIndex(text, mnemonic));
!!!2438427.java!!!	updateMnemonicProperties() : void
        int newMnemonic = model.getMnemonic();
        if (mnemonic != newMnemonic) {
            int oldValue = mnemonic;
            mnemonic = newMnemonic;
            firePropertyChange(MNEMONIC_CHANGED_PROPERTY,
                               oldValue, mnemonic);
            updateDisplayedMnemonicIndex(getText(), mnemonic);
            revalidate();
            repaint();
        }
!!!2438555.java!!!	setMultiClickThreshhold(in threshhold : long) : void
	if (threshhold < 0) {
	    throw new IllegalArgumentException("threshhold must be >= 0");
	}
	this.multiClickThreshhold = threshhold;
!!!2438683.java!!!	getMultiClickThreshhold() : long
	return multiClickThreshhold;
!!!2438811.java!!!	getModel() : ButtonModel
        return model;
!!!2438939.java!!!	setModel(inout newModel : ButtonModel) : void
        
        ButtonModel oldModel = getModel();
        
        if (oldModel != null) {
            oldModel.removeChangeListener(changeListener);
            oldModel.removeActionListener(actionListener);
            oldModel.removeItemListener(itemListener);
            changeListener = null;
            actionListener = null;
            itemListener = null;
        }
        
        model = newModel;
        
        if (newModel != null) {
            changeListener = createChangeListener();
            actionListener = createActionListener();
            itemListener = createItemListener();
            newModel.addChangeListener(changeListener);
            newModel.addActionListener(actionListener);
            newModel.addItemListener(itemListener);

            updateMnemonicProperties();
        } else {
            mnemonic = '\0';
        }

        updateDisplayedMnemonicIndex(getText(), mnemonic);

        firePropertyChange(MODEL_CHANGED_PROPERTY, oldModel, newModel);
        if (newModel != oldModel) {
            revalidate();
            repaint();
        }
!!!2439067.java!!!	getUI() : ButtonUI
        return (ButtonUI) ui;
!!!2439195.java!!!	setUI(inout ui : ButtonUI) : void
        super.setUI(ui);
        // disabled icons are generated by the LF so they should be unset here
        if (disabledIcon instanceof UIResource) {
            setDisabledIcon(null);
        }
        if (disabledSelectedIcon instanceof UIResource) {
            setDisabledSelectedIcon(null);
        }
!!!2439451.java!!!	addImpl(inout comp : Component, inout constraints : Object, in index : int) : void
        if (!setLayout) {
            setLayout(new OverlayLayout(this));
        }
        super.addImpl(comp, constraints, index);
!!!2439579.java!!!	setLayout(inout mgr : LayoutManager) : void
        setLayout = true;
        super.setLayout(mgr);
!!!2439707.java!!!	addChangeListener(inout l : ChangeListener) : void
        listenerList.add(ChangeListener.class, l);
!!!2439835.java!!!	removeChangeListener(inout l : ChangeListener) : void
        listenerList.remove(ChangeListener.class, l);
!!!2439963.java!!!	getChangeListeners() : ChangeListener
        return (ChangeListener[])(listenerList.getListeners(
            ChangeListener.class));
!!!2440091.java!!!	fireStateChanged() : void
        // Guaranteed to return a non-null array
        Object[] listeners = listenerList.getListenerList();
        // Process the listeners last to first, notifying
        // those that are interested in this event
        for (int i = listeners.length-2; i>=0; i-=2) {
            if (listeners[i]==ChangeListener.class) {
                // Lazily create the event:
                if (changeEvent == null)
                    changeEvent = new ChangeEvent(this);
                ((ChangeListener)listeners[i+1]).stateChanged(changeEvent);
            }          
        }
!!!2440219.java!!!	addActionListener(inout l : ActionListener) : void
        listenerList.add(ActionListener.class, l);
!!!2440347.java!!!	removeActionListener(inout l : ActionListener) : void
	if ((l != null) && (getAction() == l)) {
	    setAction(null);
	} else {
	    listenerList.remove(ActionListener.class, l);
	}
!!!2440475.java!!!	getActionListeners() : ActionListener
        return (ActionListener[])(listenerList.getListeners(
            ActionListener.class));
!!!2440603.java!!!	createChangeListener() : ChangeListener
        return getHandler();
!!!2440987.java!!!	fireActionPerformed(inout event : ActionEvent) : void
        // Guaranteed to return a non-null array
        Object[] listeners = listenerList.getListenerList();
        ActionEvent e = null;
        // Process the listeners last to first, notifying
        // those that are interested in this event
        for (int i = listeners.length-2; i>=0; i-=2) {
            if (listeners[i]==ActionListener.class) {
                // Lazily create the event:
                if (e == null) {
                      String actionCommand = event.getActionCommand();
                      if(actionCommand == null) {
                         actionCommand = getActionCommand();
                      }
                      e = new ActionEvent(AbstractButton.this,
                                          ActionEvent.ACTION_PERFORMED,
                                          actionCommand,
                                          event.getWhen(),
                                          event.getModifiers());
                }
                ((ActionListener)listeners[i+1]).actionPerformed(e);
            }          
        }
!!!2441115.java!!!	fireItemStateChanged(inout event : ItemEvent) : void
        // Guaranteed to return a non-null array
        Object[] listeners = listenerList.getListenerList();
        ItemEvent e = null;
        // Process the listeners last to first, notifying
        // those that are interested in this event
        for (int i = listeners.length-2; i>=0; i-=2) {
            if (listeners[i]==ItemListener.class) {
                // Lazily create the event:
                if (e == null) {
                    e = new ItemEvent(AbstractButton.this,
                                      ItemEvent.ITEM_STATE_CHANGED,
                                      AbstractButton.this,
                                      event.getStateChange());
                }
                ((ItemListener)listeners[i+1]).itemStateChanged(e);
            }          
        }
	if (accessibleContext != null) {
	    if (event.getStateChange() == ItemEvent.SELECTED) {
		accessibleContext.firePropertyChange(
	            AccessibleContext.ACCESSIBLE_STATE_PROPERTY,
                    null, AccessibleState.SELECTED);
		accessibleContext.firePropertyChange(
	            AccessibleContext.ACCESSIBLE_VALUE_PROPERTY,
                    new Integer(0), new Integer(1));
	    } else {
		accessibleContext.firePropertyChange(
	            AccessibleContext.ACCESSIBLE_STATE_PROPERTY,
                    AccessibleState.SELECTED, null);
		accessibleContext.firePropertyChange(
	            AccessibleContext.ACCESSIBLE_VALUE_PROPERTY,
                    new Integer(1), new Integer(0));
	    }
	}   
!!!2441243.java!!!	createActionListener() : ActionListener
        return getHandler();
!!!2441371.java!!!	createItemListener() : ItemListener
        return getHandler();
!!!2441499.java!!!	setEnabled(inout b : boolean) : void
	if (!b && model.isRollover()) {
	    model.setRollover(false);
	} 
        super.setEnabled(b);
        model.setEnabled(b);
!!!2441627.java!!!	getLabel() : String
        return getText();
!!!2441755.java!!!	setLabel(in label : String) : void
        setText(label);
!!!2441883.java!!!	addItemListener(inout l : ItemListener) : void
        listenerList.add(ItemListener.class, l);
!!!2442011.java!!!	removeItemListener(inout l : ItemListener) : void
        listenerList.remove(ItemListener.class, l);
!!!2442139.java!!!	getItemListeners() : ItemListener
        return (ItemListener[])listenerList.getListeners(ItemListener.class);
!!!2442267.java!!!	getSelectedObjects() : Object
        if (isSelected() == false) {
            return null;
        }
        Object[] selectedObjects = new Object[1];
        selectedObjects[0] = getText();
        return selectedObjects;
!!!2442395.java!!!	init(in text : String, inout icon : Icon) : void
        if(text != null) {
            setText(text);
        }
        
        if(icon != null) {
            setIcon(icon);
        }
        
        // Set the UI
        updateUI();

        setAlignmentX(LEFT_ALIGNMENT);
        setAlignmentY(CENTER_ALIGNMENT);
!!!2442523.java!!!	imageUpdate(inout img : Image, in infoflags : int, in x : int, in y : int, in w : int, in h : int) : boolean
        Icon iconDisplayed = getIcon();
        if (iconDisplayed == null) {
            return false;
        }

        if (!model.isEnabled()) {
            if (model.isSelected()) {
                iconDisplayed = getDisabledSelectedIcon();
            } else {
                iconDisplayed = getDisabledIcon();
            }
        } else if (model.isPressed() && model.isArmed()) {
            iconDisplayed = getPressedIcon();
        } else if (isRolloverEnabled() && model.isRollover()) {
            if (model.isSelected()) {
                iconDisplayed = getRolloverSelectedIcon();
            } else {
                iconDisplayed = getRolloverIcon();
            }
        } else if (model.isSelected()) {
            iconDisplayed = getSelectedIcon();
        }

 	if (!SwingUtilities.doesIconReferenceImage(iconDisplayed, img)) {
	    // We don't know about this image, disable the notification so
	    // we don't keep repainting.
	    return false;
	}
	return super.imageUpdate(img, infoflags, x, y, w, h);
!!!2442651.java!!!	setUIProperty(in propertyName : String, inout value : Object) : void
        if (propertyName == "borderPainted") {
	    if (!borderPaintedSet) {
		setBorderPainted(((Boolean)value).booleanValue());
		borderPaintedSet = false;
	    }
	} else if (propertyName == "rolloverEnabled") {
	    if (!rolloverEnabledSet) {
		setRolloverEnabled(((Boolean)value).booleanValue());
		rolloverEnabledSet = false;
	    }
	} else if (propertyName == "iconTextGap") {
	    if (!iconTextGapSet) {
		setIconTextGap(((Number)value).intValue());
		iconTextGapSet = false;
	    }
	} else if (propertyName == "contentAreaFilled") {
	    if (!contentAreaFilledSet) {
		setContentAreaFilled(((Boolean)value).booleanValue());
		contentAreaFilledSet = false;
	    }
	} else {
	    super.setUIProperty(propertyName, value);
	}
!!!2442779.java!!!	paramString() : String
	String defaultIconString = ((defaultIcon != null)
				    && (defaultIcon != this) ?
				    defaultIcon.toString() : "");
	String pressedIconString = ((pressedIcon != null)
				    && (pressedIcon != this) ?
				    pressedIcon.toString() : "");
	String disabledIconString = ((disabledIcon != null)
				     && (disabledIcon != this) ?
				     disabledIcon.toString() : "");
	String selectedIconString = ((selectedIcon != null)
				     && (selectedIcon != this) ?
				     selectedIcon.toString() : "");
	String disabledSelectedIconString = ((disabledSelectedIcon != null) &&
					     (disabledSelectedIcon != this) ?
					     disabledSelectedIcon.toString()
					     : "");
	String rolloverIconString = ((rolloverIcon != null)
				     && (rolloverIcon != this) ?
				     rolloverIcon.toString() : "");
	String rolloverSelectedIconString = ((rolloverSelectedIcon != null) &&
					     (rolloverSelectedIcon != this) ?
					     rolloverSelectedIcon.toString()
					     : "");
	String paintBorderString = (paintBorder ? "true" : "false");
	String paintFocusString = (paintFocus ? "true" : "false");
	String rolloverEnabledString = (rolloverEnabled ? "true" : "false");

	return super.paramString() +
	",defaultIcon=" + defaultIconString +
	",disabledIcon=" + disabledIconString +
	",disabledSelectedIcon=" + disabledSelectedIconString +
	",margin=" + margin +
	",paintBorder=" + paintBorderString +
	",paintFocus=" + paintFocusString +
	",pressedIcon=" + pressedIconString +
	",rolloverEnabled=" + rolloverEnabledString +
	",rolloverIcon=" + rolloverIconString +
	",rolloverSelectedIcon=" + rolloverSelectedIconString +
	",selectedIcon=" + selectedIconString +
	",text=" + text;
!!!2442907.java!!!	getHandler() : Handler
        if (handler == null) {
            handler = new Handler();
        }
        return handler;
