class RemoteObject
!!!7520411.java!!!	RemoteObject()
	ref = null;
!!!7520539.java!!!	RemoteObject(inout newref : RemoteRef)
	ref = newref;
!!!7520667.java!!!	getRef() : RemoteRef
	return ref;
!!!7520795.java!!!	toStub(inout obj : Remote) : Remote
	if (obj instanceof RemoteStub ||
	    (obj != null &&
	     Proxy.isProxyClass(obj.getClass()) &&
	     Proxy.getInvocationHandler(obj) instanceof
	     RemoteObjectInvocationHandler))
	{
	    return obj; 
	} else {
	    return sun.rmi.transport.ObjectTable.getStub(obj);
	}
!!!7520923.java!!!	hashCode() : int
	return (ref == null) ? super.hashCode() : ref.remoteHashCode();
!!!7521051.java!!!	equals(inout obj : Object) : boolean
	if (obj instanceof RemoteObject) {
	    if (ref == null) {
		return obj == this;
	    } else {
		return ref.remoteEquals(((RemoteObject)obj).ref);
	    }
	} else if (obj != null) {
	    /*
	     * Fix for 4099660: if object is not an instance of RemoteObject,
	     * use the result of its equals method, to support symmetry is a
	     * remote object implementation class that does not extend
	     * RemoteObject wishes to support equality with its stub objects.
	     */
	    return obj.equals(this);
	} else {
	    return false;
	}
!!!7521179.java!!!	toString() : String
	String classname = Util.getUnqualifiedName(getClass());
	return (ref == null) ? classname :
	    classname + "[" + ref.remoteToString() + "]";
!!!7521307.java!!!	writeObject(inout out : ObjectOutputStream) : void
	if (ref == null) {
	    throw new java.rmi.MarshalException("Invalid remote object");
	} else {
	    String refClassName = ref.getRefClass(out);
	    if (refClassName == null || refClassName.length() == 0) {
		/*
		 * No reference class name specified, so serialize
		 * remote reference.
		 */
		out.writeUTF("");
		out.writeObject(ref);
	    } else {
		/*
		 * Built-in reference class specified, so delegate
		 * to reference to write out its external form.
		 */
		out.writeUTF(refClassName);
		ref.writeExternal(out);
	    }
	}
!!!7521435.java!!!	readObject(inout in : ObjectInputStream) : void
	String refClassName = in.readUTF();
	if (refClassName == null || refClassName.length() == 0) {
	    /*
	     * No reference class name specified, so construct
	     * remote reference from its serialized form.
	     */
	    ref = (RemoteRef) in.readObject();
	} else {
	    /*
	     * Built-in reference class specified, so delegate to
	     * internal reference class to initialize its fields from
	     * its external form.
	     */
	    String internalRefClassName =
		RemoteRef.packagePrefix + "." + refClassName;
	    Class refClass = Class.forName(internalRefClassName);
	    try {
		ref = (RemoteRef) refClass.newInstance();

		/*
		 * If this step fails, assume we found an internal
		 * class that is not meant to be a serializable ref
		 * type.
		 */
	    } catch (InstantiationException e) {
		throw new ClassNotFoundException(internalRefClassName, e);
	    } catch (IllegalAccessException e) {
		throw new ClassNotFoundException(internalRefClassName, e);
	    } catch (ClassCastException e) {
		throw new ClassNotFoundException(internalRefClassName, e);
	    }
	    ref.readExternal(in);
	}
