class FilePermission
!!!6853403.java!!!	init(in mask : int) : void

	if ((mask & ALL) != mask) 
		throw new IllegalArgumentException("invalid actions mask");

	if (mask == NONE) 
		throw new IllegalArgumentException("invalid actions mask");

	if ((cpath = getName()) == null) 
		throw new NullPointerException("name can't be null");

	this.mask = mask;

	if (cpath.equals("<<ALL FILES>>")) {
	    directory = true;
	    recursive = true;
	    cpath = "";
	    return;
	}

	int len = cpath.length();
	char last = ((len > 0) ? cpath.charAt(len - 1) : 0);

	if (last == RECURSIVE_CHAR &&
	    (len == 1 || cpath.charAt(len - 2) == File.separatorChar)) {
	    directory = true;
	    recursive = true;
	    cpath = cpath.substring(0, --len);
	} else if (last == WILD_CHAR &&
	    (len == 1 || cpath.charAt(len - 2) == File.separatorChar)) {
	    directory = true;
	    //recursive = false;
	    cpath = cpath.substring(0, --len);
	} else {
	    // overkill since they are initialized to false, but 
	    // commented out here to remind us...
	    //directory = false;
	    //recursive = false;
	}

	if (len == 0) {
	    cpath = (String) java.security.AccessController.doPrivileged(
		       new sun.security.action.GetPropertyAction("user.dir"));
	}

	// store only the canonical cpath if possible

	// need a doPrivileged block as getCanonicalPath
	// might attempt to access user.dir to turn a relative
	// path into an absolute path.
	cpath = (String) 
	    AccessController.doPrivileged(
			new java.security.PrivilegedAction() {
	    public Object run() {
		try {
		    File file = new File(cpath);
		    String canonical_path = file.getCanonicalPath();
		    int ln;
		    if (directory && 
	  		((ln=canonical_path.length()) == 0 ||
			canonical_path.charAt(ln - 1) != File.separatorChar)) {
			return canonical_path + File.separator;
		    } else {
			return canonical_path;
		    }
		} catch (IOException ioe) {
		    // ignore if we can't canonicalize path?
		}
		return cpath;
	    }
	});

	// XXX: at this point the path should be absolute. die if it isn't?
!!!6853531.java!!!	FilePermission(in path : String, in actions : String)
	super(path);
	init(getMask(actions));
!!!6853659.java!!!	FilePermission(in path : String, in mask : int)
	super(path);
	init(mask);
!!!6853787.java!!!	implies(inout p : Permission) : boolean
	if (!(p instanceof FilePermission))
	    return false;

	FilePermission that = (FilePermission) p;

	// we get the effective mask. i.e., the "and" of this and that.
	// They must be equal to that.mask for implies to return true.

	return ((this.mask & that.mask) == that.mask) && impliesIgnoreMask(that);
!!!6853915.java!!!	impliesIgnoreMask(inout that : FilePermission) : boolean
	if (this.directory) {
	    if (this.recursive) {
		// make sure that.path is longer then path so
		// something like /foo/- does not imply /foo
		if (that.directory) {
		    return (that.cpath.length() >= this.cpath.length()) &&
			    that.cpath.startsWith(this.cpath);
		}  else {
		    return ((that.cpath.length() > this.cpath.length()) &&
		        that.cpath.startsWith(this.cpath));
		}
	    } else {
		if (that.directory) {
		    // if the permission passed in is a directory
		    // specification, make sure that a non-recursive
		    // permission (i.e., this object) can't imply a recursive
		    // permission.
		    if (that.recursive)
			return false;
		    else 
			return (this.cpath.equals(that.cpath));
		} else {
		    int last = that.cpath.lastIndexOf(File.separatorChar);
		    if (last == -1) 
			return false;
		    else {
			// this.cpath.equals(that.cpath.substring(0, last+1));
			// Use regionMatches to avoid creating new string

			return (this.cpath.length() == (last + 1)) &&
			    this.cpath.regionMatches(0, that.cpath, 0, last+1);
		    }
		}
	    }
	} else {
	    return (this.cpath.equals(that.cpath));
	}
!!!6854043.java!!!	equals(inout obj : Object) : boolean
	if (obj == this)
	    return true;

	if (! (obj instanceof FilePermission))
	    return false;

	FilePermission that = (FilePermission) obj;

	return (this.mask == that.mask) && 
	    this.cpath.equals(that.cpath) &&
	    (this.directory == that.directory) &&
	    (this.recursive == that.recursive);
!!!6854171.java!!!	hashCode() : int
	return this.cpath.hashCode();
!!!6854299.java!!!	getMask(in actions : String) : int

	int mask = NONE;

	// Null action valid?
	if (actions == null) {
	    return mask;
	}
	// Check against use of constants (used heavily within the JDK)
	if (actions == SecurityConstants.FILE_READ_ACTION) {
	    return READ;
	} else if (actions == SecurityConstants.FILE_WRITE_ACTION) {
	    return WRITE;
	} else if (actions == SecurityConstants.FILE_EXECUTE_ACTION) {
	    return EXECUTE;
	} else if (actions == SecurityConstants.FILE_DELETE_ACTION) {
	    return DELETE;
	}
	
	char[] a = actions.toCharArray();

	int i = a.length - 1;
	if (i < 0)
	    return mask;

	while (i != -1) {
	    char c;

	    // skip whitespace
	    while ((i!=-1) && ((c = a[i]) == ' ' ||
			       c == '\r' ||
			       c == '\n' ||
			       c == '\f' ||
			       c == '\t'))
		i--;

	    // check for the known strings
	    int matchlen;

	    if (i >= 3 && (a[i-3] == 'r' || a[i-3] == 'R') &&
			  (a[i-2] == 'e' || a[i-2] == 'E') &&
			  (a[i-1] == 'a' || a[i-1] == 'A') &&
			  (a[i] == 'd' || a[i] == 'D'))
	    {
		matchlen = 4;
		mask |= READ;

	    } else if (i >= 4 && (a[i-4] == 'w' || a[i-4] == 'W') &&
				 (a[i-3] == 'r' || a[i-3] == 'R') &&
				 (a[i-2] == 'i' || a[i-2] == 'I') &&
				 (a[i-1] == 't' || a[i-1] == 'T') &&
				 (a[i] == 'e' || a[i] == 'E'))
	    {
		matchlen = 5;
		mask |= WRITE;

	    } else if (i >= 6 && (a[i-6] == 'e' || a[i-6] == 'E') &&
		                 (a[i-5] == 'x' || a[i-5] == 'X') &&
				 (a[i-4] == 'e' || a[i-4] == 'E') &&
				 (a[i-3] == 'c' || a[i-3] == 'C') &&
				 (a[i-2] == 'u' || a[i-2] == 'U') &&
				 (a[i-1] == 't' || a[i-1] == 'T') &&
				 (a[i] == 'e' || a[i] == 'E'))
	    {
		matchlen = 7;
		mask |= EXECUTE;

	    } else if (i >= 5 && (a[i-5] == 'd' || a[i-5] == 'D') &&
				 (a[i-4] == 'e' || a[i-4] == 'E') &&
				 (a[i-3] == 'l' || a[i-3] == 'L') &&
				 (a[i-2] == 'e' || a[i-2] == 'E') &&
				 (a[i-1] == 't' || a[i-1] == 'T') &&
				 (a[i] == 'e' || a[i] == 'E'))
	    {
		matchlen = 6;
		mask |= DELETE;

	    } else {
		// parse error
		throw new IllegalArgumentException(
			"invalid permission: " + actions);
	    }

	    // make sure we didn't just match the tail of a word
	    // like "ackbarfaccept".  Also, skip to the comma.
	    boolean seencomma = false;
	    while (i >= matchlen && !seencomma) {
		switch(a[i-matchlen]) {
		case ',':
		    seencomma = true;
		    /*FALLTHROUGH*/
		case ' ': case '\r': case '\n':
		case '\f': case '\t':
		    break;
		default:
		    throw new IllegalArgumentException(
			    "invalid permission: " + actions);
		}
		i--;
	    }

	    // point i at the location of the comma minus one (or -1).
	    i -= matchlen;
	}

	return mask;
!!!6854427.java!!!	getMask() : int
	return mask;
!!!6854555.java!!!	getActions(in mask : int) : String
	StringBuilder sb = new StringBuilder();
        boolean comma = false;

	if ((mask & READ) == READ) {
	    comma = true;
	    sb.append("read");
	}

	if ((mask & WRITE) == WRITE) {
	    if (comma) sb.append(',');
    	    else comma = true;
	    sb.append("write");
	}

	if ((mask & EXECUTE) == EXECUTE) {
	    if (comma) sb.append(',');
    	    else comma = true;
	    sb.append("execute");
	}

	if ((mask & DELETE) == DELETE) {
	    if (comma) sb.append(',');
    	    else comma = true;
	    sb.append("delete");
	}

	return sb.toString();
!!!6854683.java!!!	getActions() : String
	if (actions == null)
	    actions = getActions(this.mask);

	return actions;
!!!6854811.java!!!	newPermissionCollection() : PermissionCollection
	return new FilePermissionCollection();
!!!6854939.java!!!	writeObject(inout s : ObjectOutputStream) : void
	// Write out the actions. The superclass takes care of the name
	// call getActions to make sure actions field is initialized
	if (actions == null)
	    getActions();
	s.defaultWriteObject();
!!!6855067.java!!!	readObject(inout s : ObjectInputStream) : void
	// Read in the actions, then restore everything else by calling init.
	s.defaultReadObject();
	init(getMask(actions));
