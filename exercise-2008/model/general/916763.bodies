class StrictMath
!!!7047195.java!!!	toRadians(in angdeg : double) : double
	return angdeg / 180.0 * PI;
!!!7047323.java!!!	toDegrees(in angrad : double) : double
	return angrad * 180.0 / PI;
!!!7048475.java!!!	rint(in a : double) : double
	/*
	 * If the absolute value of a is not less than 2^52, it
	 * is either a finite integer (the double format does not have
	 * enough significand bits for a number that large to have any
	 * fractional portion), an infinity, or a NaN.  In any of
	 * these cases, rint of the argument is the argument.
	 *
	 * Otherwise, the sum (twoToThe52 + a ) will properly round
	 * away any fractional portion of a since ulp(twoToThe52) ==
	 * 1.0; subtracting out twoToThe52 from this sum will then be
	 * exact and leave the rounded integer portion of a.
	 *
	 * This method does *not* need to be declared strictfp to get
	 * fully reproducible results.  Whether or not a method is
	 * declared strictfp can only make a difference in the
	 * returned result if some operation would overflow or
	 * underflow with strictfp semantics.  The operation
	 * (twoToThe52 + a ) cannot overflow since large values of a
	 * are screened out; the add cannot underflow since twoToThe52
	 * is too large.  The subtraction ((twoToThe52 + a ) -
	 * twoToThe52) will be exact as discussed above and thus
	 * cannot overflow or meaningfully underflow.  Finally, the
	 * last multiply in the return statement is by plus or minus
	 * 1.0, which is exact too.
	 */
	double twoToThe52 = (double)(1L << 52); // 2^52
	double sign = FpUtils.rawCopySign(1.0, a); // preserve sign info
	a = Math.abs(a);
	
	if (a < twoToThe52) { // E_min <= ilogb(a) <= 51
	    a = ((twoToThe52 + a ) - twoToThe52);
	} 
	
	return sign * a; // restore original sign
!!!7048859.java!!!	round(in a : float) : int
	return (int)floor(a + 0.5f);
!!!7048987.java!!!	round(in a : double) : long
	return (long)floor(a + 0.5d);
!!!7049115.java!!!	initRNG() : void
        if (randomNumberGenerator == null) 
            randomNumberGenerator = new Random();
!!!7049243.java!!!	random() : double
        if (randomNumberGenerator == null) initRNG();
        return randomNumberGenerator.nextDouble();
!!!7049371.java!!!	abs(in a : int) : int
	return (a < 0) ? -a : a;
!!!7049499.java!!!	abs(in a : long) : long
	return (a < 0) ? -a : a;
!!!7049627.java!!!	abs(in a : float) : float
        return (a <= 0.0F) ? 0.0F - a : a;
!!!7049755.java!!!	abs(in a : double) : double
        return (a <= 0.0D) ? 0.0D - a : a;
!!!7049883.java!!!	max(in a : int, in b : int) : int
	return (a >= b) ? a : b;
!!!7050011.java!!!	max(in a : long, in b : long) : long
	return (a >= b) ? a : b;
!!!7050139.java!!!	max(in a : float, in b : float) : float
        if (a != a) return a;	// a is NaN
	if ((a == 0.0f) && (b == 0.0f)
	    && (Float.floatToIntBits(a) == negativeZeroFloatBits)) {
	    return b;
	}
	return (a >= b) ? a : b;
!!!7050267.java!!!	max(in a : double, in b : double) : double
        if (a != a) return a;	// a is NaN
	if ((a == 0.0d) && (b == 0.0d)
	    && (Double.doubleToLongBits(a) == negativeZeroDoubleBits)) {
	    return b;
	}
	return (a >= b) ? a : b;
!!!7050395.java!!!	min(in a : int, in b : int) : int
	return (a <= b) ? a : b;
!!!7050523.java!!!	min(in a : long, in b : long) : long
	return (a <= b) ? a : b;
!!!7050651.java!!!	min(in a : float, in b : float) : float
        if (a != a) return a;	// a is NaN
	if ((a == 0.0f) && (b == 0.0f)
	    && (Float.floatToIntBits(b) == negativeZeroFloatBits)) {
	    return b;
	}
	return (a <= b) ? a : b;
!!!7050779.java!!!	min(in a : double, in b : double) : double
        if (a != a) return a;	// a is NaN
	if ((a == 0.0d) && (b == 0.0d)
	    && (Double.doubleToLongBits(b) == negativeZeroDoubleBits)) {
	    return b;
	}
	return (a <= b) ? a : b;
!!!7050907.java!!!	ulp(in d : double) : double
	return sun.misc.FpUtils.ulp(d);
!!!7051035.java!!!	ulp(in f : float) : float
	return sun.misc.FpUtils.ulp(f);
!!!7051163.java!!!	signum(in d : double) : double
	return sun.misc.FpUtils.signum(d);
!!!7051291.java!!!	signum(in f : float) : float
	return sun.misc.FpUtils.signum(f);
