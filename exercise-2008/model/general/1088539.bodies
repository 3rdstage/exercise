class MidiSystem
!!!8698267.java!!!	getMidiDeviceInfo() : Info
	List allInfos = new ArrayList();
	List providers = getMidiDeviceProviders();

	for(int i = 0; i < providers.size(); i++) {
	    MidiDeviceProvider provider = (MidiDeviceProvider) providers.get(i);
	    MidiDevice.Info[] tmpinfo = provider.getDeviceInfo();
	    for (int j = 0; j < tmpinfo.length; j++) {
		allInfos.add( tmpinfo[j] );
	    }
	}
	MidiDevice.Info[] infosArray = (MidiDevice.Info[]) allInfos.toArray(new MidiDevice.Info[0]);
	return infosArray;
!!!8698395.java!!!	getMidiDevice(inout info : Info) : MidiDevice
	List providers = getMidiDeviceProviders();

	for(int i = 0; i < providers.size(); i++) {
	    MidiDeviceProvider provider = (MidiDeviceProvider) providers.get(i);
	    if (provider.isDeviceSupported(info)) {
		MidiDevice device = provider.getDevice(info);
		return device;
	    }
	}
	throw new IllegalArgumentException("Requested device not installed: " + info);
!!!8698523.java!!!	getReceiver() : Receiver
	// may throw MidiUnavailableException
	MidiDevice device = getDefaultDeviceWrapper(Receiver.class);
	Receiver receiver;
	if (device instanceof ReferenceCountingDevice) {
	    receiver = ((ReferenceCountingDevice) device).getReceiverReferenceCounting();
	} else {
	    receiver = device.getReceiver();
	}
	return receiver;
!!!8698651.java!!!	getTransmitter() : Transmitter
	// may throw MidiUnavailableException
	MidiDevice device = getDefaultDeviceWrapper(Transmitter.class);
	Transmitter transmitter;
	if (device instanceof ReferenceCountingDevice) {
	    transmitter = ((ReferenceCountingDevice) device).getTransmitterReferenceCounting();
	} else {
	    transmitter = device.getTransmitter();
	}
	return transmitter;
!!!8698779.java!!!	getSynthesizer() : Synthesizer
	// may throw MidiUnavailableException
	return (Synthesizer) getDefaultDeviceWrapper(Synthesizer.class);
!!!8698907.java!!!	getSequencer() : Sequencer
	return getSequencer(true);
!!!8699035.java!!!	getSequencer(inout connected : boolean) : Sequencer
	Sequencer seq = (Sequencer) getDefaultDeviceWrapper(Sequencer.class);

	if (connected) {
	    // IMPORTANT: this code needs to be synch'ed with 
	    //            all AutoConnectSequencer instances,
	    //            (e.g. RealTimeSequencer) because the 
	    //            same algorithm for synth retrieval
	    //            needs to be used!

	    Receiver rec = null;
	    MidiUnavailableException mue = null;

	    // first try to connect to the default synthesizer
	    try {
		Synthesizer synth = getSynthesizer();
		if (synth instanceof ReferenceCountingDevice) {
		    rec = ((ReferenceCountingDevice) synth).getReceiverReferenceCounting();
		    // only use MixerSynth if it could successfully load a soundbank
		    if (synth.getClass().toString().contains("com.sun.media.sound.MixerSynth")
			&& (synth.getDefaultSoundbank() == null)) {
			// don't use this receiver if no soundbank available
			rec = null;
			synth.close();
		    }
		} else {
		    synth.open();
		    try {
			rec = synth.getReceiver();
		    } finally {
			// make sure that the synth is properly closed
			if (rec == null) {
			    synth.close();
			}
		    }
		}
	    } catch (MidiUnavailableException e) {
		// something went wrong with synth
		if (e instanceof MidiUnavailableException) {
		    mue = (MidiUnavailableException) e;
		}
	    }
	    if (rec == null) {
		// then try to connect to the default Receiver
		try {
		    rec = MidiSystem.getReceiver();
		} catch (Exception e) {
		    // something went wrong. Nothing to do then!
		    if (e instanceof MidiUnavailableException) {
			mue = (MidiUnavailableException) e;
		    }
		}
	    }
	    if (rec != null) {
		seq.getTransmitter().setReceiver(rec);
		if (seq instanceof AutoConnectSequencer) {
		    ((AutoConnectSequencer) seq).setAutoConnect(rec);
		}
	    } else {
		if (mue != null) {
		    throw mue;
		}
		throw new MidiUnavailableException("no receiver available");
	    }
	}
	return seq;
!!!8699163.java!!!	getSoundbank(inout stream : InputStream) : Soundbank

	SoundbankReader sp = null;
	Soundbank s = null;

	List providers = getSoundbankReaders();

	for(int i = 0; i < providers.size(); i++) {
	    sp = (SoundbankReader)providers.get(i);
	    s = sp.getSoundbank(stream);

	    if( s!= null) {
		return s;
	    }
	}
	throw new InvalidMidiDataException("cannot get soundbank from stream");

!!!8699291.java!!!	getSoundbank(inout url : URL) : Soundbank

	SoundbankReader sp = null;
	Soundbank s = null;

	List providers = getSoundbankReaders();

	for(int i = 0; i < providers.size(); i++) {
	    sp = (SoundbankReader)providers.get(i);
	    s = sp.getSoundbank(url);

	    if( s!= null) {
		return s;
	    }
	}
	throw new InvalidMidiDataException("cannot get soundbank from stream");

!!!8699419.java!!!	getSoundbank(inout file : File) : Soundbank

	SoundbankReader sp = null;
	Soundbank s = null;

	List providers = getSoundbankReaders();

	for(int i = 0; i < providers.size(); i++) {
	    sp = (SoundbankReader)providers.get(i);
	    s = sp.getSoundbank(file);

	    if( s!= null) {
		return s;
	    }
	}
	throw new InvalidMidiDataException("cannot get soundbank from stream");
!!!8699547.java!!!	getMidiFileFormat(inout stream : InputStream) : MidiFileFormat

	List providers = getMidiFileReaders();
	MidiFileFormat format = null;

	for(int i = 0; i < providers.size(); i++) {
	    MidiFileReader reader = (MidiFileReader) providers.get(i);
	    try {
		format = reader.getMidiFileFormat( stream ); // throws IOException
		break;
	    } catch (InvalidMidiDataException e) {
		continue;
	    }
	}

	if( format==null ) {
	    throw new InvalidMidiDataException("input stream is not a supported file type");
	} else {
	    return format;
	}
!!!8699675.java!!!	getMidiFileFormat(inout url : URL) : MidiFileFormat

	List providers = getMidiFileReaders();
	MidiFileFormat format = null;

	for(int i = 0; i < providers.size(); i++) {
	    MidiFileReader reader = (MidiFileReader) providers.get(i);
	    try {
		format = reader.getMidiFileFormat( url ); // throws IOException
		break;
	    } catch (InvalidMidiDataException e) {
		continue;
	    }
	}

	if( format==null ) {
	    throw new InvalidMidiDataException("url is not a supported file type");
	} else {
	    return format;
	}
!!!8699803.java!!!	getMidiFileFormat(inout file : File) : MidiFileFormat

	List providers = getMidiFileReaders();
	MidiFileFormat format = null;

	for(int i = 0; i < providers.size(); i++) {
	    MidiFileReader reader = (MidiFileReader) providers.get(i);
	    try {
		format = reader.getMidiFileFormat( file ); // throws IOException
		break;
	    } catch (InvalidMidiDataException e) {
		continue;
	    }
	}

	if( format==null ) {
	    throw new InvalidMidiDataException("file is not a supported file type");
	} else {
	    return format;
	}
!!!8699931.java!!!	getSequence(inout stream : InputStream) : Sequence

	List providers = getMidiFileReaders();
	Sequence sequence = null;

	for(int i = 0; i < providers.size(); i++) {
	    MidiFileReader reader = (MidiFileReader) providers.get(i);
	    try {
		sequence = reader.getSequence( stream ); // throws IOException
		break;
	    } catch (InvalidMidiDataException e) {
		continue;
	    }
	}

	if( sequence==null ) {
	    throw new InvalidMidiDataException("could not get sequence from input stream");
	} else {
	    return sequence;
	}
!!!8700059.java!!!	getSequence(inout url : URL) : Sequence

	List providers = getMidiFileReaders();
	Sequence sequence = null;

	for(int i = 0; i < providers.size(); i++) {
	    MidiFileReader reader = (MidiFileReader) providers.get(i);
	    try {
		sequence = reader.getSequence( url ); // throws IOException
		break;
	    } catch (InvalidMidiDataException e) {
		continue;
	    }
	}

	if( sequence==null ) {
	    throw new InvalidMidiDataException("could not get sequence from URL");
	} else {
	    return sequence;
	}
!!!8700187.java!!!	getSequence(inout file : File) : Sequence

	List providers = getMidiFileReaders();
	Sequence sequence = null;

	for(int i = 0; i < providers.size(); i++) {
	    MidiFileReader reader = (MidiFileReader) providers.get(i);
	    try {
		sequence = reader.getSequence( file ); // throws IOException
		break;
	    } catch (InvalidMidiDataException e) {
		continue;
	    }
	}

	if( sequence==null ) {
	    throw new InvalidMidiDataException("could not get sequence from file");
	} else {
	    return sequence;
	}
!!!8700315.java!!!	getMidiFileTypes() : int

	List providers = getMidiFileWriters();
	Set allTypes = new HashSet();

	// gather from all the providers

	for (int i = 0; i < providers.size(); i++ ) {
	    MidiFileWriter writer = (MidiFileWriter) providers.get(i);
	    int[] types = writer.getMidiFileTypes();
	    for (int j = 0; j < types.length; j++ ) {
		allTypes.add(new Integer(types[j]));
	    }
	}
	int resultTypes[] = new int[allTypes.size()];
	int index = 0;
	Iterator iterator = allTypes.iterator();
	while (iterator.hasNext()) {
	    Integer integer = (Integer) iterator.next();
	    resultTypes[index++] = integer.intValue();
	}
	return resultTypes;
!!!8700443.java!!!	isFileTypeSupported(in fileType : int) : boolean

	List providers = getMidiFileWriters();

	for (int i = 0; i < providers.size(); i++ ) {
	    MidiFileWriter writer = (MidiFileWriter) providers.get(i);
	    if( writer.isFileTypeSupported(fileType)) {
		return true;
	    }
	}
	return false;
!!!8700571.java!!!	getMidiFileTypes(inout sequence : Sequence) : int

	List providers = getMidiFileWriters();
	Set allTypes = new HashSet();

	// gather from all the providers

	for (int i = 0; i < providers.size(); i++ ) {
	    MidiFileWriter writer = (MidiFileWriter) providers.get(i);
	    int[] types = writer.getMidiFileTypes(sequence);
	    for (int j = 0; j < types.length; j++ ) {
		allTypes.add(new Integer(types[j]));
	    }
	}
	int resultTypes[] = new int[allTypes.size()];
	int index = 0;
	Iterator iterator = allTypes.iterator();
	while (iterator.hasNext()) {
	    Integer integer = (Integer) iterator.next();
	    resultTypes[index++] = integer.intValue();
	}
	return resultTypes;
!!!8700699.java!!!	isFileTypeSupported(in fileType : int, inout sequence : Sequence) : boolean

	List providers = getMidiFileWriters();

	for (int i = 0; i < providers.size(); i++ ) {
	    MidiFileWriter writer = (MidiFileWriter) providers.get(i);
	    if( writer.isFileTypeSupported(fileType,sequence)) {
		return true;
	    }
	}
	return false;
!!!8700827.java!!!	write(inout in : Sequence, in fileType : int, inout out : OutputStream) : int

	List providers = getMidiFileWriters();
	//$$fb 2002-04-17: Fix for 4635287: Standard MidiFileWriter cannot write empty Sequences
	int bytesWritten = -2;

	for (int i = 0; i < providers.size(); i++ ) {
	    MidiFileWriter writer = (MidiFileWriter) providers.get(i);
	    if( writer.isFileTypeSupported( fileType, in ) ) {

		bytesWritten = writer.write(in, fileType, out);
		break;
	    }
	}
	if (bytesWritten == -2) {
	    throw new IllegalArgumentException("MIDI file type is not supported");
	}
	return bytesWritten;
!!!8700955.java!!!	write(inout in : Sequence, in type : int, inout out : File) : int

	List providers = getMidiFileWriters();
	//$$fb 2002-04-17: Fix for 4635287: Standard MidiFileWriter cannot write empty Sequences
	int bytesWritten = -2;

	for (int i = 0; i < providers.size(); i++ ) {
	    MidiFileWriter writer = (MidiFileWriter) providers.get(i);
	    if( writer.isFileTypeSupported( type, in ) ) {

		bytesWritten = writer.write(in, type, out);
		break;
	    }
	}
	if (bytesWritten == -2) {
	    throw new IllegalArgumentException("MIDI file type is not supported");
	}
	return bytesWritten;
!!!8701083.java!!!	getMidiDeviceProviders() : List
	return getProviders(MidiDeviceProvider.class);
!!!8701211.java!!!	getSoundbankReaders() : List
	return getProviders(SoundbankReader.class);
!!!8701339.java!!!	getMidiFileWriters() : List
	return getProviders(MidiFileWriter.class);
!!!8701467.java!!!	getMidiFileReaders() : List
	return getProviders(MidiFileReader.class);
!!!8701595.java!!!	getDefaultDeviceWrapper(inout deviceClass : Class) : MidiDevice
	try {
	    return getDefaultDevice(deviceClass);
	} catch (IllegalArgumentException iae) {
	    MidiUnavailableException mae = new MidiUnavailableException();
	    mae.initCause(iae);
	    throw mae;
	}
!!!8701723.java!!!	getDefaultDevice(inout deviceClass : Class) : MidiDevice
	List providers = getMidiDeviceProviders();
	String providerClassName = JDK13Services.getDefaultProviderClassName(deviceClass);
	String instanceName = JDK13Services.getDefaultInstanceName(deviceClass);
	MidiDevice device;

	if (providerClassName != null) {
	    MidiDeviceProvider defaultProvider = getNamedProvider(providerClassName, providers);
	    if (defaultProvider != null) {
		if (instanceName != null) {
		    device = getNamedDevice(instanceName, defaultProvider, deviceClass);
		    if (device != null) {
			return device;
		    }
		}
		device = getFirstDevice(defaultProvider, deviceClass);
		if (device != null) {
		    return device;
		}
	    }
	}

	/* Provider class not specified or cannot be found, or
	   provider class specified, and no appropriate device available or
	   provider class and instance specified and instance cannot be found or is not appropriate */
	if (instanceName != null) {
	    device = getNamedDevice(instanceName, providers, deviceClass);
	    if (device != null) {
		return device;
	    }
	}

	/* No default are specified, or if something is specified, everything
	   failed. */
	device = getFirstDevice(providers, deviceClass);
	if (device != null) {
	    return device;
	}
	throw new IllegalArgumentException("Requested device not installed");
!!!8701851.java!!!	getNamedProvider(in providerClassName : String, inout providers : List) : MidiDeviceProvider
	for(int i = 0; i < providers.size(); i++) {
	    MidiDeviceProvider provider = (MidiDeviceProvider) providers.get(i);
	    if (provider.getClass().getName().equals(providerClassName)) {
		return provider;
	    }
	}
	return null;
!!!8701979.java!!!	getNamedDevice(in deviceName : String, inout provider : MidiDeviceProvider, inout deviceClass : Class) : MidiDevice
	MidiDevice device;
	// try to get MIDI port
	device = getNamedDevice(deviceName, provider, deviceClass,
				 false, false);
	if (device != null) {
	    return device;
	}

	if (deviceClass == Receiver.class) {
	    // try to get Synthesizer
	    device = getNamedDevice(deviceName, provider, deviceClass,
				     true, false);
	    if (device != null) {
		return device;
	    }
	}

	// try to get Sequncer or Synthesizer
	return getNamedDevice(deviceName, provider, deviceClass,
			       true, true);
!!!8702107.java!!!	getNamedDevice(in deviceName : String, inout provider : MidiDeviceProvider, inout deviceClass : Class, inout allowSynthesizer : boolean, inout allowSequencer : boolean) : MidiDevice
	MidiDevice.Info[] infos = provider.getDeviceInfo();
	for (int i = 0; i < infos.length; i++) {
	    if (infos[i].getName().equals(deviceName)) {
		MidiDevice device = provider.getDevice(infos[i]);
		if (isAppropriateDevice(device, deviceClass,
					allowSynthesizer, allowSequencer)) {
		    return device;
		}
	    }
	}
	return null;
!!!8702235.java!!!	getNamedDevice(in deviceName : String, inout providers : List, inout deviceClass : Class) : MidiDevice
	MidiDevice device;
	// try to get MIDI port
	device = getNamedDevice(deviceName, providers, deviceClass,
				 false, false);
	if (device != null) {
	    return device;
	}

	if (deviceClass == Receiver.class) {
	    // try to get Synthesizer
	    device = getNamedDevice(deviceName, providers, deviceClass,
				     true, false);
	    if (device != null) {
		return device;
	    }
	}

	// try to get Sequncer or Synthesizer
	return getNamedDevice(deviceName, providers, deviceClass,
			       true, true);
!!!8702363.java!!!	getNamedDevice(in deviceName : String, inout providers : List, inout deviceClass : Class, inout allowSynthesizer : boolean, inout allowSequencer : boolean) : MidiDevice
	for(int i = 0; i < providers.size(); i++) {
	    MidiDeviceProvider provider = (MidiDeviceProvider) providers.get(i);
	    MidiDevice device = getNamedDevice(deviceName, provider,
					       deviceClass,
					       allowSynthesizer,
					       allowSequencer);
	    if (device != null) {
		return device;
	    }
	}
	return null;
!!!8702491.java!!!	getFirstDevice(inout provider : MidiDeviceProvider, inout deviceClass : Class) : MidiDevice
	MidiDevice device;
	// try to get MIDI port
	device = getFirstDevice(provider, deviceClass,
				false, false);
	if (device != null) {
	    return device;
	}

	if (deviceClass == Receiver.class) {
	    // try to get Synthesizer
	    device = getFirstDevice(provider, deviceClass,
				    true, false);
	    if (device != null) {
		return device;
	    }
	}

	// try to get Sequncer or Synthesizer
	return getFirstDevice(provider, deviceClass,
			      true, true);
!!!8702619.java!!!	getFirstDevice(inout provider : MidiDeviceProvider, inout deviceClass : Class, inout allowSynthesizer : boolean, inout allowSequencer : boolean) : MidiDevice
	MidiDevice.Info[] infos = provider.getDeviceInfo();
	for (int j = 0; j < infos.length; j++) {
	    MidiDevice device = provider.getDevice(infos[j]);
	    if (isAppropriateDevice(device, deviceClass,
				    allowSynthesizer, allowSequencer)) {
		return device;
	    }
	}
	return null;
!!!8702747.java!!!	getFirstDevice(inout providers : List, inout deviceClass : Class) : MidiDevice
	MidiDevice device;
	// try to get MIDI port
	device = getFirstDevice(providers, deviceClass,
				false, false);
	if (device != null) {
	    return device;
	}

	if (deviceClass == Receiver.class) {
	    // try to get Synthesizer
	    device = getFirstDevice(providers, deviceClass,
				    true, false);
	    if (device != null) {
		return device;
	    }
	}

	// try to get Sequncer or Synthesizer
	return getFirstDevice(providers, deviceClass,
			      true, true);
!!!8702875.java!!!	getFirstDevice(inout providers : List, inout deviceClass : Class, inout allowSynthesizer : boolean, inout allowSequencer : boolean) : MidiDevice
	for(int i = 0; i < providers.size(); i++) {
	    MidiDeviceProvider provider = (MidiDeviceProvider) providers.get(i);
	    MidiDevice device = getFirstDevice(provider, deviceClass,
					       allowSynthesizer,
					       allowSequencer);
	    if (device != null) {
		return device;
	    }
	}
	return null;
!!!8703003.java!!!	isAppropriateDevice(inout device : MidiDevice, inout deviceClass : Class, inout allowSynthesizer : boolean, inout allowSequencer : boolean) : boolean
	if (deviceClass.isInstance(device)) {
	    // This clause is for deviceClass being either Synthesizer
	    // or Sequencer.
	    return true;
	} else {
	    // Now the case that deviceClass is Transmitter or
	    // Receiver. If neither allowSynthesizer nor allowSequencer is
	    // true, we require device instances to be
	    // neither Synthesizer nor Sequencer, since we only want
	    // devices representing MIDI ports.
	    // Otherwise, the respective type is accepted, too
	    if ( (! (device instanceof Sequencer) &&
		  ! (device instanceof Synthesizer) ) ||
		 ((device instanceof Sequencer) && allowSequencer) ||
		 ((device instanceof Synthesizer) && allowSynthesizer)) {
		// And of cource, the device has to be able to provide
		// Receivers or Transmitters.
		if ((deviceClass == Receiver.class &&
		     device.getMaxReceivers() != 0) ||
		    (deviceClass == Transmitter.class &&
		     device.getMaxTransmitters() != 0)) {
		    return true;
		}
	    }
	}
	return false;
!!!8703131.java!!!	getProviders(inout providerClass : Class) : List
	return JDK13Services.getProviders(providerClass);
