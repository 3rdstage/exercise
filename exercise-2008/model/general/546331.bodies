class SnmpSubRequestHandler
!!!3464987.java!!!	SnmpSubRequestHandler(inout engine : SnmpEngine, inout incRequest : SnmpIncomingRequest, inout agent : SnmpMibAgent, inout req : SnmpPdu)
        this(agent, req);
	init(engine, incRequest);
!!!3465115.java!!!	SnmpSubRequestHandler(inout engine : SnmpEngine, inout incRequest : SnmpIncomingRequest, inout agent : SnmpMibAgent, inout req : SnmpPdu, inout nouse : boolean)
        this(agent, req, nouse);
	init(engine, incRequest);
!!!3465243.java!!!	SnmpSubRequestHandler(inout agent : SnmpMibAgent, inout req : SnmpPdu)
        
        dbgTag = makeDebugTag();
        if (isTraceOn()) {
            trace("constructor", "creating instance for request " + String.valueOf(req.requestId));
        }
	
        version= req.version;
        type= req.type;
        this.agent= agent;
	
	// We get a ref on the pdu in order to pass it to SnmpMibRequest.
	reqPdu = req;
	
        //Pre-allocate room for storing varbindlist and translation table.
        //
        int length= req.varBindList.length;
        translation= new int[length];
        varBind= new NonSyncVector(length);
!!!3465371.java!!!	SnmpSubRequestHandler(inout agent : SnmpMibAgent, inout req : SnmpPdu, inout nouse : boolean)
        this(agent,req); 
    
        // The translation table is easy in this case ...
        //
        int max= translation.length;
        SnmpVarBind[] list= req.varBindList;
        for(int i=0; i < max; i++) {
            translation[i]= i;
            ((NonSyncVector)varBind).addNonSyncElement(list[i]);
        }
!!!3465499.java!!!	createMibRequest(inout vblist : Vector, in protocolVersion : int, inout userData : Object) : SnmpMibRequest

	// This is an optimization: 
	//    The SnmpMibRequest created in the check() phase is
	//    reused in the set() phase.
	//
	if (type == pduSetRequestPdu && mibRequest != null)
	    return mibRequest;
	
	//This is a request comming from an SnmpV3AdaptorServer.
	//Full power.
	SnmpMibRequest result = null;
	if(incRequest != null) {
	    result = SnmpMibAgent.newMibRequest(engine,
						reqPdu,
						vblist,
						protocolVersion,
						userData,
						incRequest.getPrincipal(),
						incRequest.getSecurityLevel(),
						incRequest.getSecurityModel(),
						incRequest.getContextName(),
						incRequest.getAccessContext());
	} else {
	    result = SnmpMibAgent.newMibRequest(reqPdu,
						vblist,
						protocolVersion,
						userData);
	}
	// If we're doing the check() phase, we store the SnmpMibRequest
	// so that we can reuse it in the set() phase.
	//
	if (type == pduWalkRequest)
	    mibRequest = result;

	return result;
!!!3465627.java!!!	setUserData(inout userData : Object) : void
	data = userData;
!!!3465755.java!!!	run() : void
    
        try {
	    final ThreadContext oldContext = 
		ThreadContext.push("SnmpUserData",data);
	    try {
		switch(type) {
		case pduGetRequestPdu:
		    // Invoke a get operation
		    //
		    if (isTraceOn()) {
			trace("run", "[" + Thread.currentThread() + 
			      "]:get operation on " + agent.getMibName());
		    }
		
		    agent.get(createMibRequest(varBind,version,data));
		    break;
	
		case pduGetNextRequestPdu:
		    if (isTraceOn()) {
			trace("run", "[" + Thread.currentThread() + 
			      "]:getNext operation on " + agent.getMibName());
		    }
		    //#ifdef DEBUG
		    agent.getNext(createMibRequest(varBind,version,data));
		    break;
		    
		case pduSetRequestPdu:
		    if (isTraceOn()) {
			trace("run", "[" + Thread.currentThread() +
			      "]:set operation on " + agent.getMibName());
		    }
		    agent.set(createMibRequest(varBind,version,data));
		    break;
		    
		case pduWalkRequest:
		    if (isTraceOn()) {
			trace("run", "[" + Thread.currentThread() + 
			      "]:check operation on " + agent.getMibName());
		    }
		    agent.check(createMibRequest(varBind,version,data));
		    break;
		    
		default:
		    if (isDebugOn()) {
			debug("run", "[" + Thread.currentThread() + 
			      "]:unknown operation (" +  type + ") on " + 
			      agent.getMibName());
		    }
		    errorStatus= snmpRspGenErr;
		    errorIndex= 1;
		    break;
		    
		}// end of switch
		
	    } finally {
		ThreadContext.restore(oldContext);
	    }
	} catch(SnmpStatusException x) {
	    errorStatus = x.getStatus() ;
	    errorIndex=  x.getErrorIndex();
	    if (isDebugOn()) {
		debug("run", "[" + Thread.currentThread() + 
		      "]:an Snmp error occured during the operation");
		debug("run", x);
	    }
	}
	catch(Exception x) {
	    errorStatus = SnmpDefinitions.snmpRspGenErr ;
	    if (isTraceOn()) {
		trace("run", "[" + Thread.currentThread() + 
		      "]:a generic error occured during the operation");
	    }
	    if (isDebugOn()) {
		debug("run", "Error is: " + x);
		debug("run", x);
	    }
	}
	if (isTraceOn()) {
	    trace("run", "[" + Thread.currentThread() +
		  "]:operation completed");
	}
!!!3465883.java!!!	mapErrorStatusToV1(in errorStatus : int, in reqPduType : int) : int
	// Map v2 codes onto v1 codes
	// 
        if (errorStatus == SnmpDefinitions.snmpRspNoError)
            return SnmpDefinitions.snmpRspNoError;

        if (errorStatus == SnmpDefinitions.snmpRspGenErr)
            return SnmpDefinitions.snmpRspGenErr;

        if (errorStatus == SnmpDefinitions.snmpRspNoSuchName)
            return SnmpDefinitions.snmpRspNoSuchName;
	
	if ((errorStatus == SnmpStatusException.noSuchInstance) ||
	    (errorStatus == SnmpStatusException.noSuchObject)   ||
	    (errorStatus == SnmpDefinitions.snmpRspNoAccess)    ||
	    (errorStatus == SnmpDefinitions.snmpRspInconsistentName) ||
	    (errorStatus == SnmpDefinitions.snmpRspAuthorizationError)){
	    
	    return SnmpDefinitions.snmpRspNoSuchName;
	    
	} else if ((errorStatus == 
		    SnmpDefinitions.snmpRspAuthorizationError)         ||
		   (errorStatus == SnmpDefinitions.snmpRspNotWritable)) {
	    
	    if (reqPduType == SnmpDefinitions.pduWalkRequest)
		return SnmpDefinitions.snmpRspReadOnly;
	    else
		return SnmpDefinitions.snmpRspNoSuchName;
	    
	} else if ((errorStatus == SnmpDefinitions.snmpRspNoCreation)) {
	    
		return SnmpDefinitions.snmpRspNoSuchName;

	} else if ((errorStatus == SnmpDefinitions.snmpRspWrongType)      ||
		   (errorStatus == SnmpDefinitions.snmpRspWrongLength)    ||
		   (errorStatus == SnmpDefinitions.snmpRspWrongEncoding)  ||
		   (errorStatus == SnmpDefinitions.snmpRspWrongValue)     ||
		   (errorStatus == SnmpDefinitions.snmpRspWrongLength)    ||
		   (errorStatus == 
		    SnmpDefinitions.snmpRspInconsistentValue)) {
	    
	    if ((reqPduType == SnmpDefinitions.pduSetRequestPdu) || 
		(reqPduType == SnmpDefinitions.pduWalkRequest))
		return SnmpDefinitions.snmpRspBadValue;
	    else
		return SnmpDefinitions.snmpRspNoSuchName;
	    
	} else if ((errorStatus == 
		    SnmpDefinitions.snmpRspResourceUnavailable) ||
		   (errorStatus == 
		    SnmpDefinitions.snmpRspCommitFailed)        ||
		   (errorStatus == SnmpDefinitions.snmpRspUndoFailed)) {
	    
	    return SnmpDefinitions.snmpRspGenErr;
	    
	}

	// At this point we should have a V1 error code
	//
	if (errorStatus == SnmpDefinitions.snmpRspTooBig)
	    return SnmpDefinitions.snmpRspTooBig;

	if( (errorStatus == SnmpDefinitions.snmpRspBadValue) ||
	    (errorStatus == SnmpDefinitions.snmpRspReadOnly)) {
	    if ((reqPduType == SnmpDefinitions.pduSetRequestPdu) || 
		(reqPduType == SnmpDefinitions.pduWalkRequest))
		return errorStatus;
	    else 
		return SnmpDefinitions.snmpRspNoSuchName;
	}

	// We have a snmpRspGenErr, or something which is not defined
	// in RFC1905 => return a snmpRspGenErr
	//
	return SnmpDefinitions.snmpRspGenErr;

!!!3466011.java!!!	mapErrorStatusToV2(in errorStatus : int, in reqPduType : int) : int
	// Map v1 codes onto v2 codes
	// 
        if (errorStatus == SnmpDefinitions.snmpRspNoError)
            return SnmpDefinitions.snmpRspNoError;

        if (errorStatus == SnmpDefinitions.snmpRspGenErr)
            return SnmpDefinitions.snmpRspGenErr;

        if (errorStatus == SnmpDefinitions.snmpRspTooBig)
            return SnmpDefinitions.snmpRspTooBig;

	// For get / getNext / getBulk the only global error
	// (PDU-level) possible is genErr.
	//
	if ((reqPduType != SnmpDefinitions.pduSetRequestPdu) && 
	    (reqPduType != SnmpDefinitions.pduWalkRequest)) {
	    if(errorStatus == SnmpDefinitions.snmpRspAuthorizationError)
		return errorStatus;
	    else
		return SnmpDefinitions.snmpRspGenErr;
	}

	// Map to noSuchName
	//	if ((errorStatus == SnmpDefinitions.snmpRspNoSuchName) ||
	//   (errorStatus == SnmpStatusException.noSuchInstance) ||
	//  (errorStatus == SnmpStatusException.noSuchObject))
	//  return SnmpDefinitions.snmpRspNoSuchName;

	// SnmpStatusException.noSuchInstance and 
	// SnmpStatusException.noSuchObject can't happen...

	if (errorStatus == SnmpDefinitions.snmpRspNoSuchName)
	    return SnmpDefinitions.snmpRspNoAccess;

	// Map to notWritable
 	if (errorStatus == SnmpDefinitions.snmpRspReadOnly)
		return SnmpDefinitions.snmpRspNotWritable;

	// Map to wrongValue
 	if (errorStatus == SnmpDefinitions.snmpRspBadValue)
	    return SnmpDefinitions.snmpRspWrongValue;
	
	// Other valid V2 codes
	if ((errorStatus == SnmpDefinitions.snmpRspNoAccess) ||
	    (errorStatus == SnmpDefinitions.snmpRspInconsistentName) ||
	    (errorStatus == SnmpDefinitions.snmpRspAuthorizationError) ||
	    (errorStatus == SnmpDefinitions.snmpRspNotWritable) ||
	    (errorStatus == SnmpDefinitions.snmpRspNoCreation) ||
	    (errorStatus == SnmpDefinitions.snmpRspWrongType) ||
	    (errorStatus == SnmpDefinitions.snmpRspWrongLength) ||
	    (errorStatus == SnmpDefinitions.snmpRspWrongEncoding) ||
	    (errorStatus == SnmpDefinitions.snmpRspWrongValue) ||
	    (errorStatus == SnmpDefinitions.snmpRspWrongLength) ||
	    (errorStatus == SnmpDefinitions.snmpRspInconsistentValue) ||
	    (errorStatus == SnmpDefinitions.snmpRspResourceUnavailable) ||
	    (errorStatus == SnmpDefinitions.snmpRspCommitFailed) ||
	    (errorStatus == SnmpDefinitions.snmpRspUndoFailed)) 
	    return errorStatus;

	// Ivalid V2 code => genErr
	return SnmpDefinitions.snmpRspGenErr;
!!!3466139.java!!!	mapErrorStatus(in errorStatus : int, in protocolVersion : int, in reqPduType : int) : int
        if (errorStatus == SnmpDefinitions.snmpRspNoError)
            return SnmpDefinitions.snmpRspNoError;
	
        // Too bad, an error occurs ... we need to translate it ...
        //
	if (protocolVersion == SnmpDefinitions.snmpVersionOne)
	    return mapErrorStatusToV1(errorStatus,reqPduType);
        if (protocolVersion == SnmpDefinitions.snmpVersionTwo ||
	    protocolVersion == SnmpDefinitions.snmpVersionThree)
	    return mapErrorStatusToV2(errorStatus,reqPduType);
	
        return SnmpDefinitions.snmpRspGenErr;
!!!3466267.java!!!	getErrorStatus() : int
        if (errorStatus == snmpRspNoError)
            return snmpRspNoError;
	    
        return mapErrorStatus(errorStatus,version,type);
!!!3466395.java!!!	getErrorIndex() : int
        if  (errorStatus == snmpRspNoError)
            return -1;
    
        // An error occurs. We need to be carefull because the index
        // we are getting is a valid SNMP index (so range starts at 1).
        // FIX ME: Shall we double-check the range here ?
        // The response is : YES :
        if ((errorIndex == 0) || (errorIndex == -1))
            errorIndex = 1;
	
        return translation[errorIndex -1];
!!!3466523.java!!!	updateRequest(inout var : SnmpVarBind, in pos : int) : void
        int size= varBind.size();
        translation[size]= pos;
        varBind.addElement(var);
!!!3466651.java!!!	updateResult(inout result : SnmpVarBind) : void
  
	if (result == null) return;
        final int max=varBind.size();
	final int len=result.length;
        for(int i= 0; i< max ; i++) {
	    // bugId 4641694: must check position in order to avoid 
	    //       ArrayIndexOutOfBoundException
	    final int pos=translation[i];
	    if (pos < len) {
		result[pos] = 
		    (SnmpVarBind)((NonSyncVector)varBind).elementAtNonSync(i);
	    } else {
		debug("updateResult","Position `"+pos+"' is out of bound...");
	    }
        }
!!!3466779.java!!!	init(inout engine : SnmpEngine, inout incRequest : SnmpIncomingRequest) : void
	this.incRequest = incRequest;
	this.engine = engine;	
!!!3466907.java!!!	isTraceOn() : boolean
        return Trace.isSelected(Trace.LEVEL_TRACE, Trace.INFO_ADAPTOR_SNMP);
!!!3467035.java!!!	trace(in clz : String, in func : String, in info : String) : void
        Trace.send(Trace.LEVEL_TRACE, Trace.INFO_ADAPTOR_SNMP, clz, func, info);
!!!3467163.java!!!	trace(in func : String, in info : String) : void
        trace(dbgTag, func, info);
!!!3467291.java!!!	isDebugOn() : boolean
        return Trace.isSelected(Trace.LEVEL_DEBUG, Trace.INFO_ADAPTOR_SNMP);
!!!3467419.java!!!	debug(in clz : String, in func : String, in info : String) : void
        Trace.send(Trace.LEVEL_DEBUG, Trace.INFO_ADAPTOR_SNMP, clz, func, info);
!!!3467547.java!!!	debug(in func : String, inout t : Throwable) : void
        Trace.send(Trace.LEVEL_DEBUG, Trace.INFO_ADAPTOR_SNMP, dbgTag, func, t);
!!!3467675.java!!!	debug(in func : String, in info : String) : void
        debug(dbgTag, func, info);
!!!3467803.java!!!	makeDebugTag() : String
        return "SnmpSubRequestHandler";
