class OpenMBeanInfoSupport
!!!8350747.java!!!	OpenMBeanInfoSupport(in className : String, in description : String, inout openAttributes : OpenMBeanAttributeInfo, inout openConstructors : OpenMBeanConstructorInfo, inout openOperations : OpenMBeanOperationInfo, inout notifications : MBeanNotificationInfo)
	
	super(className, 
	      description, 
	      ( openAttributes   == null ?  null : attributesArrayCopyCast(openAttributes) ),     // may throw an ArrayStoreException
	      ( openConstructors == null ?  null : constructorsArrayCopyCast(openConstructors) ), // may throw an ArrayStoreException
	      ( openOperations   == null ?  null : operationsArrayCopyCast(openOperations) ),     // may throw an ArrayStoreException
	      ( notifications == null ?  null : notificationsArrayCopy(notifications) ));
 
!!!8350875.java!!!	attributesArrayCopyCast(inout src : OpenMBeanAttributeInfo) : MBeanAttributeInfo

	MBeanAttributeInfo[] dst = new MBeanAttributeInfo[src.length];
	System.arraycopy(src, 0, dst, 0, src.length); // may throw an ArrayStoreException
	return dst;
!!!8351003.java!!!	constructorsArrayCopyCast(inout src : OpenMBeanConstructorInfo) : MBeanConstructorInfo

	MBeanConstructorInfo[] dst = new MBeanConstructorInfo[src.length];
	System.arraycopy(src, 0, dst, 0, src.length); // may throw an ArrayStoreException
	return dst;
!!!8351131.java!!!	operationsArrayCopyCast(inout src : OpenMBeanOperationInfo) : MBeanOperationInfo

	MBeanOperationInfo[] dst = new MBeanOperationInfo[src.length];
	System.arraycopy(src, 0, dst, 0, src.length); // may throw an ArrayStoreException
	return dst;
!!!8351259.java!!!	notificationsArrayCopy(inout src : MBeanNotificationInfo) : MBeanNotificationInfo

	MBeanNotificationInfo[] dst = new MBeanNotificationInfo[src.length];
	System.arraycopy(src, 0, dst, 0, src.length); 
	return dst;
!!!8351387.java!!!	equals(inout obj : Object) : boolean
 

	// if obj is null, return false
	//
	if (obj == null) {
	    return false;
	}

	// if obj is not a OpenMBeanInfo, return false
	//
	OpenMBeanInfo other;
	try {
	    other = (OpenMBeanInfo) obj;
	} catch (ClassCastException e) {
	    return false;
	}

	// Now, really test for equality between this OpenMBeanInfo implementation and the other:
	//
	
	// their MBean className should be equal
	if ( ! this.getClassName().equals(other.getClassName()) ) {
	    return false;
	}

	// their infos on attributes should be equal (order not significant => equality between sets, not arrays or lists)
	if ( ! new HashSet(Arrays.asList(this.getAttributes())).equals(new HashSet(Arrays.asList(other.getAttributes()))) ) {
	    return false;
	}
       
	// their infos on constructors should be equal (order not significant => equality between sets, not arrays or lists)
	if ( ! new HashSet(Arrays.asList(this.getConstructors())).equals(new HashSet(Arrays.asList(other.getConstructors()))) ) {
	    return false;
	}
       
	// their infos on operations should be equal (order not significant => equality between sets, not arrays or lists)
	if ( ! new HashSet(Arrays.asList(this.getOperations())).equals(new HashSet(Arrays.asList(other.getOperations()))) ) {
	    return false;
	}
       
	// their infos on notifications should be equal (order not significant => equality between sets, not arrays or lists)
	if ( ! new HashSet(Arrays.asList(this.getNotifications())).equals(new HashSet(Arrays.asList(other.getNotifications()))) ) {
	    return false;
	}
       
	// All tests for equality were successfull
	//
	return true;
!!!8351515.java!!!	hashCode() : int

	// Calculate the hash code value if it has not yet been done (ie 1st call to hashCode())
	//
	if (myHashCode == null) {
	    int value = 0;
	    value += this.getClassName().hashCode();
	    value += new HashSet(Arrays.asList(this.getAttributes())).hashCode();
	    value += new HashSet(Arrays.asList(this.getConstructors())).hashCode();
	    value += new HashSet(Arrays.asList(this.getOperations())).hashCode();
	    value += new HashSet(Arrays.asList(this.getNotifications())).hashCode();
	    myHashCode = new Integer(value);
	}
	
	// return always the same hash code for this instance (immutable)
	//
	return myHashCode.intValue();
!!!8351643.java!!!	toString() : String
 

	// Calculate the hash code value if it has not yet been done (ie 1st call to toString())
	//
	if (myToString == null) {
	    myToString = new StringBuffer()
		.append(this.getClass().getName())
		.append("(mbean_class_name=")
		.append(this.getClassName())
		.append(",attributes=")
		.append(Arrays.asList(this.getAttributes()).toString())
		.append(",constructors=")
		.append(Arrays.asList(this.getConstructors()).toString())
		.append(",operations=")
		.append(Arrays.asList(this.getOperations()).toString())
		.append(",notifications=")
		.append(Arrays.asList(this.getNotifications()).toString())
		.append(")")
		.toString();
	}

	// return always the same string representation for this instance (immutable)
	//
	return myToString;
