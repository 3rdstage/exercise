class OpenMBeanOperationInfoSupport
!!!8352923.java!!!	OpenMBeanOperationInfoSupport(in name : String, in description : String, inout signature : OpenMBeanParameterInfo, inout returnOpenType : OpenType, in impact : int)

	super(name, 
	      description,
	      ( signature == null ?  null : arrayCopyCast(signature) ), // may throw an ArrayStoreException
	      ( returnOpenType == null ?  null : returnOpenType.getClassName() ),
	      impact);

	// check parameters that should not be null or empty (unfortunately it is not done in superclass :-( ! )
	//
	if ( (name == null) || (name.trim().equals("")) ) {
	    throw new IllegalArgumentException("Argument name cannot be null or empty.");
	}
	if ( (description == null) || (description.trim().equals("")) ) {
	    throw new IllegalArgumentException("Argument description cannot be null or empty.");
	}
	if (returnOpenType == null) {
	    throw new IllegalArgumentException("Argument returnOpenType cannot be null.");
	}

	// check impact's value is only one of the 3 allowed (UNKNOWN not allowed)
	//
	if ( (impact != super.ACTION) && (impact != super.ACTION_INFO) && (impact != super.INFO) ) {
	    throw new IllegalArgumentException("Argument impact can be only one of ACTION, ACTION_INFO or INFO.");
	}

	this.returnOpenType = returnOpenType;
!!!8353051.java!!!	arrayCopyCast(inout src : OpenMBeanParameterInfo) : MBeanParameterInfo

	MBeanParameterInfo[] dst = new MBeanParameterInfo[src.length];
	System.arraycopy(src, 0, dst, 0, src.length); // may throw an ArrayStoreException
	return dst;
!!!8353179.java!!!	getReturnOpenType() : OpenType
 

	return returnOpenType;
!!!8353307.java!!!	equals(inout obj : Object) : boolean
 

	// if obj is null, return false
	//
	if (obj == null) {
	    return false;
	}

	// if obj is not a OpenMBeanOperationInfo, return false
	//
	OpenMBeanOperationInfo other;
	try {
	    other = (OpenMBeanOperationInfo) obj;
	} catch (ClassCastException e) {
	    return false;
	}

	// Now, really test for equality between this OpenMBeanOperationInfo implementation and the other:
	//
	
	// their Name should be equal
	if ( ! this.getName().equals(other.getName()) ) {
	    return false;
	}

	// their Signatures should be equal
	if ( ! Arrays.equals(this.getSignature(), other.getSignature()) ) {
	    return false;
	}
       
	// their return open types should be equal
	if ( ! this.getReturnOpenType().equals(other.getReturnOpenType()) ) {
	    return false;
	}

	// their impacts should be equal
	if ( this.getImpact() != other.getImpact() ) {
	    return false;
	}

	// All tests for equality were successfull
	//
	return true;
!!!8353435.java!!!	hashCode() : int

	// Calculate the hash code value if it has not yet been done (ie 1st call to hashCode())
	//
	if (myHashCode == null) {
	    int value = 0;
	    value += this.getName().hashCode();
	    value += Arrays.asList(this.getSignature()).hashCode();
	    value += this.getReturnOpenType().hashCode();
	    value += this.getImpact();
	    myHashCode = new Integer(value);
	}
	
	// return always the same hash code for this instance (immutable)
	//
	return myHashCode.intValue();
!!!8353563.java!!!	toString() : String
 

	// Calculate the hash code value if it has not yet been done (ie 1st call to toString())
	//
	if (myToString == null) {
	    myToString = new StringBuffer()
		.append(this.getClass().getName())
		.append("(name=")
		.append(this.getName())
		.append(",signature=")
		.append(Arrays.asList(this.getSignature()).toString())
		.append(",return=")
		.append(this.getReturnOpenType().toString())
		.append(",impact=")
		.append(this.getImpact())
		.append(")")
		.toString();
	}

	// return always the same string representation for this instance (immutable)
	//
	return myToString;
