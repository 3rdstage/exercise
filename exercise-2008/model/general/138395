format 66
"ref" // src::java::lang::ref
  revision 3
  modified_by 27 "3rdstage"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "java/lang/ref"
  java_package "java.lang.ref"
  classview 138523 "ref"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 202779 "ReferenceQueue"
      visibility public 
      nformals 3
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Reference queues, to which registered reference objects are appended by the
garbage collector after the appropriate reachability changes are detected.

@version  1.25, 06/04/07
@author   Mark Reinhold
@since    1.2"
      operation 7112859 "ReferenceQueue"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new reference-object queue."
      end

      class 923675 "Null"
	visibility private 
	nactuals 3
	actual class class_ref 202779 // ReferenceQueue
	  rank 0 explicit_value ""
	actual class class_ref 202779 // ReferenceQueue
	  rank 1 explicit_value ""
	actual class class_ref 202779 // ReferenceQueue
	  rank 2 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1797147 // <generalisation>
	  relation 1797147 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1797147 // <generalisation>
	    b parent class_ref 202779 // ReferenceQueue
	end

	operation 7112987 "enqueue"
	  package explicit_return_type "boolean"
	  nparams 1
	    param inout name "r" type class_ref 392475 // Reference
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 1797275 // NULL (<unidirectional association>)
	relation 1797275 --->
	  a role_name "NULL" init_value "=  new Null()" class_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1797275 // NULL (<unidirectional association>)
	  b parent class_ref 202779 // ReferenceQueue
      end

      classrelation 1797403 // ENQUEUED (<unidirectional association>)
	relation 1797403 --->
	  a role_name "ENQUEUED" init_value "=  new Null()" class_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1797403 // ENQUEUED (<unidirectional association>)
	  b parent class_ref 202779 // ReferenceQueue
      end

      class 923803 "Lock"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      classrelation 1797531 // lock (<unidirectional association>)
	relation 1797531 --->
	  a role_name "lock" init_value "=  new Lock()" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1797531 // lock (<unidirectional association>)
	  b parent class_ref 923803 // Lock
      end

      classrelation 1797659 // head (<unidirectional association>)
	relation 1797659 --->
	  a role_name "head" init_value "=  null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? extends T> ${name}${value};
"
	    classrelation_ref 1797659 // head (<unidirectional association>)
	  b parent class_ref 392475 // Reference
      end

      attribute 2747931 "queueLength"
	private explicit_type "long"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2748059 "queueEmpty"
	volatile private explicit_type "boolean"
	init_value "=  true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7113115 "enqueue"
	package explicit_return_type "boolean"
	nparams 1
	  param inout name "r" type class_ref 392475 // Reference
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7113243 "reallyPoll"
	private return_type class_ref 392475 // Reference
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7113371 "poll"
	public return_type class_ref 392475 // Reference
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Polls this queue to see if a reference object is available.  If one is
available without further delay then it is removed from the queue and
returned.  Otherwise this method immediately returns <tt>null</tt>.

@return  A reference object, if one was immediately available,
         otherwise <code>null</code>"
      end

      operation 7113499 "remove"
	public return_type class_ref 392475 // Reference
	nparams 1
	  param in name "timeout" explicit_type "long"
	nexceptions 2
	  exception class_ref 216859 // IllegalArgumentException
	  exception class_ref 164123 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends T> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the next reference object in this queue, blocking until either
one becomes available or the given timeout period expires.

<p> This method does not offer real-time guarantees: It schedules the
timeout as if by invoking the {@link Object#wait(long)} method.

@param  timeout  If positive, block for up <code>timeout</code>
                 milliseconds while waiting for a reference to be
                 added to this queue.  If zero, block indefinitely.

@return  A reference object, if one was available within the specified
         timeout period, otherwise <code>null</code>

@throws  IllegalArgumentException
         If the value of the timeout argument is negative

@throws  InterruptedException
         If the timeout wait is interrupted"
      end

      operation 7113627 "remove"
	public return_type class_ref 392475 // Reference
	nparams 0
	nexceptions 1
	  exception class_ref 164123 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the next reference object in this queue, blocking until one
becomes available.

@return A reference object, blocking until one becomes available
@throws  InterruptedException  If the wait is interrupted"
      end
    end

    class 392347 "WeakReference"
      visibility public 
      nformals 3
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 3
      actual class class_ref 392475 // Reference
        rank 0 explicit_value "T"
      actual class class_ref 392475 // Reference
        rank 1 explicit_value ""
      actual class class_ref 392475 // Reference
        rank 2 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Weak reference objects, which do not prevent their referents from being
made finalizable, finalized, and then reclaimed.  Weak references are most
often used to implement canonicalizing mappings.

<p> Suppose that the garbage collector determines at a certain point in time
that an object is <a href=\"package-summary.html#reachability\">weakly
reachable</a>.  At that time it will atomically clear all weak references to
that object and all weak references to any other weakly-reachable objects
from which that object is reachable through a chain of strong and soft
references.  At the same time it will declare all of the formerly
weakly-reachable objects to be finalizable.  At the same time or at some
later time it will enqueue those newly-cleared weak references that are
registered with reference queues.

@version  1.18, 12/19/03
@author   Mark Reinhold
@since    1.2"
      classrelation 587931 // <realization>
	relation 587931 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 587931 // <realization>
	  b parent class_ref 392475 // Reference
      end

      operation 2269595 "WeakReference"
	public explicit_return_type ""
	nparams 1
	  param inout name "referent" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new weak reference that refers to the given object.  The new
reference is not registered with any queue.

@param referent object the new weak reference will refer to"
      end

      operation 2269723 "WeakReference"
	public explicit_return_type ""
	nparams 2
	  param inout name "referent" explicit_type "T"
	  param inout name "q" type class_ref 202779 // ReferenceQueue
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<? super T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new weak reference that refers to the given object and is
registered with the given queue.

@param referent object the new weak reference will refer to
@param q the queue with which the reference is to be registered,
         or <tt>null</tt> if registration is not required"
      end
    end

    class 392475 "Reference"
      abstract visibility public 
      nformals 3
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Abstract base class for reference objects.  This class defines the
operations common to all reference objects.	Because reference objects are
implemented in close cooperation with the garbage collector, this class may
not be subclassed directly.

@version  1.41, 04/20/04
@author   Mark Reinhold
@since    1.2"
      attribute 680475 "referent"
	private explicit_type "T"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " A Reference instance is in one of four possible internal states:

	   Active: Subject to special treatment by the garbage collector.  Some
	   time after the collector detects that the reachability of the
	   referent has changed to the appropriate state, it changes the
	   instance's state to either Pending or Inactive, depending upon
	   whether or not the instance was registered with a queue when it was
	   created.  In the former case it also adds the instance to the
	   pending-Reference list.  Newly-created instances are Active.

	   Pending: An element of the pending-Reference list, waiting to be
	   enqueued by the Reference-handler thread.  Unregistered instances
	   are never in this state.

	   Enqueued: An element of the queue with which the instance was
	   registered when it was created.  When an instance is removed from
	   its ReferenceQueue, it is made Inactive.  Unregistered instances are
	   never in this state.

	   Inactive: Nothing more to do.  Once an instance becomes Inactive its
	   state will never change again.

The state is encoded in the queue and next fields as follows:

	   Active: queue = ReferenceQueue with which instance is registered, or
	   ReferenceQueue.NULL if it was not registered with a queue; next =
	   null.

	   Pending: queue = ReferenceQueue with which instance is registered;
	   next = Following instance in queue, or this if at end of list.

	   Enqueued: queue = ReferenceQueue.ENQUEUED; next = Following instance
	   in queue, or this if at end of list.

	   Inactive: queue = ReferenceQueue.NULL; next = this.

With this scheme the collector need only examine the next field in order
to determine whether a Reference instance requires special treatment: If
the next field is null then the instance is active; if it is non-null,
then the collector should treat the instance normally.

To ensure that concurrent collector can discover active Reference 
objects without interfering with application threads that may apply 
the enqueue() method to those objects, collectors should link 
discovered objects through the discovered field.

 Treated specially by GC "
      end

      classrelation 587163 // queue (<unidirectional association>)
	relation 587163 --->
	  a role_name "queue" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super T> ${name}${value};
"
	    classrelation_ref 587163 // queue (<unidirectional association>)
	  b parent class_ref 202779 // ReferenceQueue
      end

      classrelation 587291 // next (<unidirectional association>)
	relation 587291 --->
	  a role_name "next" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 587291 // next (<unidirectional association>)
	  b parent class_ref 392475 // Reference
      end

      classrelation 587419 // discovered (<unidirectional association>)
	relation 587419 --->
	  a role_name "discovered" private
	    comment " used by VM "
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<T> ${name}${value};
"
	    classrelation_ref 587419 // discovered (<unidirectional association>)
	  b parent class_ref 392475 // Reference
      end

      class 392603 "Lock"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      classrelation 587547 // lock (<unidirectional association>)
	relation 587547 --->
	  a role_name "lock" init_value "=  new Lock()" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 587547 // lock (<unidirectional association>)
	  b parent class_ref 392603 // Lock
      end

      classrelation 587675 // pending (<unidirectional association>)
	relation 587675 --->
	  a role_name "pending" init_value "=  null" class_relation private
	    comment " List of References waiting to be enqueued.  The collector adds
References to this list, while the Reference-handler thread removes
them.  This list is protected by the above lock object.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 587675 // pending (<unidirectional association>)
	  b parent class_ref 392475 // Reference
      end

      class 392731 "ReferenceHandler"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 587803 // <generalisation>
	  relation 587803 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 587803 // <generalisation>
	    b parent class_ref 163227 // Thread
	end

	operation 2268571 "ReferenceHandler"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "g" type class_ref 163483 // ThreadGroup
	    param in name "name" explicit_type "String"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 2268699 "run"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      extra_member 140315 "initialization"
	
	cpp "" ""
	java "  static {
	ThreadGroup tg = Thread.currentThread().getThreadGroup();
	for (ThreadGroup tgn = tg;
	     tgn != null;
	     tg = tgn, tgn = tg.getParent());
	Thread handler = new ReferenceHandler(tg, \"Reference Handler\");
	/* If there were a special system-only priority greater than
	 * MAX_PRIORITY, it would be used here
	 */
	handler.setPriority(Thread.MAX_PRIORITY);
	handler.setDaemon(true);
	handler.start();
    }"
	php ""
	python ""
	idl ""
      end

      operation 2268827 "get"
	public explicit_return_type "T"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Referent accessor and setters -- 

Returns this reference object's referent.  If this reference object has
been cleared, either by the program or by the garbage collector, then
this method returns <code>null</code>.

@return	 The object to which this reference refers, or
		 <code>null</code> if this reference object has been cleared"
      end

      operation 2268955 "clear"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clears this reference object.  Invoking this method will not cause this
object to be enqueued."
      end

      operation 2269083 "isEnqueued"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Queue operations -- 

Tells whether or not this reference object has been enqueued, either by
the program or by the garbage collector.	 If this reference object was
not registered with a queue when it was created, then this method will
always return <code>false</code>.

@return	 <code>true</code> if and only if this reference object has
		 been enqueued"
      end

      operation 2269211 "enqueue"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds this reference object to the queue with which it is registered,
if any.

@return	 <code>true</code> if this reference object was successfully
		 enqueued; <code>false</code> if it was already enqueued or if
		 it was not registered with a queue when it was created"
      end

      operation 2269339 "Reference"
	package explicit_return_type ""
	nparams 1
	  param inout name "referent" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Constructors -- "
      end

      operation 2269467 "Reference"
	package explicit_return_type ""
	nparams 2
	  param inout name "referent" explicit_type "T"
	  param inout name "queue" type class_ref 202779 // ReferenceQueue
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<? super T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 857499 "SoftReference"
      visibility public 
      nformals 3
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 3
      actual class class_ref 392475 // Reference
        rank 0 explicit_value "T"
      actual class class_ref 392475 // Reference
        rank 1 explicit_value ""
      actual class class_ref 392475 // Reference
        rank 2 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Soft reference objects, which are cleared at the discretion of the garbage
collector in response to memory demand.  Soft references are most often used
to implement memory-sensitive caches.

<p> Suppose that the garbage collector determines at a certain point in time
that an object is <a href=\"package-summary.html#reachability\">softly
reachable</a>.  At that time it may choose to clear atomically all soft
references to that object and all soft references to any other
softly-reachable objects from which that object is reachable through a chain
of strong references.  At the same time or at some later time it will
enqueue those newly-cleared soft references that are registered with
reference queues.

<p> All soft references to softly-reachable objects are guaranteed to have
been cleared before the virtual machine throws an
<code>OutOfMemoryError</code>.  Otherwise no constraints are placed upon the
time at which a soft reference will be cleared or the order in which a set
of such references to different objects will be cleared.  Virtual machine
implementations are, however, encouraged to bias against clearing
recently-created or recently-used soft references.

<p> Direct instances of this class may be used to implement simple caches;
this class or derived subclasses may also be used in larger data structures
to implement more sophisticated caches.  As long as the referent of a soft
reference is strongly reachable, that is, is actually in use, the soft
reference will not be cleared.  Thus a sophisticated cache can, for example,
prevent its most recently used entries from being discarded by keeping
strong referents to those entries, leaving the remaining entries to be
discarded at the discretion of the garbage collector.

@version  1.34, 12/19/03
@author   Mark Reinhold
@since    1.2"
      classrelation 1797787 // <realization>
	relation 1797787 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 1797787 // <realization>
	  b parent class_ref 392475 // Reference
      end

      attribute 2748187 "clock"
	class_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Timestamp clock, updated by the garbage collector
"
      end

      attribute 2748315 "timestamp"
	private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Timestamp updated by each invocation of the get method.  The VM may use
this field when selecting soft references to be cleared, but it is not
required to do so.
"
      end

      operation 7113755 "SoftReference"
	public explicit_return_type ""
	nparams 1
	  param inout name "referent" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new soft reference that refers to the given object.  The new
reference is not registered with any queue.

@param referent object the new soft reference will refer to"
      end

      operation 7113883 "SoftReference"
	public explicit_return_type ""
	nparams 2
	  param inout name "referent" explicit_type "T"
	  param inout name "q" type class_ref 202779 // ReferenceQueue
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<? super T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new soft reference that refers to the given object and is
registered with the given queue.

@param referent object the new soft reference will refer to
@param q the queue with which the reference is to be registered,
         or <tt>null</tt> if registration is not required
"
      end

      operation 7114011 "get"
	public explicit_return_type "T"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this reference object's referent.  If this reference object has
been cleared, either by the program or by the garbage collector, then
this method returns <code>null</code>.

@return   The object to which this reference refers, or
          <code>null</code> if this reference object has been cleared"
      end
    end

    class 923163 "Finalizer"
      visibility package 
      nactuals 3
      actual class class_ref 923291 // FinalReference
        rank 0 explicit_value ""
      actual class class_ref 923291 // FinalReference
        rank 1 explicit_value ""
      actual class class_ref 923291 // FinalReference
        rank 2 explicit_value ""
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 1796251 // <generalisation>
	relation 1796251 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1796251 // <generalisation>
	  b parent class_ref 923291 // FinalReference
      end

      operation 7111067 "invokeFinalizeMethod"
	class_operation package explicit_return_type "void"
	nparams 1
	  param inout name "o" explicit_type "Object"
	nexceptions 1
	  exception class_ref 164251 // Throwable
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Package-private; must be in
same package as the Reference
class 
 A native method that invokes an arbitrary object's finalize method is
required since the finalize method is protected"
      end

      classrelation 1796379 // queue (<unidirectional association>)
	relation 1796379 --->
	  a role_name "queue" init_value "=  new ReferenceQueue()" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1796379 // queue (<unidirectional association>)
	  b parent class_ref 202779 // ReferenceQueue
      end

      classrelation 1796507 // unfinalized (<unidirectional association>)
	relation 1796507 --->
	  a role_name "unfinalized" init_value "=  null" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1796507 // unfinalized (<unidirectional association>)
	  b parent class_ref 923163 // Finalizer
      end

      attribute 2747803 "lock"
	class_attribute private explicit_type "Object"
	init_value "=  new Object()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1796635 // next (<unidirectional association>)
	relation 1796635 --->
	  a role_name "next" init_value "=  null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1796635 // next (<unidirectional association>)
	  b parent class_ref 923163 // Finalizer
      end

      classrelation 1796763 // prev (<unidirectional association>)
	relation 1796763 --->
	  a role_name "prev" init_value "=  null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1796763 // prev (<unidirectional association>)
	  b parent class_ref 923163 // Finalizer
      end

      operation 7111195 "hasBeenFinalized"
	private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7111323 "add"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7111451 "remove"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7111579 "Finalizer"
	private explicit_return_type ""
	nparams 1
	  param inout name "finalizee" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7111707 "register"
	class_operation package explicit_return_type "void"
	nparams 1
	  param inout name "finalizee" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Invoked by VM "
      end

      operation 7111835 "runFinalizer"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7111963 "forkSecondaryFinalizer"
	class_operation private explicit_return_type "void"
	nparams 1
	  param in name "proc" type class_ref 163355 // Runnable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Create a privileged secondary finalizer thread in the system thread
group for the given Runnable, and wait for it to complete.

This method is used by both runFinalization and runFinalizersOnExit.
The former method invokes all pending finalizers, while the latter
invokes all uninvoked finalizers if on-exit finalization has been
enabled.

These two methods could have been implemented by offloading their work
to the regular finalizer thread and waiting for that thread to finish.
The advantage of creating a fresh thread, however, is that it insulates
invokers of these methods from a stalled or deadlocked finalizer thread."
      end

      operation 7112091 "runFinalization"
	class_operation package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Called by Runtime.runFinalization() "
      end

      operation 7112219 "runAllFinalizers"
	class_operation package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Invoked by java.lang.Shutdown "
      end

      class 923419 "FinalizerThread"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1796891 // <generalisation>
	  relation 1796891 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1796891 // <generalisation>
	    b parent class_ref 163227 // Thread
	end

	operation 7112347 "FinalizerThread"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "g" type class_ref 163483 // ThreadGroup
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7112475 "run"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      extra_member 162459 "initialization"
	
	cpp "" ""
	java "  static {
        ThreadGroup tg = Thread.currentThread().getThreadGroup();
        for (ThreadGroup tgn = tg;
             tgn != null;
             tg = tgn, tgn = tg.getParent());
	Thread finalizer = new FinalizerThread(tg);
	finalizer.setPriority(Thread.MAX_PRIORITY - 2);
	finalizer.setDaemon(true);
	finalizer.start();
    }"
	php ""
	python ""
	idl ""
      end
    end

    class 923291 "FinalReference"
      visibility package 
      nformals 3
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 3
      actual class class_ref 392475 // Reference
        rank 0 explicit_value "T"
      actual class class_ref 392475 // Reference
        rank 1 explicit_value ""
      actual class class_ref 392475 // Reference
        rank 2 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Final references, used to implement finalization "
      classrelation 1796123 // <realization>
	relation 1796123 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 1796123 // <realization>
	  b parent class_ref 392475 // Reference
      end

      operation 7110939 "FinalReference"
	public explicit_return_type ""
	nparams 2
	  param inout name "referent" explicit_type "T"
	  param inout name "q" type class_ref 202779 // ReferenceQueue
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<? super T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 923547 "PhantomReference"
      visibility public 
      nformals 3
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 3
      actual class class_ref 392475 // Reference
        rank 0 explicit_value "T"
      actual class class_ref 392475 // Reference
        rank 1 explicit_value ""
      actual class class_ref 392475 // Reference
        rank 2 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Phantom reference objects, which are enqueued after the collector
determines that their referents may otherwise be reclaimed.  Phantom
references are most often used for scheduling pre-mortem cleanup actions in
a more flexible way than is possible with the Java finalization mechanism.

<p> If the garbage collector determines at a certain point in time that the
referent of a phantom reference is <a
href=\"package-summary.html#reachability\">phantom reachable</a>, then at that
time or at some later time it will enqueue the reference.

<p> In order to ensure that a reclaimable object remains so, the referent of
a phantom reference may not be retrieved: The <code>get</code> method of a
phantom reference always returns <code>null</code>.

<p> Unlike soft and weak references, phantom references are not
automatically cleared by the garbage collector as they are enqueued.  An
object that is reachable via phantom references will remain so until all
such references are cleared or themselves become unreachable.

@version  1.19, 12/19/03
@author   Mark Reinhold
@since    1.2"
      classrelation 1797019 // <realization>
	relation 1797019 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 1797019 // <realization>
	  b parent class_ref 392475 // Reference
      end

      operation 7112603 "get"
	public explicit_return_type "T"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this reference object's referent.  Because the referent of a
phantom reference is always inaccessible, this method always returns
<code>null</code>.

@return  <code>null</code>"
      end

      operation 7112731 "PhantomReference"
	public explicit_return_type ""
	nparams 2
	  param inout name "referent" explicit_type "T"
	  param inout name "q" type class_ref 202779 // ReferenceQueue
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<? super T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new phantom reference that refers to the given object and
is registered with the given queue.

<p> It is possible to create a phantom reference with a <tt>null</tt>
queue, but such a reference is completely useless: Its <tt>get</tt>
method will always return null and, since it does not have a queue, it
will never be enqueued.

@param referent the object the new phantom reference will refer to
@param q the queue with which the reference is to be registered,
         or <tt>null</tt> if registration is not required"
      end
    end
  end

  deploymentview 145691 "ref"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 291355 "Reference"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import sun.misc.Cleaner;
${definition}"
      associated_classes
	class_ref 392475 // Reference
      end
      comment "@(#)Reference.java	1.41 04/04/20

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 291483 "WeakReference"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 392347 // WeakReference
      end
      comment "@(#)WeakReference.java	1.18 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 693659 "FinalReference"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 923291 // FinalReference
      end
      comment "@(#)FinalReference.java	1.11 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 693787 "Finalizer"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.PrivilegedAction;
import java.security.AccessController;
${definition}"
      associated_classes
	class_ref 923163 // Finalizer
      end
      comment "@(#)Finalizer.java	1.21 04/09/20

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 693915 "PhantomReference"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 923547 // PhantomReference
      end
      comment "@(#)PhantomReference.java	1.19 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 694043 "ReferenceQueue"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 202779 // ReferenceQueue
      end
      comment "@(#)ReferenceQueue.java	1.25 07/06/04

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 694171 "SoftReference"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 857499 // SoftReference
      end
      comment "@(#)SoftReference.java	1.34 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end
  end
end
