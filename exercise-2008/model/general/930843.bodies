class PlainDatagramSocketImpl
!!!7224219.java!!!	create() : void
	fd = new FileDescriptor();
	fd1 = new FileDescriptor();
	datagramSocketCreate();
!!!7224347.java!!!	bind(in lport : int, inout laddr : InetAddress) : void
	
	bind0(lport, laddr);
	if (laddr.isAnyLocalAddress()) {
	    anyLocalBoundAddr = laddr;
	}
!!!7224731.java!!!	connect(inout address : InetAddress, in port : int) : void
	connect0(address, port);
	connectedAddress = address;
	connectedPort = port;
	connected = true;
!!!7224859.java!!!	disconnect() : void
	disconnect0(connectedAddress.family);
	connected = false;
	connectedAddress = null;
	connectedPort = -1;
!!!7225243.java!!!	receive(inout p : DatagramPacket) : void
	try {
	    receive0(p);
	} finally {
	    fduse = -1;
	}
!!!7226011.java!!!	join(inout inetaddr : InetAddress) : void
	join(inetaddr, null);
!!!7226139.java!!!	leave(inout inetaddr : InetAddress) : void
	leave(inetaddr, null);
!!!7226267.java!!!	joinGroup(inout mcastaddr : SocketAddress, inout netIf : NetworkInterface) : void
	if (mcastaddr == null || !(mcastaddr instanceof InetSocketAddress))
	    throw new IllegalArgumentException("Unsupported address type");
	join(((InetSocketAddress)mcastaddr).getAddress(), netIf);
!!!7226523.java!!!	leaveGroup(inout mcastaddr : SocketAddress, inout netIf : NetworkInterface) : void
	if (mcastaddr == null || !(mcastaddr instanceof InetSocketAddress))
	    throw new IllegalArgumentException("Unsupported address type");
	leave(((InetSocketAddress)mcastaddr).getAddress(), netIf);
!!!7226779.java!!!	close() : void
	if (fd != null || fd1 != null) {
	    datagramSocketClose();
	    fd = null;
	    fd1 = null;
	}
!!!7226907.java!!!	finalize() : void
	close();
!!!7227035.java!!!	setOption(in optID : int, inout o : Object) : void
         if (fd == null && fd1 == null) {
            throw new SocketException("Socket Closed");
         }
	 switch (optID) {
	    /* check type safety b4 going native.  These should never
	     * fail, since only java.Socket* has access to
	     * PlainSocketImpl.setOption().
	     */
	 case SO_TIMEOUT:
	     if (o == null || !(o instanceof Integer)) {
		 throw new SocketException("bad argument for SO_TIMEOUT");
	     }
	     int tmp = ((Integer) o).intValue();
	     if (tmp < 0)
		 throw new IllegalArgumentException("timeout < 0");
	     timeout = tmp;
	     return;
	 case IP_TOS:
	     if (o == null || !(o instanceof Integer)) {
		 throw new SocketException("bad argument for IP_TOS");
	     }
	     trafficClass = ((Integer)o).intValue();
	     break;
	 case SO_REUSEADDR:
	     if (o == null || !(o instanceof Boolean)) {
		 throw new SocketException("bad argument for SO_REUSEADDR");
	     }
	     break;
	 case SO_BROADCAST:
	     if (o == null || !(o instanceof Boolean)) {
		 throw new SocketException("bad argument for SO_BROADCAST");
	     }
	     break;
	 case SO_BINDADDR:
	     throw new SocketException("Cannot re-bind Socket");
	 case SO_RCVBUF:
	 case SO_SNDBUF:
	     if (o == null || !(o instanceof Integer) ||
		 ((Integer)o).intValue() < 0) {
		 throw new SocketException("bad argument for SO_SNDBUF or " +
					   "SO_RCVBUF");
	     }
	     break;
	 case IP_MULTICAST_IF:
	     if (o == null || !(o instanceof InetAddress))
		 throw new SocketException("bad argument for IP_MULTICAST_IF");
	     break;
	 case IP_MULTICAST_IF2:
	     if (o == null || !(o instanceof NetworkInterface))
		 throw new SocketException("bad argument for IP_MULTICAST_IF2");
	     break;
	 case IP_MULTICAST_LOOP:
	     if (o == null || !(o instanceof Boolean))
		 throw new SocketException("bad argument for IP_MULTICAST_LOOP");
	     break;
	 default:
	     throw new SocketException("invalid option: " + optID);
	 }
	 socketSetOption(optID, o);
!!!7227163.java!!!	getOption(in optID : int) : Object
        if (fd == null && fd1 == null) {
            throw new SocketException("Socket Closed");
        }

	Object result;

	switch (optID) {
	    case SO_TIMEOUT:
		result = new Integer(timeout);
		break;
	
	    case IP_TOS:
		result = socketGetOption(optID);
		if ( ((Integer)result).intValue() == -1) {
		    result = new Integer(trafficClass);
		}
		break;

	    case SO_BINDADDR:
		if (fd != null && fd1 != null) {
		    return anyLocalBoundAddr;	
		}
		/* fall through */
	    case IP_MULTICAST_IF:
	    case IP_MULTICAST_IF2:
	    case SO_RCVBUF:
	    case SO_SNDBUF:
	    case IP_MULTICAST_LOOP:
	    case SO_REUSEADDR:
	    case SO_BROADCAST:
		result = socketGetOption(optID);
		break;

	    default:
		throw new SocketException("invalid option: " + optID);
  	}

	return result;
