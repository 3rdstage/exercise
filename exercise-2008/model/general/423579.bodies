class PropertyDescriptor
!!!6760859.java!!!	PropertyDescriptor(in propertyName : String, inout beanClass : Class)
	this(propertyName, beanClass, 
	     "is" + capitalize(propertyName), 
	     "set" + capitalize(propertyName));
!!!6760987.java!!!	PropertyDescriptor(in propertyName : String, inout beanClass : Class, in readMethodName : String, in writeMethodName : String)
	if (beanClass == null) {
	    throw new IntrospectionException("Target Bean class is null");
	}
	if (propertyName == null || propertyName.length() == 0) {
	    throw new IntrospectionException("bad property name");
	}
	if ("".equals(readMethodName) || "".equals(writeMethodName)) {
	    throw new IntrospectionException("read or write method name should not be the empty string");
	}	    
	setName(propertyName);
	setClass0(beanClass);

	this.readMethodName = readMethodName;
	if (readMethodName != null && getReadMethod() == null) {
	    throw new IntrospectionException("Method not found: " + readMethodName);
	}
	this.writeMethodName = writeMethodName;
	if (writeMethodName != null && getWriteMethod() == null) {
	    throw new IntrospectionException("Method not found: " + writeMethodName);
	}
	
!!!6761115.java!!!	PropertyDescriptor(in propertyName : String, inout readMethod : Method, inout writeMethod : Method)
	if (propertyName == null || propertyName.length() == 0) {
	    throw new IntrospectionException("bad property name");
	}
	setName(propertyName);
	setReadMethod(readMethod);
	setWriteMethod(writeMethod);
!!!6761243.java!!!	getPropertyType() : Class
	Class type = getPropertyType0();
	if (type  == null) {
	    try {
		type = findPropertyType(getReadMethod(), getWriteMethod());
		setPropertyType(type);
	    } catch (IntrospectionException ex) {
		// Fall 
	    }
	}
	return type;
!!!6761371.java!!!	setPropertyType(inout type : Class) : void
	propertyTypeRef = createReference(type);
!!!6761499.java!!!	getPropertyType0() : Class
	return (Class)getObject(propertyTypeRef);
!!!6761627.java!!!	getReadMethod() : Method
	Method readMethod = getReadMethod0();
	if (readMethod == null) {
	    Class cls = getClass0();
	    if (cls == null || (readMethodName == null && readMethodRef == null)) {
		// The read method was explicitly set to null.
		return null;
	    }
	    if (readMethodName == null) {
		Class type = getPropertyType0();
		if (type == boolean.class || type == null) {
		    readMethodName = "is" + getBaseName();
		} else {
		    readMethodName = "get" + getBaseName();
		}
	    }
	    
	    // Since there can be multiple write methods but only one getter
	    // method, find the getter method first so that you know what the
	    // property type is.  For booleans, there can be "is" and "get"
	    // methods.  If an "is" method exists, this is the official
	    // reader method so look for this one first.
	    readMethod = Introspector.findMethod(cls, readMethodName, 0);
	    if (readMethod == null) {
		readMethodName = "get" + getBaseName();
		readMethod = Introspector.findMethod(cls, readMethodName, 0);
	    }
	    try {
		setReadMethod(readMethod);
	    } catch (IntrospectionException ex) {
		// fall
	    }
	}
	return readMethod;
!!!6761755.java!!!	setReadMethod(inout readMethod : Method) : void
	if (readMethod == null) {
	    readMethodName = null;
	    readMethodRef = null;
	    return;
	}
	// The property type is determined by the read method.
	setPropertyType(findPropertyType(readMethod, getWriteMethod0()));
	setClass0(readMethod.getDeclaringClass());

	readMethodName = readMethod.getName();
	readMethodRef = createReference(readMethod, true);
!!!6761883.java!!!	getWriteMethod() : Method
	Method writeMethod = getWriteMethod0();
	if (writeMethod == null) {
	    Class cls = getClass0();
	    if (cls == null || (writeMethodName == null && writeMethodRef == null)) {
		// The write method was explicitly set to null.
		return null;
	    }

	    // We need the type to fetch the correct method.
	    Class type = getPropertyType0();
	    if (type == null) {
		try {
		    // Can't use getPropertyType since it will lead to recursive loop.
		    type = findPropertyType(getReadMethod(), null);
		    setPropertyType(type);
		} catch (IntrospectionException ex) {
		    // Without the correct property type we can't be guaranteed 
		    // to find the correct method.
		    return null;
		}
	    }
		    
	    if (writeMethodName == null) {
		writeMethodName = "set" + getBaseName();
	    }

	    writeMethod = Introspector.findMethod(cls, writeMethodName, 1, 
   			  (type == null) ? null : new Class[] { type });
	    try {
		setWriteMethod(writeMethod);
	    } catch (IntrospectionException ex) {
		// fall through
	    }
	}
	return writeMethod;
!!!6762011.java!!!	setWriteMethod(inout writeMethod : Method) : void
	if (writeMethod == null) {
	    writeMethodName = null;
	    writeMethodRef = null;
	    return;
	}
	// Set the property type - which validates the method
	setPropertyType(findPropertyType(getReadMethod(), writeMethod));
	setClass0(writeMethod.getDeclaringClass());

	writeMethodName = writeMethod.getName();
	writeMethodRef = createReference(writeMethod, true);

!!!6762139.java!!!	getReadMethod0() : Method
	return (Method)getObject(readMethodRef);
!!!6762267.java!!!	getWriteMethod0() : Method
	return (Method)getObject(writeMethodRef);
!!!6762395.java!!!	setClass0(inout clz : Class) : void
	if (getClass0() != null && clz.isAssignableFrom(getClass0())) {
	    // dont replace a subclass with a superclass
	    return;
	}
	super.setClass0(clz);
!!!6762523.java!!!	isBound() : boolean
	return bound;
!!!6762651.java!!!	setBound(inout bound : boolean) : void
	this.bound = bound;
!!!6762779.java!!!	isConstrained() : boolean
	return constrained;
!!!6762907.java!!!	setConstrained(inout constrained : boolean) : void
	this.constrained = constrained;
!!!6763035.java!!!	setPropertyEditorClass(inout propertyEditorClass : Class) : void
	propertyEditorClassRef = createReference(propertyEditorClass);
!!!6763163.java!!!	getPropertyEditorClass() : Class
	return (Class)getObject(propertyEditorClassRef);
!!!6763291.java!!!	createPropertyEditor(inout bean : Object) : PropertyEditor
	Object editor = null;

	Class cls = getPropertyEditorClass();
	if (cls != null) {
	    Constructor ctor = null;
	    if (bean != null) {
		try {
		    ctor = cls.getConstructor(new Class[] { Object.class });
		} catch (Exception ex) {
		    // Fall through
		}
	    }
	    try {
		if (ctor == null) {
		    editor = cls.newInstance();
		} else {
		    editor = ctor.newInstance(new Object[] { bean });
		}
	    } catch (Exception ex) {
		// A serious error has occured. 
		// Proably due to an invalid property editor.
		throw new RuntimeException("PropertyEditor not instantiated", 
					   ex);
	    }
	}
	return (PropertyEditor)editor;
!!!6763419.java!!!	equals(inout obj : Object) : boolean
	if (this == obj) {
	    return true;
	}
	if (obj != null && obj instanceof PropertyDescriptor) {
	    PropertyDescriptor other = (PropertyDescriptor)obj;
	    Method otherReadMethod = other.getReadMethod();
	    Method otherWriteMethod = other.getWriteMethod();

	    if (!compareMethods(getReadMethod(), otherReadMethod)) {
		return false;
	    }

	    if (!compareMethods(getWriteMethod(), otherWriteMethod)) {
		return false;
	    }

	    if (getPropertyType() == other.getPropertyType() && 
		getPropertyEditorClass() == other.getPropertyEditorClass() &&
		bound == other.isBound() && constrained == other.isConstrained() &&
		writeMethodName == other.writeMethodName && 
		readMethodName == other.readMethodName) {
		return true;
	    }
	}
	return false;
!!!6763547.java!!!	compareMethods(inout a : Method, inout b : Method) : boolean
	// Note: perhaps this should be a protected method in FeatureDescriptor
	if ((a == null) != (b == null)) {
	    return false;
	}

	if (a != null && b != null) {
	    if (!a.equals(b)) {
		return false;
	    }
	}
	return true;
!!!6763675.java!!!	PropertyDescriptor(inout x : PropertyDescriptor, inout y : PropertyDescriptor)
	super(x,y);

	if (y.baseName != null) {
	    baseName = y.baseName;
	} else {
	    baseName = x.baseName;
	}

	if (y.readMethodName != null) {
	    readMethodName = y.readMethodName;
	} else {
	    readMethodName = x.readMethodName;
	}

	if (y.writeMethodName != null) {
	    writeMethodName = y.writeMethodName;
	} else {
	    writeMethodName = x.writeMethodName;
	}

	if (y.propertyTypeRef != null) {
	    propertyTypeRef = y.propertyTypeRef;
	} else {
	    propertyTypeRef = x.propertyTypeRef;
	}

	// Figure out the merged read method.
	Method xr = x.getReadMethod();
	Method yr = y.getReadMethod();

	// Normally give priority to y's readMethod.
	try {
	    if (yr != null && yr.getDeclaringClass() == getClass0()) {
		setReadMethod(yr);
	    } else {
		setReadMethod(xr);
	    }
	} catch (IntrospectionException ex) {
	    // fall through
	}
	    
	// However, if both x and y reference read methods in the same class,
	// give priority to a boolean "is" method over a boolean "get" method.
	if (xr != null && yr != null &&
		   xr.getDeclaringClass() == yr.getDeclaringClass() &&
		   xr.getReturnType() == boolean.class &&
		   yr.getReturnType() == boolean.class &&
		   xr.getName().indexOf("is") == 0 &&
		   yr.getName().indexOf("get") == 0) {
	    try {
		setReadMethod(xr);
	    } catch (IntrospectionException ex) {
		// fall through
	    }
	}

	Method xw = x.getWriteMethod();
	Method yw = y.getWriteMethod();

	try {
	    if (yw != null && yw.getDeclaringClass() == getClass0()) {
		setWriteMethod(yw);
	    } else {
		setWriteMethod(xw);
	    }
	} catch (IntrospectionException ex) {
	    // Fall through
	}

	if (y.getPropertyEditorClass() != null) {
	    setPropertyEditorClass(y.getPropertyEditorClass());
	} else {
	    setPropertyEditorClass(x.getPropertyEditorClass());
	}
	

	bound = x.bound | y.bound;
	constrained = x.constrained | y.constrained;
!!!6763803.java!!!	PropertyDescriptor(inout old : PropertyDescriptor)
	super(old);
	propertyTypeRef = old.propertyTypeRef;
	readMethodRef = old.readMethodRef;
	writeMethodRef = old.writeMethodRef;
	propertyEditorClassRef = old.propertyEditorClassRef;

	writeMethodName = old.writeMethodName;
	readMethodName = old.readMethodName;
	baseName = old.baseName;

	bound = old.bound;
	constrained = old.constrained;
!!!6763931.java!!!	findPropertyType(inout readMethod : Method, inout writeMethod : Method) : Class
	Class propertyType = null;
	try {
	    if (readMethod != null) {
		Class[] params = readMethod.getParameterTypes();
		if (params.length != 0) {
		    throw new IntrospectionException("bad read method arg count: " 
						     + readMethod);
		}
		propertyType = readMethod.getReturnType();
		if (propertyType == Void.TYPE) {
		    throw new IntrospectionException("read method " +
					readMethod.getName() + " returns void");
		}
	    }
	    if (writeMethod != null) {
		Class params[] = writeMethod.getParameterTypes();
		if (params.length != 1) {
		    throw new IntrospectionException("bad write method arg count: "
						     + writeMethod);
		}
		if (propertyType != null && propertyType != params[0]) {
		    throw new IntrospectionException("type mismatch between read and write methods");
		}
		propertyType = params[0];
	    }
	} catch (IntrospectionException ex) {
	    throw ex;
	}
	return propertyType;
!!!6764059.java!!!	hashCode() : int
	int result = 7;

	result = 37 * result + ((getPropertyType() == null) ? 0 : 
				getPropertyType().hashCode());
	result = 37 * result + ((getReadMethod() == null) ? 0 : 
				getReadMethod().hashCode());
	result = 37 * result + ((getWriteMethod() == null) ? 0 : 
				getWriteMethod().hashCode());
	result = 37 * result + ((getPropertyEditorClass() == null) ? 0 : 
				getPropertyEditorClass().hashCode());
	result = 37 * result + ((writeMethodName == null) ? 0 : 
				writeMethodName.hashCode());
	result = 37 * result + ((readMethodName == null) ? 0 : 
				readMethodName.hashCode());
	result = 37 * result + getName().hashCode();
	result = 37 * result + ((bound == false) ? 0 : 1);
	result = 37 * result + ((constrained == false) ? 0 : 1);

	return result;
!!!6764187.java!!!	getBaseName() : String
	if (baseName == null) {
	    baseName = capitalize(getName());
	}
	return baseName;
