class CorbaTransportManagerImpl
!!!1668507.java!!!	CorbaTransportManagerImpl(inout orb : ORB)
	this.orb = orb;
	acceptors = new ArrayList();
	outboundConnectionCaches = new HashMap();
	inboundConnectionCaches = new HashMap();
	selector = new SelectorImpl(orb);
!!!1668635.java!!!	getByteBufferPool(in id : int) : ByteBufferPool
	throw new RuntimeException(); 
!!!1668763.java!!!	getOutboundConnectionCache(inout contactInfo : ContactInfo) : OutboundConnectionCache
	synchronized (contactInfo) {
	    if (contactInfo.getConnectionCache() == null) {
		OutboundConnectionCache connectionCache = null;
		synchronized (outboundConnectionCaches) {
		    connectionCache = (OutboundConnectionCache)
			outboundConnectionCaches.get(
                            contactInfo.getConnectionCacheType());
		    if (connectionCache == null) {
			// REVISIT: Would like to be able to configure
			// the connection cache type used.
			connectionCache = 
			    new CorbaOutboundConnectionCacheImpl(orb,
								 contactInfo);
			outboundConnectionCaches.put(
                            contactInfo.getConnectionCacheType(),
			    connectionCache);
		    }
		}
		contactInfo.setConnectionCache(connectionCache);
	    }
	    return contactInfo.getConnectionCache();
	}
!!!1668891.java!!!	getOutboundConnectionCaches() : Collection
	return outboundConnectionCaches.values();
!!!1669019.java!!!	getInboundConnectionCache(inout acceptor : Acceptor) : InboundConnectionCache
	synchronized (acceptor) {
	    if (acceptor.getConnectionCache() == null) {
		InboundConnectionCache connectionCache = null;
		synchronized (inboundConnectionCaches) {
		    connectionCache = (InboundConnectionCache)
			inboundConnectionCaches.get(
                            acceptor.getConnectionCacheType());
		    if (connectionCache == null) {
			// REVISIT: Would like to be able to configure
			// the connection cache type used.
			connectionCache = 
			    new CorbaInboundConnectionCacheImpl(orb,
								acceptor);
			inboundConnectionCaches.put(
                            acceptor.getConnectionCacheType(),
			    connectionCache);
		    }
		}
		acceptor.setConnectionCache(connectionCache);
	    }
	    return acceptor.getConnectionCache();
	}
!!!1669147.java!!!	getInboundConnectionCaches() : Collection
	return inboundConnectionCaches.values();
!!!1669275.java!!!	getSelector(in id : int) : Selector
	return selector;
!!!1669403.java!!!	registerAcceptor(inout acceptor : Acceptor) : void
	if (orb.transportDebugFlag) {
	    dprint(".registerAcceptor->: " + acceptor);
	}
	acceptors.add(acceptor);
	if (orb.transportDebugFlag) {
	    dprint(".registerAcceptor<-: " + acceptor);
	}
!!!1669531.java!!!	getAcceptors() : Collection
	return getAcceptors(null, null);
!!!1669659.java!!!	unregisterAcceptor(inout acceptor : Acceptor) : void
	acceptors.remove(acceptor);
!!!1669787.java!!!	close() : void
	try {
	    if (orb.transportDebugFlag) {
		dprint(".close->");
	    }
	    getSelector(0).close();	    
	    Collection c = getOutboundConnectionCaches();
	    Iterator iter=c.iterator();
	    
	    for (;iter.hasNext();) {
		CorbaConnectionCacheBase cc = (CorbaConnectionCacheBase)iter.next();
		Iterator iterator = cc.values().iterator();
		
		// Find any used and not busy connection in cache and close it.
		while (iterator.hasNext()) { 
		    Connection conn = (Connection) iterator.next();
		    if (!conn.isBusy()) { 
			try {
			    conn.close();
			    iterator = cc.values().iterator();
			} catch (Exception ex) { // REVISIT - log
			    if (orb.transportDebugFlag) {
				dprint("Exception while closing connection" + conn);
				//the idea is to ease troubleshooting in case of probelm while closing
				// connection
			    }
			}
		    }
   		}
	    }
			
	} finally {
	    if (orb.transportDebugFlag) {
		dprint(".close<-");
	    }
	}
!!!1669915.java!!!	getAcceptors(in objectAdapterManagerId : String, inout objectAdapterId : ObjectAdapterId) : Collection
	// REVISIT - need to filter based on arguments.

	// REVISIT - initialization will be moved to OA.
	// Lazy initialization of acceptors.
	Iterator iterator = acceptors.iterator();
	while (iterator.hasNext()) {
	    Acceptor acceptor = (Acceptor) iterator.next();
	    if (acceptor.initialize()) {
		if (acceptor.shouldRegisterAcceptEvent()) {
		    orb.getTransportManager().getSelector(0)
			.registerForEvent(acceptor.getEventHandler());
		}
	    }
	}
	return acceptors;
!!!1670043.java!!!	addToIORTemplate(inout iorTemplate : IORTemplate, inout policies : Policies, in codebase : String, in objectAdapterManagerId : String, inout objectAdapterId : ObjectAdapterId) : void
	Iterator iterator = 
	    getAcceptors(objectAdapterManagerId, objectAdapterId).iterator();
	while (iterator.hasNext()) {
	    CorbaAcceptor acceptor = (CorbaAcceptor) iterator.next();
	    acceptor.addToIORTemplate(iorTemplate, policies, codebase);
	}
!!!1670171.java!!!	dprint(in msg : String) : void
	ORBUtility.dprint("CorbaTransportManagerImpl", msg);
