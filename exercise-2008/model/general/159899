format 66
"server" // src::java::rmi::server
  revision 3
  modified_by 27 "3rdstage"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "java/rmi/server"
  java_package "java.rmi.server"
  classview 157211 "server"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 522011 "RemoteRef"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<code>RemoteRef</code> represents the handle for a remote object. A
<code>RemoteStub</code> uses a remote reference to carry out a
remote method invocation to a remote object.

@version 1.23, 05/18/04
@author  Ann Wollrath
@since   JDK1.1
@see     java.rmi.server.RemoteStub"
      classrelation 885147 // <generalisation>
	relation 885147 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 885147 // <generalisation>
	  b parent class_ref 204315 // Externalizable
      end

      attribute 921883 "serialVersionUID"
	class_attribute const_attribute public explicit_type "long"
	init_value "=  3632638527362204081L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " indicate compatibility with JDK 1.1.x version of class. "
      end

      attribute 922011 "packagePrefix"
	class_attribute const_attribute public explicit_type "String"
	init_value "=  \"sun.rmi.server\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Initialize the server package prefix: assumes that the
implementation of server ref classes (e.g., UnicastRef,
UnicastServerRef) are located in the package defined by the
prefix.
"
      end

      operation 3238171 "invoke"
	public explicit_return_type "Object"
	nparams 4
	  param inout name "obj" type class_ref 233371 // Remote
	  param inout name "method" type class_ref 170651 // Method
	  param inout name "params" explicit_type "Object"
	  param in name "opnum" explicit_type "long"
	nexceptions 1
	  exception class_ref 165403 // Exception
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoke a method. This form of delegating method invocation
to the reference allows the reference to take care of
setting up the connection to the remote host, marshaling
some representation for the method and parameters, then
communicating the method invocation to the remote host.
This method either returns the result of a method invocation
on the remote object which resides on the remote host or
throws a RemoteException if the call failed or an
application-level exception if the remote invocation throws
an exception.
   
@param obj the object that contains the RemoteRef (e.g., the
           RemoteStub for the object.
@param method the method to be invoked
@param params the parameter list
@param opnum  a hash that may be used to represent the method
@return result of remote method invocation
@exception Exception if any exception occurs during remote method
invocation
@since 1.2"
      end

      operation 3238299 "newCall"
	public return_type class_ref 522139 // RemoteCall
	nparams 4
	  param inout name "obj" type class_ref 522267 // RemoteObject
	  param inout name "op" type class_ref 522395 // Operation
	  param in name "opnum" explicit_type "int"
	  param in name "hash" explicit_type "long"
	nexceptions 1
	  exception class_ref 233499 // RemoteException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Creates an appropriate call object for a new remote method
invocation on this object.  Passing operation array and index,
allows the stubs generator to assign the operation indexes and
interpret them. The remote reference may need the operation to
encode in the call.

@since JDK1.1
@deprecated 1.2 style stubs no longer use this method. Instead of
using a sequence of method calls on the stub's the remote reference
(<code>newCall</code>, <code>invoke</code>, and <code>done</code>), a
stub uses a single method, <code>invoke(Remote, Method, Object[],
int)</code>, on the remote reference to carry out parameter
marshalling, remote method executing and unmarshalling of the return
value.

@param obj remote stub through which to make call
@param op array of stub operations
@param opnum operation number
@param hash stub/skeleton interface hash
@return call object representing remote call
@throws RemoteException if failed to initiate new remote call
@see #invoke(Remote,java.lang.reflect.Method,Object[],long)"
      end

      operation 3238427 "invoke"
	public explicit_return_type "void"
	nparams 1
	  param inout name "call" type class_ref 522139 // RemoteCall
	nexceptions 1
	  exception class_ref 165403 // Exception
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Executes the remote call.

Invoke will raise any \"user\" exceptions which
should pass through and not be caught by the stub.  If any
exception is raised during the remote invocation, invoke should
take care of cleaning up the connection before raising the
\"user\" or remote exception.

@since JDK1.1
@deprecated 1.2 style stubs no longer use this method. Instead of
using a sequence of method calls to the remote reference
(<code>newCall</code>, <code>invoke</code>, and <code>done</code>), a
stub uses a single method, <code>invoke(Remote, Method, Object[],
int)</code>, on the remote reference to carry out parameter
marshalling, remote method executing and unmarshalling of the return
value.

@param call object representing remote call
@throws Exception if any exception occurs during remote method
@see #invoke(Remote,java.lang.reflect.Method,Object[],long)"
      end

      operation 3238555 "done"
	public explicit_return_type "void"
	nparams 1
	  param inout name "call" type class_ref 522139 // RemoteCall
	nexceptions 1
	  exception class_ref 233499 // RemoteException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Allows the remote reference to clean up (or reuse) the connection.
Done should only be called if the invoke returns successfully
(non-exceptionally) to the stub.

@since JDK1.1
@deprecated 1.2 style stubs no longer use this method. Instead of
using a sequence of method calls to the remote reference
(<code>newCall</code>, <code>invoke</code>, and <code>done</code>), a
stub uses a single method, <code>invoke(Remote, Method, Object[],
int)</code>, on the remote reference to carry out parameter
marshalling, remote method executing and unmarshalling of the return
value.

@param call object representing remote call
@throws RemoteException if remote error occurs during call cleanup
@see #invoke(Remote,java.lang.reflect.Method,Object[],long)"
      end

      operation 3238683 "getRefClass"
	public explicit_return_type "String"
	nparams 1
	  param inout name "out" type class_ref 205979 // ObjectOutput
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the class name of the ref type to be serialized onto
the stream 'out'.
@param out the output stream to which the reference will be serialized
@return the class name (without package qualification) of the reference
type
@since JDK1.1"
      end

      operation 3238811 "remoteHashCode"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hashcode for a remote object.  Two remote object stubs
that refer to the same remote object will have the same hash code
(in order to support remote objects as keys in hash tables).

@return remote object hashcode
@see		java.util.Hashtable
@since JDK1.1"
      end

      operation 3238939 "remoteEquals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 522011 // RemoteRef
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares two remote objects for equality.
Returns a boolean that indicates whether this remote object is
equivalent to the specified Object. This method is used when a
remote object is stored in a hashtable.
@param	obj	the Object to compare with
@return	true if these Objects are equal; false otherwise.
@see		java.util.Hashtable
@since JDK1.1"
      end

      operation 3239067 "remoteToString"
	public explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a String that represents the reference of this remote
object.
@return string representing remote object reference
@since JDK1.1"
      end
    end

    class 522139 "RemoteCall"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      java_annotation "@Deprecated
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<code>RemoteCall</code> is an abstraction used solely by the RMI runtime
(in conjunction with stubs and skeletons of remote objects) to carry out a
call to a remote object.  The <code>RemoteCall</code> interface is
deprecated in the Java 2 platform since it is only used by deprecated methods of
<code>java.rmi.server.RemoteRef</code>.

@version 1.19, 05/18/04
@since   JDK1.1
@author  Ann Wollrath
@author  Roger Riggs
@see     java.rmi.server.RemoteRef
@deprecated no replacement."
      operation 7541403 "getOutputStream"
	public return_type class_ref 205979 // ObjectOutput
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Return the output stream the stub/skeleton should put arguments/results
into.

@return output stream for arguments/results
@exception java.io.IOException if an I/O error occurs.
@since JDK1.1
@deprecated no replacement"
      end

      operation 7541531 "releaseOutputStream"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Release the output stream; in some transports this would release
the stream.

@exception java.io.IOException if an I/O error occurs.
@since JDK1.1
@deprecated no replacement"
      end

      operation 7541659 "getInputStream"
	public return_type class_ref 201627 // ObjectInput
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Get the InputStream that the stub/skeleton should get
results/arguments from.

@return input stream for reading arguments/results
@exception java.io.IOException if an I/O error occurs.
@since JDK1.1
@deprecated no replacement"
      end

      operation 7541787 "releaseInputStream"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Release the input stream. This would allow some transports to release
the channel early.

@exception java.io.IOException if an I/O error occurs.
@since JDK1.1
@deprecated no replacement"
      end

      operation 7541915 "getResultStream"
	public return_type class_ref 205979 // ObjectOutput
	nparams 1
	  param inout name "success" explicit_type "boolean"
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 204059 // StreamCorruptedException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Returns an output stream (may put out header information
relating to the success of the call). Should only succeed
once per remote call.

@param success If true, indicates normal return, else indicates
exceptional return.
@return output stream for writing call result
@exception java.io.IOException              if an I/O error occurs.
@exception java.io.StreamCorruptedException If already been called.
@since JDK1.1
@deprecated no replacement"
      end

      operation 7542043 "executeCall"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 165403 // Exception
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Do whatever it takes to execute the call.

@exception java.lang.Exception if a general exception occurs.
@since JDK1.1
@deprecated no replacement"
      end

      operation 7542171 "done"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Allow cleanup after the remote call has completed.

@exception java.io.IOException if an I/O error occurs.
@since JDK1.1
@deprecated no replacement"
      end
    end

    class 522267 "RemoteObject"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The <code>RemoteObject</code> class implements the
<code>java.lang.Object</code> behavior for remote objects.
<code>RemoteObject</code> provides the remote semantics of Object by
implementing methods for hashCode, equals, and toString.

@author	Ann Wollrath
@author	Laird Dornin
@author	Peter Jones
@version	1.33, 03/12/19
@since	JDK1.1"
      classrelation 1854491 // <realization>
	relation 1854491 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1854491 // <realization>
	  b parent class_ref 233371 // Remote
      end

      classrelation 1854619 // <realization>
	relation 1854619 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1854619 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      classrelation 1854747 // ref (<unidirectional association>)
	relation 1854747 --->
	  a role_name "ref" protected
	    comment " The object's remote reference. 
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1854747 // ref (<unidirectional association>)
	  b parent class_ref 522011 // RemoteRef
      end

      attribute 2827291 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -3215090123894869218L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " indicate compatibility with JDK 1.1.x version of class "
      end

      operation 7520411 "RemoteObject"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a remote object."
      end

      operation 7520539 "RemoteObject"
	protected explicit_return_type ""
	nparams 1
	  param inout name "newref" type class_ref 522011 // RemoteRef
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a remote object, initialized with the specified remote
reference.
@param newref remote reference"
      end

      operation 7520667 "getRef"
	public return_type class_ref 522011 // RemoteRef
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the remote reference for the remote object.

<p>Note: The object returned from this method may be an instance of
an implementation-specific class.  The <code>RemoteObject</code>
class ensures serialization portability of its instances' remote
references through the behavior of its custom
<code>writeObject</code> and <code>readObject</code> methods.  An
instance of <code>RemoteRef</code> should not be serialized outside
of its <code>RemoteObject</code> wrapper instance or the result may
be unportable.

@return remote reference for the remote object
@since 1.2"
      end

      operation 7520795 "toStub"
	class_operation public return_type class_ref 233371 // Remote
	nparams 1
	  param inout name "obj" type class_ref 233371 // Remote
	nexceptions 1
	  exception class_ref 233627 // NoSuchObjectException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the stub for the remote object <code>obj</code> passed
as a parameter. This operation is only valid <i>after</i>
the object has been exported.
@param obj the remote object whose stub is needed
@return the stub for the remote object, <code>obj</code>.
@exception NoSuchObjectException if the stub for the
remote object could not be found.
@since 1.2"
      end

      operation 7520923 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hashcode for a remote object.  Two remote object stubs
that refer to the same remote object will have the same hash code
(in order to support remote objects as keys in hash tables).

@see		java.util.Hashtable"
      end

      operation 7521051 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares two remote objects for equality.
Returns a boolean that indicates whether this remote object is
equivalent to the specified Object. This method is used when a
remote object is stored in a hashtable.
If the specified Object is not itself an instance of RemoteObject,
then this method delegates by returning the result of invoking the
<code>equals</code> method of its parameter with this remote object
as the argument.
@param	obj	the Object to compare with
@return	true if these Objects are equal; false otherwise.
@see		java.util.Hashtable"
      end

      operation 7521179 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a String that represents the value of this remote object."
      end

      operation 7521307 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 205339 // ObjectOutputStream
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<code>writeObject</code> for custom serialization.

<p>This method writes this object's serialized form for this class
as follows:

<p>The {@link RemoteRef#getRefClass(java.io.ObjectOutput) getRefClass}
method is invoked on this object's <code>ref</code> field
to obtain its external ref type name.
If the value returned by <code>getRefClass</code> was
a non-<code>null</code> string of length greater than zero,
the <code>writeUTF</code> method is invoked on <code>out</code>
with the value returned by <code>getRefClass</code>, and then
the <code>writeExternal</code> method is invoked on
this object's <code>ref</code> field passing <code>out</code>
as the argument; otherwise,
the <code>writeUTF</code> method is invoked on <code>out</code>
with a zero-length string (<code>\"\"</code>), and then
the <code>writeObject</code> method is invoked on <code>out</code>
passing this object's <code>ref</code> field as the argument.

@serialData

The serialized data for this class comprises a string (written with
<code>ObjectOutput.writeUTF</code>) that is either the external
ref type name of the contained <code>RemoteRef</code> instance
(the <code>ref</code> field) or a zero-length string, followed by
either the external form of the <code>ref</code> field as written by
its <code>writeExternal</code> method if the string was of non-zero
length, or the serialized form of the <code>ref</code> field as
written by passing it to the serialization stream's
<code>writeObject</code> if the string was of zero length.

<p>If this object is an instance of
{@link RemoteStub} or {@link RemoteObjectInvocationHandler}
that was returned from any of
the <code>UnicastRemoteObject.exportObject</code> methods
and custom socket factories are not used,
the external ref type name is <code>\"UnicastRef\"</code>.

If this object is an instance of
<code>RemoteStub</code> or <code>RemoteObjectInvocationHandler</code>
that was returned from any of
the <code>UnicastRemoteObject.exportObject</code> methods
and custom socket factories are used,
the external ref type name is <code>\"UnicastRef2\"</code>.

If this object is an instance of
<code>RemoteStub</code> or <code>RemoteObjectInvocationHandler</code>
that was returned from any of
the <code>java.rmi.activation.Activatable.exportObject</code> methods,
the external ref type name is <code>\"ActivatableRef\"</code>.

If this object is an instance of
<code>RemoteStub</code> or <code>RemoteObjectInvocationHandler</code>
that was returned from
the <code>RemoteObject.toStub</code> method (and the argument passed
to <code>toStub</code> was not itself a <code>RemoteStub</code>),
the external ref type name is a function of how the remote object
passed to <code>toStub</code> was exported, as described above.

If this object is an instance of
<code>RemoteStub</code> or <code>RemoteObjectInvocationHandler</code>
that was originally created via deserialization,
the external ref type name is the same as that which was read
when this object was deserialized.

<p>If this object is an instance of
<code>java.rmi.server.UnicastRemoteObject</code> that does not
use custom socket factories,
the external ref type name is <code>\"UnicastServerRef\"</code>.

If this object is an instance of
<code>UnicastRemoteObject</code> that does
use custom socket factories,
the external ref type name is <code>\"UnicastServerRef2\"</code>.

<p>Following is the data that must be written by the
<code>writeExternal</code> method and read by the
<code>readExternal</code> method of <code>RemoteRef</code>
implementation classes that correspond to the each of the
defined external ref type names:

<p>For <code>\"UnicastRef\"</code>:

<ul>

<li>the hostname of the referenced remote object,
written by {@link java.io.ObjectOutput#writeUTF(String)}

<li>the port of the referenced remote object,
written by {@link java.io.ObjectOutput#writeInt(int)}

<li>the data written as a result of calling
{link java.rmi.server.ObjID#write(java.io.ObjectOutput)}
on the <code>ObjID</code> instance contained in the reference

<li>the boolean value <code>false</code>,
written by {@link java.io.ObjectOutput#writeBoolean(boolean)}

</ul>

<p>For <code>\"UnicastRef2\"</code> with a
<code>null</code> client socket factory:

<ul>

<li>the byte value <code>0x00</code>
(indicating <code>null</code> client socket factory),
written by {@link java.io.ObjectOutput#writeByte(int)}

<li>the hostname of the referenced remote object,
written by {@link java.io.ObjectOutput#writeUTF(String)}

<li>the port of the referenced remote object,
written by {@link java.io.ObjectOutput#writeInt(int)}

<li>the data written as a result of calling
{link java.rmi.server.ObjID#write(java.io.ObjectOutput)}
on the <code>ObjID</code> instance contained in the reference

<li>the boolean value <code>false</code>,
written by {@link java.io.ObjectOutput#writeBoolean(boolean)}

</ul>

<p>For <code>\"UnicastRef2\"</code> with a
non-<code>null</code> client socket factory:

<ul>

<li>the byte value <code>0x01</code>
(indicating non-<code>null</code> client socket factory),
written by {@link java.io.ObjectOutput#writeByte(int)}

<li>the hostname of the referenced remote object,
written by {@link java.io.ObjectOutput#writeUTF(String)}

<li>the port of the referenced remote object,
written by {@link java.io.ObjectOutput#writeInt(int)}

<li>a client socket factory (object of type
<code>java.rmi.server.RMIClientSocketFactory</code>),
written by passing it to an invocation of
<code>writeObject</code> on the stream instance

<li>the data written as a result of calling
{link java.rmi.server.ObjID#write(java.io.ObjectOutput)}
on the <code>ObjID</code> instance contained in the reference

<li>the boolean value <code>false</code>,
written by {@link java.io.ObjectOutput#writeBoolean(boolean)}

</ul>

<p>For <code>\"ActivatableRef\"</code> with a
<code>null</code> nested remote reference:

<ul>

<li>an instance of
<code>java.rmi.activation.ActivationID</code>,
written by passing it to an invocation of
<code>writeObject</code> on the stream instance

<li>a zero-length string (<code>\"\"</code>),
written by {@link java.io.ObjectOutput#writeUTF(String)}

</ul>

<p>For <code>\"ActivatableRef\"</code> with a
non-<code>null</code> nested remote reference:

<ul>

<li>an instance of
<code>java.rmi.activation.ActivationID</code>,
written by passing it to an invocation of
<code>writeObject</code> on the stream instance

<li>the external ref type name of the nested remote reference,
which must be <code>\"UnicastRef2\"</code>,
written by {@link java.io.ObjectOutput#writeUTF(String)}

<li>the external form of the nested remote reference,
written by invoking its <code>writeExternal</code> method
with the stream instance
(see the description of the external form for
<code>\"UnicastRef2\"</code> above)

</ul>

<p>For <code>\"UnicastServerRef\"</code> and
<code>\"UnicastServerRef2\"</code>, no data is written by the
<code>writeExternal</code> method or read by the
<code>readExternal</code> method."
      end

      operation 7521435 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 201115 // ObjectInputStream
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<code>readObject</code> for custom serialization.

<p>This method reads this object's serialized form for this class
as follows:

<p>The <code>readUTF</code> method is invoked on <code>in</code>
to read the external ref type name for the <code>RemoteRef</code>
instance to be filled in to this object's <code>ref</code> field.
If the string returned by <code>readUTF</code> has length zero,
the <code>readObject</code> method is invoked on <code>in</code>,
and than the value returned by <code>readObject</code> is cast to
<code>RemoteRef</code> and this object's <code>ref</code> field is
set to that value.
Otherwise, this object's <code>ref</code> field is set to a
<code>RemoteRef</code> instance that is created of an
implementation-specific class corresponding to the external ref
type name returned by <code>readUTF</code>, and then
the <code>readExternal</code> method is invoked on
this object's <code>ref</code> field.

<p>If the external ref type name is
<code>\"UnicastRef\"</code>, <code>\"UnicastServerRef\"</code>,
<code>\"UnicastRef2\"</code>, <code>\"UnicastServerRef2\"</code>,
or <code>\"ActivatableRef\"</code>, a corresponding
implementation-specific class must be found, and its
<code>readExternal</code> method must read the serial data
for that external ref type name as specified to be written
in the <b>serialData</b> documentation for this class.
If the external ref type name is any other string (of non-zero
length), a <code>ClassNotFoundException</code> will be thrown,
unless the implementation provides an implementation-specific
class corresponding to that external ref type name, in which
case this object's <code>ref</code> field will be set to an
instance of that implementation-specific class."
      end
    end

    class 522395 "Operation"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@Deprecated
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An <code>Operation</code> contains a description of a Java method.
<code>Operation</code> objects were used in JDK1.1 version stubs and
skeletons. The <code>Operation</code> class is not needed for 1.2 style
stubs (stubs generated with <code>rmic -v1.2</code>); hence, this class
is deprecated.

@version 1.17, 05/18/04
@since JDK1.1
@deprecated no replacement"
      attribute 2833051 "operation"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7541019 "Operation"
	public explicit_return_type ""
	nparams 1
	  param in name "op" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Creates a new Operation object.
@param op method name
@deprecated no replacement
@since JDK1.1"
      end

      operation 7541147 "getOperation"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Returns the name of the method.
@return method name
@deprecated no replacement
@since JDK1.1"
      end

      operation 7541275 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Returns the string representation of the operation.
@deprecated no replacement
@since JDK1.1"
      end
    end

    class 522651 "RMIClientSocketFactory"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An <code>RMIClientSocketFactory</code> instance is used by the RMI runtime
in order to obtain client sockets for RMI calls.  A remote object can be
associated with an <code>RMIClientSocketFactory</code> when it is
created/exported via the constructors or <code>exportObject</code> methods
of <code>java.rmi.server.UnicastRemoteObject</code> and
<code>java.rmi.activation.Activatable</code> .

<p>An <code>RMIClientSocketFactory</code> instance associated with a remote
object will be downloaded to clients when the remote object's reference is
transmitted in an RMI call.  This <code>RMIClientSocketFactory</code> will
be used to create connections to the remote object for remote method calls.

<p>An <code>RMIClientSocketFactory</code> instance can also be associated
with a remote object registry so that clients can use custom socket
communication with a remote object registry.

<p>An implementation of this interface should be serializable and
should implement {@link Object#equals} to return <code>true</code> when
passed an instance that represents the same (functionally equivalent)
client socket factory, and <code>false</code> otherwise (and it should also
implement {@link Object#hashCode} consistently with its
<code>Object.equals</code> implementation).

@version 1.11, 12/19/03
@author  Ann Wollrath
@author  Peter Jones
@since   1.2
@see     java.rmi.server.UnicastRemoteObject
@see     java.rmi.activation.Activatable
@see     java.rmi.registry.LocateRegistry"
      operation 7545883 "createSocket"
	public return_type class_ref 235419 // Socket
	nparams 2
	  param in name "host" explicit_type "String"
	  param in name "port" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a client socket connected to the specified host and port.
@param  host   the host name
@param  port   the port number
@return a socket connected to the specified host and port.
@exception IOException if an I/O error occurs during socket creation
@since 1.2"
      end
    end

    class 522779 "RMIServerSocketFactory"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An <code>RMIServerSocketFactory</code> instance is used by the RMI runtime
in order to obtain server sockets for RMI calls.  A remote object can be
associated with an <code>RMIServerSocketFactory</code> when it is
created/exported via the constructors or <code>exportObject</code> methods
of <code>java.rmi.server.UnicastRemoteObject</code> and
<code>java.rmi.activation.Activatable</code> .

<p>An <code>RMIServerSocketFactory</code> instance associated with a remote
object is used to obtain the <code>ServerSocket</code> used to accept
incoming calls from clients.

<p>An <code>RMIServerSocketFactory</code> instance can also be associated
with a remote object registry so that clients can use custom socket
communication with a remote object registry.

<p>An implementation of this interface 
should implement {@link Object#equals} to return <code>true</code> when
passed an instance that represents the same (functionally equivalent)
server socket factory, and <code>false</code> otherwise (and it should also
implement {@link Object#hashCode} consistently with its
<code>Object.equals</code> implementation).

@version 1.11, 12/19/03
@author  Ann Wollrath
@author  Peter Jones
@since   1.2
@see     java.rmi.server.UnicastRemoteObject
@see     java.rmi.activation.Activatable
@see     java.rmi.registry.LocateRegistry"
      operation 7546139 "createServerSocket"
	public return_type class_ref 235163 // ServerSocket
	nparams 1
	  param in name "port" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a server socket on the specified port (port 0 indicates
an anonymous port).
@param  port the port number
@return the server socket on the specified port
@exception IOException if an I/O error occurs during server socket
creation
@since 1.2"
      end
    end

    class 953627 "RemoteServer"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The <code>RemoteServer</code> class is the common superclass to server
implementations and provides the framework to support a wide range
of remote reference semantics.  Specifically, the functions needed
to create and export remote objects (i.e. to make them remotely
available) are provided abstractly by <code>RemoteServer</code> and
concretely by its subclass(es).

@version 1.32, 12/19/03
@author  Ann Wollrath
@since   JDK1.1"
      classrelation 1854875 // <generalisation>
	relation 1854875 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1854875 // <generalisation>
	  b parent class_ref 522267 // RemoteObject
      end

      attribute 2827419 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -4100238210092549637L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " indicate compatibility with JDK 1.1.x version of class "
      end

      operation 7521563 "RemoteServer"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>RemoteServer</code>.
@since JDK1.1"
      end

      operation 7521691 "RemoteServer"
	protected explicit_return_type ""
	nparams 1
	  param inout name "ref" type class_ref 522011 // RemoteRef
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>RemoteServer</code> with the given reference type.

@param ref the remote reference
@since JDK1.1"
      end

      operation 7521819 "getClientHost"
	class_operation public explicit_return_type "String"
	nparams 0
	nexceptions 1
	  exception class_ref 953755 // ServerNotActiveException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of the client host for the
remote method invocation being processed in the current thread.

@return 	a string representation of the client host

@throws	ServerNotActiveException if no remote method invocation
is being processed in the current thread

@since	JDK1.1"
      end

      operation 7521947 "setLog"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 183835 // OutputStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Log RMI calls to the output stream <code>out</code>. If
<code>out</code> is <code>null</code>, call logging is turned off.

<p>If there is a security manager, its
<code>checkPermission</code> method will be invoked with a
<code>java.util.logging.LoggingPermission(\"control\")</code>
permission; this could result in a <code>SecurityException</code>.

@param	out the output stream to which RMI calls should be logged
@throws	SecurityException  if there is a security manager and
		the invocation of its <code>checkPermission</code> method
		fails
@see #getLog
@since JDK1.1"
      end

      operation 7522075 "getLog"
	class_operation public return_type class_ref 162843 // PrintStream
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns stream for the RMI call log.
@return the call log
@see #setLog
@since JDK1.1"
      end

      attribute 2827547 "logNull"
	class_attribute private explicit_type "boolean"
	init_value "=  !UnicastServerRef.logCalls"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " initialize log status"
      end
    end

    class 953755 "ServerNotActiveException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An <code>ServerNotActiveException</code> is an <code>Exception</code>
thrown during a call to <code>RemoteServer.getClientHost</code> if
the getClientHost method is called outside of servicing a remote
method call.

@version 1.13, 12/19/03
@author  Roger Riggs
@since   JDK1.1
@see java.rmi.server.RemoteServer#getClientHost()"
      classrelation 1863835 // <generalisation>
	relation 1863835 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1863835 // <generalisation>
	  b parent class_ref 165403 // Exception
      end

      attribute 2833563 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  4687940720827538231L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " indicate compatibility with JDK 1.1.x version of class "
      end

      operation 7547803 "ServerNotActiveException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>ServerNotActiveException</code> with no specified
detail message.
@since JDK1.1"
      end

      operation 7547931 "ServerNotActiveException"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>ServerNotActiveException</code> with the specified
detail message.

@param s the detail message.
@since JDK1.1"
      end
    end

    class 954907 "UnicastRemoteObject"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Used for exporting a remote object with JRMP and obtaining a stub
that communicates to the remote object.

<p>For the constructors and static <code>exportObject</code> methods
below, the stub for a remote object being exported is obtained as
follows:

<p><ul>

<li>If the remote object is exported using the {@link
#exportObject(Remote) UnicastRemoteObject.exportObject(Remote)} method,
a stub class (typically pregenerated from the remote object's class
using the <code>rmic</code> tool) is loaded and an instance of that stub
class is constructed as follows.
<ul>

<li>A \"root class\" is determined as follows:  if the remote object's
class directly implements an interface that extends {@link Remote}, then
the remote object's class is the root class; otherwise, the root class is
the most derived superclass of the remote object's class that directly
implements an interface that extends <code>Remote</code>.

<li>The name of the stub class to load is determined by concatenating
the binary name of the root class with the suffix <code>\"_Stub\"</code>.

<li>The stub class is loaded by name using the class loader of the root
class.  The stub class must extend {@link RemoteStub} and must have a
public constructor that has one parameter, of type {@link RemoteRef}.

<li>Finally, an instance of the stub class is constructed with a
{@link RemoteRef}.
</ul>

<li>If the appropriate stub class could not be found, or the stub class
could not be loaded, or a problem occurs creating the stub instance, a
{@link StubNotFoundException} is thrown.

<p>
<li>For all other means of exporting:
<p><ul>

<li>If the remote object's stub class (as defined above) could not be
loaded or the system property
<code>java.rmi.server.ignoreStubClasses</code> is set to
<code>\"true\"</code> (case insensitive), a {@link
java.lang.reflect.Proxy} instance is constructed with the following
properties:

<ul>

<li>The proxy's class is defined by the class loader of the remote
object's class.

<li>The proxy implements all the remote interfaces implemented by the
remote object's class.

<li>The proxy's invocation handler is a {@link
RemoteObjectInvocationHandler} instance constructed with a
{@link RemoteRef}.

<li>If the proxy could not be created, a {@link StubNotFoundException}
will be thrown.
</ul>

<p>
<li>Otherwise, an instance of the remote object's stub class (as
described above) is used as the stub.

</ul>
</ul>

@version 1.32, 12/19/03
@author  Ann Wollrath
@author  Peter Jones
@since   JDK1.1"
      classrelation 1856027 // <generalisation>
	relation 1856027 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1856027 // <generalisation>
	  b parent class_ref 953627 // RemoteServer
      end

      attribute 2828571 "port"
	private explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "@serial port number on which to export object 
"
      end

      classrelation 1856155 // csf (<unidirectional association>)
	relation 1856155 --->
	  a role_name "csf" init_value "=  null" private
	    comment "
@serial client-side socket factory (if any) 

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1856155 // csf (<unidirectional association>)
	  b parent class_ref 522651 // RMIClientSocketFactory
      end

      classrelation 1856283 // ssf (<unidirectional association>)
	relation 1856283 --->
	  a role_name "ssf" init_value "=  null" private
	    comment " 
@serial server-side socket factory (if any) to use when
exporting object 

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1856283 // ssf (<unidirectional association>)
	  b parent class_ref 522779 // RMIServerSocketFactory
      end

      attribute 2828699 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  4974527148936298033L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " indicate compatibility with JDK 1.1.x version of class "
      end

      operation 7526299 "UnicastRemoteObject"
	protected explicit_return_type ""
	nparams 0
	nexceptions 1
	  exception class_ref 233499 // RemoteException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates and exports a new UnicastRemoteObject object using an
anonymous port.
@throws RemoteException if failed to export object
@since JDK1.1"
      end

      operation 7526427 "UnicastRemoteObject"
	protected explicit_return_type ""
	nparams 1
	  param in name "port" explicit_type "int"
	nexceptions 1
	  exception class_ref 233499 // RemoteException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates and exports a new UnicastRemoteObject object using the
particular supplied port.
@param port the port number on which the remote object receives calls
(if <code>port</code> is zero, an anonymous port is chosen)
@throws RemoteException if failed to export object
@since 1.2"
      end

      operation 7526555 "UnicastRemoteObject"
	protected explicit_return_type ""
	nparams 3
	  param in name "port" explicit_type "int"
	  param inout name "csf" type class_ref 522651 // RMIClientSocketFactory
	  param inout name "ssf" type class_ref 522779 // RMIServerSocketFactory
	nexceptions 1
	  exception class_ref 233499 // RemoteException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates and exports a new UnicastRemoteObject object using the
particular supplied port and socket factories.
@param port the port number on which the remote object receives calls
(if <code>port</code> is zero, an anonymous port is chosen)
@param csf the client-side socket factory for making calls to the
remote object
@param ssf the server-side socket factory for receiving remote calls
@throws RemoteException if failed to export object
@since 1.2"
      end

      operation 7526683 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 201115 // ObjectInputStream
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Re-export the remote object when it is deserialized."
      end

      operation 7526811 "clone"
	public explicit_return_type "Object"
	nparams 0
	nexceptions 1
	  exception class_ref 383643 // CloneNotSupportedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a clone of the remote object that is distinct from
the original.

@exception CloneNotSupportedException if clone failed due to
a RemoteException.
@return the new remote object
@since JDK1.1"
      end

      operation 7526939 "reexport"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 233499 // RemoteException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Exports this UnicastRemoteObject using its initialized fields because
its creation bypassed running its constructors (via deserialization
or cloning, for example)."
      end

      operation 7527067 "exportObject"
	class_operation public return_type class_ref 955035 // RemoteStub
	nparams 1
	  param inout name "obj" type class_ref 233371 // Remote
	nexceptions 1
	  exception class_ref 233499 // RemoteException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Exports the remote object to make it available to receive incoming
calls using an anonymous port.
@param obj the remote object to be exported
@return remote object stub
@exception RemoteException if export fails
@since JDK1.1"
      end

      operation 7527195 "exportObject"
	class_operation public return_type class_ref 233371 // Remote
	nparams 2
	  param inout name "obj" type class_ref 233371 // Remote
	  param in name "port" explicit_type "int"
	nexceptions 1
	  exception class_ref 233499 // RemoteException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Exports the remote object to make it available to receive incoming
calls, using the particular supplied port.
@param obj the remote object to be exported
@param port the port to export the object on
@return remote object stub
@exception RemoteException if export fails
@since 1.2"
      end

      operation 7527323 "exportObject"
	class_operation public return_type class_ref 233371 // Remote
	nparams 4
	  param inout name "obj" type class_ref 233371 // Remote
	  param in name "port" explicit_type "int"
	  param inout name "csf" type class_ref 522651 // RMIClientSocketFactory
	  param inout name "ssf" type class_ref 522779 // RMIServerSocketFactory
	nexceptions 1
	  exception class_ref 233499 // RemoteException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Exports the remote object to make it available to receive incoming
calls, using a transport specified by the given socket factory.
@param obj the remote object to be exported
@param port the port to export the object on
@param csf the client-side socket factory for making calls to the
remote object
@param ssf the server-side socket factory for receiving remote calls
@return remote object stub
@exception RemoteException if export fails
@since 1.2"
      end

      operation 7527451 "unexportObject"
	class_operation public explicit_return_type "boolean"
	nparams 2
	  param inout name "obj" type class_ref 233371 // Remote
	  param inout name "force" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 233627 // NoSuchObjectException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the remote object, obj, from the RMI runtime. If
successful, the object can no longer accept incoming RMI calls.
If the force parameter is true, the object is forcibly unexported
even if there are pending calls to the remote object or the
remote object still has calls in progress.  If the force
parameter is false, the object is only unexported if there are
no pending or in progress calls to the object.

@param obj the remote object to be unexported
@param force if true, unexports the object even if there are
pending or in-progress calls; if false, only unexports the object
if there are no pending or in-progress calls
@return true if operation is successful, false otherwise
@exception NoSuchObjectException if the remote object is not
currently exported
@since 1.2"
      end

      operation 7527579 "exportObject"
	class_operation private return_type class_ref 233371 // Remote
	nparams 2
	  param inout name "obj" type class_ref 233371 // Remote
	  param inout name "sref" explicit_type "UnicastServerRef"
	nexceptions 1
	  exception class_ref 233499 // RemoteException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Exports the specified object using the specified server ref."
      end
    end

    class 955035 "RemoteStub"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The <code>RemoteStub</code> class is the common superclass to client
stubs and provides the framework to support a wide range of remote
reference semantics.  Stub objects are surrogates that support
exactly the same set of remote interfaces defined by the actual
implementation of the remote object.

@version 1.21, 05/18/04
@author  Ann Wollrath
@since   JDK1.1"
      classrelation 1862555 // <generalisation>
	relation 1862555 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1862555 // <generalisation>
	  b parent class_ref 522267 // RemoteObject
      end

      attribute 2833307 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -1585587260594494182L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " indicate compatibility with JDK 1.1.x version of class "
      end

      operation 7543451 "RemoteStub"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>RemoteStub</code>."
      end

      operation 7543579 "RemoteStub"
	protected explicit_return_type ""
	nparams 1
	  param inout name "ref" type class_ref 522011 // RemoteRef
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>RemoteStub</code>, with the specified remote
reference.

@param ref the remote reference
@since JDK1.1"
      end

      operation 7543707 "setRef"
	class_operation protected explicit_return_type "void"
	nparams 2
	  param inout name "stub" type class_ref 955035 // RemoteStub
	  param inout name "ref" type class_ref 522011 // RemoteRef
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Sets the remote reference inside the remote stub.

@param stub the remote stub
@param ref the remote reference
@since JDK1.1
@deprecated no replacement.  The <code>setRef</code> method
is not needed since <code>RemoteStub</code>s can be created with
the <code>RemoteStub(RemoteRef)</code> constructor."
      end
    end

    class 955803 "UID"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A <code>UID</code> represents an identifier that is unique over time
with respect to the host it is generated on, or one of 2<sup>16</sup>
\"well-known\" identifiers.

<p>The {@link #UID()} constructor can be used to generate an
identifier that is unique over time with respect to the host it is
generated on.  The {@link #UID(short)} constructor can be used to
create one of 2<sup>16</sup> well-known identifiers.

<p>A <code>UID</code> instance contains three primitive values:
<ul>
<li><code>unique</code>, an <code>int</code> that uniquely identifies
the VM that this <code>UID</code> was generated in, with respect to its
host and at the time represented by the <code>time</code> value (an
example implementation of the <code>unique</code> value would be a
process identifier),
 or zero for a well-known <code>UID</code>
<li><code>time</code>, a <code>long</code> equal to a time (as returned
by {@link System#currentTimeMillis()}) at which the VM that this
<code>UID</code> was generated in was alive,
or zero for a well-known <code>UID</code>
<li><code>count</code>, a <code>short</code> to distinguish
<code>UID</code>s generated in the same VM with the same
<code>time</code> value
</ul>

<p>An independently generated <code>UID</code> instance is unique
over time with respect to the host it is generated on as long as
the host requires more than one millisecond to reboot and its system
clock is never set backward.  A globally unique identifier can be
constructed by pairing a <code>UID</code> instance with a unique host
identifier, such as an IP address.

@author	Ann Wollrath
@author	Peter Jones
@version	1.22, 03/12/19
@since	JDK1.1"
      classrelation 1864475 // <realization>
	relation 1864475 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1864475 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      attribute 2834203 "ONE_SECOND"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  1000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " in milliseconds"
      end

      attribute 2834331 "hostUnique"
	class_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2834459 "hostUniqueSet"
	class_attribute private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2834587 "lock"
	class_attribute const_attribute private explicit_type "Object"
	init_value "=  new Object()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2834715 "lastTime"
	class_attribute private explicit_type "long"
	init_value "=  System.currentTimeMillis()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2834843 "lastCount"
	class_attribute private explicit_type "short"
	init_value "=  Short.MIN_VALUE"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2834971 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  1086053664494604050L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " indicate compatibility with JDK 1.1.x version of class "
      end

      attribute 2835099 "unique"
	const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "number that uniquely identifies the VM that this <code>UID</code>
was generated in with respect to its host and at the given time
@serial
"
      end

      attribute 2835227 "time"
	const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "a time (as returned by {@link System#currentTimeMillis()}) at which
the VM that this <code>UID</code> was generated in was alive
@serial
"
      end

      attribute 2835355 "count"
	const_attribute private explicit_type "short"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "16-bit number to distinguish <code>UID</code> instances created
in the same VM with the same time value
@serial
"
      end

      operation 7549211 "UID"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates a <code>UID</code> that is unique over time with
respect to the host that it was generated on."
      end

      operation 7549339 "UID"
	public explicit_return_type ""
	nparams 1
	  param in name "num" explicit_type "short"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a \"well-known\" <code>UID</code>.

There are 2<sup>16</sup> possible such well-known ids.

<p>A <code>UID</code> created via this constructor will not
clash with any <code>UID</code>s generated via the no-arg
constructor.

@param	num number for well-known <code>UID</code>"
      end

      operation 7549467 "UID"
	private explicit_return_type ""
	nparams 3
	  param in name "unique" explicit_type "int"
	  param in name "time" explicit_type "long"
	  param in name "count" explicit_type "short"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>UID</code> given data read from a stream."
      end

      operation 7549595 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hash code value for this <code>UID</code>.

@return	the hash code value for this <code>UID</code>"
      end

      operation 7549723 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares the specified object with this <code>UID</code> for
equality.

This method returns <code>true</code> if and only if the
specified object is a <code>UID</code> instance with the same
<code>unique</code>, <code>time</code>, and <code>count</code>
values as this one.

@param	obj the object to compare this <code>UID</code> to

@return	<code>true</code> if the given object is equivalent to
this one, and <code>false</code> otherwise"
      end

      operation 7549851 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of this <code>UID</code>.

@return	a string representation of this <code>UID</code>"
      end

      operation 7549979 "write"
	public explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 206107 // DataOutput
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Marshals a binary representation of this <code>UID</code> to
a <code>DataOutput</code> instance.

<p>Specifically, this method first invokes the given stream's
{@link DataOutput#writeInt(int)} method with this <code>UID</code>'s
<code>unique</code> value, then it invokes the stream's
{@link DataOutput#writeLong(long)} method with this <code>UID</code>'s
<code>time</code> value, and then it invokes the stream's
{@link DataOutput#writeShort(int)} method with this <code>UID</code>'s
<code>count</code> value.

@param	out the <code>DataOutput</code> instance to write
this <code>UID</code> to

@throws	IOException if an I/O error occurs while performing
this operation"
      end

      operation 7550107 "read"
	class_operation public return_type class_ref 955803 // UID
	nparams 1
	  param inout name "in" type class_ref 201755 // DataInput
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns a new <code>UID</code> instance by
unmarshalling a binary representation from an
<code>DataInput</code> instance.

<p>Specifically, this method first invokes the given stream's
{@link DataInput#readInt()} method to read a <code>unique</code> value,
then it invoke's the stream's
{@link DataInput#readLong()} method to read a <code>time</code> value,
then it invoke's the stream's
{@link DataInput#readShort()} method to read a <code>count</code> value,
and then it creates and returns a new <code>UID</code> instance
that contains the <code>unique</code>, <code>time</code>, and
<code>count</code> values that were read from the stream.

@param	in the <code>DataInput</code> instance to read
<code>UID</code> from

@return	unmarshalled <code>UID</code> instance

@throws	IOException if an I/O error occurs while performing
this operation"
      end
    end

    class 956315 "ObjID"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An <code>ObjID</code> is used to identify a remote object exported
to an RMI runtime.  When a remote object is exported, it is assigned
an object identifier either implicitly or explicitly, depending on
the API used to export.

<p>The {@link #ObjID()} constructor can be used to generate a unique
object identifier.  Such an <code>ObjID</code> is unique over time
with respect to the host it is generated on.

The {@link #ObjID(int)} constructor can be used to create a
\"well-known\" object identifier.  The scope of a well-known
<code>ObjID</code> depends on the RMI runtime it is exported to.

<p>An <code>ObjID</code> instance contains an object number (of type
<code>long</code>) and an address space identifier (of type
{@link UID}).  In a unique <code>ObjID</code>, the address space
identifier is unique with respect to a given host over time.  In a
well-known <code>ObjID</code>, the address space identifier is
equivalent to one returned by invoking the {@link UID#UID(short)}
constructor with the value zero.

<p>If the system property <code>java.rmi.server.randomIDs</code>
is defined to equal the string <code>\"true\"</code> (case insensitive),
then the {@link #ObjID()} constructor will use a cryptographically
strong random number generator to choose the object number of the
returned <code>ObjID</code>.

@author	Ann Wollrath
@author	Peter Jones
@version	1.29, 03/12/19
@since	JDK1.1"
      classrelation 1861403 // <realization>
	relation 1861403 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1861403 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      attribute 2832155 "REGISTRY_ID"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Object number for well-known <code>ObjID</code> of the registry. "
      end

      attribute 2832283 "ACTIVATOR_ID"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Object number for well-known <code>ObjID</code> of the activator. "
      end

      attribute 2832411 "DGC_ID"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Object number for well-known <code>ObjID</code> of
the distributed garbage collector.
"
      end

      attribute 2832539 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -6386392263968365220L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " indicate compatibility with JDK 1.1.x version of class "
      end

      classrelation 1861531 // mySpace (<unidirectional association>)
	relation 1861531 --->
	  a role_name "mySpace" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1861531 // mySpace (<unidirectional association>)
	  b parent class_ref 955803 // UID
      end

      classrelation 1861659 // generator (<unidirectional association>)
	relation 1861659 --->
	  a role_name "generator" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1861659 // generator (<unidirectional association>)
	  b parent class_ref 139547 // Random
      end

      attribute 2832667 "objNum"
	const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "@serial object number
@see #hashCode
"
      end

      classrelation 1861787 // space (<unidirectional association>)
	relation 1861787 --->
	  a role_name "space" const_relation private
	    comment "
@serial address space identifier (unique to host over time)

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1861787 // space (<unidirectional association>)
	  b parent class_ref 955803 // UID
      end

      operation 7539867 "ObjID"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates a unique object identifier.

<p>If the system property <code>java.rmi.server.randomIDs</code>
is defined to equal the string <code>\"true\"</code> (case insensitive),
then this constructor will use a cryptographically
strong random number generator to choose the object number of the
returned <code>ObjID</code>."
      end

      operation 7539995 "ObjID"
	public explicit_return_type ""
	nparams 1
	  param in name "objNum" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a \"well-known\" object identifier.

<p>An <code>ObjID</code> created via this constructor will not
clash with any <code>ObjID</code>s generated via the no-arg
constructor.

@param	objNum object number for well-known object identifier"
      end

      operation 7540123 "ObjID"
	private explicit_return_type ""
	nparams 2
	  param in name "objNum" explicit_type "long"
	  param inout name "space" type class_ref 955803 // UID
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an object identifier given data read from a stream."
      end

      operation 7540251 "write"
	public explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 205979 // ObjectOutput
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Marshals a binary representation of this <code>ObjID</code> to
an <code>ObjectOutput</code> instance.

<p>Specifically, this method first invokes the given stream's
{@link ObjectOutput#writeLong(long)} method with this object
identifier's object number, and then it writes its address
space identifier by invoking its {@link UID#write(DataOutput)}
method with the stream.

@param	out the <code>ObjectOutput</code> instance to write
this <code>ObjID</code> to

@throws	IOException if an I/O error occurs while performing
this operation"
      end

      operation 7540379 "read"
	class_operation public return_type class_ref 956315 // ObjID
	nparams 1
	  param inout name "in" type class_ref 201627 // ObjectInput
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns a new <code>ObjID</code> instance by
unmarshalling a binary representation from an
<code>ObjectInput</code> instance.

<p>Specifically, this method first invokes the given stream's
{@link ObjectInput#readLong()} method to read an object number,
then it invokes {@link UID#read(DataInput)} with the
stream to read an address space identifier, and then it
creates and returns a new <code>ObjID</code> instance that
contains the object number and address space identifier that
were read from the stream.

@param	in the <code>ObjectInput</code> instance to read
<code>ObjID</code> from

@return	unmarshalled <code>ObjID</code> instance

@throws	IOException if an I/O error occurs while performing
this operation"
      end

      operation 7540507 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hash code value for this object identifier, the
object number.

@return	the hash code value for this object identifier"
      end

      operation 7540635 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares the specified object with this <code>ObjID</code> for
equality.

This method returns <code>true</code> if and only if the
specified object is an <code>ObjID</code> instance with the same
object number and address space identifier as this one.

@param	obj the object to compare this <code>ObjID</code> to

@return	<code>true</code> if the given object is equivalent to
this one, and <code>false</code> otherwise"
      end

      operation 7540763 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of this object identifier.

@return	a string representation of this object identifier


The address space identifier is only included in the string
representation if it does not denote the local address space
(or if the randomIDs property was set)."
      end

      class 957211 "InsecureRandom"
	visibility private 
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1861915 // <generalisation>
	  relation 1861915 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1861915 // <generalisation>
	    b parent class_ref 139547 // Random
	end

	attribute 2832795 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value "=  -698228687531590145L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " unnecessary serialVersionUID to keep watchdog tools happy "
	end

	attribute 2832923 "nextNum"
	  private explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 7540891 "nextLong"
	  public explicit_return_type "long"
	  nparams 0
	  
	  preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      extra_member 164635 "initialization"
	
	cpp "" ""
	java "  static {
	boolean randomIDs =
	    ((Boolean) java.security.AccessController.doPrivileged(
	        new sun.security.action.GetBooleanAction(
		    \"java.rmi.server.randomIDs\"))).booleanValue();

	if (randomIDs) {
	    generator = new SecureRandom();
	    mySpace = null;
	} else {
	    generator = new InsecureRandom();
	    /*
	     * The InsecureRandom implementation guarantees that object
	     * numbers will not repeat, so the same UID value can be used
	     * for all instances of ObjID.
	     */
	    mySpace = new UID();
	}
    }"
	php ""
	python ""
	idl ""
      end
    end

    class 956827 "ExportException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An <code>ExportException</code> is a <code>RemoteException</code>
thrown if an attempt to export a remote object fails.  A remote object is
exported via the constructors and <code>exportObject</code> methods of
<code>java.rmi.server.UnicastRemoteObject</code> and
<code>java.rmi.activation.Activatable</code>.

@version 1.12, 12/19/03
@author  Ann Wollrath
@since   JDK1.1
@see java.rmi.server.UnicastRemoteObject
@see java.rmi.activation.Activatable"
      classrelation 1860379 // <generalisation>
	relation 1860379 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1860379 // <generalisation>
	  b parent class_ref 233499 // RemoteException
      end

      attribute 2831387 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -9155485338494060170L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " indicate compatibility with JDK 1.1.x version of class "
      end

      operation 7537947 "ExportException"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>ExportException</code> with the specified
detail message.

@param s the detail message
@since JDK1.1"
      end

      operation 7538075 "ExportException"
	public explicit_return_type ""
	nparams 2
	  param in name "s" explicit_type "String"
	  param inout name "ex" type class_ref 165403 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>ExportException</code> with the specified
detail message and nested exception.

@param s the detail message
@param ex the nested exception
@since JDK1.1"
      end
    end

    class 956955 "LoaderHandler"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      java_annotation "@Deprecated
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<code>LoaderHandler</code> is an interface used internally by the RMI
runtime in previous implementation versions.  It should never be accessed
by application code.

@version 1.18, 05/18/04
@author  Ann Wollrath
@since   JDK1.1

@deprecated no replacement"
      attribute 2831515 "packagePrefix"
	class_attribute const_attribute public explicit_type "String"
	init_value "=  \"sun.rmi.server\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " package of system <code>LoaderHandler</code> implementation. "
      end

      operation 7538203 "loadClass"
	public return_type class_ref 164635 // Class
	nparams 1
	  param in name "name" explicit_type "String"
	nexceptions 2
	  exception class_ref 280091 // MalformedURLException
	  exception class_ref 201883 // ClassNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Loads a class from the location specified by the
<code>java.rmi.server.codebase</code> property.

@param  name the name of the class to load
@return the <code>Class</code> object representing the loaded class
@exception MalformedURLException
           if the system property <b>java.rmi.server.codebase</b>
           contains an invalid URL
@exception ClassNotFoundException
           if a definition for the class could not
           be found at the codebase location.
@since JDK1.1
@deprecated no replacement"
      end

      operation 7538331 "loadClass"
	public return_type class_ref 164635 // Class
	nparams 2
	  param inout name "codebase" type class_ref 269467 // URL
	  param in name "name" explicit_type "String"
	nexceptions 2
	  exception class_ref 280091 // MalformedURLException
	  exception class_ref 201883 // ClassNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Loads a class from a URL.

@param codebase  the URL from which to load the class
@param name      the name of the class to load
@return the <code>Class</code> object representing the loaded class
@exception MalformedURLException
           if the <code>codebase</code> paramater
           contains an invalid URL
@exception ClassNotFoundException
           if a definition for the class could not
           be found at the specified URL
@since JDK1.1
@deprecated no replacement"
      end

      operation 7538459 "getSecurityContext"
	public explicit_return_type "Object"
	nparams 1
	  param inout name "loader" type class_ref 163611 // ClassLoader
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Returns the security context of the given class loader.

@param loader  a class loader from which to get the security context
@return the security context
@since JDK1.1
@deprecated no replacement"
      end
    end

    class 957083 "LogStream"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@Deprecated
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<code>LogStream</code> provides a mechanism for logging errors that are
of possible interest to those monitoring a system.  

@version 1.20, 05/18/04
@author  Ann Wollrath (lots of code stolen from Ken Arnold)
@since   JDK1.1
@deprecated no replacement"
      classrelation 1860507 // <generalisation>
	relation 1860507 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1860507 // <generalisation>
	  b parent class_ref 162843 // PrintStream
      end

      classrelation 1860635 // known (<unidirectional association>)
	relation 1860635 --->
	  a role_name "known" init_value "=  new Hashtable(5)" class_relation private
	    comment " table mapping known log names to log stream objects 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1860635 // known (<unidirectional association>)
	  b parent class_ref 139035 // Hashtable
      end

      classrelation 1860763 // defaultStream (<unidirectional association>)
	relation 1860763 --->
	  a role_name "defaultStream" init_value "=  System.err" class_relation private
	    comment " default output stream for new logs 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1860763 // defaultStream (<unidirectional association>)
	  b parent class_ref 162843 // PrintStream
      end

      attribute 2831643 "name"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " log name for this log "
      end

      classrelation 1860891 // logOut (<unidirectional association>)
	relation 1860891 --->
	  a role_name "logOut" private
	    comment " stream where output of this log is sent to 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1860891 // logOut (<unidirectional association>)
	  b parent class_ref 183835 // OutputStream
      end

      classrelation 1861019 // logWriter (<unidirectional association>)
	relation 1861019 --->
	  a role_name "logWriter" private
	    comment " string writer for writing message prefixes to log stream 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1861019 // logWriter (<unidirectional association>)
	  b parent class_ref 905627 // OutputStreamWriter
      end

      classrelation 1861147 // buffer (<unidirectional association>)
	relation 1861147 --->
	  a role_name "buffer" init_value "=  new StringBuffer()" private
	    comment " string buffer used for constructing log message prefixes 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1861147 // buffer (<unidirectional association>)
	  b parent class_ref 198171 // StringBuffer
      end

      classrelation 1861275 // bufOut (<unidirectional association>)
	relation 1861275 --->
	  a role_name "bufOut" private
	    comment " stream used for buffering lines 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1861275 // bufOut (<unidirectional association>)
	  b parent class_ref 205595 // ByteArrayOutputStream
      end

      operation 7538587 "LogStream"
	private explicit_return_type ""
	nparams 2
	  param in name "name" explicit_type "String"
	  param inout name "out" type class_ref 183835 // OutputStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Create a new LogStream object.  Since this only constructor is
private, users must have a LogStream created through the \"log\"
method.
@param name string identifying messages from this log
@out output stream that log messages will be sent to
@since JDK1.1
@deprecated no replacement"
      end

      operation 7538715 "log"
	class_operation public return_type class_ref 957083 // LogStream
	nparams 1
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Return the LogStream identified by the given name.  If
a log corresponding to \"name\" does not exist, a log using
the default stream is created.
@param name name identifying the desired LogStream
@return log associated with given name
@since JDK1.1
@deprecated no replacement"
      end

      operation 7538843 "getDefaultStream"
	class_operation public return_type class_ref 162843 // PrintStream
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Return the current default stream for new logs.
@return default log stream
@see #setDefaultStream
@since JDK1.1
@deprecated no replacement"
      end

      operation 7538971 "setDefaultStream"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "newDefault" type class_ref 162843 // PrintStream
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Set the default stream for new logs.
@param newDefault new default log stream
@see #getDefaultStream
@since JDK1.1
@deprecated no replacement"
      end

      operation 7539099 "getOutputStream"
	public return_type class_ref 183835 // OutputStream
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Return the current stream to which output from this log is sent.
@return output stream for this log
@see #setOutputStream
@since JDK1.1
@deprecated no replacement"
      end

      operation 7539227 "setOutputStream"
	public explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 183835 // OutputStream
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Set the stream to which output from this log is sent.
@param out new output stream for this log
@see #getOutputStream
@since JDK1.1
@deprecated no replacement"
      end

      operation 7539355 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "b" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Write a byte of data to the stream.  If it is not a newline, then
the byte is appended to the internal buffer.  If it is a newline,
then the currently buffered line is sent to the log's output
stream, prefixed with the appropriate logging information.
@since JDK1.1
@deprecated no replacement"
      end

      operation 7539483 "write"
	public explicit_return_type "void"
	nparams 3
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Write a subarray of bytes.  Pass each through write byte method.
@since JDK1.1
@deprecated no replacement"
      end

      operation 7539611 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Return log name as string representation.
@return log name
@since JDK1.1
@deprecated no replacement"
      end

      attribute 2831771 "SILENT"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " log level constant (no logging). "
      end

      attribute 2831899 "BRIEF"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  10"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " log level constant (brief logging). "
      end

      attribute 2832027 "VERBOSE"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  20"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " log level constant (verbose logging). "
      end

      operation 7539739 "parseLevel"
	class_operation public explicit_return_type "int"
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Convert a string name of a logging level to its internal
integer representation.
@param s name of logging level (e.g., 'SILENT', 'BRIEF', 'VERBOSE')
@return corresponding integer log level
@since JDK1.1
@deprecated no replacement"
      end
    end

    class 957339 "RemoteObjectInvocationHandler"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An implementation of the <code>InvocationHandler</code> interface for
use with Java Remote Method Invocation (Java RMI).  This invocation
handler can be used in conjunction with a dynamic proxy instance as a
replacement for a pregenerated stub class.

<p>Applications are not expected to use this class directly.  A remote
object exported to use a dynamic proxy with {@link UnicastRemoteObject}
or {@link Activatable} has an instance of this class as that proxy's
invocation handler.

@version 1.3, 03/12/19
@author  Ann Wollrath
@since   1.5"
      classrelation 1862043 // <generalisation>
	relation 1862043 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1862043 // <generalisation>
	  b parent class_ref 522267 // RemoteObject
      end

      classrelation 1862171 // <realization>
	relation 1862171 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1862171 // <realization>
	  b parent class_ref 288411 // InvocationHandler
      end

      attribute 2833179 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  2L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      class 957467 "MethodToHash_Maps"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 7543195 "MethodToHash_Maps"
	  package explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7543323 "createMap"
	  protected return_type class_ref 136603 // Map
	  nparams 1
	    param inout name "remoteClass" type class_ref 164635 // Class
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 1862299 // methodToHash_Maps (<unidirectional association>)
	relation 1862299 --->
	  a role_name "methodToHash_Maps" init_value "= 
	new MethodToHash_Maps()" class_relation const_relation private
	    comment "
A weak hash map, mapping classes to weak hash maps that map
method objects to method hashes.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1862299 // methodToHash_Maps (<unidirectional association>)
	  b parent class_ref 957467 // MethodToHash_Maps
      end

      operation 7542299 "RemoteObjectInvocationHandler"
	public explicit_return_type ""
	nparams 1
	  param inout name "ref" type class_ref 522011 // RemoteRef
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <code>RemoteObjectInvocationHandler</code> constructed
with the specified <code>RemoteRef</code>.

@param ref the remote ref

@throws NullPointerException if <code>ref</code> is <code>null</code>"
      end

      operation 7542427 "invoke"
	public explicit_return_type "Object"
	nparams 3
	  param inout name "proxy" explicit_type "Object"
	  param inout name "method" type class_ref 170651 // Method
	  param inout name "args" explicit_type "Object"
	nexceptions 1
	  exception class_ref 164251 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Processes a method invocation made on the encapsulating
proxy instance, <code>proxy</code>, and returns the result.

<p><code>RemoteObjectInvocationHandler</code> implements this method
as follows:

<p>If <code>method</code> is one of the following methods, it
is processed as described below:

<ul>

<li>{@link Object#hashCode Object.hashCode}: Returns the hash
code value for the proxy.

<li>{@link Object#equals Object.equals}: Returns <code>true</code>
if the argument (<code>args[0]</code>) is an instance of a dynamic
proxy class and this invocation handler is equal to the invocation
handler of that argument, and returns <code>false</code> otherwise.

<li>{@link Object#toString Object.toString}: Returns a string
representation of the proxy.
</ul>

<p>Otherwise, a remote call is made as follows:

<ul>
<li>If <code>proxy</code> is not an instance of the interface
{@link Remote}, then an {@link IllegalArgumentException} is thrown.

<li>Otherwise, the {@link RemoteRef#invoke invoke} method is invoked
on this invocation handler's <code>RemoteRef</code>, passing
<code>proxy</code>, <code>method</code>, <code>args</code>, and the
method hash (defined in section 8.3 of the \"Java Remote Method
Invocation (RMI) Specification\") for <code>method</code>, and the
result is returned.

<li>If an exception is thrown by <code>RemoteRef.invoke</code> and
that exception is a checked exception that is not assignable to any
exception in the <code>throws</code> clause of the method
implemented by the <code>proxy</code>'s class, then that exception
is wrapped in an {@link UnexpectedException} and the wrapped
exception is thrown.  Otherwise, the exception thrown by
<code>invoke</code> is thrown by this method.
</ul>

<p>The semantics of this method are unspecified if the
arguments could not have been produced by an instance of some
valid dynamic proxy class containing this invocation handler.

@param proxy the proxy instance that the method was invoked on
@param method the <code>Method</code> instance corresponding to the
interface method invoked on the proxy instance
@param args an array of objects containing the values of the
arguments passed in the method invocation on the proxy instance, or
<code>null</code> if the method takes no arguments
@return the value to return from the method invocation on the proxy
instance 
@throws	Throwable the exception to throw from the method invocation 
on the proxy instance
@see"
      end

      operation 7542555 "invokeObjectMethod"
	private explicit_return_type "Object"
	nparams 3
	  param inout name "proxy" explicit_type "Object"
	  param inout name "method" type class_ref 170651 // Method
	  param inout name "args" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Handles java.lang.Object methods."
      end

      operation 7542683 "invokeRemoteMethod"
	private explicit_return_type "Object"
	nparams 3
	  param inout name "proxy" explicit_type "Object"
	  param inout name "method" type class_ref 170651 // Method
	  param inout name "args" explicit_type "Object"
	nexceptions 1
	  exception class_ref 165403 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Handles remote methods."
      end

      operation 7542811 "proxyToString"
	private explicit_return_type "String"
	nparams 1
	  param inout name "proxy" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation for a proxy that uses this invocation
handler."
      end

      operation 7542939 "readObjectNoData"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 203931 // InvalidObjectException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws InvalidObjectException unconditionally"
      end

      operation 7543067 "getMethodHash"
	class_operation private explicit_return_type "long"
	nparams 1
	  param inout name "method" type class_ref 170651 // Method
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the method hash for the specified method.  Subsequent calls
to \"getMethodHash\" passing the same method argument should be faster
since this method caches internally the result of the method to
method hash mapping.  The method hash is calculated using the
\"computeMethodHash\" method.

@param method the remote method
@return the method hash for the specified method"
      end
    end

    class 957723 "RMIClassLoader"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<code>RMIClassLoader</code> comprises static methods to support
dynamic class loading with RMI.  Included are methods for loading
classes from a network location (one or more URLs) and obtaining
the location from which an existing class should be loaded by
remote parties.  These methods are used by the RMI runtime when
marshalling and unmarshalling classes contained in the arguments
and return values of remote method calls, and they also may be
invoked directly by applications in order to mimic RMI's dynamic
class loading behavior.

<p>The implementation of the following static methods

<ul>

<li>{@link #loadClass(URL,String)}
<li>{@link #loadClass(String,String)}
<li>{@link #loadClass(String,String,ClassLoader)}
<li>{@link #loadProxyClass(String,String[],ClassLoader)}
<li>{@link #getClassLoader(String)}
<li>{@link #getClassAnnotation(Class)}

</ul>

is provided by an instance of {@link RMIClassLoaderSpi}, the
service provider interface for those methods.  When one of the
methods is invoked, its behavior is to delegate to a corresponding
method on the service provider instance.  The details of how each
method delegates to the provider instance is described in the
documentation for each particular method.

<p>The service provider instance is chosen as follows:

<ul>

<li>If the system property
<code>java.rmi.server.RMIClassLoaderSpi</code> is defined, then if
its value equals the string <code>\"default\"</code>, the provider
instance will be the value returned by an invocation of the {@link
#getDefaultProviderInstance()} method, and for any other value, if
a class named with the value of the property can be loaded by the
system class loader (see {@link ClassLoader#getSystemClassLoader})
and that class is assignable to {@link RMIClassLoaderSpi} and has a
public no-argument constructor, then that constructor will be
invoked to create the provider instance.  If the property is
defined but any other of those conditions are not true, then an
unspecified <code>Error</code> will be thrown to code that attempts
to use <code>RMIClassLoader</code>, indicating the failure to
obtain a provider instance.

<li>If a resource named
<code>META-INF/services/java.rmi.server.RMIClassLoaderSpi</code> is
visible to the system class loader, then the contents of that
resource are interpreted as a provider-configuration file, and the
first class name specified in that file is used as the provider
class name.  If a class with that name can be loaded by the system
class loader and that class is assignable to {@link
RMIClassLoaderSpi} and has a public no-argument constructor, then
that constructor will be invoked to create the provider instance.
If the resource is found but a provider cannot be instantiated as
described, then an unspecified <code>Error</code> will be thrown to
code that attempts to use <code>RMIClassLoader</code>, indicating
the failure to obtain a provider instance.

<li>Otherwise, the provider instance will be the value returned by
an invocation of the {@link #getDefaultProviderInstance()} method.

</ul>

@version	1.40, 04/05/18
@author	Ann Wollrath
@author	Peter Jones
@author	Laird Dornin
@see		RMIClassLoaderSpi
@since	JDK1.1"
      classrelation 1862683 // defaultProvider (<unidirectional association>)
	relation 1862683 --->
	  a role_name "defaultProvider" init_value "= 
	newDefaultProviderInstance()" class_relation const_relation private
	    comment " \"default\" provider instance 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1862683 // defaultProvider (<unidirectional association>)
	  b parent class_ref 957851 // RMIClassLoaderSpi
      end

      classrelation 1862811 // provider (<unidirectional association>)
	relation 1862811 --->
	  a role_name "provider" init_value "= 
	(RMIClassLoaderSpi) java.security.AccessController.doPrivileged(
	new java.security.PrivilegedAction() {
	    public Object run() { return initializeProvider(); }
	})" class_relation const_relation private
	    comment " provider instance 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1862811 // provider (<unidirectional association>)
	  b parent class_ref 957851 // RMIClassLoaderSpi
      end

      operation 7543835 "RMIClassLoader"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Disallow anyone from creating one of these."
      end

      operation 7543963 "loadClass"
	class_operation public return_type class_ref 164635 // Class
	nparams 1
	  param in name "name" explicit_type "String"
	nexceptions 2
	  exception class_ref 280091 // MalformedURLException
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Loads the class with the specified <code>name</code>.

<p>This method delegates to {@link #loadClass(String,String)},
passing <code>null</code> as the first argument and
<code>name</code> as the second argument.

@param	name the name of the class to load

@return	the <code>Class</code> object representing the loaded class

@throws MalformedURLException if a provider-specific URL used
to load classes is invalid

@throws	ClassNotFoundException if a definition for the class
could not be found at the codebase location

@deprecated replaced by <code>loadClass(String,String)</code> method
@see #loadClass(String,String)"
      end

      operation 7544091 "loadClass"
	class_operation public return_type class_ref 164635 // Class
	nparams 2
	  param inout name "codebase" type class_ref 269467 // URL
	  param in name "name" explicit_type "String"
	nexceptions 2
	  exception class_ref 280091 // MalformedURLException
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Loads a class from a codebase URL.

If <code>codebase</code> is <code>null</code>, then this method
will behave the same as {@link #loadClass(String,String)} with a
<code>null</code> <code>codebase</code> and the given class name.

<p>This method delegates to the
{@link RMIClassLoaderSpi#loadClass(String,String,ClassLoader)}
method of the provider instance, passing the result of invoking
{@link URL#toString} on the given URL (or <code>null</code> if
<code>codebase</code> is null) as the first argument,
<code>name</code> as the second argument,
and <code>null</code> as the third argument.

@param	codebase the URL to load the class from, or <code>null</code>

@param	name the name of the class to load

@return	the <code>Class</code> object representing the loaded class

@throws MalformedURLException if <code>codebase</code> is
<code>null</code> and a provider-specific URL used
to load classes is invalid

@throws	ClassNotFoundException if a definition for the class
could not be found at the specified URL"
      end

      operation 7544219 "loadClass"
	class_operation public return_type class_ref 164635 // Class
	nparams 2
	  param in name "codebase" explicit_type "String"
	  param in name "name" explicit_type "String"
	nexceptions 2
	  exception class_ref 280091 // MalformedURLException
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Loads a class from a codebase URL path.

<p>This method delegates to the
{@link RMIClassLoaderSpi#loadClass(String,String,ClassLoader)}
method of the provider instance, passing <code>codebase</code>
as the first argument, <code>name</code> as the second argument,
and <code>null</code> as the third argument.

@param	codebase the list of URLs (separated by spaces) to load
the class from, or <code>null</code>

@param	name the name of the class to load

@return	the <code>Class</code> object representing the loaded class

@throws MalformedURLException if <code>codebase</code> is
non-<code>null</code> and contains an invalid URL, or if
<code>codebase</code> is <code>null</code> and a provider-specific
URL used to load classes is invalid

@throws	ClassNotFoundException if a definition for the class
could not be found at the specified location

@since	1.2"
      end

      operation 7544347 "loadClass"
	class_operation public return_type class_ref 164635 // Class
	nparams 3
	  param in name "codebase" explicit_type "String"
	  param in name "name" explicit_type "String"
	  param inout name "defaultLoader" type class_ref 163611 // ClassLoader
	nexceptions 2
	  exception class_ref 280091 // MalformedURLException
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Loads a class from a codebase URL path, optionally using the
supplied loader.

This method should be used when the caller would like to make
available to the provider implementation an additional contextual
class loader to consider, such as the loader of a caller on the
stack.  Typically, a provider implementation will attempt to
resolve the named class using the given <code>defaultLoader</code>,
if specified, before attempting to resolve the class from the
codebase URL path.

<p>This method delegates to the
{@link RMIClassLoaderSpi#loadClass(String,String,ClassLoader)}
method of the provider instance, passing <code>codebase</code>
as the first argument, <code>name</code> as the second argument,
and <code>defaultLoader</code> as the third argument.

@param	codebase the list of URLs (separated by spaces) to load
the class from, or <code>null</code>

@param	name the name of the class to load

@param	defaultLoader additional contextual class loader
to use, or <code>null</code>

@return	the <code>Class</code> object representing the loaded class

@throws MalformedURLException if <code>codebase</code> is
non-<code>null</code> and contains an invalid URL, or if
<code>codebase</code> is <code>null</code> and a provider-specific
URL used to load classes is invalid

@throws	ClassNotFoundException if a definition for the class
could not be found at the specified location

@since	1.4"
      end

      operation 7544475 "loadProxyClass"
	class_operation public return_type class_ref 164635 // Class
	nparams 3
	  param in name "codebase" explicit_type "String"
	  param in name "interfaces" explicit_type "String"
	  param inout name "defaultLoader" type class_ref 163611 // ClassLoader
	nexceptions 2
	  exception class_ref 201883 // ClassNotFoundException
	  exception class_ref 280091 // MalformedURLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Loads a dynamic proxy class (see {@link java.lang.reflect.Proxy})
that implements a set of interfaces with the given names
from a codebase URL path.

<p>The interfaces will be resolved similar to classes loaded via
the {@link #loadClass(String,String)} method using the given
<code>codebase</code>.

<p>This method delegates to the
{@link RMIClassLoaderSpi#loadProxyClass(String,String[],ClassLoader)}
method of the provider instance, passing <code>codebase</code>
as the first argument, <code>interfaces</code> as the second argument,
and <code>defaultLoader</code> as the third argument.

@param	codebase the list of URLs (space-separated) to load
classes from, or <code>null</code>

@param	interfaces the names of the interfaces for the proxy class
to implement

@param	defaultLoader additional contextual class loader
to use, or <code>null</code>

@return	a dynamic proxy class that implements the named interfaces

@throws	MalformedURLException if <code>codebase</code> is
non-<code>null</code> and contains an invalid URL, or
if <code>codebase</code> is <code>null</code> and a provider-specific
URL used to load classes is invalid

@throws	ClassNotFoundException if a definition for one of
the named interfaces could not be found at the specified location,
or if creation of the dynamic proxy class failed (such as if
{@link java.lang.reflect.Proxy#getProxyClass(ClassLoader,Class[])}
would throw an <code>IllegalArgumentException</code> for the given
interface list)

@since	1.4"
      end

      operation 7544603 "getClassLoader"
	class_operation public return_type class_ref 163611 // ClassLoader
	nparams 1
	  param in name "codebase" explicit_type "String"
	nexceptions 2
	  exception class_ref 280091 // MalformedURLException
	  exception class_ref 203419 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a class loader that loads classes from the given codebase
URL path.

<p>The class loader returned is the class loader that the
{@link #loadClass(String,String)} method would use to load classes
for the same <code>codebase</code> argument.

<p>This method delegates to the
{@link RMIClassLoaderSpi#getClassLoader(String)} method
of the provider instance, passing <code>codebase</code> as the argument.

<p>If there is a security manger, its <code>checkPermission</code>
method will be invoked with a
<code>RuntimePermission(\"getClassLoader\")</code> permission;
this could result in a <code>SecurityException</code>.
The provider implementation of this method may also perform further
security checks to verify that the calling context has permission to
connect to all of the URLs in the codebase URL path.

@param	codebase the list of URLs (space-separated) from which
the returned class loader will load classes from, or <code>null</code>

@return a class loader that loads classes from the given codebase URL
path

@throws	MalformedURLException if <code>codebase</code> is
non-<code>null</code> and contains an invalid URL, or
if <code>codebase</code> is <code>null</code> and a provider-specific
URL used to identify the class loader is invalid

@throws	SecurityException if there is a security manager and the
invocation of its <code>checkPermission</code> method fails, or
if the caller does not have permission to connect to all of the
URLs in the codebase URL path

@since	1.3"
      end

      operation 7544731 "getClassAnnotation"
	class_operation public explicit_return_type "String"
	nparams 1
	  param inout name "cl" type class_ref 164635 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the annotation string (representing a location for
the class definition) that RMI will use to annotate the class
descriptor when marshalling objects of the given class.

<p>This method delegates to the
{@link RMIClassLoaderSpi#getClassAnnotation(Class)} method
of the provider instance, passing <code>cl</code> as the argument.

@param	cl the class to obtain the annotation for

@return	a string to be used to annotate the given class when
it gets marshalled, or <code>null</code>

@throws	NullPointerException if <code>cl</code> is <code>null</code>

@since	1.2


REMIND: Should we say that the returned class annotation will or
should be a (space-separated) list of URLs?"
      end

      operation 7544859 "getDefaultProviderInstance"
	class_operation public return_type class_ref 957851 // RMIClassLoaderSpi
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the canonical instance of the default provider
for the service provider interface {@link RMIClassLoaderSpi}.
If the system property <code>java.rmi.server.RMIClassLoaderSpi</code>
is not defined, then the <code>RMIClassLoader</code> static
methods

<ul>

<li>{@link #loadClass(URL,String)}
<li>{@link #loadClass(String,String)}
<li>{@link #loadClass(String,String,ClassLoader)}
<li>{@link #loadProxyClass(String,String[],ClassLoader)}
<li>{@link #getClassLoader(String)}
<li>{@link #getClassAnnotation(Class)}

</ul>

will use the canonical instance of the default provider
as the service provider instance.

<p>If there is a security manager, its
<code>checkPermission</code> method will be invoked with a
<code>RuntimePermission(\"setFactory\")</code> permission; this
could result in a <code>SecurityException</code>.

<p>The default service provider instance implements
{@link RMIClassLoaderSpi} as follows:

<blockquote>

<p>The <b>{@link RMIClassLoaderSpi#getClassAnnotation(Class)
getClassAnnotation}</b> method returns a <code>String</code>
representing the codebase URL path that a remote party should
use to download the definition for the specified class.  The
format of the returned string is a path of URLs separated by
spaces.

The codebase string returned depends on the defining class
loader of the specified class:

<ul>

<p><li>If the class loader is the system class loader (see
{@link ClassLoader#getSystemClassLoader}), a parent of the
system class loader such as the loader used for installed
extensions, or the bootstrap class loader (which may be
represented by <code>null</code>), then the value of the
<code>java.rmi.server.codebase</code> property (or possibly an
earlier cached value) is returned, or
<code>null</code> is returned if that property is not set.

<p><li>Otherwise, if the class loader is an instance of
<code>URLClassLoader</code>, then the returned string is a
space-separated list of the external forms of the URLs returned
by invoking the <code>getURLs</code> methods of the loader.  If
the <code>URLClassLoader</code> was created by this provider to
service an invocation of its <code>loadClass</code> or
<code>loadProxyClass</code> methods, then no permissions are
required to get the associated codebase string.  If it is an
arbitrary other <code>URLClassLoader</code> instance, then if
there is a security manager, its <code>checkPermission</code>
method will be invoked once for each URL returned by the
<code>getURLs</code> method, with the permission returned by
invoking <code>openConnection().getPermission()</code> on each
URL; if any of those invocations throws a
<code>SecurityException</code> or an <code>IOException</code>,
then the value of the <code>java.rmi.server.codebase</code>
property (or possibly an earlier cached value) is returned, or
<code>null</code> is returned if that property is not set.

<p><li>Finally, if the class loader is not an instance of
<code>URLClassLoader</code>, then the value of the
<code>java.rmi.server.codebase</code> property (or possibly an
earlier cached value) is returned, or
<code>null</code> is returned if that property is not set.

</ul>

<p>For the implementations of the methods described below,
which all take a <code>String</code> parameter named
<code>codebase</code> that is a space-separated list of URLs,
each invocation has an associated <i>codebase loader</i> that
is identified using the <code>codebase</code> argument in
conjunction with the current thread's context class loader (see
{@link Thread#getContextClassLoader()}).  When there is a
security manager, this provider maintains an internal table of
class loader instances (which are at least instances of {@link
java.net.URLClassLoader}) keyed by the pair of their parent
class loader and their codebase URL path (an ordered list of
URLs).  If the <code>codebase</code> argument is <code>null</code>,
the codebase URL path is the value of the system property
<code>java.rmi.server.codebase</code> or possibly an 
earlier cached value.  For a given codebase URL path passed as the
<code>codebase</code> argument to an invocation of one of the
below methods in a given context, the codebase loader is the
loader in the table with the specified codebase URL path and
the current thread's context class loader as its parent.  If no
such loader exists, then one is created and added to the table.
The table does not maintain strong references to its contained
loaders, in order to allow them and their defined classes to be
garbage collected when not otherwise reachable.  In order to
prevent arbitrary untrusted code from being implicitly loaded
into a virtual machine with no security manager, if there is no
security manager set, the codebase loader is just the current
thread's context class loader (the supplied codebase URL path
is ignored, so remote class loading is disabled).

<p>The <b>{@link RMIClassLoaderSpi#getClassLoader(String)
getClassLoader}</b> method returns the codebase loader for the
specified codebase URL path.  If there is a security manager,
then if the calling context does not have permission to connect
to all of the URLs in the codebase URL path, a
<code>SecurityException</code> will be thrown.

<p>The <b>{@link
RMIClassLoaderSpi#loadClass(String,String,ClassLoader)
loadClass}</b> method attempts to load the class with the
specified name as follows:

<blockquote>

If the <code>defaultLoader</code> argument is
non-<code>null</code>, it first attempts to load the class with the
specified <code>name</code> using the
<code>defaultLoader</code>, such as by evaluating

<pre>
    Class.forName(name, false, defaultLoader)
</pre>

If the class is successfully loaded from the
<code>defaultLoader</code>, that class is returned.  If an
exception other than <code>ClassNotFoundException</code> is
thrown, that exception is thrown to the caller.

<p>Next, the <code>loadClass</code> method attempts to load the
class with the specified <code>name</code> using the codebase
loader for the specified codebase URL path.
If there is a security manager, then the calling context
must have permission to connect to all of the URLs in the
codebase URL path; otherwise, the current thread's context
class loader will be used instead of the codebase loader.

</blockquote>

<p>The <b>{@link
RMIClassLoaderSpi#loadProxyClass(String,String[],ClassLoader)
loadProxyClass}</b> method attempts to return a dynamic proxy
class with the named interface as follows:

<blockquote>

<p>If the <code>defaultLoader</code> argument is
non-<code>null</code> and all of the named interfaces can be
resolved through that loader, then,

<ul>

<li>if all of the resolved interfaces are <code>public</code>,
then it first attempts to obtain a dynamic proxy class (using
{@link
java.lang.reflect.Proxy#getProxyClass(ClassLoader,Class[])
Proxy.getProxyClass}) for the resolved interfaces defined in
the codebase loader; if that attempt throws an
<code>IllegalArgumentException</code>, it then attempts to
obtain a dynamic proxy class for the resolved interfaces
defined in the <code>defaultLoader</code>.  If both attempts
throw <code>IllegalArgumentException</code>, then this method
throws a <code>ClassNotFoundException</code>.  If any other
exception is thrown, that exception is thrown to the caller.

<li>if all of the non-<code>public</code> resolved interfaces
are defined in the same class loader, then it attempts to
obtain a dynamic proxy class for the resolved interfaces
defined in that loader.

<li>otherwise, a <code>LinkageError</code> is thrown (because a
class that implements all of the specified interfaces cannot be
defined in any loader).

</ul>

<p>Otherwise, if all of the named interfaces can be resolved
through the codebase loader, then,

<ul>

<li>if all of the resolved interfaces are <code>public</code>,
then it attempts to obtain a dynamic proxy class for the
resolved interfaces in the codebase loader.  If the attempt
throws an <code>IllegalArgumentException</code>, then this
method throws a <code>ClassNotFoundException</code>.

<li>if all of the non-<code>public</code> resolved interfaces
are defined in the same class loader, then it attempts to
obtain a dynamic proxy class for the resolved interfaces
defined in that loader.

<li>otherwise, a <code>LinkageError</code> is thrown (because a
class that implements all of the specified interfaces cannot be
defined in any loader).

</ul>

<p>Otherwise, a <code>ClassNotFoundException</code> is thrown
for one of the named interfaces that could not be resolved.

</blockquote>

</blockquote>

@return	the canonical instance of the default service provider

@throws	SecurityException if there is a security manager and the
invocation of its <code>checkPermission</code> method fails

@since	1.4"
      end

      operation 7544987 "getSecurityContext"
	class_operation public explicit_return_type "Object"
	nparams 1
	  param inout name "loader" type class_ref 163611 // ClassLoader
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Returns the security context of the given class loader.

@param	loader a class loader from which to get the security context

@return	the security context

@deprecated no replacement.  As of the Java 2 platform v1.2, RMI no
longer uses this method to obtain a class loader's security context.
@see java.lang.SecurityManager#getSecurityContext()"
      end

      operation 7545115 "newDefaultProviderInstance"
	class_operation private return_type class_ref 957851 // RMIClassLoaderSpi
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an instance of the default provider class."
      end

      operation 7545243 "initializeProvider"
	class_operation private return_type class_ref 957851 // RMIClassLoaderSpi
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Chooses provider instance, following above documentation.

This method assumes that it has been invoked in a privileged block."
      end
    end

    class 957851 "RMIClassLoaderSpi"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<code>RMIClassLoaderSpi</code> is the service provider interface for
<code>RMIClassLoader</code>.

In particular, an <code>RMIClassLoaderSpi</code> instance provides an
implementation of the following static methods of
<code>RMIClassLoader</code>:

<ul>

<li>{@link RMIClassLoader#loadClass(URL,String)}
<li>{@link RMIClassLoader#loadClass(String,String)}
<li>{@link RMIClassLoader#loadClass(String,String,ClassLoader)}
<li>{@link RMIClassLoader#loadProxyClass(String,String[],ClassLoader)}
<li>{@link RMIClassLoader#getClassLoader(String)}
<li>{@link RMIClassLoader#getClassAnnotation(Class)}

</ul>

When one of those methods is invoked, its behavior is to delegate
to a corresponding method on an instance of this class.
The details of how each method delegates to the provider instance is
described in the documentation for each particular method.
See the documentation for {@link RMIClassLoader} for a description
of how a provider instance is chosen.

@version	1.14, 04/05/05
@author	Peter Jones
@author	Laird Dornin
@see		RMIClassLoader
@since	JDK1.4"
      operation 7545371 "loadClass"
	abstract public return_type class_ref 164635 // Class
	nparams 3
	  param in name "codebase" explicit_type "String"
	  param in name "name" explicit_type "String"
	  param inout name "defaultLoader" type class_ref 163611 // ClassLoader
	nexceptions 2
	  exception class_ref 280091 // MalformedURLException
	  exception class_ref 201883 // ClassNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Provides the implementation for
{@link RMIClassLoader#loadClass(URL,String)},
{@link RMIClassLoader#loadClass(String,String)}, and
{@link RMIClassLoader#loadClass(String,String,ClassLoader)}.

Loads a class from a codebase URL path, optionally using the
supplied loader.

Typically, a provider implementation will attempt to
resolve the named class using the given <code>defaultLoader</code>,
if specified, before attempting to resolve the class from the
codebase URL path.

<p>An implementation of this method must either return a class
with the given name or throw an exception.

@param	codebase the list of URLs (separated by spaces) to load
the class from, or <code>null</code>

@param	name the name of the class to load

@param	defaultLoader additional contextual class loader
to use, or <code>null</code>

@return	the <code>Class</code> object representing the loaded class

@throws	MalformedURLException if <code>codebase</code> is
non-<code>null</code> and contains an invalid URL, or
if <code>codebase</code> is <code>null</code> and a provider-specific
URL used to load classes is invalid

@throws	ClassNotFoundException if a definition for the class
could not be found at the specified location"
      end

      operation 7545499 "loadProxyClass"
	abstract public return_type class_ref 164635 // Class
	nparams 3
	  param in name "codebase" explicit_type "String"
	  param in name "interfaces" explicit_type "String"
	  param inout name "defaultLoader" type class_ref 163611 // ClassLoader
	nexceptions 2
	  exception class_ref 280091 // MalformedURLException
	  exception class_ref 201883 // ClassNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Provides the implementation for
{@link RMIClassLoader#loadProxyClass(String,String[],ClassLoader)}.

Loads a dynamic proxy class (see {@link java.lang.reflect.Proxy}
that implements a set of interfaces with the given names
from a codebase URL path, optionally using the supplied loader.

<p>An implementation of this method must either return a proxy
class that implements the named interfaces or throw an exception.

@param	codebase the list of URLs (space-separated) to load
classes from, or <code>null</code>

@param	interfaces the names of the interfaces for the proxy class
to implement

@return	a dynamic proxy class that implements the named interfaces

@param	defaultLoader additional contextual class loader
to use, or <code>null</code>

@throws	MalformedURLException if <code>codebase</code> is
non-<code>null</code> and contains an invalid URL, or
if <code>codebase</code> is <code>null</code> and a provider-specific
URL used to load classes is invalid

@throws	ClassNotFoundException if a definition for one of
the named interfaces could not be found at the specified location,
or if creation of the dynamic proxy class failed (such as if
{@link java.lang.reflect.Proxy#getProxyClass(ClassLoader,Class[])}
would throw an <code>IllegalArgumentException</code> for the given
interface list)"
      end

      operation 7545627 "getClassLoader"
	abstract public return_type class_ref 163611 // ClassLoader
	nparams 1
	  param in name "codebase" explicit_type "String"
	nexceptions 1
	  exception class_ref 280091 // MalformedURLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Provides the implementation for
{@link RMIClassLoader#getClassLoader(String)}.

Returns a class loader that loads classes from the given codebase
URL path.

<p>If there is a security manger, its <code>checkPermission</code>
method will be invoked with a
<code>RuntimePermission(\"getClassLoader\")</code> permission;
this could result in a <code>SecurityException</code>.
The implementation of this method may also perform further security
checks to verify that the calling context has permission to connect
to all of the URLs in the codebase URL path.

@param	codebase the list of URLs (space-separated) from which
the returned class loader will load classes from, or <code>null</code>

@return a class loader that loads classes from the given codebase URL
path

@throws	MalformedURLException if <code>codebase</code> is
non-<code>null</code> and contains an invalid URL, or
if <code>codebase</code> is <code>null</code> and a provider-specific
URL used to identify the class loader is invalid

@throws	SecurityException if there is a security manager and the
invocation of its <code>checkPermission</code> method fails, or
if the caller does not have permission to connect to all of the
URLs in the codebase URL path"
      end

      operation 7545755 "getClassAnnotation"
	abstract public explicit_return_type "String"
	nparams 1
	  param inout name "cl" type class_ref 164635 // Class
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " SecurityException

Provides the implementation for
{@link RMIClassLoader#getClassAnnotation(Class)}.

Returns the annotation string (representing a location for
the class definition) that RMI will use to annotate the class
descriptor when marshalling objects of the given class.

@param	cl the class to obtain the annotation for

@return	a string to be used to annotate the given class when
it gets marshalled, or <code>null</code>

@throws	NullPointerException if <code>cl</code> is <code>null</code>"
      end
    end

    class 957979 "RMIFailureHandler"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An <code>RMIFailureHandler</code> can be registered via the
<code>RMISocketFactory.setFailureHandler</code> call. The
<code>failure</code> method of the handler is invoked when the RMI
runtime is unable to create a <code>ServerSocket</code> to listen
for incoming calls. The <code>failure</code> method returns a boolean
indicating whether the runtime should attempt to re-create the
<code>ServerSocket</code>.

@author 	Ann Wollrath
@version	@(#)RMIFailureHandler.java	1.11, 03/12/19
@since 	JDK1.1"
      operation 7546011 "failure"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "ex" type class_ref 165403 // Exception
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The <code>failure</code> callback is invoked when the RMI
runtime is unable to create a <code>ServerSocket</code> via the
<code>RMISocketFactory</code>. An <code>RMIFailureHandler</code>
is registered via a call to
<code>RMISocketFacotry.setFailureHandler</code>.  If no failure
handler is installed, the default behavior is to attempt to
re-create the ServerSocket.

@param ex the exception that occurred during <code>ServerSocket</code>
          creation
@return if true, the RMI runtime attempts to retry
<code>ServerSocket</code> creation
@see java.rmi.server.RMISocketFactory#setFailureHandler(RMIFailureHandler)
@since JDK1.1"
      end
    end

    class 958107 "RMISocketFactory"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An <code>RMISocketFactory</code> instance is used by the RMI runtime
in order to obtain client and server sockets for RMI calls.  An
application may use the <code>setSocketFactory</code> method to
request that the RMI runtime use its socket factory instance
instead of the default implementation.<p>

The default socket factory implementation used goes through a
three-tiered approach to creating client sockets. First, a direct
socket connection to the remote VM is attempted.  If that fails
(due to a firewall), the runtime uses HTTP with the explicit port
number of the server.  If the firewall does not allow this type of
communication, then HTTP to a cgi-bin script on the server is used
to POST the RMI call.<p>

@version 1.21, 12/19/03
@author  Ann Wollrath
@author  Peter Jones
@since   JDK1.1"
      classrelation 1862939 // <realization>
	relation 1862939 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1862939 // <realization>
	  b parent class_ref 522651 // RMIClientSocketFactory
      end

      classrelation 1863067 // <realization>
	relation 1863067 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1863067 // <realization>
	  b parent class_ref 522779 // RMIServerSocketFactory
      end

      classrelation 1863195 // factory (<unidirectional association>)
	relation 1863195 --->
	  a role_name "factory" init_value "=  null" class_relation private
	    comment " Client/server socket factory to be used by RMI runtime 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1863195 // factory (<unidirectional association>)
	  b parent class_ref 958107 // RMISocketFactory
      end

      classrelation 1863323 // defaultSocketFactory (<unidirectional association>)
	relation 1863323 --->
	  a role_name "defaultSocketFactory" class_relation private
	    comment " default socket factory used by this RMI implementation 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1863323 // defaultSocketFactory (<unidirectional association>)
	  b parent class_ref 958107 // RMISocketFactory
      end

      classrelation 1863451 // handler (<unidirectional association>)
	relation 1863451 --->
	  a role_name "handler" init_value "=  null" class_relation private
	    comment " Handler for socket creation failure 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1863451 // handler (<unidirectional association>)
	  b parent class_ref 957979 // RMIFailureHandler
      end

      operation 7546267 "RMISocketFactory"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>RMISocketFactory</code>.
@since JDK1.1"
      end

      operation 7546395 "createSocket"
	abstract public return_type class_ref 235419 // Socket
	nparams 2
	  param in name "host" explicit_type "String"
	  param in name "port" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a client socket connected to the specified host and port.
@param  host   the host name
@param  port   the port number
@return a socket connected to the specified host and port.
@exception IOException if an I/O error occurs during socket creation
@since JDK1.1"
      end

      operation 7546523 "createServerSocket"
	abstract public return_type class_ref 235163 // ServerSocket
	nparams 1
	  param in name "port" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a server socket on the specified port (port 0 indicates
an anonymous port).
@param  port the port number
@return the server socket on the specified port
@exception IOException if an I/O error occurs during server socket
creation
@since JDK1.1"
      end

      operation 7546651 "setSocketFactory"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "fac" type class_ref 958107 // RMISocketFactory
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the global socket factory from which RMI gets sockets (if the
remote object is not associated with a specific client and/or server
socket factory). The RMI socket factory can only be set once. Note: The
RMISocketFactory may only be set if the current security manager allows
setting a socket factory; if disallowed, a SecurityException will be
thrown.
@param fac the socket factory
@exception IOException if the RMI socket factory is already set
@exception  SecurityException  if a security manager exists and its  
            <code>checkSetFactory</code> method doesn't allow the operation.
@see #getSocketFactory
@see java.lang.SecurityManager#checkSetFactory()
@since JDK1.1"
      end

      operation 7546779 "getSocketFactory"
	class_operation public return_type class_ref 958107 // RMISocketFactory
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the socket factory set by the <code>setSocketFactory</code>
method. Returns <code>null</code> if no socket factory has been
set.
@return the socket factory
@see #setSocketFactory(RMISocketFactory)
@since JDK1.1"
      end

      operation 7546907 "getDefaultSocketFactory"
	class_operation public return_type class_ref 958107 // RMISocketFactory
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a reference to the default socket factory used
by this RMI implementation.  This will be the factory used
by the RMI runtime when <code>getSocketFactory</code>
returns <code>null</code>.
@return the default RMI socket factory
@since JDK1.1"
      end

      operation 7547035 "setFailureHandler"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "fh" type class_ref 957979 // RMIFailureHandler
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the failure handler to be called by the RMI runtime if server
socket creation fails.  By default, if no failure handler is installed
and server socket creation fails, the RMI runtime does attempt to
recreate the server socket.

<p>If there is a security manager, this method first calls
the security manager's <code>checkSetFactory</code> method 
to ensure the operation is allowed. 
This could result in a <code>SecurityException</code>.

@param fh the failure handler
@throws	SecurityException  if a security manager exists and its  
		<code>checkSetFactory</code> method doesn't allow the
		operation.
@see #getFailureHandler
@see java.rmi.server.RMIFailureHandler#failure(Exception)
@since JDK1.1"
      end

      operation 7547163 "getFailureHandler"
	class_operation public return_type class_ref 957979 // RMIFailureHandler
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the handler for socket creation failure set by the
<code>setFailureHandler</code> method.
@return the failure handler
@see #setFailureHandler(RMIFailureHandler)
@since JDK1.1"
      end
    end

    class 958235 "ServerCloneException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A <code>ServerCloneException</code> is thrown if a remote exception occurs
during the cloning of a <code>UnicastRemoteObject</code>.

<p>As of release 1.4, this exception has been retrofitted to conform to
the general purpose exception-chaining mechanism.  The \"nested exception\"
that may be provided at construction time and accessed via the public
{@link #detail} field is now known as the <i>cause</i>, and may be
accessed via the {@link Throwable#getCause()} method, as well as
the aforementioned \"legacy field.\"

<p>Invoking the method {@link Throwable#initCause(Throwable)} on an
instance of <code>ServerCloneException</code> always throws {@link
IllegalStateException}.

@version 1.20, 12/19/03
@author  Ann Wollrath
@since   JDK1.1
@see     java.rmi.server.UnicastRemoteObject#clone()"
      classrelation 1863579 // <generalisation>
	relation 1863579 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1863579 // <generalisation>
	  b parent class_ref 383643 // CloneNotSupportedException
      end

      classrelation 1863707 // detail (<unidirectional association>)
	relation 1863707 --->
	  a role_name "detail" public
	    comment "
The cause of the exception.

<p>This field predates the general-purpose exception chaining facility.
The {@link Throwable#getCause()} method is now the preferred means of
obtaining this information.

@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1863707 // detail (<unidirectional association>)
	  b parent class_ref 165403 // Exception
      end

      attribute 2833435 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  6617456357664815945L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " indicate compatibility with JDK 1.1.x version of class "
      end

      operation 7547291 "ServerCloneException"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>ServerCloneException</code> with the specified
detail message.

@param s the detail message."
      end

      operation 7547419 "ServerCloneException"
	public explicit_return_type ""
	nparams 2
	  param in name "s" explicit_type "String"
	  param inout name "cause" type class_ref 165403 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>ServerCloneException</code> with the specified
detail message and cause.

@param s the detail message.
@param cause the cause"
      end

      operation 7547547 "getMessage"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the detail message, including the message from the cause, if
any, of this exception.

@return the detail message"
      end

      operation 7547675 "getCause"
	public return_type class_ref 164251 // Throwable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the cause of this exception.  This method returns the value
of the {@link #detail} field.

@return  the cause, which may be <tt>null</tt>.
@since   1.4"
      end
    end

    class 958363 "ServerRef"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A ServerRef represents the server-side handle for a remote object
implementation.

@version 1.16, 12/19/03
@author  Ann Wollrath
@since   JDK1.1"
      classrelation 1863963 // <generalisation>
	relation 1863963 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1863963 // <generalisation>
	  b parent class_ref 522011 // RemoteRef
      end

      attribute 2833691 "serialVersionUID"
	class_attribute const_attribute public explicit_type "long"
	init_value "=  -4557750989390278438L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " indicate compatibility with JDK 1.1.x version of class. "
      end

      operation 7548059 "exportObject"
	public return_type class_ref 955035 // RemoteStub
	nparams 2
	  param inout name "obj" type class_ref 233371 // Remote
	  param inout name "data" explicit_type "Object"
	nexceptions 1
	  exception class_ref 233499 // RemoteException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a client stub object for the supplied Remote object.
If the call completes successfully, the remote object should
be able to accept incoming calls from clients.
@param obj the remote object implementation
@param data information necessary to export the object
@return the stub for the remote object
@exception RemoteException if an exception occurs attempting
to export the object (e.g., stub class could not be found)
@since JDK1.1"
      end

      operation 7548187 "getClientHost"
	public explicit_return_type "String"
	nparams 0
	nexceptions 1
	  exception class_ref 953755 // ServerNotActiveException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hostname of the current client.  When called from a
thread actively handling a remote method invocation the
hostname of the client is returned.
@return the client's host name
@exception ServerNotActiveException if called outside of servicing
a remote method invocation
@since JDK1.1"
      end
    end

    class 958491 "Skeleton"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      java_annotation "@Deprecated
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The <code>Skeleton</code> interface is used solely by the RMI
implementation.

<p> Every version 1.1 (and version 1.1 compatible skeletons generated in
1.2 using <code>rmic -vcompat</code>) skeleton class generated by the rmic
stub compiler implements this interface. A skeleton for a remote object is
a server-side entity that dispatches calls to the actual remote object
implementation.

@version 1.19, 05/18/04
@author  Ann Wollrath
@since   JDK1.1
@deprecated no replacement.  Skeletons are no longer required for remote
method calls in the Java 2 platform v1.2 and greater."
      operation 7548315 "dispatch"
	public explicit_return_type "void"
	nparams 4
	  param inout name "obj" type class_ref 233371 // Remote
	  param inout name "theCall" type class_ref 522139 // RemoteCall
	  param in name "opnum" explicit_type "int"
	  param in name "hash" explicit_type "long"
	nexceptions 1
	  exception class_ref 165403 // Exception
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Unmarshals arguments, calls the actual remote object implementation,
and marshals the return value or any exception.

@param obj remote implementation to dispatch call to
@param theCall object representing remote call
@param opnum operation number
@param hash stub/skeleton interface hash
@exception java.lang.Exception if a general exception occurs.
@since JDK1.1
@deprecated no replacement"
      end

      operation 7548443 "getOperations"
	public return_type class_ref 522395 // Operation
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Returns the operations supported by the skeleton.
@return operations supported by skeleton
@since JDK1.1
@deprecated no replacement"
      end
    end

    class 958619 "SkeletonMismatchException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@Deprecated
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This exception is thrown when a call is received that does not
match the available skeleton.  It indicates either that the
remote method names or signatures in this interface have changed or
that the stub class used to make the call and the skeleton
receiving the call were not generated by the same version of
the stub compiler (<code>rmic</code>).

@version 1.15, 05/18/04
@author  Roger Riggs
@since   JDK1.1
@deprecated no replacement.  Skeletons are no longer required for remote
method calls in the Java 2 platform v1.2 and greater."
      classrelation 1864091 // <generalisation>
	relation 1864091 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1864091 // <generalisation>
	  b parent class_ref 233499 // RemoteException
      end

      attribute 2833819 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -7780460454818859281L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " indicate compatibility with JDK 1.1.x version of class "
      end

      operation 7548571 "SkeletonMismatchException"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Constructs a new <code>SkeletonMismatchException</code> with
a specified detail message.

@param s the detail message
@since JDK1.1
@deprecated no replacement"
      end
    end

    class 958747 "SkeletonNotFoundException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@Deprecated
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A <code>SkeletonNotFoundException</code> is thrown if the
<code>Skeleton</code> corresponding to the remote object being exported is
not found.  Skeletons are not required in the Java 2 platform, so this exception is
never thrown.

@version 1.16, 05/18/04
@since   JDK1.1
@deprecated no replacement.  Skeletons are no longer required for remote
method calls in the Java 2 platform v1.2 and greater."
      classrelation 1864219 // <generalisation>
	relation 1864219 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1864219 // <generalisation>
	  b parent class_ref 233499 // RemoteException
      end

      attribute 2833947 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -7860299673822761231L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " indicate compatibility with JDK 1.1.x version of class "
      end

      operation 7548699 "SkeletonNotFoundException"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SkeletonNotFoundException</code> with the specified
detail message.

@param s the detail message.
@since JDK1.1"
      end

      operation 7548827 "SkeletonNotFoundException"
	public explicit_return_type ""
	nparams 2
	  param in name "s" explicit_type "String"
	  param inout name "ex" type class_ref 165403 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SkeletonNotFoundException</code> with the specified
detail message and nested exception.

@param s the detail message.
@param ex the nested exception
@since JDK1.1"
      end
    end

    class 958875 "SocketSecurityException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An obsolete subclass of {@link ExportException}.

@version 1.13, 12/19/03
@author  Ann Wollrath
@since   JDK1.1"
      classrelation 1864347 // <generalisation>
	relation 1864347 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1864347 // <generalisation>
	  b parent class_ref 956827 // ExportException
      end

      attribute 2834075 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -7622072999407781979L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " indicate compatibility with JDK 1.1.x version of class "
      end

      operation 7548955 "SocketSecurityException"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>SocketSecurityException</code> with the specified
detail message.

@param s the detail message.
@since JDK1.1"
      end

      operation 7549083 "SocketSecurityException"
	public explicit_return_type ""
	nparams 2
	  param in name "s" explicit_type "String"
	  param inout name "ex" type class_ref 165403 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>SocketSecurityException</code> with the specified
detail message and nested exception.

@param s the detail message.
@param ex the nested exception
@since JDK1.1"
      end
    end

    class 959003 "Unreferenced"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A remote object implementation should implement the
<code>Unreferenced</code> interface to receive notification when there are
no more clients that reference that remote object.

@version 1.12, 12/19/03
@author  Ann Wollrath
@author  Roger Riggs
@since   JDK1.1"
      operation 7550235 "unreferenced"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by the RMI runtime sometime after the runtime determines that
the reference list, the list of clients referencing the remote object,
becomes empty.
@since JDK1.1"
      end
    end
  end

  deploymentview 149403 "server"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 348443 "RemoteRef"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.rmi.*;
${definition}"
      associated_classes
	class_ref 522011 // RemoteRef
      end
      comment "@(#)RemoteRef.java	1.23 04/05/18

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 724891 "RemoteObject"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.rmi.Remote;
import java.rmi.NoSuchObjectException;
import java.lang.reflect.Proxy;
import sun.rmi.server.Util;
${definition}"
      associated_classes
	class_ref 522267 // RemoteObject
      end
      comment "@(#)RemoteObject.java	1.33 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 725019 "RemoteServer"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.rmi.*;
import sun.rmi.server.UnicastServerRef;
import sun.rmi.runtime.Log;
${definition}"
      associated_classes
	class_ref 953627 // RemoteServer
      end
      comment "@(#)RemoteServer.java	1.32 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 725659 "UnicastRemoteObject"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.rmi.*;
import sun.rmi.server.UnicastServerRef;
import sun.rmi.server.UnicastServerRef2;
${definition}"
      associated_classes
	class_ref 954907 // UnicastRemoteObject
      end
      comment "@(#)UnicastRemoteObject.java	1.32 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 727835 "ExportException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 956827 // ExportException
      end
      comment "@(#)ExportException.java	1.12 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 727963 "LoaderHandler"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.net.MalformedURLException;
import java.net.URL;
${definition}"
      associated_classes
	class_ref 956955 // LoaderHandler
      end
      comment "@(#)LoaderHandler.java	1.18 04/05/18

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 728091 "LogStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
import java.util.*;
${definition}"
      associated_classes
	class_ref 957083 // LogStream
      end
      comment "@(#)LogStream.java	1.20 04/05/18

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 728219 "ObjID"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.DataInput;
import java.io.DataOutput;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.io.OutputStream;
import java.security.SecureRandom;
import java.util.Random;
${definition}"
      associated_classes
	class_ref 956315 // ObjID
      end
      comment "@(#)ObjID.java	1.29 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 728347 "Operation"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 522395 // Operation
      end
      comment "@(#)Operation.java	1.17 04/05/18

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 728475 "RemoteCall"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.rmi.*;
import java.io.ObjectOutput;
import java.io.ObjectInput;
import java.io.StreamCorruptedException;
import java.io.IOException;
${definition}"
      associated_classes
	class_ref 522139 // RemoteCall
      end
      comment "@(#)RemoteCall.java	1.19 04/05/18

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 728603 "RemoteObjectInvocationHandler"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.InvalidObjectException;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.rmi.Remote;
import java.rmi.UnexpectedException;
import java.rmi.activation.Activatable;
import java.util.Map;
import java.util.WeakHashMap;
import sun.rmi.server.Util;
import sun.rmi.server.WeakClassHashMap;
${definition}"
      associated_classes
	class_ref 957339 // RemoteObjectInvocationHandler
      end
      comment "@(#)RemoteObjectInvocationHandler.java	1.3 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 728731 "RemoteStub"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 955035 // RemoteStub
      end
      comment "@(#)RemoteStub.java	1.21 04/05/18

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 728859 "RMIClassLoader"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Iterator;
import sun.misc.Service;
${definition}"
      associated_classes
	class_ref 957723 // RMIClassLoader
      end
      comment "@(#)RMIClassLoader.java	1.40 04/05/18

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 728987 "RMIClassLoaderSpi"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.net.MalformedURLException;
import java.net.URL;
${definition}"
      associated_classes
	class_ref 957851 // RMIClassLoaderSpi
      end
      comment "@(#)RMIClassLoaderSpi.java	1.14 04/05/05

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 729115 "RMIClientSocketFactory"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
import java.net.*;
${definition}"
      associated_classes
	class_ref 522651 // RMIClientSocketFactory
      end
      comment "@(#)RMIClientSocketFactory.java	1.11 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 729243 "RMIFailureHandler"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 957979 // RMIFailureHandler
      end
      comment "@(#)RMIFailureHandler.java	1.11 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 729371 "RMIServerSocketFactory"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
import java.net.*;
${definition}"
      associated_classes
	class_ref 522779 // RMIServerSocketFactory
      end
      comment "@(#)RMIServerSocketFactory.java	1.11 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 729499 "RMISocketFactory"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
import java.net.*;
${definition}"
      associated_classes
	class_ref 958107 // RMISocketFactory
      end
      comment "@(#)RMISocketFactory.java	1.21 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 729627 "ServerCloneException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 958235 // ServerCloneException
      end
      comment "@(#)ServerCloneException.java	1.20 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 729755 "ServerNotActiveException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 953755 // ServerNotActiveException
      end
      comment "@(#)ServerNotActiveException.java	1.13 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 729883 "ServerRef"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.rmi.*;
${definition}"
      associated_classes
	class_ref 958363 // ServerRef
      end
      comment "@(#)ServerRef.java	1.16 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 730011 "Skeleton"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.rmi.Remote;
${definition}"
      associated_classes
	class_ref 958491 // Skeleton
      end
      comment "@(#)Skeleton.java	1.19 04/05/18

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 730139 "SkeletonMismatchException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.rmi.RemoteException;
${definition}"
      associated_classes
	class_ref 958619 // SkeletonMismatchException
      end
      comment "@(#)SkeletonMismatchException.java	1.15 04/05/18

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 730267 "SkeletonNotFoundException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.rmi.RemoteException;
${definition}"
      associated_classes
	class_ref 958747 // SkeletonNotFoundException
      end
      comment "@(#)SkeletonNotFoundException.java	1.16 04/05/18

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 730395 "SocketSecurityException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 958875 // SocketSecurityException
      end
      comment "@(#)SocketSecurityException.java	1.13 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 730523 "UID"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.DataInput;
import java.io.DataOutput;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.security.SecureRandom;
${definition}"
      associated_classes
	class_ref 955803 // UID
      end
      comment "@(#)UID.java	1.22 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 730651 "Unreferenced"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 959003 // Unreferenced
      end
      comment "@(#)Unreferenced.java	1.12 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end
  end
end
