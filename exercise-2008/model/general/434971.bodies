class Handler
!!!2622235.java!!!	Handler(inout list : JList)
	    this.list = list;
!!!2622363.java!!!	mouseClicked(inout evt : MouseEvent) : void
	    // Note: we can't depend on evt.getSource() because of backward
	    // compatability
	    if (list != null &&
		SwingUtilities.isLeftMouseButton(evt) &&
		evt.getClickCount() == 2) {

		int index = SwingUtilities2.loc2IndexFileList(list, evt.getPoint());
		if (index >= 0) {
		    File f = (File)list.getModel().getElementAt(index);
		    try {
			// Strip trailing ".."
			f = f.getCanonicalFile();
		    } catch (IOException ex) {
			// That's ok, we'll use f as is
		    }
		    if(getFileChooser().isTraversable(f)) {
			list.clearSelection();
			changeDirectory(f);
                        if (getFileChooser().getFileSelectionMode() == JFileChooser.FILES_AND_DIRECTORIES && 
                            getFileChooser().getFileSystemView().isFileSystem(f)) {
                            setFileName(f.toString());
                        }
		    } else {
			getFileChooser().approveSelection();
		    }
		}
	    }
!!!2622491.java!!!	mouseEntered(inout evt : MouseEvent) : void
	    if (list != null) {
		TransferHandler th1 = getFileChooser().getTransferHandler();
		TransferHandler th2 = list.getTransferHandler();
		if (th1 != th2) {
		    list.setTransferHandler(th1);
		}
		if (getFileChooser().getDragEnabled() != list.getDragEnabled()) {
		    list.setDragEnabled(getFileChooser().getDragEnabled());
		}
	    }
!!!2623003.java!!!	valueChanged(inout evt : ListSelectionEvent) : void
	    if(!evt.getValueIsAdjusting()) {
		JFileChooser chooser = getFileChooser();
		FileSystemView fsv = chooser.getFileSystemView();
		JList list = (JList)evt.getSource();

		int fsm = chooser.getFileSelectionMode();
		boolean useSetDirectory =
		    usesSingleFilePane ? (fsm == JFileChooser.FILES_ONLY)
				       : (fsm != JFileChooser.DIRECTORIES_ONLY);

		if (chooser.isMultiSelectionEnabled()) {
		    File[] files = null;
		    Object[] objects = list.getSelectedValues();
		    if (objects != null) {
			if (objects.length == 1
			    && ((File)objects[0]).isDirectory()
			    && chooser.isTraversable(((File)objects[0]))
			    && (useSetDirectory || !fsv.isFileSystem(((File)objects[0])))) {
			    setDirectorySelected(true);
			    setDirectory(((File)objects[0]));
			} else {
			    ArrayList fList = new ArrayList(objects.length);
			    for (int i = 0; i < objects.length; i++) {
				File f = (File)objects[i];
				boolean isDir = f.isDirectory();
				if ((chooser.isFileSelectionEnabled() && !isDir)
				    || (chooser.isDirectorySelectionEnabled()
					&& fsv.isFileSystem(f)
					&& isDir)) {
				    fList.add(f);
				}
			    }
			    if (fList.size() > 0) {
				files = (File[])fList.toArray(new File[fList.size()]);
			    }
			    setDirectorySelected(false);
			}
		    }
		    chooser.setSelectedFiles(files);
		} else {
		    File file = (File)list.getSelectedValue();
		    if (file != null
			&& file.isDirectory()
			&& chooser.isTraversable(file)
			&& (useSetDirectory || !fsv.isFileSystem(file))) {

			setDirectorySelected(true);
			setDirectory(file);
			if (usesSingleFilePane) {
			    chooser.setSelectedFile(null);
			}
		    } else {
			setDirectorySelected(false);
			if (file != null) {
			    chooser.setSelectedFile(file);
			}
		    }
		}
	    }
