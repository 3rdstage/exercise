class MulticastSocket
!!!7218843.java!!!	MulticastSocket()
	this(new InetSocketAddress(0));
!!!7218971.java!!!	MulticastSocket(in port : int)
	this(new InetSocketAddress(port));
!!!7219099.java!!!	MulticastSocket(inout bindaddr : SocketAddress)
	super((SocketAddress) null);

	// Enable SO_REUSEADDR before binding
	setReuseAddress(true);

	if (bindaddr != null) {
	    bind(bindaddr);
	}
!!!7219227.java!!!	setTTL(in ttl : byte) : void
	if (isClosed())
	    throw new SocketException("Socket is closed");
	getImpl().setTTL(ttl);
!!!7219355.java!!!	setTimeToLive(in ttl : int) : void
	if (ttl < 0 || ttl > 255) {
	    throw new IllegalArgumentException("ttl out of range");
	}
	if (isClosed())
	    throw new SocketException("Socket is closed");
	getImpl().setTimeToLive(ttl);
!!!7219483.java!!!	getTTL() : byte
	if (isClosed())
	    throw new SocketException("Socket is closed");
	return getImpl().getTTL();
!!!7219611.java!!!	getTimeToLive() : int
	if (isClosed())
	    throw new SocketException("Socket is closed");
	return getImpl().getTimeToLive();
!!!7219739.java!!!	joinGroup(inout mcastaddr : InetAddress) : void
        if (isClosed()) {
            throw new SocketException("Socket is closed");
        }

        SecurityManager security = System.getSecurityManager();
        if (security != null) {
            security.checkMulticast(mcastaddr);
        }

	if (!mcastaddr.isMulticastAddress()) {
	    throw new SocketException("Not a multicast address");
	}

	getImpl().join(mcastaddr);
!!!7219867.java!!!	leaveGroup(inout mcastaddr : InetAddress) : void
        if (isClosed()) {
            throw new SocketException("Socket is closed");
        }

        SecurityManager security = System.getSecurityManager();
        if (security != null) {
            security.checkMulticast(mcastaddr);
        }

	if (!mcastaddr.isMulticastAddress()) {
            throw new SocketException("Not a multicast address");
        }

	getImpl().leave(mcastaddr);
!!!7219995.java!!!	joinGroup(inout mcastaddr : SocketAddress, inout netIf : NetworkInterface) : void
	if (isClosed())
	    throw new SocketException("Socket is closed");

	if (mcastaddr == null || !(mcastaddr instanceof InetSocketAddress))
	    throw new IllegalArgumentException("Unsupported address type");

	if (oldImpl)
	    throw new UnsupportedOperationException();

	SecurityManager security = System.getSecurityManager();
	if (security != null) {
	    security.checkMulticast(((InetSocketAddress)mcastaddr).getAddress());
	}

	if (!((InetSocketAddress)mcastaddr).getAddress().isMulticastAddress()) {
            throw new SocketException("Not a multicast address");
        }

	getImpl().joinGroup(mcastaddr, netIf);
!!!7220123.java!!!	leaveGroup(inout mcastaddr : SocketAddress, inout netIf : NetworkInterface) : void
	if (isClosed())
	    throw new SocketException("Socket is closed");

	if (mcastaddr == null || !(mcastaddr instanceof InetSocketAddress))
	    throw new IllegalArgumentException("Unsupported address type");

	if (oldImpl)
	    throw new UnsupportedOperationException();

	SecurityManager security = System.getSecurityManager();
	if (security != null) {
	    security.checkMulticast(((InetSocketAddress)mcastaddr).getAddress());
	}

	if (!((InetSocketAddress)mcastaddr).getAddress().isMulticastAddress()) {
	    throw new SocketException("Not a multicast address");
	}

	getImpl().leaveGroup(mcastaddr, netIf);
!!!7220251.java!!!	setInterface(inout inf : InetAddress) : void
	if (isClosed()) {
	    throw new SocketException("Socket is closed");
	}
	synchronized (infLock) {
	    getImpl().setOption(SocketOptions.IP_MULTICAST_IF, inf);
	    infAddress = inf;
	}
!!!7220379.java!!!	getInterface() : InetAddress
	if (isClosed()) {
	    throw new SocketException("Socket is closed");
	}
	synchronized (infLock) {
	    InetAddress ia = 
	 	(InetAddress)getImpl().getOption(SocketOptions.IP_MULTICAST_IF);

	    /**
	     * No previous setInterface or interface can be
	     * set using setNetworkInterface
	     */
	    if (infAddress == null) {
		return ia;
	    }

	    /**
	     * Same interface set with setInterface?
	     */
	    if (ia.equals(infAddress)) {
		return ia;
	    }

	    /**
	     * Different InetAddress from what we set with setInterface
	     * so enumerate the current interface to see if the 
	     * address set by setInterface is bound to this interface.
	     */
	    try {
		NetworkInterface ni = NetworkInterface.getByInetAddress(ia);
		Enumeration addrs = ni.getInetAddresses();
		while (addrs.hasMoreElements()) {
		    InetAddress addr = (InetAddress)(addrs.nextElement());
		    if (addr.equals(infAddress)) {
			return infAddress;
		    }
		}

		/**
		 * No match so reset infAddress to indicate that the
		 * interface has changed via means
	 	 */
		infAddress = null;
		return ia;
	    } catch (Exception e) {
		return ia;
	    }
	}
!!!7220507.java!!!	setNetworkInterface(inout netIf : NetworkInterface) : void

	synchronized (infLock) {
	    getImpl().setOption(SocketOptions.IP_MULTICAST_IF2, netIf);
	    infAddress = null;
	}
!!!7220635.java!!!	getNetworkInterface() : NetworkInterface
	NetworkInterface ni 
	    = (NetworkInterface)getImpl().getOption(SocketOptions.IP_MULTICAST_IF2);
	if (ni.getIndex() == 0) {
	    InetAddress[] addrs = new InetAddress[1];
	    addrs[0] = InetAddress.anyLocalAddress();
	    return new NetworkInterface(addrs[0].getHostName(), 0, addrs);
	} else {
	    return ni;
	}
!!!7220763.java!!!	setLoopbackMode(inout disable : boolean) : void
	getImpl().setOption(SocketOptions.IP_MULTICAST_LOOP, Boolean.valueOf(disable));
!!!7220891.java!!!	getLoopbackMode() : boolean
	return ((Boolean)getImpl().getOption(SocketOptions.IP_MULTICAST_LOOP)).booleanValue();
!!!7221019.java!!!	send(inout p : DatagramPacket, in ttl : byte) : void
	    if (isClosed())
		throw new SocketException("Socket is closed");
            synchronized(ttlLock) {
                synchronized(p) {
		    if (connectState == ST_NOT_CONNECTED) {
                        // Security manager makes sure that the multicast address
                        // is allowed one and that the ttl used is less
                        // than the allowed maxttl.
                        SecurityManager security = System.getSecurityManager();
                        if (security != null) {
                            if (p.getAddress().isMulticastAddress()) {
                                security.checkMulticast(p.getAddress(), ttl);
                            } else {
                                security.checkConnect(p.getAddress().getHostAddress(),
                                                      p.getPort());
                            }
                        }
		    } else {
			// we're connected
			InetAddress packetAddress = null;
			packetAddress = p.getAddress();
			if (packetAddress == null) {
			    p.setAddress(connectedAddress);
			    p.setPort(connectedPort);
			} else if ((!packetAddress.equals(connectedAddress)) ||
				   p.getPort() != connectedPort) {
			    throw new SecurityException("connected address and packet address" +
							" differ");
			}
		    }
                    byte dttl = getTTL();
                    try {
                        if (ttl != dttl) {
                            // set the ttl
                            getImpl().setTTL(ttl);
                        }
                        // call the datagram method to send
                        getImpl().send(p);
                    } finally {
                        // set it back to default
                        if (ttl != dttl) {
                            getImpl().setTTL(dttl);
                        }
                    }
                } // synch p
            }  //synch ttl
