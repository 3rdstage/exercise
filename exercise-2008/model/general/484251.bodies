class Actions
!!!2978971.java!!!	Actions(in name : String)
            super(name);
!!!2979099.java!!!	actionPerformed(inout e : ActionEvent) : void
            String name = getName();
            JList list = (JList)e.getSource();
            BasicListUI ui = (BasicListUI)BasicLookAndFeel.getUIOfType(
                     list.getUI(), BasicListUI.class);

            if (name == SELECT_PREVIOUS_COLUMN) {
                changeSelection(list, CHANGE_SELECTION,
                                getNextColumnIndex(list, ui, -1), true);
            }
            else if (name == SELECT_PREVIOUS_COLUMN_EXTEND) {
                changeSelection(list, EXTEND_SELECTION,
                                getNextColumnIndex(list, ui, -1), true);
            }
            else if (name == SELECT_PREVIOUS_COLUMN_CHANGE_LEAD) {
                changeSelection(list, CHANGE_LEAD,
                                getNextColumnIndex(list, ui, -1), true);
            }
            else if (name == SELECT_NEXT_COLUMN) {
                changeSelection(list, CHANGE_SELECTION,
                                getNextColumnIndex(list, ui, 1), true);
            }
            else if (name == SELECT_NEXT_COLUMN_EXTEND) {
                changeSelection(list, EXTEND_SELECTION,
                                getNextColumnIndex(list, ui, 1), true);
            }
            else if (name == SELECT_NEXT_COLUMN_CHANGE_LEAD) {
                changeSelection(list, CHANGE_LEAD,
                                getNextColumnIndex(list, ui, 1), true);
            }
            else if (name == SELECT_PREVIOUS_ROW) {
                changeSelection(list, CHANGE_SELECTION,
                                getNextIndex(list, ui, -1), true);
            }
            else if (name == SELECT_PREVIOUS_ROW_EXTEND) {
                changeSelection(list, EXTEND_SELECTION,
                                getNextIndex(list, ui, -1), true);
            }
            else if (name == SELECT_PREVIOUS_ROW_CHANGE_LEAD) {
                changeSelection(list, CHANGE_LEAD,
                                getNextIndex(list, ui, -1), true);
            }
            else if (name == SELECT_NEXT_ROW) {
                changeSelection(list, CHANGE_SELECTION,
                                getNextIndex(list, ui, 1), true);
            }
            else if (name == SELECT_NEXT_ROW_EXTEND) {
                changeSelection(list, EXTEND_SELECTION,
                                getNextIndex(list, ui, 1), true);
            }
            else if (name == SELECT_NEXT_ROW_CHANGE_LEAD) {
                changeSelection(list, CHANGE_LEAD,
                                getNextIndex(list, ui, 1), true);
            }
            else if (name == SELECT_FIRST_ROW) {
                changeSelection(list, CHANGE_SELECTION, 0, true);
            }
            else if (name == SELECT_FIRST_ROW_EXTEND) {
                changeSelection(list, EXTEND_SELECTION, 0, true);
            }
            else if (name == SELECT_FIRST_ROW_CHANGE_LEAD) {
                changeSelection(list, CHANGE_LEAD, 0, true);
            }
            else if (name == SELECT_LAST_ROW) {
                changeSelection(list, CHANGE_SELECTION,
                                list.getModel().getSize() - 1, true);
            }
            else if (name == SELECT_LAST_ROW_EXTEND) {
                changeSelection(list, EXTEND_SELECTION,
                                list.getModel().getSize() - 1, true);
            }
            else if (name == SELECT_LAST_ROW_CHANGE_LEAD) {
                changeSelection(list, CHANGE_LEAD,
                                list.getModel().getSize() - 1, true);
            }
            else if (name == SCROLL_UP) {
                scroll(list, CHANGE_SELECTION, true);
            }
            else if (name == SCROLL_UP_EXTEND) {
                scroll(list, EXTEND_SELECTION, true);
            }
            else if (name == SCROLL_UP_CHANGE_LEAD) {
                scroll(list, CHANGE_LEAD, true);
            }
            else if (name == SCROLL_DOWN) {
                scroll(list, CHANGE_SELECTION, false);
            }
            else if (name == SCROLL_DOWN_EXTEND) {
                scroll(list, EXTEND_SELECTION, false);
            }
            else if (name == SCROLL_DOWN_CHANGE_LEAD) {
                scroll(list, CHANGE_LEAD, false);
            }
            else if (name == SELECT_ALL) {
                selectAll(list);
            }
            else if (name == CLEAR_SELECTION) {
                clearSelection(list);
            }
            else if (name == ADD_TO_SELECTION) {
                int index = list.getSelectionModel().getLeadSelectionIndex();
                if (!list.isSelectedIndex(index)) {
                    int oldAnchor = list.getSelectionModel().getAnchorSelectionIndex();
                    list.setValueIsAdjusting(true);
                    list.addSelectionInterval(index, index);
                    list.getSelectionModel().setAnchorSelectionIndex(oldAnchor);
                    list.setValueIsAdjusting(false);
                }
            }
            else if (name == TOGGLE_AND_ANCHOR) {
                int index = list.getSelectionModel().getLeadSelectionIndex();
                if (list.isSelectedIndex(index)) {
                    list.removeSelectionInterval(index, index);
                } else {
                    list.addSelectionInterval(index, index);
                }
            }
            else if (name == EXTEND_TO) {
                changeSelection(list, EXTEND_SELECTION,
                                list.getSelectionModel().getLeadSelectionIndex(),
                                false);
            }
            else if (name == MOVE_SELECTION_TO) {
                changeSelection(list, CHANGE_SELECTION,
                                list.getSelectionModel().getLeadSelectionIndex(),
                                false);
            }
!!!2979227.java!!!	isEnabled(inout c : Object) : boolean
            Object name = getName();
            if (name == SELECT_PREVIOUS_COLUMN_CHANGE_LEAD ||
                    name == SELECT_NEXT_COLUMN_CHANGE_LEAD ||
                    name == SELECT_PREVIOUS_ROW_CHANGE_LEAD ||
                    name == SELECT_NEXT_ROW_CHANGE_LEAD ||
                    name == SELECT_FIRST_ROW_CHANGE_LEAD ||
                    name == SELECT_LAST_ROW_CHANGE_LEAD ||
                    name == SCROLL_UP_CHANGE_LEAD ||
                    name == SCROLL_DOWN_CHANGE_LEAD) {

                // discontinuous selection actions are only enabled for
                // DefaultListSelectionModel
                return c != null && ((JList)c).getSelectionModel()
                                        instanceof DefaultListSelectionModel;
            }

            return true;
!!!2979355.java!!!	clearSelection(inout list : JList) : void
	    list.clearSelection();
!!!2979483.java!!!	selectAll(inout list : JList) : void
            int size = list.getModel().getSize();
            if (size > 0) {
                ListSelectionModel lsm = list.getSelectionModel();
                if (lsm.getSelectionMode() == ListSelectionModel.SINGLE_SELECTION) {
                    int leadIndex = list.getLeadSelectionIndex();
                    if (leadIndex != -1) {
                        list.setSelectionInterval(leadIndex, leadIndex);
                    } else if (list.getMinSelectionIndex() == -1) {
                        list.setSelectionInterval(0, 0);
                        list.ensureIndexIsVisible(0);
                    }
                } else {
                    list.setValueIsAdjusting(true);

                    int anchor = lsm.getAnchorSelectionIndex();
                    int lead = lsm.getLeadSelectionIndex();
                    list.setSelectionInterval(0, size - 1);

                    // this is called simply to restore the anchor and lead
                    list.addSelectionInterval(anchor, lead);

                    list.setValueIsAdjusting(false);
                }
            }
!!!2979611.java!!!	scroll(inout list : JList, in type : int, inout up : boolean) : void
            int index = getNextPageIndex(list, up);

            if (index != -1) {
                changeSelection(list, type, index, false);

                // down
                Rectangle visRect = list.getVisibleRect();
                Rectangle cellBounds = list.getCellBounds(index, index);

                if (!up) {
                    cellBounds.y = Math.max(0, cellBounds.y +
                                            cellBounds.height -visRect.height);
                    cellBounds.height = visRect.height;
                }
                else {
                    cellBounds.height = visRect.height;
                }
                list.scrollRectToVisible(cellBounds);
            }
!!!2979739.java!!!	getNextPageIndex(inout list : JList, inout up : boolean) : int
            if (up) {
                int index = list.getFirstVisibleIndex();
                ListSelectionModel lsm = list.getSelectionModel();

                if (lsm.getLeadSelectionIndex() == index) {
                    Rectangle visRect = list.getVisibleRect();
                    visRect.y = Math.max(0, visRect.y - visRect.height);
                    index = list.locationToIndex(visRect.getLocation());
                }
                return index;
            }
            // down
	    int index = list.getLastVisibleIndex();
	    ListSelectionModel lsm = list.getSelectionModel();

	    if (index == -1) {
		// Will happen if size < viewport size.
		index = list.getModel().getSize() - 1;
	    }
	    if (lsm.getLeadSelectionIndex() == index) {
		Rectangle visRect = list.getVisibleRect();
		visRect.y += visRect.height + visRect.height - 1;
		index = list.locationToIndex(visRect.getLocation());
		if (index == -1) {
		    index = list.getModel().getSize() - 1;
		}
	    }
	    return index;
!!!2979867.java!!!	changeSelection(inout list : JList, in type : int, in index : int, inout scroll : boolean) : void
	    if (index >= 0 && index < list.getModel().getSize()) {
		ListSelectionModel lsm = list.getSelectionModel();

                // CHANGE_LEAD is only valid with multiple interval selection
                if (type == CHANGE_LEAD &&
                        list.getSelectionMode()
                            != ListSelectionModel.MULTIPLE_INTERVAL_SELECTION) {

                    type = CHANGE_SELECTION;
                }

		if (type == EXTEND_SELECTION) {
		    int anchor = lsm.getAnchorSelectionIndex();
		    if (anchor == -1) {
			anchor = index;
		    }
                    
		    list.setSelectionInterval(anchor, index);
		}
		else if (type == CHANGE_SELECTION) {
		    list.setSelectedIndex(index);
		}
		else {
                    // casting should be safe since the action is only enabled
                    // for DefaultListSelectionModel
                    ((DefaultListSelectionModel)lsm).moveLeadSelectionIndex(index);
		}
                if (scroll) {
                    list.ensureIndexIsVisible(index);
                }
	    }
!!!2979995.java!!!	getNextColumnIndex(inout list : JList, inout ui : BasicListUI, in amount : int) : int
            if (list.getLayoutOrientation() != JList.VERTICAL) {
                int index = list.getLeadSelectionIndex();
                int size = list.getModel().getSize();

                if (index == -1) {
                    return 0;
                } else if (size == 1) {
                    // there's only one item so we should select it
                    return 0;
                } else if (ui == null || ui.columnCount <= 1) {
                    return -1;
                }

                int column = ui.convertModelToColumn(index);
                int row = ui.convertModelToRow(index);

                column += amount;
                if (column >= ui.columnCount || column < 0) {
                    // No wrapping.
                    return -1;
                }
                int maxRowCount = ui.getRowCount(column);
                if (row >= maxRowCount) {
                    row = maxRowCount - 1;
                }
                return ui.getModelIndex(column, row);
            }
            // Won't change the selection.
            return -1;
!!!2980123.java!!!	getNextIndex(inout list : JList, inout ui : BasicListUI, in amount : int) : int
	    int index = list.getLeadSelectionIndex();
	    int size = list.getModel().getSize();

	    if (index == -1) {
		if (size > 0) {
		    if (amount > 0) {
			index = 0;
		    }
		    else {
			index = size - 1;
		    }
		}
            } else if (size == 1) { 
                // there's only one item so we should select it
                index = 0; 
            } else if (list.getLayoutOrientation() == JList.HORIZONTAL_WRAP) { 
                if (ui != null) {
                    index += ui.columnCount * amount;
                }
            } else {
                index += amount;
            }

            return index;
