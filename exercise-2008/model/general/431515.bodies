class CSS
!!!9927707.java!!!	CSS()
	baseFontSize = baseFontSizeIndex + 1;
	// setup the css conversion table
	valueConvertor = new Hashtable();
	valueConvertor.put(CSS.Attribute.FONT_SIZE, new FontSize());
	valueConvertor.put(CSS.Attribute.FONT_FAMILY, new FontFamily());
	valueConvertor.put(CSS.Attribute.FONT_WEIGHT, new FontWeight());
	valueConvertor.put(CSS.Attribute.BORDER_STYLE, new BorderStyle());
	Object cv = new ColorValue();
	valueConvertor.put(CSS.Attribute.COLOR, cv);
	valueConvertor.put(CSS.Attribute.BACKGROUND_COLOR, cv);
	valueConvertor.put(CSS.Attribute.BORDER_COLOR, cv);
	Object lv = new LengthValue();
	valueConvertor.put(CSS.Attribute.MARGIN_TOP, lv);
	valueConvertor.put(CSS.Attribute.MARGIN_BOTTOM, lv);
	valueConvertor.put(CSS.Attribute.MARGIN_LEFT, lv);
        valueConvertor.put(CSS.Attribute.MARGIN_LEFT_LTR, lv);
        valueConvertor.put(CSS.Attribute.MARGIN_LEFT_RTL, lv);
	valueConvertor.put(CSS.Attribute.MARGIN_RIGHT, lv);
        valueConvertor.put(CSS.Attribute.MARGIN_RIGHT_LTR, lv);
        valueConvertor.put(CSS.Attribute.MARGIN_RIGHT_RTL, lv);
	valueConvertor.put(CSS.Attribute.PADDING_TOP, lv);
	valueConvertor.put(CSS.Attribute.PADDING_BOTTOM, lv);
	valueConvertor.put(CSS.Attribute.PADDING_LEFT, lv);
	valueConvertor.put(CSS.Attribute.PADDING_RIGHT, lv);
	Object bv = new BorderWidthValue(null, 0);
	valueConvertor.put(CSS.Attribute.BORDER_WIDTH, lv);
	valueConvertor.put(CSS.Attribute.BORDER_TOP_WIDTH, bv);
	valueConvertor.put(CSS.Attribute.BORDER_BOTTOM_WIDTH, bv);
	valueConvertor.put(CSS.Attribute.BORDER_LEFT_WIDTH, bv);
	valueConvertor.put(CSS.Attribute.BORDER_RIGHT_WIDTH, bv);
	Object nlv = new LengthValue(true);
	valueConvertor.put(CSS.Attribute.TEXT_INDENT, nlv);
	valueConvertor.put(CSS.Attribute.WIDTH, lv);
	valueConvertor.put(CSS.Attribute.HEIGHT, lv);
	valueConvertor.put(CSS.Attribute.BORDER_SPACING, lv);
	Object sv = new StringValue();
	valueConvertor.put(CSS.Attribute.FONT_STYLE, sv);
	valueConvertor.put(CSS.Attribute.TEXT_DECORATION, sv);
	valueConvertor.put(CSS.Attribute.TEXT_ALIGN, sv);
	valueConvertor.put(CSS.Attribute.VERTICAL_ALIGN, sv);
	Object valueMapper = new CssValueMapper();
	valueConvertor.put(CSS.Attribute.LIST_STYLE_TYPE,
			   valueMapper);
	valueConvertor.put(CSS.Attribute.BACKGROUND_IMAGE,
			   new BackgroundImage());
	valueConvertor.put(CSS.Attribute.BACKGROUND_POSITION,
			   new BackgroundPosition());
	valueConvertor.put(CSS.Attribute.BACKGROUND_REPEAT,
			   valueMapper);
	valueConvertor.put(CSS.Attribute.BACKGROUND_ATTACHMENT,
			   valueMapper);
	Object generic = new CssValue();
	int n = CSS.Attribute.allAttributes.length;
	for (int i = 0; i < n; i++) {
	    CSS.Attribute key = CSS.Attribute.allAttributes[i];
	    if (valueConvertor.get(key) == null) {
		valueConvertor.put(key, generic);
	    }
	}
!!!9927835.java!!!	setBaseFontSize(in sz : int) : void
	if (sz < 1)
	  baseFontSize = 0;
	else if (sz > 7)
	  baseFontSize = 7;
	else
	  baseFontSize = sz;
!!!9927963.java!!!	setBaseFontSize(in size : String) : void
	int relSize, absSize, diff;

	if (size != null) {
	    if (size.startsWith("+")) {
		relSize = Integer.valueOf(size.substring(1)).intValue();
		setBaseFontSize(baseFontSize + relSize);
	    } else if (size.startsWith("-")) {
		relSize = -Integer.valueOf(size.substring(1)).intValue();
		setBaseFontSize(baseFontSize + relSize);
	    } else {
		setBaseFontSize(Integer.valueOf(size).intValue());
	    }
	}
!!!9928091.java!!!	getBaseFontSize() : int
	return baseFontSize;
!!!9928219.java!!!	addInternalCSSValue(inout attr : MutableAttributeSet, inout key : Attribute, in value : String) : void
	if (key == CSS.Attribute.FONT) {
	    ShorthandFontParser.parseShorthandFont(this, value, attr);
	}
	else if (key == CSS.Attribute.BACKGROUND) {
	    ShorthandBackgroundParser.parseShorthandBackground
		               (this, value, attr);
	}
	else if (key == CSS.Attribute.MARGIN) {
	    ShorthandMarginParser.parseShorthandMargin(this, value, attr,
					   CSS.Attribute.ALL_MARGINS);
	}
	else if (key == CSS.Attribute.PADDING) {
	    ShorthandMarginParser.parseShorthandMargin(this, value, attr,
					   CSS.Attribute.ALL_PADDING);
	}
	else if (key == CSS.Attribute.BORDER_WIDTH) {
	    ShorthandMarginParser.parseShorthandMargin(this, value, attr,
					   CSS.Attribute.ALL_BORDER_WIDTHS);
	}
	else {
	    Object iValue = getInternalCSSValue(key, value);
	    if (iValue != null) {
		attr.addAttribute(key, iValue);
	    }
	}
!!!9928347.java!!!	getInternalCSSValue(inout key : Attribute, in value : String) : Object
	CssValue conv = (CssValue) valueConvertor.get(key);
        Object r = conv.parseCssValue(value);
        return r != null ? r : conv.parseCssValue(key.getDefaultValue());
!!!9928475.java!!!	styleConstantsKeyToCSSKey(inout sc : StyleConstants) : Attribute
	return (Attribute)styleConstantToCssMap.get(sc);
!!!9928603.java!!!	styleConstantsValueToCSSValue(inout sc : StyleConstants, inout styleValue : Object) : Object
	Object cssKey = styleConstantsKeyToCSSKey(sc);
	if (cssKey != null) {
	    CssValue conv = (CssValue)valueConvertor.get(cssKey);
	    return conv.fromStyleConstants(sc, styleValue);
	}
	return null;
!!!9928731.java!!!	cssValueToStyleConstantsValue(inout key : StyleConstants, inout value : Object) : Object
	if (value instanceof CssValue) {
	    return ((CssValue)value).toStyleConstants((StyleConstants)key,
						      null);
	}
	return null;
!!!9928859.java!!!	getFont(inout sc : StyleContext, inout a : AttributeSet, in defaultSize : int, inout ss : StyleSheet) : Font
        ss = getStyleSheet(ss);
	int size = getFontSize(a, defaultSize, ss);

	/*
	 * If the vertical alignment is set to either superscirpt or
	 * subscript we reduce the font size by 2 points.
	 */
	StringValue vAlignV = (StringValue)a.getAttribute
	                      (CSS.Attribute.VERTICAL_ALIGN);
	if ((vAlignV != null)) {
	    String vAlign = vAlignV.toString();
	    if ((vAlign.indexOf("sup") >= 0) ||
		(vAlign.indexOf("sub") >= 0)) {
		size -= 2;
	    }
	}
	
	FontFamily familyValue = (FontFamily)a.getAttribute
	                                    (CSS.Attribute.FONT_FAMILY);
	String family = (familyValue != null) ? familyValue.getValue() :
	                          "SansSerif";
	int style = Font.PLAIN;
	FontWeight weightValue = (FontWeight) a.getAttribute
	                          (CSS.Attribute.FONT_WEIGHT);
	if ((weightValue != null) && (weightValue.getValue() > 400)) {
	    style |= Font.BOLD;
	}
	Object fs = a.getAttribute(CSS.Attribute.FONT_STYLE);
	if ((fs != null) && (fs.toString().indexOf("italic") >= 0)) {
	    style |= Font.ITALIC;
	}
        if (family.equalsIgnoreCase("monospace")) {
            family = "Monospaced";
        }
	Font f = sc.getFont(family, style, size);
        if (f == null 
            || (f.getFamily().equals("Dialog")
                && ! family.equalsIgnoreCase("Dialog"))) {
            family = "SansSerif";
            f = sc.getFont(family, style, size);
        }
	return f;
!!!9928987.java!!!	getFontSize(inout attr : AttributeSet, in defaultSize : int, inout ss : StyleSheet) : int
	// PENDING(prinz) this is a 1.1 based implementation, need to also
	// have a 1.2 version.
	FontSize sizeValue = (FontSize)attr.getAttribute(CSS.Attribute.
							 FONT_SIZE);

	return (sizeValue != null) ? (int)sizeValue.getValue(attr, ss) :
	                             defaultSize;
!!!9929115.java!!!	getColor(inout a : AttributeSet, inout key : Attribute) : Color
	ColorValue cv = (ColorValue) a.getAttribute(key);
	if (cv != null) {
	    return cv.getValue();
	}
	return null;
!!!9929243.java!!!	getPointSize(in size : String, inout ss : StyleSheet) : float
	int relSize, absSize, diff, index;
        ss = getStyleSheet(ss);
	if (size != null) {
	    if (size.startsWith("+")) {
		relSize = Integer.valueOf(size.substring(1)).intValue();
		return getPointSize(baseFontSize + relSize, ss);
	    } else if (size.startsWith("-")) {
		relSize = -Integer.valueOf(size.substring(1)).intValue();
		return getPointSize(baseFontSize + relSize, ss);
	    } else {
		absSize = Integer.valueOf(size).intValue();
		return getPointSize(absSize, ss);
	    }
	}
	return 0;
!!!9929371.java!!!	getLength(inout a : AttributeSet, inout key : Attribute, inout ss : StyleSheet) : float
        ss = getStyleSheet(ss);
	LengthValue lv = (LengthValue) a.getAttribute(key);
        boolean isW3CLengthUnits = (ss == null) ? false : ss.isW3CLengthUnits();
        float len = (lv != null) ? lv.getValue(isW3CLengthUnits) : 0;
	return len;
!!!9929499.java!!!	translateHTMLToCSS(inout htmlAttrSet : AttributeSet) : AttributeSet
	MutableAttributeSet cssAttrSet = new SimpleAttributeSet();
	Element elem = (Element)htmlAttrSet;
	HTML.Tag tag = getHTMLTag(htmlAttrSet);
	if ((tag == HTML.Tag.TD) || (tag == HTML.Tag.TH)) {
	    // translate border width into the cells
	    AttributeSet tableAttr = elem.getParentElement().
		                     getParentElement().getAttributes();
	    translateAttribute(HTML.Attribute.BORDER, tableAttr, cssAttrSet);
	    String pad = (String)tableAttr.getAttribute(HTML.Attribute.CELLPADDING);
	    if (pad != null) {
		LengthValue v = 
		    (LengthValue)getInternalCSSValue(CSS.Attribute.PADDING_TOP, pad);
		v.span = (v.span < 0) ? 0 : v.span;
		cssAttrSet.addAttribute(CSS.Attribute.PADDING_TOP, v);
		cssAttrSet.addAttribute(CSS.Attribute.PADDING_BOTTOM, v);
		cssAttrSet.addAttribute(CSS.Attribute.PADDING_LEFT, v);
		cssAttrSet.addAttribute(CSS.Attribute.PADDING_RIGHT, v);
	    }
	}
	if (elem.isLeaf()) {
	    translateEmbeddedAttributes(htmlAttrSet, cssAttrSet);
	} else {
	    translateAttributes(tag, htmlAttrSet, cssAttrSet);
	}
	if (tag == HTML.Tag.CAPTION) {
	    /* 
	     * Navigator uses ALIGN for caption placement and IE uses VALIGN.
	     */
	    Object v = htmlAttrSet.getAttribute(HTML.Attribute.ALIGN);
	    if ((v != null) && (v.equals("top") || v.equals("bottom"))) {
		cssAttrSet.addAttribute(CSS.Attribute.CAPTION_SIDE, v);
		cssAttrSet.removeAttribute(CSS.Attribute.TEXT_ALIGN);
	    } else {
		v = htmlAttrSet.getAttribute(HTML.Attribute.VALIGN);
		if (v != null) {
		    cssAttrSet.addAttribute(CSS.Attribute.CAPTION_SIDE, v);
		}
	    }
	}
	return cssAttrSet;
!!!9929627.java!!!	getAllAttributeKeys() : Attribute
	Attribute[] keys = new Attribute[Attribute.allAttributes.length];
	System.arraycopy(Attribute.allAttributes, 0, keys, 0, Attribute.allAttributes.length);
	return keys;
!!!9929755.java!!!	getAttribute(in name : String) : Attribute
	return (Attribute) attributeMap.get(name);
!!!9929883.java!!!	getValue(in name : String) : Value
	return (Value) valueMap.get(name);
!!!9930011.java!!!	getURL(inout base : URL, in cssString : String) : URL
	if (cssString == null) {
	    return null;
	}
	if (cssString.startsWith("url(") &&
	    cssString.endsWith(")")) {
	    cssString = cssString.substring(4, cssString.length() - 1);
	}
	// Absolute first
	try {
	    URL url = new URL(cssString);
	    if (url != null) {
		return url;
	    }
	} catch (MalformedURLException mue) {
	}
	// Then relative
	if (base != null) {
	    // Relative URL, try from base
	    try {
		URL url = new URL(base, cssString);
		return url;
	    }
	    catch (MalformedURLException muee) {
	    }
	}
	return null;
!!!9930139.java!!!	colorToHex(inout color : Color) : String

      String colorstr = new String("#");

      // Red
      String str = Integer.toHexString(color.getRed());
      if (str.length() > 2)
	str = str.substring(0, 2);
      else if (str.length() < 2)
	colorstr += "0" + str;
      else
	colorstr += str;

      // Green
      str = Integer.toHexString(color.getGreen());
      if (str.length() > 2)
	str = str.substring(0, 2);
      else if (str.length() < 2)
	colorstr += "0" + str;
      else
	colorstr += str;

      // Blue
      str = Integer.toHexString(color.getBlue());
      if (str.length() > 2)
	str = str.substring(0, 2);
      else if (str.length() < 2)
	colorstr += "0" + str;
      else
	colorstr += str;

      return colorstr;
!!!9930267.java!!!	hexToColor(in value : String) : Color
	String digits;
	int n = value.length();
	if (value.startsWith("#")) {
	    digits = value.substring(1, Math.min(value.length(), 7));
	} else {
	    digits = value;
	}
	String hstr = "0x" + digits;
	Color c;
	try {
	    c = Color.decode(hstr);
	} catch (NumberFormatException nfe) {
	    c = null;
	}
	 return c;
!!!9930395.java!!!	stringToColor(in str : String) : Color
      Color color = null;

      if (str.length() == 0)
        color = Color.black;
      else if (str.startsWith("rgb(")) {
          color = parseRGB(str);
      }
      else if (str.charAt(0) == '#')
        color = hexToColor(str);
      else if (str.equalsIgnoreCase("Black"))
        color = hexToColor("#000000");
      else if(str.equalsIgnoreCase("Silver"))
        color = hexToColor("#C0C0C0");
      else if(str.equalsIgnoreCase("Gray"))
        color = hexToColor("#808080");
      else if(str.equalsIgnoreCase("White"))
        color = hexToColor("#FFFFFF");
      else if(str.equalsIgnoreCase("Maroon"))
        color = hexToColor("#800000");
      else if(str.equalsIgnoreCase("Red"))
        color = hexToColor("#FF0000");
      else if(str.equalsIgnoreCase("Purple"))
        color = hexToColor("#800080");
      else if(str.equalsIgnoreCase("Fuchsia"))
        color = hexToColor("#FF00FF");
      else if(str.equalsIgnoreCase("Green"))
        color = hexToColor("#008000");
      else if(str.equalsIgnoreCase("Lime"))
        color = hexToColor("#00FF00");
      else if(str.equalsIgnoreCase("Olive"))
        color = hexToColor("#808000");
      else if(str.equalsIgnoreCase("Yellow"))
        color = hexToColor("#FFFF00");
      else if(str.equalsIgnoreCase("Navy"))
        color = hexToColor("#000080");
      else if(str.equalsIgnoreCase("Blue"))
        color = hexToColor("#0000FF");
      else if(str.equalsIgnoreCase("Teal"))
        color = hexToColor("#008080");
      else if(str.equalsIgnoreCase("Aqua"))
        color = hexToColor("#00FFFF");
      else
	  color = hexToColor(str); // sometimes get specified without leading #
      return color;
!!!9930523.java!!!	parseRGB(in string : String) : Color
        // Find the next numeric char
        int[] index = new int[1];

        index[0] = 4;
        int red = getColorComponent(string, index);
        int green = getColorComponent(string, index);
        int blue = getColorComponent(string, index);

        return new Color(red, green, blue);
!!!9930651.java!!!	getColorComponent(in string : String, in index : int) : int
        int length = string.length();
        char aChar;

        // Skip non-decimal chars
        while(index[0] < length && (aChar = string.charAt(index[0])) != '-' &&
              !Character.isDigit(aChar) && aChar != '.') {
            index[0]++;
        }

        int start = index[0];

        if (start < length && string.charAt(index[0]) == '-') {
            index[0]++;
        }
        while(index[0] < length &&
                         Character.isDigit(string.charAt(index[0]))) {
            index[0]++;
        }
        if (index[0] < length && string.charAt(index[0]) == '.') {
            // Decimal value
            index[0]++;
            while(index[0] < length &&
                  Character.isDigit(string.charAt(index[0]))) {
                index[0]++;
            }
        }
        if (start != index[0]) {
            try {
                float value = Float.parseFloat(string.substring
                                               (start, index[0]));

                if (index[0] < length && string.charAt(index[0]) == '%') {
                    index[0]++;
                    value = value * 255f / 100f;
                }
                return Math.min(255, Math.max(0, (int)value));
            } catch (NumberFormatException nfe) {
                // Treat as 0
            }
        }
        return 0;
!!!9930779.java!!!	getIndexOfSize(in pt : float, in sizeMap : int) : int
        for (int i = 0; i < sizeMap.length; i ++ )
                if (pt <= sizeMap[i])
                        return i + 1;
        return sizeMap.length;
!!!9930907.java!!!	getIndexOfSize(in pt : float, inout ss : StyleSheet) : int
        int[] sizeMap = (ss != null) ? ss.getSizeMap() : 
            StyleSheet.sizeMapDefault;
        return getIndexOfSize(pt, sizeMap);
!!!9931035.java!!!	parseStrings(in value : String) : String
	int         current, last;
	int         length = (value == null) ? 0 : value.length();
	Vector      temp = new Vector(4);

	current = 0;
	while (current < length) {
	    // Skip ws
	    while (current < length && Character.isWhitespace
		   (value.charAt(current))) {
		current++;
	    }
	    last = current;
	    while (current < length && !Character.isWhitespace
		   (value.charAt(current))) {
		current++;
	    }
	    if (last != current) {
		temp.addElement(value.substring(last, current));
	    }
	    current++;
	}
	String[] retValue = new String[temp.size()];
	temp.copyInto(retValue);
	return retValue;
!!!9931163.java!!!	getPointSize(in index : int, inout ss : StyleSheet) : float
        ss = getStyleSheet(ss);
        int[] sizeMap = (ss != null) ? ss.getSizeMap() : 
            StyleSheet.sizeMapDefault;
        --index;
	if (index < 0)
	  return sizeMap[0];
	else if (index > sizeMap.length - 1)
	  return sizeMap[sizeMap.length - 1];
	else
	  return sizeMap[index];
!!!9931291.java!!!	translateEmbeddedAttributes(inout htmlAttrSet : AttributeSet, inout cssAttrSet : MutableAttributeSet) : void
	Enumeration keys = htmlAttrSet.getAttributeNames();
	if (htmlAttrSet.getAttribute(StyleConstants.NameAttribute) ==
	    HTML.Tag.HR) {
	    // HR needs special handling due to us treating it as a leaf.
	    translateAttributes(HTML.Tag.HR, htmlAttrSet, cssAttrSet);
	}
	while (keys.hasMoreElements()) {
	    Object key = keys.nextElement();
	    if (key instanceof HTML.Tag) {
		HTML.Tag tag = (HTML.Tag)key;
		Object o = htmlAttrSet.getAttribute(tag);
		if (o != null && o instanceof AttributeSet) {
		    translateAttributes(tag, (AttributeSet)o, cssAttrSet);
		}
	    } else if (key instanceof CSS.Attribute) {
		cssAttrSet.addAttribute(key, htmlAttrSet.getAttribute(key));
	    }
	}
!!!9931419.java!!!	translateAttributes(inout tag : Tag, inout htmlAttrSet : AttributeSet, inout cssAttrSet : MutableAttributeSet) : void
	Enumeration names = htmlAttrSet.getAttributeNames();
	while (names.hasMoreElements()) {
	    Object name = names.nextElement();

	    if (name instanceof HTML.Attribute) {
		HTML.Attribute key = (HTML.Attribute)name;

		/*
		 * HTML.Attribute.ALIGN needs special processing.
		 * It can map to to 1 of many(3) possible CSS attributes
		 * depending on the nature of the tag the attribute is
		 * part off and depending on the value of the attribute.
		 */
		if (key == HTML.Attribute.ALIGN) {
		    String htmlAttrValue = (String)htmlAttrSet.getAttribute(HTML.Attribute.ALIGN);
		    if (htmlAttrValue != null) {
			CSS.Attribute cssAttr = getCssAlignAttribute(tag, htmlAttrSet);
			if (cssAttr != null) {
			    Object o = getCssValue(cssAttr, htmlAttrValue);
			    if (o != null) {
				cssAttrSet.addAttribute(cssAttr, o);
			    }
			}
		    }
		} else {

		    /*
		     * The html size attribute has a mapping in the CSS world only
		     * if it is par of a font or base font tag.
		     */

		    if (key == HTML.Attribute.SIZE && !isHTMLFontTag(tag)) {
			continue;
		    }

		    translateAttribute(key, htmlAttrSet, cssAttrSet);
		}
	    } else if (name instanceof CSS.Attribute) {
		cssAttrSet.addAttribute(name, htmlAttrSet.getAttribute(name));
	    }
	}
!!!9931547.java!!!	translateAttribute(inout key : Attribute, inout htmlAttrSet : AttributeSet, inout cssAttrSet : MutableAttributeSet) : void
	/*
	 * In the case of all remaining HTML.Attribute's they
	 * map to 1 or more CCS.Attribute.
	 */
	CSS.Attribute[] cssAttrList = getCssAttribute(key);
	
	String htmlAttrValue = (String)htmlAttrSet.getAttribute(key);
	
	if (cssAttrList == null || htmlAttrValue == null) {
	    return;
	}
	for (int i = 0; i < cssAttrList.length; i++) {
	    Object o = getCssValue(cssAttrList[i], htmlAttrValue);
	    if (o != null) {
		cssAttrSet.addAttribute(cssAttrList[i], o);
	    }
	}
!!!9931675.java!!!	getCssValue(inout cssAttr : Attribute, in htmlAttrValue : String) : Object
	CssValue value = (CssValue)valueConvertor.get(cssAttr);
	Object o = value.parseHtmlValue(htmlAttrValue);
	return o;
!!!9931803.java!!!	getCssAttribute(inout hAttr : Attribute) : Attribute
	return (CSS.Attribute[])htmlAttrToCssAttrMap.get(hAttr);
!!!9931931.java!!!	getCssAlignAttribute(inout tag : Tag, inout htmlAttrSet : AttributeSet) : Attribute
	return CSS.Attribute.TEXT_ALIGN;
/*
	String htmlAttrValue = (String)htmlAttrSet.getAttribute(HTML.Attribute.ALIGN);
	CSS.Attribute cssAttr = CSS.Attribute.TEXT_ALIGN;
	if (htmlAttrValue != null && htmlAttrSet instanceof Element) {
	    Element elem = (Element)htmlAttrSet;
	    if (!elem.isLeaf() && tag.isBlock() && validTextAlignValue(htmlAttrValue)) {
		return CSS.Attribute.TEXT_ALIGN;
	    } else if (isFloater(htmlAttrValue)) {
		return CSS.Attribute.FLOAT;
	    } else if (elem.isLeaf()) {
		return CSS.Attribute.VERTICAL_ALIGN;
	    }
 	}
	return null;
	*/
!!!9932059.java!!!	getHTMLTag(inout htmlAttrSet : AttributeSet) : Tag
	Object o = htmlAttrSet.getAttribute(StyleConstants.NameAttribute);
	if (o instanceof HTML.Tag) {
	    HTML.Tag tag = (HTML.Tag) o;
	    return tag;
	}
	return null;
!!!9932187.java!!!	isHTMLFontTag(inout tag : Tag) : boolean
	return (tag != null && ((tag == HTML.Tag.FONT) || (tag == HTML.Tag.BASEFONT)));
!!!9932315.java!!!	isFloater(in alignValue : String) : boolean
	return (alignValue.equals("left") || alignValue.equals("right"));
!!!9932443.java!!!	validTextAlignValue(in alignValue : String) : boolean
	return (isFloater(alignValue) || alignValue.equals("center"));
!!!9942811.java!!!	calculateTiledRequirements(inout iter : LayoutIterator, inout r : SizeRequirements) : SizeRequirements
	long minimum = 0;
	long maximum = 0;
	long preferred = 0;
	int lastMargin = 0;
	int totalSpacing = 0;
	int n = iter.getCount();
	for (int i = 0; i < n; i++) {
	    iter.setIndex(i);
	    int margin0 = lastMargin;
	    int margin1 = (int) iter.getLeadingCollapseSpan();
	    totalSpacing += Math.max(margin0, margin1);;
	    preferred += (int) iter.getPreferredSpan(0);
	    minimum += iter.getMinimumSpan(0);
	    maximum += iter.getMaximumSpan(0);

	    lastMargin = (int) iter.getTrailingCollapseSpan();
	}
	totalSpacing += lastMargin;
	totalSpacing += 2 * iter.getBorderWidth();

	// adjust for the spacing area
	minimum += totalSpacing;
	preferred += totalSpacing;
	maximum += totalSpacing;

	// set return value
	if (r == null) {
	    r = new SizeRequirements();
	}
	r.minimum = (minimum > Integer.MAX_VALUE) ? Integer.MAX_VALUE : (int)minimum;
	r.preferred = (preferred > Integer.MAX_VALUE) ? Integer.MAX_VALUE :(int) preferred;
	r.maximum = (maximum > Integer.MAX_VALUE) ? Integer.MAX_VALUE :(int) maximum;
	return r;
!!!9942939.java!!!	calculateTiledLayout(inout iter : LayoutIterator, in targetSpan : int) : void
	
	/*
	 * first pass, calculate the preferred sizes, adjustments needed because
	 * of margin collapsing, and the flexibility to adjust the sizes.
	 */
	long preferred = 0;
	long currentPreferred = 0;
	int lastMargin = 0;
	int totalSpacing = 0;
	int n = iter.getCount();
	int adjustmentWeightsCount = LayoutIterator.WorstAdjustmentWeight + 1;
	//max gain we can get adjusting elements with adjustmentWeight <= i
	long gain[] = new long[adjustmentWeightsCount]; 
	//max loss we can get adjusting elements with adjustmentWeight <= i
	long loss[] = new long[adjustmentWeightsCount]; 

	for (int i = 0; i < adjustmentWeightsCount; i++) {
	    gain[i] = loss[i] = 0;
	}
	for (int i = 0; i < n; i++) {
	    iter.setIndex(i);
	    int margin0 = lastMargin;
	    int margin1 = (int) iter.getLeadingCollapseSpan();

	    iter.setOffset(Math.max(margin0, margin1));
	    totalSpacing += iter.getOffset();

	    currentPreferred = (long)iter.getPreferredSpan(targetSpan);
	    iter.setSpan((int) currentPreferred);
	    preferred += currentPreferred;
	    gain[iter.getAdjustmentWeight()] += 
		(long)iter.getMaximumSpan(targetSpan) - currentPreferred;
	    loss[iter.getAdjustmentWeight()] += 
		currentPreferred - (long)iter.getMinimumSpan(targetSpan);
	    lastMargin = (int) iter.getTrailingCollapseSpan();
	}
	totalSpacing += lastMargin;               
	totalSpacing += 2 * iter.getBorderWidth();	
	
	for (int i = 1; i < adjustmentWeightsCount; i++) {
	    gain[i] += gain[i - 1];
	    loss[i] += loss[i - 1];
	}

	/*
	 * Second pass, expand or contract by as much as possible to reach
	 * the target span.  This takes the margin collapsing into account
	 * prior to adjusting the span.
	 */

	// determine the adjustment to be made
	int allocated = targetSpan - totalSpacing;
	long desiredAdjustment = allocated - preferred;
	long adjustmentsArray[] = (desiredAdjustment > 0) ? gain : loss;
	desiredAdjustment = Math.abs(desiredAdjustment);
	int adjustmentLevel = 0;
	for (;adjustmentLevel <= LayoutIterator.WorstAdjustmentWeight; 
	     adjustmentLevel++) { 
	    // adjustmentsArray[] is sorted. I do not bother about
	    // binary search though
	    if (adjustmentsArray[adjustmentLevel] >= desiredAdjustment) {
		break;
	    }
	}
	float adjustmentFactor = 0.0f;
	if (adjustmentLevel <= LayoutIterator.WorstAdjustmentWeight) {
	    desiredAdjustment -= (adjustmentLevel > 0) ? 
		adjustmentsArray[adjustmentLevel - 1] : 0;
	    if (desiredAdjustment != 0) {
		float maximumAdjustment = 
		    adjustmentsArray[adjustmentLevel] - 
		    ((adjustmentLevel > 0) ? 
		     adjustmentsArray[adjustmentLevel - 1] : 0
		     );
		adjustmentFactor = desiredAdjustment / maximumAdjustment;
	    }
	}
	// make the adjustments
	int totalOffset = (int)iter.getBorderWidth();;
	for (int i = 0; i < n; i++) {
	    iter.setIndex(i);
	    iter.setOffset( iter.getOffset() + totalOffset);
	    if (iter.getAdjustmentWeight() < adjustmentLevel) {
		iter.setSpan((int)
			     ((allocated > preferred) ? 
			      Math.floor(iter.getMaximumSpan(targetSpan)) : 
			      Math.ceil(iter.getMinimumSpan(targetSpan))
			      )
			     );
	    } else if (iter.getAdjustmentWeight() == adjustmentLevel) {
		int availableSpan = (allocated > preferred) ? 
		    (int) iter.getMaximumSpan(targetSpan) - iter.getSpan() : 
		    iter.getSpan() - (int) iter.getMinimumSpan(targetSpan);
		int adj = (int)Math.floor(adjustmentFactor * availableSpan);
		iter.setSpan(iter.getSpan() + 
			     ((allocated > preferred) ? adj : -adj));
	    }
	    totalOffset = (int) Math.min((long) iter.getOffset() + 
					 (long) iter.getSpan(), 
					 Integer.MAX_VALUE);
	}

	// while rounding we could lose several pixels.
        int roundError = targetSpan - totalOffset - 
	    (int)iter.getTrailingCollapseSpan() - 
	    (int)iter.getBorderWidth();
	int adj = (roundError > 0) ? 1 : -1;
	roundError *= adj;

        boolean canAdjust = true;
        while (roundError > 0 && canAdjust) {
	    // check for infinite loop
	    canAdjust = false;
	    int offsetAdjust = 0;
	    // try to distribute roundError. one pixel per cell
	    for (int i = 0; i < n; i++) {
		iter.setIndex(i);
		iter.setOffset(iter.getOffset() + offsetAdjust);
                int curSpan = iter.getSpan();
                if (roundError > 0) {
		    int boundGap = (adj > 0) ? 
			(int)Math.floor(iter.getMaximumSpan(targetSpan)) - curSpan : 
			curSpan - (int)Math.ceil(iter.getMinimumSpan(targetSpan));
		    if (boundGap >= 1) {
			canAdjust = true;
			iter.setSpan(curSpan + adj);
			offsetAdjust += adj;
			roundError--;
		    }
                }
	    }
	}
!!!9944731.java!!!	writeObject(inout s : ObjectOutputStream) : void
        s.defaultWriteObject();

	// Determine what values in valueConvertor need to be written out.
	Enumeration keys = valueConvertor.keys();
	s.writeInt(valueConvertor.size());
	if (keys != null) {
	    while (keys.hasMoreElements()) {
		Object key = keys.nextElement();
		Object value = valueConvertor.get(key);
		if (!(key instanceof Serializable) &&
		    (key = StyleContext.getStaticAttributeKey(key)) == null) {
		    // Should we throw an exception here?
		    key = null;
		    value = null;
		}
		else if (!(value instanceof Serializable) &&
		    (value = StyleContext.getStaticAttributeKey(value)) == null){
		    // Should we throw an exception here?
		    key = null;
		    value = null;
		}
		s.writeObject(key);
		s.writeObject(value);
	    }
	}
!!!9944859.java!!!	readObject(inout s : ObjectInputStream) : void
        s.defaultReadObject();
	// Reconstruct the hashtable.
	int numValues = s.readInt();
	valueConvertor = new Hashtable(Math.max(1, numValues));
	while (numValues-- > 0) {
	    Object key = s.readObject();
	    Object value = s.readObject();
	    Object staticKey = StyleContext.getStaticAttribute(key);
	    if (staticKey != null) {
		key = staticKey;
	    }
	    Object staticValue = StyleContext.getStaticAttribute(value);
	    if (staticValue != null) {
		value = staticValue;
	    }
	    if (key != null && value != null) {
		valueConvertor.put(key, value);
	    }
	}
!!!9944987.java!!!	getStyleSheet(inout ss : StyleSheet) : StyleSheet
        if (ss != null) {
            styleSheet = ss;
        }
        return styleSheet;
