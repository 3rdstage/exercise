class SnmpSubBulkRequestHandler
!!!3468315.java!!!	SnmpSubBulkRequestHandler(inout engine : SnmpEngine, inout server : SnmpAdaptorServer, inout incRequest : SnmpIncomingRequest, inout agent : SnmpMibAgent, inout req : SnmpPdu, in nonRepeat : int, in maxRepeat : int, in R : int)
	super(engine, incRequest, agent, req);
	init(server, req, nonRepeat, maxRepeat, R);
!!!3468443.java!!!	SnmpSubBulkRequestHandler(inout server : SnmpAdaptorServer, inout agent : SnmpMibAgent, inout req : SnmpPdu, in nonRepeat : int, in maxRepeat : int, in R : int)
	super(agent, req);
	init(server, req, nonRepeat, maxRepeat, R);
!!!3468571.java!!!	run() : void
    
        size= varBind.size();
    
        try {
            // Invoke a getBulk operation
            //
	    /* NPCTE fix for bugId 4492741, esc 0, 16-August-2001 */
	    final ThreadContext oldContext =
                ThreadContext.push("SnmpUserData",data);
	    try {
		if (isTraceOn()) {
                	trace("run", "[" + Thread.currentThread() + 
			"]:getBulk operation on " + agent.getMibName());
		}
		agent.getBulk(createMibRequest(varBind,version,data), 
			      nonRepeat, maxRepeat);
	    } finally {
                ThreadContext.restore(oldContext);
            }  
	    /* end of NPCTE fix for bugId 4492741 */
	    
        } catch(SnmpStatusException x) {
            errorStatus = x.getStatus() ;
            errorIndex=  x.getErrorIndex();
            if (isDebugOn()) {
                debug("run", "[" + Thread.currentThread() + 
		      "]:an Snmp error occured during the operation");
                debug("run", x);
            }
        }
        catch(Exception x) {
            errorStatus = SnmpDefinitions.snmpRspGenErr ;
            if (isDebugOn()) {
                debug("run", "[" + Thread.currentThread() + 
		      "]:a generic error occured during the operation");
                debug("run", x);
            }
        }
        if (isTraceOn()) {
            trace("run", "[" + Thread.currentThread() + 
		  "]:operation completed");
        }
!!!3468699.java!!!	init(inout server : SnmpAdaptorServer, inout req : SnmpPdu, in nonRepeat : int, in maxRepeat : int, in R : int) : void
	this.server = server;
        this.nonRepeat= nonRepeat;
        this.maxRepeat= maxRepeat;  
        this.globalR= R;
	
	final int max= translation.length;
        final SnmpVarBind[] list= req.varBindList;
        final NonSyncVector nonSyncVarBind = ((NonSyncVector)varBind);
        for(int i=0; i < max; i++) {
            translation[i]= i;
            // we need to allocate a new SnmpVarBind. Otherwise the first
            // sub request will modify the list...
            //
	    final SnmpVarBind newVarBind = 
		new SnmpVarBind(list[i].oid, list[i].value);
            nonSyncVarBind.addNonSyncElement(newVarBind);
        }
!!!3468827.java!!!	findVarBind(inout element : SnmpVarBind, inout result : SnmpVarBind) : SnmpVarBind
	
	if (element == null) return null;

	if (result.oid == null) {
	     return element;
	}

	if (element.value == SnmpVarBind.endOfMibView) return result;

	if (result.value == SnmpVarBind.endOfMibView) return element;

	final SnmpValue val = result.value;

	int comp = element.oid.compareTo(result.oid);
	if(isDebugOn()) {
	    trace("findVarBind","Comparing OID element : " + element.oid +
		  " with result : " + result.oid);
	    trace("findVarBind","Values element : " + element.value +
		  " result : " + result.value);
	}
	if (comp < 0) {
	    // Take the smallest (lexicographically)
	    //
	    return element;
	}
	else {
	    if(comp == 0) {
		// Must compare agent used for reply
		// Take the deeper within the reply
		if(isDebugOn()) {
		    trace("findVarBind"," oid overlapping. Oid : " + 
			  element.oid + "value :" + element.value);
		    trace("findVarBind","Already present varBind : " + 
			  result);
		}
		SnmpOid oid = result.oid;
		SnmpMibAgent deeperAgent = server.getAgentMib(oid);

		if(isDebugOn())
		    trace("findVarBind","Deeper agent : " + deeperAgent);
		if(deeperAgent == agent) {
		    if(isDebugOn())
			trace("updateResult","The current agent is the deeper one. Update the value with the current one");
		    return element;
		} else {
		    if(isDebugOn())
			trace("updateResult","Current is not the deeper, return the previous one.");
		    return result;
		}
		    
		/*
		   Vector v = new Vector();
		   SnmpMibRequest getReq = createMibRequest(v,
		   version,
		   null);
		   SnmpVarBind realValue = new SnmpVarBind(oid);
		   getReq.addVarBind(realValue);
		   try {
		   deeperAgent.get(getReq);
		   } catch(SnmpStatusException e) {
		   e.printStackTrace();
		   }
		   
		   if(isDebugOn())
		   trace("findVarBind", "Biggest priority value is : " +  
		   realValue.value);
		   
		   return realValue;
		*/
		
	    }
	    else {
		if(isDebugOn())
		    trace("findVarBind",
			  "The right varBind is the already present one");
		return result;
	    }
	}
!!!3468955.java!!!	updateResult(inout result : SnmpVarBind) : void
	// we can assume that the run method is over ...
        // 

        final Enumeration e= varBind.elements();
        final int max= result.length;

        // First go through all the values once ...
        for(int i=0; i < size; i++) {
            // May be we should control the position ...
            //
            if (e.hasMoreElements() == false)
                return;

	    // bugId 4641694: must check position in order to avoid 
	    //       ArrayIndexOutOfBoundException
	    final int pos=translation[i];
	    if (pos >= max) {
		debug("updateResult","Position `"+pos+"' is out of bound...");
		continue;
	    }

	    final SnmpVarBind element= (SnmpVarBind) e.nextElement();
	    
	    if (element == null) continue;
	    if (isDebugOn())
		trace("updateResult", "Non repeaters Current element : " + 
		      element + " from agent : " + agent);
	    final SnmpVarBind res = findVarBind(element,result[pos]);
	    
	    if(res == null) continue;
	    
	    result[pos] = res;
	}
 
        // Now update the values which have been repeated
        // more than once.
        int localR= size - nonRepeat;
        for (int i = 2 ; i <= maxRepeat ; i++) {
            for (int r = 0 ; r < localR ; r++) {
                final int pos = (i-1)* globalR + translation[nonRepeat + r] ;
                if (pos >= max)
                    return;
                if (e.hasMoreElements() ==false)
                    return;
                final SnmpVarBind element= (SnmpVarBind) e.nextElement();
		
		if (element == null) continue;
		if (isDebugOn())
		    trace("updateResult", "Repeaters Current element : " + 
			  element + " from agent : " + agent);
		final SnmpVarBind res = findVarBind(element, result[pos]);
		
		if(res == null) continue;
	    
		result[pos] = res;
            }
        }
!!!3469083.java!!!	makeDebugTag() : String
        return "SnmpSubBulkRequestHandler";
