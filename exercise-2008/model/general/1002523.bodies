class Sync
!!!7998235.java!!!	nonfairTryAcquire(in acquires : int) : boolean
            // mask out readlocks if called from condition methods
            acquires = exclusiveCount(acquires);
            Thread current = Thread.currentThread();
            int c = getState();
            int w = exclusiveCount(c);
            if (w + acquires >= SHARED_UNIT)
                throw new Error("Maximum lock count exceeded");
            if (c != 0 && (w == 0 || current != owner))
                return false;
            if (!compareAndSetState(c, c + acquires)) 
                return false;
            owner = current;
            return true;
!!!7998363.java!!!	nonfairTryAcquireShared(in acquires : int) : int
            for (;;) {
                int c = getState();
                int nextc = c + (acquires << SHARED_SHIFT);
                if (nextc < c)
                    throw new Error("Maximum lock count exceeded");
                if (exclusiveCount(c) != 0 && 
                    owner != Thread.currentThread())
                    return -1;
                if (compareAndSetState(c, nextc)) 
                    return 1;
                // Recheck count if lost CAS
            }
!!!7998491.java!!!	tryRelease(in releases : int) : boolean
            Thread current = Thread.currentThread();
            int c = getState();
            if (owner != current)
                throw new IllegalMonitorStateException();
            int nextc = c - releases;
            boolean free = false;
            if (exclusiveCount(c) == releases) {
                free = true;
                owner = null;
            }
            setState(nextc);
            return free;
!!!7998619.java!!!	tryReleaseShared(in releases : int) : boolean
            for (;;) {
                int c = getState();
                int nextc = c - (releases << SHARED_SHIFT);
                if (nextc < 0)
                    throw new IllegalMonitorStateException();
                if (compareAndSetState(c, nextc)) 
                    return nextc == 0;
            }
!!!7998747.java!!!	isHeldExclusively() : boolean
            return exclusiveCount(getState()) != 0 && 
                owner == Thread.currentThread();
!!!7998875.java!!!	newCondition() : ConditionObject
 
            return new ConditionObject(); 
!!!7999003.java!!!	getOwner() : Thread
            int c = exclusiveCount(getState());
            Thread o = owner;
            return (c == 0)? null : o;
!!!7999131.java!!!	getReadLockCount() : int
            return sharedCount(getState());
!!!7999259.java!!!	isWriteLocked() : boolean
            return exclusiveCount(getState()) != 0;
!!!7999387.java!!!	getWriteHoldCount() : int
            int c = exclusiveCount(getState());
            Thread o = owner;
            return (o == Thread.currentThread())? c : 0;
!!!7999515.java!!!	readObject(inout s : ObjectInputStream) : void
            s.defaultReadObject();
            setState(0); // reset to unlocked state
!!!7999643.java!!!	getCount() : int
 return getState();
