class Package
!!!7016091.java!!!	getName() : String
	return pkgName;
!!!7016219.java!!!	getSpecificationTitle() : String
	return specTitle;
!!!7016347.java!!!	getSpecificationVersion() : String
	return specVersion;
!!!7016475.java!!!	getSpecificationVendor() : String
	return specVendor;
!!!7016603.java!!!	getImplementationTitle() : String
	return implTitle;
!!!7016731.java!!!	getImplementationVersion() : String
    	return implVersion;
!!!7016859.java!!!	getImplementationVendor() : String
    	return implVendor;
!!!7016987.java!!!	isSealed() : boolean
	return sealBase != null;
!!!7017115.java!!!	isSealed(inout url : URL) : boolean
	return url.equals(sealBase);
!!!7017243.java!!!	isCompatibleWith(in desired : String) : boolean
    	if (specVersion == null || specVersion.length() < 1) {
	    throw new NumberFormatException("Empty version string");
	}

	String [] sa = specVersion.split("\\.", -1);
	int [] si = new int[sa.length];
	for (int i = 0; i < sa.length; i++) {
	    si[i] = Integer.parseInt(sa[i]);
	    if (si[i] < 0)
  		throw NumberFormatException.forInputString("" + si[i]);
	}

	String [] da = desired.split("\\.", -1);
	int [] di = new int[da.length];
	for (int i = 0; i < da.length; i++) {
	    di[i] = Integer.parseInt(da[i]);
	    if (di[i] < 0)
		throw NumberFormatException.forInputString("" + di[i]);
	}

 	int len = Math.max(di.length, si.length);
 	for (int i = 0; i < len; i++) {
	    int d = (i < di.length ? di[i] : 0);
 	    int s = (i < si.length ? si[i] : 0);
	    if (s < d)
		return false;
	    if (s > d)
		return true;
	}
	return true;
!!!7017371.java!!!	getPackage(in name : String) : Package
	ClassLoader l = ClassLoader.getCallerClassLoader();
	if (l != null) {
	    return l.getPackage(name);
	} else {
	    return getSystemPackage(name);
	}
!!!7017499.java!!!	getPackages() : Package
	ClassLoader l = ClassLoader.getCallerClassLoader();
	if (l != null) {
	    return l.getPackages();
	} else {
	    return getSystemPackages();
	}
!!!7017627.java!!!	getPackage(inout c : Class) : Package
	String name = c.getName();
	int i = name.lastIndexOf('.');
	if (i != -1) {
	    name = name.substring(0, i);
	    ClassLoader cl = c.getClassLoader();
	    if (cl != null) {
		return cl.getPackage(name);
	    } else {
		return getSystemPackage(name);
	    }
	} else {
	    return null;
	}
!!!7017755.java!!!	hashCode() : int
    	return pkgName.hashCode();
!!!7017883.java!!!	toString() : String
	String spec = specTitle;
	String ver =  specVersion;
	if (spec != null && spec.length() > 0)
	    spec = ", " + spec;
	else
	    spec = "";
	if (ver != null && ver.length() > 0)
	    ver = ", version " + ver;
	else
	    ver = "";
	return "package " + pkgName + spec + ver;
!!!7018011.java!!!	getPackageInfo() : Class
        if (packageInfo == null) {
            try {
                packageInfo = Class.forName(pkgName + ".package-info", false, loader);
            } catch (ClassNotFoundException ex) {
                // store a proxy for the package info that has no annotations
                class PackageInfoProxy {}
                packageInfo = PackageInfoProxy.class;
            }
        }
        return packageInfo;
!!!7018139.java!!!	getAnnotation(inout annotationClass : Class) : A
        return getPackageInfo().getAnnotation(annotationClass);
!!!7018267.java!!!	isAnnotationPresent(inout annotationClass : Class) : boolean
        return getPackageInfo().isAnnotationPresent(annotationClass);
!!!7018395.java!!!	getAnnotations() : Annotation
 
        return getPackageInfo().getAnnotations();
!!!7018523.java!!!	getDeclaredAnnotations() : Annotation
        return getPackageInfo().getDeclaredAnnotations();
!!!7018651.java!!!	Package(in name : String, in spectitle : String, in specversion : String, in specvendor : String, in impltitle : String, in implversion : String, in implvendor : String, inout sealbase : URL, inout loader : ClassLoader)
    	pkgName = name;
	implTitle = impltitle;
	implVersion = implversion;
	implVendor = implvendor;
	specTitle = spectitle;
	specVersion = specversion;
	specVendor = specvendor;
	sealBase = sealbase;
	this.loader = loader;
!!!7018779.java!!!	Package(in name : String, inout man : Manifest, inout url : URL, inout loader : ClassLoader)
	String path = name.replace('.', '/').concat("/");
	String sealed = null;
	String specTitle= null;
	String specVersion= null;
	String specVendor= null;
	String implTitle= null;
	String implVersion= null;
	String implVendor= null;
	URL sealBase= null;
	Attributes attr = man.getAttributes(path);
	if (attr != null) {
	    specTitle   = attr.getValue(Name.SPECIFICATION_TITLE);
	    specVersion = attr.getValue(Name.SPECIFICATION_VERSION);
	    specVendor  = attr.getValue(Name.SPECIFICATION_VENDOR);
	    implTitle   = attr.getValue(Name.IMPLEMENTATION_TITLE);
	    implVersion = attr.getValue(Name.IMPLEMENTATION_VERSION);
	    implVendor  = attr.getValue(Name.IMPLEMENTATION_VENDOR);
	    sealed      = attr.getValue(Name.SEALED);
	}
	attr = man.getMainAttributes();
	if (attr != null) {
	    if (specTitle == null) {
		specTitle = attr.getValue(Name.SPECIFICATION_TITLE);
	    }
	    if (specVersion == null) {
		specVersion = attr.getValue(Name.SPECIFICATION_VERSION);
	    }
	    if (specVendor == null) {
		specVendor = attr.getValue(Name.SPECIFICATION_VENDOR);
	    }
	    if (implTitle == null) {
		implTitle = attr.getValue(Name.IMPLEMENTATION_TITLE);
	    }
	    if (implVersion == null) {
		implVersion = attr.getValue(Name.IMPLEMENTATION_VERSION);
	    }
	    if (implVendor == null) {
		implVendor = attr.getValue(Name.IMPLEMENTATION_VENDOR);
	    }
	    if (sealed == null) {
		sealed = attr.getValue(Name.SEALED);
	    }
	}
	if ("true".equalsIgnoreCase(sealed)) {
	    sealBase = url;
	}
	pkgName = name;
	this.specTitle = specTitle;
	this.specVersion = specVersion;
	this.specVendor = specVendor;
	this.implTitle = implTitle;
	this.implVersion = implVersion;
	this.implVendor = implVendor;
	this.sealBase = sealBase;
	this.loader = loader;
!!!7018907.java!!!	getSystemPackage(in name : String) : Package
	synchronized (pkgs) {
	    Package pkg = (Package)pkgs.get(name);
	    if (pkg == null) {
		name = name.replace('.', '/').concat("/");
		String fn = getSystemPackage0(name);
		if (fn != null) {
		    pkg = defineSystemPackage(name, fn);
		}
	    }
	    return pkg;
	}
!!!7019035.java!!!	getSystemPackages() : Package
	// First, update the system package map with new package names
	String[] names = getSystemPackages0();
	synchronized (pkgs) {
	    for (int i = 0; i < names.length; i++) {
		defineSystemPackage(names[i], getSystemPackage0(names[i]));
	    }
	    return (Package[])pkgs.values().toArray(new Package[pkgs.size()]);
	}
!!!7019163.java!!!	defineSystemPackage(in iname : String, in fn : String) : Package
	return (Package) AccessController.doPrivileged(new PrivilegedAction() {
	    public Object run() {
		String name = iname;
		// Get the cached code source url for the file name
		URL url = (URL)urls.get(fn);
		if (url == null) {
		    // URL not found, so create one
		    File file = new File(fn);
		    try {
			url = ParseUtil.fileToEncodedURL(file);
		    } catch (MalformedURLException e) {
		    }
		    if (url != null) {
			urls.put(fn, url);
			// If loading a JAR file, then also cache the manifest
			if (file.isFile()) {
			    mans.put(fn, loadManifest(fn));
			}
		    }
		}
		// Convert to "."-separated package name
		name = name.substring(0, name.length() - 1).replace('/', '.');
		Package pkg;
		Manifest man = (Manifest)mans.get(fn);
		if (man != null) {
		    pkg = new Package(name, man, url, null);
		} else {
		    pkg = new Package(name, null, null, null,
				      null, null, null, null, null);
		}
		pkgs.put(name, pkg);
		return pkg;
	    }
	});
!!!7019291.java!!!	loadManifest(in fn : String) : Manifest
	try {
	    FileInputStream fis = new FileInputStream(fn);
	    JarInputStream jis = new JarInputStream(fis, false);
	    Manifest man = jis.getManifest();
	    jis.close();
	    return man;
	} catch (IOException e) {
	    return null;
	}
