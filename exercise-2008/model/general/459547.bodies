class JSplitPane
!!!9090075.java!!!	JSplitPane()
        this(JSplitPane.HORIZONTAL_SPLIT, false,
            new JButton(UIManager.getString("SplitPane.leftButtonText")),
            new JButton(UIManager.getString("SplitPane.rightButtonText")));
!!!9090203.java!!!	JSplitPane(in newOrientation : int)
        this(newOrientation, false);
!!!9090331.java!!!	JSplitPane(in newOrientation : int, inout newContinuousLayout : boolean)
        this(newOrientation, newContinuousLayout, null, null);
!!!9090459.java!!!	JSplitPane(in newOrientation : int, inout newLeftComponent : Component, inout newRightComponent : Component)
        this(newOrientation, false, newLeftComponent, newRightComponent);
!!!9090587.java!!!	JSplitPane(in newOrientation : int, inout newContinuousLayout : boolean, inout newLeftComponent : Component, inout newRightComponent : Component)
        super();

	dividerLocation = -1;
        setLayout(null);
	setUIProperty("opaque", Boolean.TRUE);
        orientation = newOrientation;
        if (orientation != HORIZONTAL_SPLIT && orientation != VERTICAL_SPLIT)
            throw new IllegalArgumentException("cannot create JSplitPane, " +
                                               "orientation must be one of " +
                                               "JSplitPane.HORIZONTAL_SPLIT " +
                                               "or JSplitPane.VERTICAL_SPLIT");
        continuousLayout = newContinuousLayout;
        if (newLeftComponent != null)
            setLeftComponent(newLeftComponent);
        if (newRightComponent != null)
            setRightComponent(newRightComponent);
        updateUI();

!!!9090715.java!!!	setUI(inout ui : SplitPaneUI) : void
        if ((SplitPaneUI)this.ui != ui) {
            super.setUI(ui);
            revalidate();
        }
!!!9090843.java!!!	getUI() : SplitPaneUI
        return (SplitPaneUI)ui;
!!!9090971.java!!!	updateUI() : void
        setUI((SplitPaneUI)UIManager.getUI(this));
        revalidate();
!!!9091099.java!!!	getUIClassID() : String
        return uiClassID;
!!!9091227.java!!!	setDividerSize(in newSize : int) : void
        int           oldSize = dividerSize;

	dividerSizeSet = true;
        if (oldSize != newSize) {
            dividerSize = newSize;
            firePropertyChange(DIVIDER_SIZE_PROPERTY, oldSize, newSize);
        }
!!!9091355.java!!!	getDividerSize() : int
        return dividerSize;
!!!9091483.java!!!	setLeftComponent(inout comp : Component) : void
        if (comp == null) {
            if (leftComponent != null) {
                remove(leftComponent);
                leftComponent = null;
            }
        } else {
            add(comp, JSplitPane.LEFT);
        }
!!!9091611.java!!!	getLeftComponent() : Component
        return leftComponent;
!!!9091739.java!!!	setTopComponent(inout comp : Component) : void
        setLeftComponent(comp);
!!!9091867.java!!!	getTopComponent() : Component
        return leftComponent;
!!!9091995.java!!!	setRightComponent(inout comp : Component) : void
        if (comp == null) {
            if (rightComponent != null) {
                remove(rightComponent);
                rightComponent = null;
            }
        } else {
            add(comp, JSplitPane.RIGHT);
        }
!!!9092123.java!!!	getRightComponent() : Component
        return rightComponent;
!!!9092251.java!!!	setBottomComponent(inout comp : Component) : void
        setRightComponent(comp);
!!!9092379.java!!!	getBottomComponent() : Component
        return rightComponent;
!!!9092507.java!!!	setOneTouchExpandable(inout newValue : boolean) : void
        boolean           oldValue = oneTouchExpandable;

        oneTouchExpandable = newValue;
        oneTouchExpandableSet = true;
        firePropertyChange(ONE_TOUCH_EXPANDABLE_PROPERTY, oldValue, newValue);
        repaint();
!!!9092635.java!!!	isOneTouchExpandable() : boolean
        return oneTouchExpandable;
!!!9092763.java!!!	setLastDividerLocation(in newLastLocation : int) : void
        int               oldLocation = lastDividerLocation;

        lastDividerLocation = newLastLocation;
        firePropertyChange(LAST_DIVIDER_LOCATION_PROPERTY, oldLocation,
                           newLastLocation);
!!!9092891.java!!!	getLastDividerLocation() : int
        return lastDividerLocation;
!!!9093019.java!!!	setOrientation(in orientation : int) : void
        if ((orientation != VERTICAL_SPLIT) &&
            (orientation != HORIZONTAL_SPLIT)) {
           throw new IllegalArgumentException("JSplitPane: orientation must " +
                                              "be one of " +
                                              "JSplitPane.VERTICAL_SPLIT or " +
                                              "JSplitPane.HORIZONTAL_SPLIT");
        }

        int           oldOrientation = this.orientation;

        this.orientation = orientation;
        firePropertyChange(ORIENTATION_PROPERTY, oldOrientation, orientation);
!!!9093147.java!!!	getOrientation() : int
        return orientation;
!!!9093275.java!!!	setContinuousLayout(inout newContinuousLayout : boolean) : void
        boolean           oldCD = continuousLayout;

        continuousLayout = newContinuousLayout;
        firePropertyChange(CONTINUOUS_LAYOUT_PROPERTY, oldCD,
                           newContinuousLayout);
!!!9093403.java!!!	isContinuousLayout() : boolean
        return continuousLayout;
!!!9093531.java!!!	setResizeWeight(in value : double) : void
	if (value < 0 || value > 1) {
	    throw new IllegalArgumentException("JSplitPane weight must be between 0 and 1");
	}
	double         oldWeight = resizeWeight;

	resizeWeight = value;
	firePropertyChange(RESIZE_WEIGHT_PROPERTY, oldWeight, value);
!!!9093659.java!!!	getResizeWeight() : double
	return resizeWeight;
!!!9093787.java!!!	resetToPreferredSizes() : void
        SplitPaneUI         ui = getUI();

        if (ui != null) {
            ui.resetToPreferredSizes(this);
        }
!!!9093915.java!!!	setDividerLocation(in proportionalLocation : double) : void
        if (proportionalLocation < 0.0 || 
           proportionalLocation > 1.0) {
            throw new IllegalArgumentException("proportional location must " +
                                               "be between 0.0 and 1.0.");
        }
        if (getOrientation() == VERTICAL_SPLIT) {
            setDividerLocation((int)((double)(getHeight() - getDividerSize()) *
                                     proportionalLocation));
        } else {
            setDividerLocation((int)((double)(getWidth() - getDividerSize()) *
                                     proportionalLocation));
        }
!!!9094043.java!!!	setDividerLocation(in location : int) : void
	int                 oldValue = dividerLocation;

	dividerLocation = location;

	// Notify UI.
        SplitPaneUI         ui = getUI();

        if (ui != null) {
            ui.setDividerLocation(this, location);
        }

	// Then listeners
	firePropertyChange(DIVIDER_LOCATION_PROPERTY, oldValue, location);

	// And update the last divider location.
	setLastDividerLocation(oldValue);
!!!9094171.java!!!	getDividerLocation() : int
	return dividerLocation;
!!!9094299.java!!!	getMinimumDividerLocation() : int
        SplitPaneUI         ui = getUI();

        if (ui != null) {
            return ui.getMinimumDividerLocation(this);
        }
        return -1;
!!!9094427.java!!!	getMaximumDividerLocation() : int
        SplitPaneUI         ui = getUI();

        if (ui != null) {
            return ui.getMaximumDividerLocation(this);
        }
        return -1;
!!!9094555.java!!!	remove(inout component : Component) : void
        if (component == leftComponent) {
            leftComponent = null;
        } else if (component == rightComponent) {
            rightComponent = null;
        }
        super.remove(component);

        // Update the JSplitPane on the screen
        revalidate();
        repaint();
!!!9094683.java!!!	remove(in index : int) : void
        Component    comp = getComponent(index);

        if (comp == leftComponent) {
            leftComponent = null;
        } else if (comp == rightComponent) {
            rightComponent = null;
        }
        super.remove(index);

        // Update the JSplitPane on the screen
        revalidate();
        repaint();
!!!9094811.java!!!	removeAll() : void
        leftComponent = rightComponent = null;
        super.removeAll();

        // Update the JSplitPane on the screen
        revalidate();
        repaint();
!!!9094939.java!!!	isValidateRoot() : boolean
        return true;
!!!9095067.java!!!	addImpl(inout comp : Component, inout constraints : Object, in index : int) : void
        Component             toRemove;

        if (constraints != null && !(constraints instanceof String)) {
            throw new IllegalArgumentException("cannot add to layout: " +
                                               "constraint must be a string " +
                                               "(or null)");
        }

        /* If the constraints are null and the left/right component is
           invalid, add it at the left/right component. */
        if (constraints == null) {
            if (getLeftComponent() == null) {
                constraints = JSplitPane.LEFT;
            } else if (getRightComponent() == null) {
                constraints = JSplitPane.RIGHT;
            }
        }
            
        /* Find the Component that already exists and remove it. */
        if (constraints != null && (constraints.equals(JSplitPane.LEFT) ||
                                   constraints.equals(JSplitPane.TOP))) {
            toRemove = getLeftComponent();
            if (toRemove != null) {
                remove(toRemove);
            }
            leftComponent = comp;
            index = -1;
        } else if (constraints != null &&
                   (constraints.equals(JSplitPane.RIGHT) ||
                    constraints.equals(JSplitPane.BOTTOM))) {
            toRemove = getRightComponent();
            if (toRemove != null) {
                remove(toRemove);
            }
            rightComponent = comp;
            index = -1;
        } else if (constraints != null &&
                constraints.equals(JSplitPane.DIVIDER)) {
            index = -1;
        }
        /* LayoutManager should raise for else condition here. */

        super.addImpl(comp, constraints, index);

        // Update the JSplitPane on the screen
        revalidate();
        repaint();
!!!9095195.java!!!	paintChildren(inout g : Graphics) : void
        super.paintChildren(g);

        SplitPaneUI        ui = getUI();

        if (ui != null) {
            Graphics           tempG = g.create();
            ui.finishedPaintingChildren(this, tempG);
            tempG.dispose();
        }
!!!9095323.java!!!	writeObject(inout s : ObjectOutputStream) : void
        s.defaultWriteObject();
        if (getUIClassID().equals(uiClassID)) {
            byte count = JComponent.getWriteObjCounter(this);
            JComponent.setWriteObjCounter(this, --count);
            if (count == 0 && ui != null) {
                ui.installUI(this);
            }
        }
!!!9095451.java!!!	setUIProperty(in propertyName : String, inout value : Object) : void
        if (propertyName == "dividerSize") {
	    if (!dividerSizeSet) {
		setDividerSize(((Number)value).intValue());
		dividerSizeSet = false;
	    }
        } else if (propertyName == "oneTouchExpandable") {
            if (!oneTouchExpandableSet) {
                setOneTouchExpandable(((Boolean)value).booleanValue());
                oneTouchExpandableSet = false;
            }
	} else {
	    super.setUIProperty(propertyName, value);
	}
!!!9095579.java!!!	paramString() : String
        String orientationString = (orientation == HORIZONTAL_SPLIT ?
                                    "HORIZONTAL_SPLIT" : "VERTICAL_SPLIT");
        String continuousLayoutString = (continuousLayout ?
                                         "true" : "false");
        String oneTouchExpandableString = (oneTouchExpandable ?
                                           "true" : "false");

        return super.paramString() +
        ",continuousLayout=" + continuousLayoutString +
        ",dividerSize=" + dividerSize +
        ",lastDividerLocation=" + lastDividerLocation +
        ",oneTouchExpandable=" + oneTouchExpandableString +
        ",orientation=" + orientationString;
!!!9095707.java!!!	getAccessibleContext() : AccessibleContext
        if (accessibleContext == null) {
            accessibleContext = new AccessibleJSplitPane();
        }
        return accessibleContext;
