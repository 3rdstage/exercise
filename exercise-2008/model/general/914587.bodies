class Manifest
!!!8033563.java!!!	Manifest(inout is : InputStream)
	read(is);
!!!8033691.java!!!	Manifest(inout man : Manifest)
	attr.putAll(man.getMainAttributes());
	entries.putAll(man.getEntries());
!!!8033819.java!!!	getMainAttributes() : Attributes
	return attr;
!!!8033947.java!!!	getEntries() : Map
	return entries;
!!!8034075.java!!!	getAttributes(in name : String) : Attributes
	return (Attributes)getEntries().get(name);
!!!8034203.java!!!	clear() : void
	attr.clear();
	entries.clear();
!!!8034331.java!!!	write(inout out : OutputStream) : void
	DataOutputStream dos = new DataOutputStream(out);
	// Write out the main attributes for the manifest
	attr.writeMain(dos);
	// Now write out the pre-entry attributes
	Iterator it = entries.entrySet().iterator();
	while (it.hasNext()) {
	    Map.Entry e = (Map.Entry)it.next();
            StringBuffer buffer = new StringBuffer("Name: ");
            String value = (String)e.getKey();
            if (value != null) {
                byte[] vb = value.getBytes("UTF8");
                value = new String(vb, 0, 0, vb.length);
            }
	    buffer.append(value);
	    buffer.append("\r\n");
            make72Safe(buffer);
            dos.writeBytes(buffer.toString());
	    ((Attributes)e.getValue()).write(dos);
	}
	dos.flush();
!!!8034459.java!!!	make72Safe(inout line : StringBuffer) : void
        int length = line.length();
        if (length > 72) {
            int index = 70;
            while (index < length - 2) {
                line.insert(index, "\r\n ");
                index += 72;
                length += 3;
            }
        }
        return;
!!!8034587.java!!!	read(inout is : InputStream) : void
	// Buffered input stream for reading manifest data
	FastInputStream fis = new FastInputStream(is);
	// Line buffer
	byte[] lbuf = new byte[512];
	// Read the main attributes for the manifest
	attr.read(fis, lbuf);
	// Total number of entries, attributes read
	int ecount = 0, acount = 0;
	// Average size of entry attributes
	int asize = 2;
	// Now parse the manifest entries
	int len;
	String name = null;
        boolean skipEmptyLines = true;
        byte[] lastline = null;

	while ((len = fis.readLine(lbuf)) != -1) {
	    if (lbuf[--len] != '\n') {
		throw new IOException("manifest line too long");
	    }
	    if (len > 0 && lbuf[len-1] == '\r') {
		--len;
	    }
            if (len == 0 && skipEmptyLines) {
                continue;
            }
            skipEmptyLines = false;

	    if (name == null) {
		name = parseName(lbuf, len);
		if (name == null) {
		    throw new IOException("invalid manifest format");                
		}
                if (fis.peek() == ' ') {
		    // name is wrapped
                    lastline = new byte[len - 6];
                    System.arraycopy(lbuf, 6, lastline, 0, len - 6);
                    continue;
                }
	    } else {
		// continuation line
                byte[] buf = new byte[lastline.length + len - 1];
                System.arraycopy(lastline, 0, buf, 0, lastline.length);
                System.arraycopy(lbuf, 1, buf, lastline.length, len - 1);
                if (fis.peek() == ' ') {
		    // name is wrapped
                    lastline = buf;
		    continue;
	        }
		name = new String(buf, 0, buf.length, "UTF8");
                lastline = null;
	    }
	    Attributes attr = getAttributes(name);
	    if (attr == null) {
		attr = new Attributes(asize);
		entries.put(name, attr);
	    }
	    attr.read(fis, lbuf);
	    ecount++;
	    acount += attr.size();
	    //XXX: Fix for when the average is 0. When it is 0, 
	    // you get an Attributes object with an initial
	    // capacity of 0, which tickles a bug in HashMap.
	    asize = Math.max(2, acount / ecount);

	    name = null;
            skipEmptyLines = true;
	}
!!!8034715.java!!!	parseName(in lbuf : byte, in len : int) : String
	if (toLower(lbuf[0]) == 'n' && toLower(lbuf[1]) == 'a' &&
	    toLower(lbuf[2]) == 'm' && toLower(lbuf[3]) == 'e' &&
	    lbuf[4] == ':' && lbuf[5] == ' ') {
            try {
	        return new String(lbuf, 6, len - 6, "UTF8");
            }
            catch (Exception e) {
            }
	}
	return null;
!!!8034843.java!!!	toLower(in c : int) : int
	return (c >= 'A' && c <= 'Z') ? 'a' + (c - 'A') : c;
!!!8034971.java!!!	equals(inout o : Object) : boolean
	if (o instanceof Manifest) {
	    Manifest m = (Manifest)o;
	    return attr.equals(m.getMainAttributes()) &&
		   entries.equals(m.getEntries());
	} else {
	    return false;
	}
!!!8035099.java!!!	hashCode() : int
	return attr.hashCode() + entries.hashCode();
!!!8035227.java!!!	clone() : Object
	return new Manifest(this);
