class BoxView
!!!2743963.java!!!	BoxView(inout elem : Element, in axis : int)
	super(elem);
	tempRect = new Rectangle();
	this.majorAxis = axis;

	majorOffsets = new int[0];
	majorSpans = new int[0];
	majorReqValid = false;
	majorAllocValid = false;
	minorOffsets = new int[0];
	minorSpans = new int[0];
	minorReqValid = false;
	minorAllocValid = false;
!!!2744091.java!!!	getAxis() : int
	return majorAxis;
!!!2744219.java!!!	setAxis(in axis : int) : void
	boolean axisChanged = (axis != majorAxis);
	majorAxis = axis;
	if (axisChanged) {
	    preferenceChanged(null, true, true);
	}
!!!2744347.java!!!	layoutChanged(in axis : int) : void
 	if (axis == majorAxis) {
 	    majorAllocValid = false;
 	} else {
 	    minorAllocValid = false;
 	}
!!!2744475.java!!!	isLayoutValid(in axis : int) : boolean
 	if (axis == majorAxis) {
 	    return majorAllocValid;
 	} else {
 	    return minorAllocValid;
 	}
!!!2744603.java!!!	paintChild(inout g : Graphics, inout alloc : Rectangle, in index : int) : void
	View child = getView(index);
	child.paint(g, alloc);
!!!2744731.java!!!	replace(in index : int, in length : int, inout elems : View) : void
	super.replace(index, length, elems);

	// invalidate cache 
	int nInserted = (elems != null) ? elems.length : 0;
	majorOffsets = updateLayoutArray(majorOffsets, index, nInserted);
	majorSpans = updateLayoutArray(majorSpans, index, nInserted);
	majorReqValid = false;
	majorAllocValid = false;
	minorOffsets = updateLayoutArray(minorOffsets, index, nInserted);
	minorSpans = updateLayoutArray(minorSpans, index, nInserted);
	minorReqValid = false;
	minorAllocValid = false;
!!!2744859.java!!!	updateLayoutArray(in oldArray : int, in offset : int, in nInserted : int) : int
	int n = getViewCount();
	int[] newArray = new int[n];

	System.arraycopy(oldArray, 0, newArray, 0, offset);
	System.arraycopy(oldArray, offset, 
			 newArray, offset + nInserted, n - nInserted - offset);
	return newArray;
!!!2744987.java!!!	forwardUpdate(inout ec : ElementChange, inout e : DocumentEvent, inout a : Shape, inout f : ViewFactory) : void
	boolean wasValid = isLayoutValid(majorAxis);
	super.forwardUpdate(ec, e, a, f);

	// determine if a repaint is needed
	if (wasValid && (! isLayoutValid(majorAxis))) {
	    // Repaint is needed because one of the tiled children 
	    // have changed their span along the major axis.  If there 
	    // is a hosting component and an allocated shape we repaint.
	    Component c = getContainer();
	    if ((a != null) && (c != null)) {
		int pos = e.getOffset();
		int index = getViewIndexAtPosition(pos);
		Rectangle alloc = getInsideAllocation(a);
		if (majorAxis == X_AXIS) {
		    alloc.x += majorOffsets[index];
		    alloc.width -= majorOffsets[index];
		} else {
		    alloc.y += minorOffsets[index];
		    alloc.height -= minorOffsets[index];
		}
		c.repaint(alloc.x, alloc.y, alloc.width, alloc.height);
	    }
	}
!!!2745115.java!!!	preferenceChanged(inout child : View, inout width : boolean, inout height : boolean) : void
	boolean majorChanged = (majorAxis == X_AXIS) ? width : height;
	boolean minorChanged = (majorAxis == X_AXIS) ? height : width;
	if (majorChanged) {
	    majorReqValid = false;
	    majorAllocValid = false;
	}
	if (minorChanged) {
	    minorReqValid = false;
	    minorAllocValid = false;
	}
	super.preferenceChanged(child, width, height);
!!!2745243.java!!!	getResizeWeight(in axis : int) : int
	checkRequests(axis);
        if (axis == majorAxis) {
	    if ((majorRequest.preferred != majorRequest.minimum) ||
		(majorRequest.preferred != majorRequest.maximum)) {
		return 1;
	    }
	} else {
	    if ((minorRequest.preferred != minorRequest.minimum) ||
		(minorRequest.preferred != minorRequest.maximum)) {
		return 1;
	    }
	}
	return 0;
!!!2745371.java!!!	setSpanOnAxis(in axis : int, in span : float) : void
	if (axis == majorAxis) {
	    if (majorSpan != (int) span) {
		majorAllocValid = false;
	    }
	    if (! majorAllocValid) {
		// layout the major axis
		majorSpan = (int) span;
		checkRequests(majorAxis);
		layoutMajorAxis(majorSpan, axis, majorOffsets, majorSpans);
		majorAllocValid = true;

		// flush changes to the children
		updateChildSizes();
	    }
	} else {
	    if (((int) span) != minorSpan) { 
		minorAllocValid = false;
	    }
	    if (! minorAllocValid) {
		// layout the minor axis
		minorSpan = (int) span;
		checkRequests(axis);
		layoutMinorAxis(minorSpan, axis, minorOffsets, minorSpans);
		minorAllocValid = true;

		// flush changes to the children
		updateChildSizes();
	    }
	}
!!!2745499.java!!!	updateChildSizes() : void
	int n = getViewCount();
	if (majorAxis == X_AXIS) {
	    for (int i = 0; i < n; i++) {
		View v = getView(i);
		v.setSize((float) majorSpans[i], (float) minorSpans[i]);
	    }
	} else {
	    for (int i = 0; i < n; i++) {
		View v = getView(i);
		v.setSize((float) minorSpans[i], (float) majorSpans[i]);
	    }
	}
!!!2745627.java!!!	getSpanOnAxis(in axis : int) : float
	if (axis == majorAxis) {
	    return majorSpan;
	} else {
	    return minorSpan;
	}
!!!2745755.java!!!	setSize(in width : float, in height : float) : void
	layout((int)(width - getLeftInset() - getRightInset()), 
	       (int)(height - getTopInset() - getBottomInset()));
!!!2745883.java!!!	paint(inout g : Graphics, inout allocation : Shape) : void
	Rectangle alloc = (allocation instanceof Rectangle) ?
	                   (Rectangle)allocation : allocation.getBounds();
	int n = getViewCount();
	int x = alloc.x + getLeftInset();
	int y = alloc.y + getTopInset();
	Rectangle clip = g.getClipBounds();
	for (int i = 0; i < n; i++) {
	    tempRect.x = x + getOffset(X_AXIS, i);
	    tempRect.y = y + getOffset(Y_AXIS, i);
	    tempRect.width = getSpan(X_AXIS, i);
	    tempRect.height = getSpan(Y_AXIS, i);
            if (tempRect.intersects(clip)) {
		paintChild(g, tempRect, i);
	    }
	}
!!!2746011.java!!!	getChildAllocation(in index : int, inout a : Shape) : Shape
	if (a != null) {
	    Shape ca = super.getChildAllocation(index, a);
	    if ((ca != null) && (! isAllocationValid())) {
		// The child allocation may not have been set yet.
		Rectangle r = (ca instanceof Rectangle) ? 
		    (Rectangle) ca : ca.getBounds();
		if ((r.width == 0) && (r.height == 0)) {
		    return null;
		}
	    }
	    return ca;
	}
	return null;
!!!2746139.java!!!	modelToView(in pos : int, inout a : Shape, inout b : Bias) : Shape
	if (! isAllocationValid()) {
	    Rectangle alloc = a.getBounds();
	    setSize(alloc.width, alloc.height);
	}
	return super.modelToView(pos, a, b);
!!!2746267.java!!!	viewToModel(in x : float, in y : float, inout a : Shape, inout bias : Bias) : int
	if (! isAllocationValid()) {
	    Rectangle alloc = a.getBounds();
	    setSize(alloc.width, alloc.height);
	}
	return super.viewToModel(x, y, a, bias);
!!!2746395.java!!!	getAlignment(in axis : int) : float
	checkRequests(axis);
	if (axis == majorAxis) {
	    return majorRequest.alignment;
	} else {
	    return minorRequest.alignment;
	}
!!!2746523.java!!!	getPreferredSpan(in axis : int) : float
	checkRequests(axis);
	float marginSpan = (axis == X_AXIS) ? getLeftInset() + getRightInset() :
	    getTopInset() + getBottomInset();
	if (axis == majorAxis) {
	    return ((float)majorRequest.preferred) + marginSpan;
	} else {
	    return ((float)minorRequest.preferred) + marginSpan;
	}
!!!2746651.java!!!	getMinimumSpan(in axis : int) : float
	checkRequests(axis);
	float marginSpan = (axis == X_AXIS) ? getLeftInset() + getRightInset() :
	    getTopInset() + getBottomInset();
	if (axis == majorAxis) {
	    return ((float)majorRequest.minimum) + marginSpan;
	} else {
	    return ((float)minorRequest.minimum) + marginSpan;
	}
!!!2746779.java!!!	getMaximumSpan(in axis : int) : float
	checkRequests(axis);
	float marginSpan = (axis == X_AXIS) ? getLeftInset() + getRightInset() :
	    getTopInset() + getBottomInset();
	if (axis == majorAxis) {
	    return ((float)majorRequest.maximum) + marginSpan;
	} else {
	    return ((float)minorRequest.maximum) + marginSpan;
	}
!!!2746907.java!!!	isAllocationValid() : boolean
	return (majorAllocValid && minorAllocValid);
!!!2747035.java!!!	isBefore(in x : int, in y : int, inout innerAlloc : Rectangle) : boolean
	if (majorAxis == View.X_AXIS) {
	    return (x < innerAlloc.x);
	} else {
	    return (y < innerAlloc.y);
	}
!!!2747163.java!!!	isAfter(in x : int, in y : int, inout innerAlloc : Rectangle) : boolean
	if (majorAxis == View.X_AXIS) {
	    return (x > (innerAlloc.width + innerAlloc.x));
	} else {
	    return (y > (innerAlloc.height + innerAlloc.y));
	}
!!!2747291.java!!!	getViewAtPoint(in x : int, in y : int, inout alloc : Rectangle) : View
	int n = getViewCount();
	if (majorAxis == View.X_AXIS) {
	    if (x < (alloc.x + majorOffsets[0])) {
		childAllocation(0, alloc);
		return getView(0);
	    }
	    for (int i = 0; i < n; i++) {
		if (x < (alloc.x + majorOffsets[i])) {
		    childAllocation(i - 1, alloc);
		    return getView(i - 1);
		}
	    }
	    childAllocation(n - 1, alloc);
	    return getView(n - 1);
	} else {
	    if (y < (alloc.y + majorOffsets[0])) {
		childAllocation(0, alloc);
		return getView(0);
	    }
	    for (int i = 0; i < n; i++) {
		if (y < (alloc.y + majorOffsets[i])) {
		    childAllocation(i - 1, alloc);
		    return getView(i - 1);
		}
	    }
	    childAllocation(n - 1, alloc);
	    return getView(n - 1);
	}
!!!2747419.java!!!	childAllocation(in index : int, inout alloc : Rectangle) : void
	alloc.x += getOffset(X_AXIS, index);
	alloc.y += getOffset(Y_AXIS, index);
	alloc.width = getSpan(X_AXIS, index);
	alloc.height = getSpan(Y_AXIS, index);
!!!2747547.java!!!	layout(in width : int, in height : int) : void
	setSpanOnAxis(X_AXIS, width);
	setSpanOnAxis(Y_AXIS, height);
!!!2747675.java!!!	getWidth() : int
	int span;
	if (majorAxis == X_AXIS) {
	    span = majorSpan;
	} else {
	    span = minorSpan;
	}
	span += getLeftInset() - getRightInset();
	return span;
!!!2747803.java!!!	getHeight() : int
	int span;
	if (majorAxis == Y_AXIS) {
	    span = majorSpan;
	} else {
	    span = minorSpan;
	}
	span += getTopInset() - getBottomInset();
	return span;
!!!2747931.java!!!	layoutMajorAxis(in targetSpan : int, in axis : int, in offsets : int, in spans : int) : void
	/*
	 * first pass, calculate the preferred sizes
	 * and the flexibility to adjust the sizes.
	 */
	long preferred = 0;
	int n = getViewCount();
	for (int i = 0; i < n; i++) {
	    View v = getView(i);
	    spans[i] = (int) v.getPreferredSpan(axis);
	    preferred += spans[i];
	}

	/*
	 * Second pass, expand or contract by as much as possible to reach
	 * the target span.  
	 */

	// determine the adjustment to be made
	long desiredAdjustment = targetSpan - preferred;
	float adjustmentFactor = 0.0f;
        int[] diffs = null;

	if (desiredAdjustment != 0) {
            long totalSpan = 0;
            diffs = new int[n];
            for (int i = 0; i < n; i++) {
                View v = getView(i);
                int tmp;
                if (desiredAdjustment < 0) {
                    tmp = (int)v.getMinimumSpan(axis);
                    diffs[i] = spans[i] - tmp;
                } else {
                    tmp = (int)v.getMaximumSpan(axis);
                    diffs[i] = tmp - spans[i];
                }
                totalSpan += tmp;
            }
            
            float maximumAdjustment = Math.abs(totalSpan - preferred);
                adjustmentFactor = desiredAdjustment / maximumAdjustment;
                adjustmentFactor = Math.min(adjustmentFactor, 1.0f);
                adjustmentFactor = Math.max(adjustmentFactor, -1.0f);
            }

	// make the adjustments
	int totalOffset = 0;
	for (int i = 0; i < n; i++) {
	    offsets[i] = totalOffset;
            if (desiredAdjustment != 0) {
                float adjF = adjustmentFactor * diffs[i];
                spans[i] += Math.round(adjF);
            }
	    totalOffset = (int) Math.min((long) totalOffset + (long) spans[i], Integer.MAX_VALUE);
	}
!!!2748059.java!!!	layoutMinorAxis(in targetSpan : int, in axis : int, in offsets : int, in spans : int) : void
	int n = getViewCount();
	for (int i = 0; i < n; i++) {
	    View v = getView(i);
	    int max = (int) v.getMaximumSpan(axis);
	    if (max < targetSpan) {
		// can't make the child this wide, align it
		float align = v.getAlignment(axis);
		offsets[i] = (int) ((targetSpan - max) * align);
		spans[i] = max;
	    } else {
		// make it the target width, or as small as it can get.
                int min = (int)v.getMinimumSpan(axis);
		offsets[i] = 0;
		spans[i] = Math.max(min, targetSpan);
	    }
	}
!!!2748187.java!!!	calculateMajorAxisRequirements(in axis : int, inout r : SizeRequirements) : SizeRequirements
	// calculate tiled request
	float min = 0;
	float pref = 0;
	float max = 0;

	int n = getViewCount();
	for (int i = 0; i < n; i++) {
	    View v = getView(i);
	    min += v.getMinimumSpan(axis);
	    pref += v.getPreferredSpan(axis);
	    max += v.getMaximumSpan(axis);
	}

	if (r == null) {
	    r = new SizeRequirements();
	}
	r.alignment = 0.5f;
	r.minimum = (int) min;
	r.preferred = (int) pref;
	r.maximum = (int) max;
	return r;
!!!2748315.java!!!	calculateMinorAxisRequirements(in axis : int, inout r : SizeRequirements) : SizeRequirements
	int min = 0;
	long pref = 0;
	int max = Integer.MAX_VALUE;
	int n = getViewCount();
	for (int i = 0; i < n; i++) {
	    View v = getView(i);
	    min = Math.max((int) v.getMinimumSpan(axis), min);
	    pref = Math.max((int) v.getPreferredSpan(axis), pref);
	    max = Math.max((int) v.getMaximumSpan(axis), max);
	}

	if (r == null) {
	    r = new SizeRequirements();
	    r.alignment = 0.5f;
	}
	r.preferred = (int) pref;
	r.minimum = min;
	r.maximum = max;
	return r;
!!!2748443.java!!!	checkRequests(in axis : int) : void
	if ((axis != X_AXIS) && (axis != Y_AXIS)) {
	    throw new IllegalArgumentException("Invalid axis: " + axis);
	}
	if (axis == majorAxis) {
            if (!majorReqValid) {
                majorRequest = calculateMajorAxisRequirements(axis,
                                                              majorRequest);
                majorReqValid = true;
            }
	} else if (! minorReqValid) {
	    minorRequest = calculateMinorAxisRequirements(axis, minorRequest);
	    minorReqValid = true;
	}
!!!2748571.java!!!	baselineLayout(in targetSpan : int, in axis : int, in offsets : int, in spans : int) : void
        int totalAscent = (int)(targetSpan * getAlignment(axis));
        int totalDescent = targetSpan - totalAscent;

        int n = getViewCount();

        for (int i = 0; i < n; i++) {
            View v = getView(i);
            float align = v.getAlignment(axis);
            int viewSpan;

            if (v.getResizeWeight(axis) > 0) {
                // if resizable then resize to the best fit

                // the smallest span possible
                int minSpan = (int)v.getMinimumSpan(axis);
                // the largest span possible
                int maxSpan = (int)v.getMaximumSpan(axis);

                if (align == 0.0f) {
                    // if the alignment is 0 then we need to fit into the descent
                    viewSpan = Math.max(Math.min(maxSpan, totalDescent), minSpan);
                } else if (align == 1.0f) {
                    // if the alignment is 1 then we need to fit into the ascent
                    viewSpan = Math.max(Math.min(maxSpan, totalAscent), minSpan);
                } else {
                    // figure out the span that we must fit into
                    int fitSpan = (int)Math.min(totalAscent / align,
                                                totalDescent / (1.0f - align));
                    // fit into the calculated span
                    viewSpan = Math.max(Math.min(maxSpan, fitSpan), minSpan);
                }
            } else {
                // otherwise use the preferred spans
                viewSpan = (int)v.getPreferredSpan(axis);
            }

            offsets[i] = totalAscent - (int)(viewSpan * align);
            spans[i] = viewSpan;
        }     
!!!2748699.java!!!	baselineRequirements(in axis : int, inout r : SizeRequirements) : SizeRequirements
        SizeRequirements totalAscent = new SizeRequirements();
        SizeRequirements totalDescent = new SizeRequirements();
        
        if (r == null) {
            r = new SizeRequirements();
        }
        
        r.alignment = 0.5f;

        int n = getViewCount();

        // loop through all children calculating the max of all their ascents and
        // descents at minimum, preferred, and maximum sizes
        for (int i = 0; i < n; i++) {
            View v = getView(i);
            float align = v.getAlignment(axis);
            int span;
            int ascent;
            int descent;

            // find the maximum of the preferred ascents and descents
            span = (int)v.getPreferredSpan(axis);
            ascent = (int)(align * span);
            descent = span - ascent;
            totalAscent.preferred = Math.max(ascent, totalAscent.preferred);
            totalDescent.preferred = Math.max(descent, totalDescent.preferred);
            
            if (v.getResizeWeight(axis) > 0) {
                // if the view is resizable then do the same for the minimum and
                // maximum ascents and descents
                span = (int)v.getMinimumSpan(axis);
                ascent = (int)(align * span);
                descent = span - ascent;
                totalAscent.minimum = Math.max(ascent, totalAscent.minimum);
                totalDescent.minimum = Math.max(descent, totalDescent.minimum);

                span = (int)v.getMaximumSpan(axis);
                ascent = (int)(align * span);
                descent = span - ascent;
                totalAscent.maximum = Math.max(ascent, totalAscent.maximum);
                totalDescent.maximum = Math.max(descent, totalDescent.maximum);
            } else {
                // otherwise use the preferred
                totalAscent.minimum = Math.max(ascent, totalAscent.minimum);
                totalDescent.minimum = Math.max(descent, totalDescent.minimum);
                totalAscent.maximum = Math.max(ascent, totalAscent.maximum);
                totalDescent.maximum = Math.max(descent, totalDescent.maximum);
            }
        }
        
        // we now have an overall preferred, minimum, and maximum ascent and descent

        // calculate the preferred span as the sum of the preferred ascent and preferred descent
        r.preferred = (int)Math.min((long)totalAscent.preferred + (long)totalDescent.preferred,
                                    Integer.MAX_VALUE);

        // calculate the preferred alignment as the preferred ascent divided by the preferred span
        if (r.preferred > 0) {
            r.alignment = (float)totalAscent.preferred / r.preferred;
        }
        

        if (r.alignment == 0.0f) {
            // if the preferred alignment is 0 then the minimum and maximum spans are simply
            // the minimum and maximum descents since there's nothing above the baseline
            r.minimum = totalDescent.minimum;
            r.maximum = totalDescent.maximum;
        } else if (r.alignment == 1.0f) {
            // if the preferred alignment is 1 then the minimum and maximum spans are simply
            // the minimum and maximum ascents since there's nothing below the baseline
            r.minimum = totalAscent.minimum;
            r.maximum = totalAscent.maximum;
        } else {
            // we want to honor the preferred alignment so we calculate two possible minimum
            // span values using 1) the minimum ascent and the alignment, and 2) the minimum
            // descent and the alignment. We'll choose the larger of these two numbers.
            r.minimum = Math.max((int)(totalAscent.minimum / r.alignment),
                                 (int)(totalDescent.minimum / (1.0f - r.alignment)));
            // a similar calculation is made for the maximum but we choose the smaller number.
            r.maximum = Math.min((int)(totalAscent.maximum / r.alignment),
                                 (int)(totalDescent.maximum / (1.0f - r.alignment)));
        }

        return r;
!!!2748827.java!!!	getOffset(in axis : int, in childIndex : int) : int
	int[] offsets = (axis == majorAxis) ? majorOffsets : minorOffsets;
	return offsets[childIndex];
!!!2748955.java!!!	getSpan(in axis : int, in childIndex : int) : int
	int[] spans = (axis == majorAxis) ? majorSpans : minorSpans;
	return spans[childIndex];
!!!2749083.java!!!	flipEastAndWestAtEnds(in position : int, inout bias : Bias) : boolean
	if(majorAxis == Y_AXIS) {
	    int testPos = (bias == Position.Bias.Backward) ?
		          Math.max(0, position - 1) : position;
	    int index = getViewIndexAtPosition(testPos);
	    if(index != -1) {
		View v = getView(index);
		if(v != null && v instanceof CompositeView) {
		    return ((CompositeView)v).flipEastAndWestAtEnds(position,
								    bias);
		}
	    }
	}
	return false;
