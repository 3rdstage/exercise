class XRTreeFrag
!!!6053531.java!!!	XRTreeFrag(in root : int, inout xctxt : XPathContext, inout parent : ExpressionNode)
    super(null);
    
    // Obviously, this constructor should be avoided when possible.
    exprSetParent(parent);
    m_dtmRoot = root;
    m_xctxt = xctxt;
    m_dtm = xctxt.getDTM(root);
!!!6053659.java!!!	XRTreeFrag(in root : int, inout xctxt : XPathContext)
    super(null);
    
    // Obviously, this constructor should be avoided when possible.
    m_dtmRoot = root;
    m_xctxt = xctxt;
    m_dtm = xctxt.getDTM(root);
!!!6053787.java!!!	object() : Object
    if (m_xctxt != null)
      return new com.sun.org.apache.xml.internal.dtm.ref.DTMNodeIterator((DTMIterator)(new com.sun.org.apache.xpath.internal.NodeSetDTM(m_dtmRoot, m_xctxt.getDTMManager())));
    else
      return super.object();
!!!6053915.java!!!	XRTreeFrag(inout expr : Expression)
    super(expr);
!!!6054043.java!!!	finalize() : void
    try
    {
      destruct();
    }
    finally
    {
      super.finalize();  // Always use this.
    }
!!!6054171.java!!!	allowDetachToRelease(inout allowRelease : boolean) : void
    m_allowRelease = allowRelease;
!!!6054299.java!!!	detach() : void
    if(m_allowRelease)
    {
    	// %REVIEW% Do we actually _need_ detach, now that DTM RTF
    	// storage is managed as a stack?
      // See #destruct() for a comment about this next check.
      int ident = m_xctxt.getDTMIdentity(m_dtm);
      DTM foundDTM = m_xctxt.getDTM(ident);      
      if(foundDTM == m_dtm)
      {
        m_xctxt.release(m_dtm, true);
        m_dtm = null;
        m_xctxt = null;
      }
      m_obj = null;
    }
!!!6054427.java!!!	destruct() : void
    if(null != m_dtm)
    {
      // For this next check, see http://nagoya.apache.org/bugzilla/show_bug.cgi?id=7622.
      // What happens if you don't do this this check:
      // 1) Transform#1 creates an XRTreeFrag.  This has a reference to a DTM, that in turn 
      //    is registered with a DTMManager.  The DTM will need to be deleted from the 
      //    DTMManager when the XRTreeFrag is deleted.  The XRTreeFrag  also contains a 
      //    reference to the XPathContext.
      // 2) Transform#1 completes.  The XPathContext is reset... namely the a bunch 
      //    of structures are reset or rebuilt, including DTMManagerDefault#m_dtms.  
      //    BUT, the XRTreeFrags are still hanging around, waiting to unregister themselves.
      // 3) Transform#2 starts humming along.  It builds a XRTreeFrag and installs that 
      //    RTF DTM into DTMManagerDefault#m_dtms[2].
      // 4) The finalizer thread wakes and decides to delete some of those old XRTreeFrags 
      //    from Transform#1.
      // 5) The XRTreeFrag#finalize() method references through the XPathContext, and 
      //    deletes what it thinks is it's DTM from  DTMManagerDefault#m_dtms[2] (via 
      //    getDTMIdentity(dtm)).
      // 6) Transform#2 tries to reference DTMManagerDefault#m_dtms[2], finds it is 
      //    null, and chaos results.
      int ident = m_xctxt.getDTMIdentity(m_dtm);
      DTM foundDTM = m_xctxt.getDTM(ident);      
      if(foundDTM == m_dtm)
      {
        m_xctxt.release(m_dtm, true);
        m_dtm = null;
        m_xctxt = null;
      }
    }
    m_obj = null;
!!!6054555.java!!!	getType() : int
    return CLASS_RTREEFRAG;
!!!6054683.java!!!	getTypeString() : String
    return "#RTREEFRAG";
!!!6054811.java!!!	num() : double

    XMLString s = xstr();

    return s.toDouble();
!!!6054939.java!!!	bool() : boolean
    return true;
!!!6055067.java!!!	xstr() : XMLString
    if(null == m_xmlStr)
      m_xmlStr = m_dtm.getStringValue(m_dtmRoot);
    
    return m_xmlStr;
!!!6055195.java!!!	appendToFsb(inout fsb : FastStringBuffer) : void
    XString xstring = (XString)xstr();
    xstring.appendToFsb(fsb);
!!!6055323.java!!!	str() : String
    String str = m_dtm.getStringValue(m_dtmRoot).toString();

    return (null == str) ? "" : str;
!!!6055451.java!!!	rtf() : int
    return m_dtmRoot;
!!!6055579.java!!!	asNodeIterator() : DTMIterator
    return new RTFIterator(m_dtmRoot, m_xctxt.getDTMManager());
!!!6055707.java!!!	convertToNodeset() : NodeList

    if (m_obj instanceof NodeList)
      return (NodeList) m_obj;
    else
      return new com.sun.org.apache.xml.internal.dtm.ref.DTMNodeList(asNodeIterator());
!!!6055835.java!!!	equals(inout obj2 : XObject) : boolean

    try
    {
      if (XObject.CLASS_NODESET == obj2.getType())
      {
  
        // In order to handle the 'all' semantics of 
        // nodeset comparisons, we always call the 
        // nodeset function.
        return obj2.equals(this);
      }
      else if (XObject.CLASS_BOOLEAN == obj2.getType())
      {
        return bool() == obj2.bool();
      }
      else if (XObject.CLASS_NUMBER == obj2.getType())
      {
        return num() == obj2.num();
      }
      else if (XObject.CLASS_NODESET == obj2.getType())
      {
        return xstr().equals(obj2.xstr());
      }
      else if (XObject.CLASS_STRING == obj2.getType())
      {
        return xstr().equals(obj2.xstr());
      }
      else if (XObject.CLASS_RTREEFRAG == obj2.getType())
      {
  
        // Probably not so good.  Think about this.
        return xstr().equals(obj2.xstr());
      }
      else
      {
        return super.equals(obj2);
      }
    }
    catch(javax.xml.transform.TransformerException te)
    {
      throw new com.sun.org.apache.xml.internal.utils.WrappedRuntimeException(te);
    }
