class ArrowButtonHandler
!!!3018907.java!!!	ArrowButtonHandler(in name : String, inout isNext : boolean)
            super(name);
	    this.isNext = isNext;
	    autoRepeatTimer = new javax.swing.Timer(60, this);
	    autoRepeatTimer.setInitialDelay(300);
!!!3019035.java!!!	eventToSpinner(inout e : AWTEvent) : JSpinner
	    Object src = e.getSource();
	    while ((src instanceof Component) && !(src instanceof JSpinner)) {
		src = ((Component)src).getParent();
	    }
	    return (src instanceof JSpinner) ? (JSpinner)src : null;
!!!3019163.java!!!	actionPerformed(inout e : ActionEvent) : void
            JSpinner spinner = this.spinner;

            if (!(e.getSource() instanceof javax.swing.Timer)) {
                // Most likely resulting from being in ActionMap.
                spinner = eventToSpinner(e);
		if (e.getSource() instanceof JButton) {
		    arrowButton = (JButton)e.getSource();
		}
	    } else {
  		if (arrowButton!=null && !arrowButton.getModel().isPressed()
		    && autoRepeatTimer.isRunning()) {
  		    autoRepeatTimer.stop();
  		    spinner = null;
		    arrowButton = null;
  		}
	    }
            if (spinner != null) {
                try {
                    int calendarField = getCalendarField(spinner);
                    spinner.commitEdit();
                    if (calendarField != -1) {
                        ((SpinnerDateModel)spinner.getModel()).
                                 setCalendarField(calendarField);
                    }
                    Object value = (isNext) ? spinner.getNextValue() :
                               spinner.getPreviousValue();
                    if (value != null) {
                        spinner.setValue(value);
                        select(spinner);
                    }
                } catch (IllegalArgumentException iae) {
                    UIManager.getLookAndFeel().provideErrorFeedback(spinner);
                } catch (ParseException pe) {
                    UIManager.getLookAndFeel().provideErrorFeedback(spinner);
                }
            }
!!!3019291.java!!!	select(inout spinner : JSpinner) : void
            JComponent editor = spinner.getEditor();

            if (editor instanceof JSpinner.DateEditor) {
                JSpinner.DateEditor dateEditor = (JSpinner.DateEditor)editor;
                JFormattedTextField ftf = dateEditor.getTextField();
                Format format = dateEditor.getFormat();
                Object value;

                if (format != null && (value = spinner.getValue()) != null) {
                    SpinnerDateModel model = dateEditor.getModel();
                    DateFormat.Field field = DateFormat.Field.ofCalendarField(
                        model.getCalendarField());

                    if (field != null) {
                        try {
                            AttributedCharacterIterator iterator = format.
                                formatToCharacterIterator(value);
                            if (!select(ftf, iterator, field) &&
                                       field == DateFormat.Field.HOUR0) {
                                select(ftf, iterator, DateFormat.Field.HOUR1);
                            }
                        }
                        catch (IllegalArgumentException iae) {}
                    }
                }
            }
!!!3019419.java!!!	select(inout ftf : JFormattedTextField, inout iterator : AttributedCharacterIterator, inout field : Field) : boolean
            int max = ftf.getDocument().getLength();

            iterator.first();
            do {
                Map attrs = iterator.getAttributes();

                if (attrs != null && attrs.containsKey(field)){
                    int start = iterator.getRunStart(field);
                    int end = iterator.getRunLimit(field);

                    if (start != -1 && end != -1 && start <= max &&
                                       end <= max) {
                        ftf.select(start, end);
                    }
                    return true;
                }
            } while (iterator.next() != CharacterIterator.DONE);
            return false;
!!!3019547.java!!!	getCalendarField(inout spinner : JSpinner) : int
            JComponent editor = spinner.getEditor();

            if (editor instanceof JSpinner.DateEditor) {
                JSpinner.DateEditor dateEditor = (JSpinner.DateEditor)editor;
                JFormattedTextField ftf = dateEditor.getTextField();
                int start = ftf.getSelectionStart();
                JFormattedTextField.AbstractFormatter formatter =
                                    ftf.getFormatter();

                if (formatter instanceof InternationalFormatter) {
                    Format.Field[] fields = ((InternationalFormatter)
                                             formatter).getFields(start);

                    for (int counter = 0; counter < fields.length; counter++) {
                        if (fields[counter] instanceof DateFormat.Field) {
                            int calendarField;

                            if (fields[counter] == DateFormat.Field.HOUR1) {
                                calendarField = Calendar.HOUR;
                            }
                            else {
                                calendarField = ((DateFormat.Field)
                                        fields[counter]).getCalendarField();
                            }
                            if (calendarField != -1) {
                                return calendarField;
                            }
                        }
                    }
                }
            }
            return -1;
!!!3019675.java!!!	mousePressed(inout e : MouseEvent) : void
	    if (SwingUtilities.isLeftMouseButton(e) && e.getComponent().isEnabled()) {
		spinner = eventToSpinner(e);
		autoRepeatTimer.start();

                focusSpinnerIfNecessary();
	    }
!!!3019803.java!!!	mouseReleased(inout e : MouseEvent) : void
	    autoRepeatTimer.stop();	    
	    arrowButton = null;
	    spinner = null;
!!!3020059.java!!!	mouseEntered(inout e : MouseEvent) : void
	    if (spinner != null && !autoRepeatTimer.isRunning()) {
		autoRepeatTimer.start();	    
	    }
!!!3020187.java!!!	mouseExited(inout e : MouseEvent) : void
	    if (autoRepeatTimer.isRunning()) {
		autoRepeatTimer.stop();	    
	    }
!!!3020315.java!!!	focusSpinnerIfNecessary() : void
            Component fo = KeyboardFocusManager.
                              getCurrentKeyboardFocusManager().getFocusOwner();
            if (spinner.isRequestFocusEnabled() && (
                        fo == null ||
                        !SwingUtilities.isDescendingFrom(fo, spinner))) {
                Container root = spinner;

                if (!root.isFocusCycleRoot()) {
                    root = root.getFocusCycleRootAncestor();
                }
                if (root != null) {
                    FocusTraversalPolicy ftp = root.getFocusTraversalPolicy();
                    Component child = ftp.getComponentAfter(root, spinner);

                    if (child != null && SwingUtilities.isDescendingFrom(
                                                        child, spinner)) {
                        child.requestFocus();
                    }
                }
            }
!!!3020571.java!!!	focusLost(inout e : FocusEvent) : void
	    if (autoRepeatTimer.isRunning()) {
		autoRepeatTimer.stop();	    
	    }	    
	    spinner = null;
	    if (arrowButton != null) {
		ButtonModel model = arrowButton.getModel();
		model.setPressed(false);
		model.setArmed(false);
		arrowButton = null;
	    }
