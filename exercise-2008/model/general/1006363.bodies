class StreamHandler
!!!8040731.java!!!	configure() : void
        LogManager manager = LogManager.getLogManager();
	String cname = getClass().getName();

	setLevel(manager.getLevelProperty(cname +".level", Level.INFO));
	setFilter(manager.getFilterProperty(cname +".filter", null));
	setFormatter(manager.getFormatterProperty(cname +".formatter", new SimpleFormatter()));
	try {
	    setEncoding(manager.getStringProperty(cname +".encoding", null));
	} catch (Exception ex) {
	    try {
	        setEncoding(null);
	    } catch (Exception ex2) {
		// doing a setEncoding with null should always work.
		// assert false;
	    }
	}
!!!8040859.java!!!	StreamHandler()
	sealed = false;
	configure();
	sealed = true;
!!!8040987.java!!!	StreamHandler(inout out : OutputStream, inout formatter : Formatter)
	sealed = false;
	configure();
	setFormatter(formatter);
	setOutputStream(out);
	sealed = true;
!!!8041115.java!!!	setOutputStream(inout out : OutputStream) : void
	if (out == null) {
	    throw new NullPointerException();
	}
	flushAndClose();
	output = out;
	doneHeader = false;
	String encoding = getEncoding();
	if (encoding == null) {
	    writer = new OutputStreamWriter(output);
	} else {
	    try {
	        writer = new OutputStreamWriter(output, encoding);
	    } catch (UnsupportedEncodingException ex) {
		// This shouldn't happen.  The setEncoding method
		// should have validated that the encoding is OK.
		throw new Error("Unexpected exception " + ex);
	    }
	}
!!!8041243.java!!!	setEncoding(in encoding : String) : void
	super.setEncoding(encoding);
	if (output == null) {
	    return;
	}
	// Replace the current writer with a writer for the new encoding.
	flush();
	if (encoding == null) {
	    writer = new OutputStreamWriter(output);
	} else {
	    writer = new OutputStreamWriter(output, encoding);
	}
!!!8041371.java!!!	publish(inout record : LogRecord) : void
	if (!isLoggable(record)) {
	    return;
	}
	String msg;
	try {
 	    msg = getFormatter().format(record);
	} catch (Exception ex) {
	    // We don't want to throw an exception here, but we
	    // report the exception to any registered ErrorManager.
	    reportError(null, ex, ErrorManager.FORMAT_FAILURE);
	    return;
	}

	try {
	    if (!doneHeader) {
	        writer.write(getFormatter().getHead(this));
		doneHeader = true;
	    }
	    writer.write(msg);
	} catch (Exception ex) {
	    // We don't want to throw an exception here, but we
	    // report the exception to any registered ErrorManager.
	    reportError(null, ex, ErrorManager.WRITE_FAILURE);
	}
!!!8041499.java!!!	isLoggable(inout record : LogRecord) : boolean
	if (writer == null || record == null) {
	    return false;
	}
	return super.isLoggable(record);
!!!8041627.java!!!	flush() : void
	if (writer != null) {
	    try {
	        writer.flush();
	    } catch (Exception ex) {	
	        // We don't want to throw an exception here, but we
	        // report the exception to any registered ErrorManager.
	        reportError(null, ex, ErrorManager.FLUSH_FAILURE);
	    }
	}
!!!8041755.java!!!	flushAndClose() : void
        checkAccess();
	if (writer != null) {
	    try {
	        if (!doneHeader) {
	            writer.write(getFormatter().getHead(this));
		    doneHeader = true;
	        }
		writer.write(getFormatter().getTail(this));
		writer.flush();
	        writer.close();
	    } catch (Exception ex) {
	        // We don't want to throw an exception here, but we
	        // report the exception to any registered ErrorManager.
	        reportError(null, ex, ErrorManager.CLOSE_FAILURE);
	    }
	    writer = null;
	    output = null;
	}
!!!8041883.java!!!	close() : void
	flushAndClose();
