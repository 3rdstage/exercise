class JPopupMenu
!!!2399515.java!!!	setDefaultLightWeightPopupEnabled(inout aFlag : boolean) : void
        SwingUtilities.appContextPut(defaultLWPopupEnabledKey, 
                                     Boolean.valueOf(aFlag));
!!!2399643.java!!!	getDefaultLightWeightPopupEnabled() : boolean
        Boolean b = (Boolean)
            SwingUtilities.appContextGet(defaultLWPopupEnabledKey);
        if (b == null) {
            SwingUtilities.appContextPut(defaultLWPopupEnabledKey, 
                                         Boolean.TRUE);
            return true;
        }
        return b.booleanValue();
!!!2399771.java!!!	JPopupMenu()
        this(null);
!!!2399899.java!!!	JPopupMenu(in label : String)
        this.label = label;
        lightWeightPopup = getDefaultLightWeightPopupEnabled();
        setSelectionModel(new DefaultSingleSelectionModel());
        enableEvents(AWTEvent.MOUSE_EVENT_MASK);
	setFocusTraversalKeysEnabled(false);
        updateUI();
!!!2400027.java!!!	getUI() : PopupMenuUI
        return (PopupMenuUI)ui;
!!!2400155.java!!!	setUI(inout ui : PopupMenuUI) : void
        super.setUI(ui);
!!!2400283.java!!!	updateUI() : void
        setUI((PopupMenuUI)UIManager.getUI(this));
!!!2400411.java!!!	getUIClassID() : String
        return uiClassID;
!!!2400539.java!!!	processFocusEvent(inout evt : FocusEvent) : void
	super.processFocusEvent(evt);
!!!2400667.java!!!	processKeyEvent(inout evt : KeyEvent) : void
        MenuSelectionManager.defaultManager().processKeyEvent(evt);
	if (evt.isConsumed()) {
	    return;
	}
	super.processKeyEvent(evt);
!!!2400795.java!!!	getSelectionModel() : SingleSelectionModel
        return selectionModel;
!!!2400923.java!!!	setSelectionModel(inout model : SingleSelectionModel) : void
        selectionModel = model;
!!!2401051.java!!!	add(inout menuItem : JMenuItem) : JMenuItem
        super.add(menuItem);
        return menuItem;
!!!2401179.java!!!	add(in s : String) : JMenuItem
        return add(new JMenuItem(s));
!!!2401307.java!!!	add(inout a : Action) : JMenuItem
	JMenuItem mi = createActionComponent(a);
	mi.setAction(a);
        add(mi);
        return mi;
!!!2401435.java!!!	adjustPopupLocationToFitScreen(in xposition : int, in yposition : int) : Point
	Point p = new Point(xposition, yposition);

        if(popupPostionFixDisabled == true || GraphicsEnvironment.isHeadless())
            return p;

        Toolkit toolkit = Toolkit.getDefaultToolkit();
        Rectangle screenBounds;
        Insets screenInsets;
        GraphicsConfiguration gc = null;
        // Try to find GraphicsConfiguration, that includes mouse
        // pointer position
        GraphicsEnvironment ge =
            GraphicsEnvironment.getLocalGraphicsEnvironment();
        GraphicsDevice[] gd = ge.getScreenDevices();
        for(int i = 0; i < gd.length; i++) {
            if(gd[i].getType() == GraphicsDevice.TYPE_RASTER_SCREEN) {
                GraphicsConfiguration dgc =
                    gd[i].getDefaultConfiguration();
                if(dgc.getBounds().contains(p)) {
                    gc = dgc;
                    break;
                }
            }
        }

        // If not found and we have invoker, ask invoker about his gc
        if(gc == null && getInvoker() != null) {
            gc = getInvoker().getGraphicsConfiguration();
        }

        if(gc != null) {
            // If we have GraphicsConfiguration use it to get
            // screen bounds and insets
            screenInsets = toolkit.getScreenInsets(gc);
            screenBounds = gc.getBounds();
        } else {
            // If we don't have GraphicsConfiguration use primary screen
            // and empty insets
            screenInsets = new Insets(0, 0, 0, 0);
            screenBounds = new Rectangle(toolkit.getScreenSize());
        }

        int scrWidth = screenBounds.width -
                    Math.abs(screenInsets.left+screenInsets.right);
        int scrHeight = screenBounds.height -
                    Math.abs(screenInsets.top+screenInsets.bottom);

        Dimension size;

        size = JPopupMenu.this.getPreferredSize();

        if( (p.x + size.width) > screenBounds.x + scrWidth )
             p.x = screenBounds.x + scrWidth - size.width;

        if( (p.y + size.height) > screenBounds.y + scrHeight)
             p.y = screenBounds.y + scrHeight - size.height;

        /* Change is made to the desired (X,Y) values, when the
           PopupMenu is too tall OR too wide for the screen
        */
        if( p.x < screenBounds.x )
            p.x = screenBounds.x ;
        if( p.y < screenBounds.y )
            p.y = screenBounds.y;

        return p;
!!!2401563.java!!!	createActionComponent(inout a : Action) : JMenuItem
        JMenuItem mi = new JMenuItem((String)a.getValue(Action.NAME),
                                     (Icon)a.getValue(Action.SMALL_ICON)){
	    protected PropertyChangeListener createActionPropertyChangeListener(Action a) {
		PropertyChangeListener pcl = createActionChangeListener(this);
		if (pcl == null) {
		    pcl = super.createActionPropertyChangeListener(a);
		}
		return pcl;
	    }
	};
        mi.setHorizontalTextPosition(JButton.TRAILING);
        mi.setVerticalTextPosition(JButton.CENTER);
        mi.setEnabled(a.isEnabled());
	return mi;
!!!2401691.java!!!	createActionChangeListener(inout b : JMenuItem) : PropertyChangeListener
        return new ActionChangedListener(b);
!!!2402203.java!!!	remove(in pos : int) : void
        if (pos < 0) {
            throw new IllegalArgumentException("index less than zero.");
        }
        if (pos > getComponentCount() -1) {
            throw new IllegalArgumentException("index greater than the number of items.");
        }
	super.remove(pos);
!!!2402331.java!!!	setLightWeightPopupEnabled(inout aFlag : boolean) : void
        // NOTE: this use to set the flag on a shared JPopupMenu, which meant
        // this effected ALL JPopupMenus.
        lightWeightPopup = aFlag;
!!!2402459.java!!!	isLightWeightPopupEnabled() : boolean
        return lightWeightPopup;
!!!2402587.java!!!	getLabel() : String
        return label;
!!!2402715.java!!!	setLabel(in label : String) : void
        String oldValue = this.label;
        this.label = label;
        firePropertyChange("label", oldValue, label);
        if (accessibleContext != null) {
            accessibleContext.firePropertyChange(
                AccessibleContext.ACCESSIBLE_VISIBLE_DATA_PROPERTY,
                oldValue, label);
        }
        invalidate();
        repaint();
!!!2402843.java!!!	addSeparator() : void
        add( new JPopupMenu.Separator() );
!!!2402971.java!!!	insert(inout a : Action, in index : int) : void
	JMenuItem mi = createActionComponent(a);
	mi.setAction(a);
        insert(mi, index);
!!!2403099.java!!!	insert(inout component : Component, in index : int) : void
        if (index < 0) {
            throw new IllegalArgumentException("index less than zero.");
        }

        int nitems = getComponentCount();
	// PENDING(ges): Why not use an array?
        Vector tempItems = new Vector();

        /* Remove the item at index, nitems-index times 
           storing them in a temporary vector in the
           order they appear on the menu.
           */
        for (int i = index ; i < nitems; i++) {
            tempItems.addElement(getComponent(index));
            remove(index);
        }

        add(component);

        /* Add the removed items back to the menu, they are
           already in the correct order in the temp vector.
           */
        for (int i = 0; i < tempItems.size()  ; i++) {
            add((Component)tempItems.elementAt(i));
        }
!!!2403227.java!!!	addPopupMenuListener(inout l : PopupMenuListener) : void
        listenerList.add(PopupMenuListener.class,l);
!!!2403355.java!!!	removePopupMenuListener(inout l : PopupMenuListener) : void
        listenerList.remove(PopupMenuListener.class,l);
!!!2403483.java!!!	getPopupMenuListeners() : PopupMenuListener
        return (PopupMenuListener[])listenerList.getListeners(
                PopupMenuListener.class);
!!!2403611.java!!!	addMenuKeyListener(inout l : MenuKeyListener) : void
        listenerList.add(MenuKeyListener.class, l);
!!!2403739.java!!!	removeMenuKeyListener(inout l : MenuKeyListener) : void
        listenerList.remove(MenuKeyListener.class, l);
!!!2403867.java!!!	getMenuKeyListeners() : MenuKeyListener
        return (MenuKeyListener[])listenerList.getListeners(
                MenuKeyListener.class);
!!!2403995.java!!!	firePopupMenuWillBecomeVisible() : void
        Object[] listeners = listenerList.getListenerList();
        PopupMenuEvent e=null;
        for (int i = listeners.length-2; i>=0; i-=2) {
            if (listeners[i]==PopupMenuListener.class) {
                if (e == null)
                    e = new PopupMenuEvent(this);
                ((PopupMenuListener)listeners[i+1]).popupMenuWillBecomeVisible(e);
            }
        }    
!!!2404123.java!!!	firePopupMenuWillBecomeInvisible() : void
        Object[] listeners = listenerList.getListenerList();
        PopupMenuEvent e=null;
        for (int i = listeners.length-2; i>=0; i-=2) {
            if (listeners[i]==PopupMenuListener.class) {
                if (e == null)
                    e = new PopupMenuEvent(this);
                ((PopupMenuListener)listeners[i+1]).popupMenuWillBecomeInvisible(e);
            }
        }            
!!!2404251.java!!!	firePopupMenuCanceled() : void
        Object[] listeners = listenerList.getListenerList();
        PopupMenuEvent e=null;
        for (int i = listeners.length-2; i>=0; i-=2) {
            if (listeners[i]==PopupMenuListener.class) {
                if (e == null)
                    e = new PopupMenuEvent(this);
                ((PopupMenuListener)listeners[i+1]).popupMenuCanceled(e);
            }
        }    
!!!2404379.java!!!	alwaysOnTop() : boolean
	return true;
!!!2404507.java!!!	pack() : void
        if(popup != null) {
            Dimension pref = getPreferredSize();

            if (pref == null || pref.width != getWidth() ||
                                pref.height != getHeight()) {
                popup = getPopup();
            } else {
                validate();
            }
        }
!!!2404635.java!!!	setVisible(inout b : boolean) : void
	if (DEBUG) {
	    System.out.println("JPopupMenu.setVisible " + b);
	}

        // Is it a no-op?
        if (b == isVisible())
            return;

        // if closing, first close all Submenus
        if (b == false) {

	    // 4234793: This is a workaround because JPopupMenu.firePopupMenuCanceled is
	    // a protected method and cannot be called from BasicPopupMenuUI directly
	    // The real solution could be to make 
	    // firePopupMenuCanceled public and call it directly.
	    Boolean doCanceled = (Boolean)getClientProperty("JPopupMenu.firePopupMenuCanceled");
	    if (doCanceled != null && doCanceled == Boolean.TRUE) {
		putClientProperty("JPopupMenu.firePopupMenuCanceled", Boolean.FALSE);
		firePopupMenuCanceled();
	    }
            getSelectionModel().clearSelection();
	    
        } else {
            // This is a popup menu with MenuElement children,
            // set selection path before popping up!
            if (isPopupMenu()) {
		if (getSubElements().length > 0) {
		    MenuElement me[] = new MenuElement[2];
		    me[0]=(MenuElement)this;
		    me[1]=getSubElements()[0];
		    MenuSelectionManager.defaultManager().setSelectedPath(me);
		} else {
		    MenuElement me[] = new MenuElement[1];
		    me[0]=(MenuElement)this;
		    MenuSelectionManager.defaultManager().setSelectedPath(me);
		}
	    }
        }

        if(b) {
            firePopupMenuWillBecomeVisible();
            popup = getPopup();
	    firePropertyChange("visible", Boolean.FALSE, Boolean.TRUE);

	   
	} else if(popup != null) {
            firePopupMenuWillBecomeInvisible();
            popup.hide();
            popup = null;
	    firePropertyChange("visible", Boolean.TRUE, Boolean.FALSE);
            // 4694797: When popup menu is made invisible, selected path
            // should be cleared
            if (isPopupMenu()) {
                MenuSelectionManager.defaultManager().clearSelectedPath();
            }
        }
!!!2404763.java!!!	getPopup() : Popup
        Popup oldPopup = popup;

        if (oldPopup != null) {
            oldPopup.hide();
        }
        PopupFactory popupFactory = PopupFactory.getSharedInstance();

        if (isLightWeightPopupEnabled()) {
            popupFactory.setPopupType(PopupFactory.LIGHT_WEIGHT_POPUP);
        }
        else {
            popupFactory.setPopupType(PopupFactory.MEDIUM_WEIGHT_POPUP);
        }

        // adjust the location of the popup
        Point p = adjustPopupLocationToFitScreen(desiredLocationX,desiredLocationY);
	desiredLocationX = p.x;
	desiredLocationY = p.y;

        Popup newPopup = getUI().getPopup(this, desiredLocationX,
                                          desiredLocationY);

        popupFactory.setPopupType(PopupFactory.LIGHT_WEIGHT_POPUP);
        newPopup.show();
        return newPopup;
!!!2404891.java!!!	isVisible() : boolean
	if(popup != null)
	    return true;
	else
	    return false;
!!!2405019.java!!!	setLocation(in x : int, in y : int) : void
        int oldX = desiredLocationX;
        int oldY = desiredLocationY;

        desiredLocationX = x;
        desiredLocationY = y;
        if(popup != null && (x != oldX || y != oldY)) {
            popup = getPopup();
        }
!!!2405147.java!!!	isPopupMenu() : boolean
        return  ((invoker != null) && !(invoker instanceof JMenu));
!!!2405275.java!!!	getInvoker() : Component
        return this.invoker;
!!!2405403.java!!!	setInvoker(inout invoker : Component) : void
        Component oldInvoker = this.invoker;
        this.invoker = invoker;
        if ((oldInvoker != this.invoker) && (ui != null)) {
            ui.uninstallUI(this);
            ui.installUI(this);
        }               
        invalidate();
!!!2405531.java!!!	show(inout invoker : Component, in x : int, in y : int) : void
	if (DEBUG) {
	    System.out.println("in JPopupMenu.show " );
	}
        setInvoker(invoker);
        Frame newFrame = getFrame(invoker);
        if (newFrame != frame) {
            // Use the invoker's frame so that events 
            // are propagated properly
            if (newFrame!=null) {
                this.frame = newFrame;
                if(popup != null) {
                    setVisible(false);
                }
            }
        }
	Point invokerOrigin;
	if (invoker != null) {
	    invokerOrigin = invoker.getLocationOnScreen();
	    setLocation(invokerOrigin.x + x, 
			invokerOrigin.y + y);
	} else {
	    setLocation(x, y);
	}
        setVisible(true);       
!!!2405659.java!!!	getRootPopupMenu() : JPopupMenu
        JPopupMenu mp = this;
        while((mp!=null) && (mp.isPopupMenu()!=true) &&
              (mp.getInvoker() != null) &&
              (mp.getInvoker().getParent() != null) &&
              (mp.getInvoker().getParent() instanceof JPopupMenu)
              ) {
            mp = (JPopupMenu) mp.getInvoker().getParent();
        }
        return mp;
!!!2405787.java!!!	getComponentAtIndex(in i : int) : Component
        return getComponent(i);
!!!2405915.java!!!	getComponentIndex(inout c : Component) : int
        int ncomponents = this.getComponentCount();
        Component[] component = this.getComponents();
        for (int i = 0 ; i < ncomponents ; i++) {
            Component comp = component[i];
            if (comp == c) 
                return i;
        }
        return -1;
!!!2406043.java!!!	setPopupSize(inout d : Dimension) : void
        Dimension oldSize = getPreferredSize();

        setPreferredSize(d);
        if (popup != null) {
            Dimension newSize = getPreferredSize();

            if (!oldSize.equals(newSize)) {
                popup = getPopup();
            }
        }
!!!2406171.java!!!	setPopupSize(in width : int, in height : int) : void
        setPopupSize(new Dimension(width, height));
!!!2406299.java!!!	setSelected(inout sel : Component) : void
    
        SingleSelectionModel model = getSelectionModel();
        int index = getComponentIndex(sel);
        model.setSelectedIndex(index);
!!!2406427.java!!!	isBorderPainted() : boolean
        return paintBorder;
!!!2406555.java!!!	setBorderPainted(inout b : boolean) : void
        paintBorder = b;
        repaint();
!!!2406683.java!!!	paintBorder(inout g : Graphics) : void
    
        if (isBorderPainted()) {
            super.paintBorder(g);
        }
!!!2406811.java!!!	getMargin() : Insets
        if(margin == null) {
            return new Insets(0,0,0,0);
        } else {
            return margin;
        }
!!!2406939.java!!!	isSubPopupMenu(inout popup : JPopupMenu) : boolean
        int ncomponents = this.getComponentCount();
        Component[] component = this.getComponents();
        for (int i = 0 ; i < ncomponents ; i++) {
            Component comp = component[i];
            if (comp instanceof JMenu) {
                JMenu menu = (JMenu)comp;
                JPopupMenu subPopup = menu.getPopupMenu();
                if (subPopup == popup)
                    return true;
                if (subPopup.isSubPopupMenu(popup))
                    return true;
            }
        }
        return false;
!!!2407067.java!!!	getFrame(inout c : Component) : Frame
        Component w = c;

        while(!(w instanceof Frame) && (w!=null)) {
            w = w.getParent();
        }
        return (Frame)w;
!!!2407195.java!!!	paramString() : String
	String labelString = (label != null ?
			      label : "");
	String paintBorderString = (paintBorder ?
				    "true" : "false");
	String marginString = (margin != null ?
			      margin.toString() : "");
	String lightWeightPopupEnabledString = (isLightWeightPopupEnabled() ?
						"true" : "false");	
	return super.paramString() +
	    ",desiredLocationX=" + desiredLocationX +
	    ",desiredLocationY=" + desiredLocationY +
	",label=" + labelString +
	",lightWeightPopupEnabled=" + lightWeightPopupEnabledString +
	",margin=" + marginString +
	",paintBorder=" + paintBorderString;
!!!2407323.java!!!	getAccessibleContext() : AccessibleContext
        if (accessibleContext == null) {
            accessibleContext = new AccessibleJPopupMenu();
        }
        return accessibleContext;
!!!2408091.java!!!	writeObject(inout s : ObjectOutputStream) : void
        Vector      values = new Vector();

        s.defaultWriteObject();
        // Save the invoker, if its Serializable.
        if(invoker != null && invoker instanceof Serializable) {
            values.addElement("invoker");
            values.addElement(invoker);
        }
        // Save the popup, if its Serializable.
        if(popup != null && popup instanceof Serializable) {
            values.addElement("popup");
            values.addElement(popup);
        }
        s.writeObject(values);

        if (getUIClassID().equals(uiClassID)) {
            byte count = JComponent.getWriteObjCounter(this);
            JComponent.setWriteObjCounter(this, --count);
            if (count == 0 && ui != null) {
                ui.installUI(this);
            }
        }
!!!2408219.java!!!	readObject(inout s : ObjectInputStream) : void
        s.defaultReadObject();

        Vector          values = (Vector)s.readObject();
        int             indexCounter = 0;
        int             maxCounter = values.size();

        if(indexCounter < maxCounter && values.elementAt(indexCounter).
           equals("invoker")) {
            invoker = (Component)values.elementAt(++indexCounter);
            indexCounter++;
        }
        if(indexCounter < maxCounter && values.elementAt(indexCounter).
           equals("popup")) {
            popup = (Popup)values.elementAt(++indexCounter);
            indexCounter++;
        }
!!!2408475.java!!!	processKeyEvent(inout e : KeyEvent, inout path : MenuElement, inout manager : MenuSelectionManager) : void
        MenuKeyEvent mke = new MenuKeyEvent(e.getComponent(), e.getID(),
					     e.getWhen(), e.getModifiers(),
					     e.getKeyCode(), e.getKeyChar(),
					     path, manager);
        processMenuKeyEvent(mke);

        if (mke.isConsumed())  {
            e.consume();
    }
!!!2408603.java!!!	processMenuKeyEvent(inout e : MenuKeyEvent) : void
        switch (e.getID()) {
        case KeyEvent.KEY_PRESSED:
            fireMenuKeyPressed(e); break;
        case KeyEvent.KEY_RELEASED:
            fireMenuKeyReleased(e); break;
        case KeyEvent.KEY_TYPED:
            fireMenuKeyTyped(e); break;
        default:
            break;
        }
!!!2408731.java!!!	fireMenuKeyPressed(inout event : MenuKeyEvent) : void
        Object[] listeners = listenerList.getListenerList();
        for (int i = listeners.length-2; i>=0; i-=2) {
            if (listeners[i]==MenuKeyListener.class) {
                ((MenuKeyListener)listeners[i+1]).menuKeyPressed(event);
            }
        }
!!!2408859.java!!!	fireMenuKeyReleased(inout event : MenuKeyEvent) : void
        Object[] listeners = listenerList.getListenerList();
        for (int i = listeners.length-2; i>=0; i-=2) {
            if (listeners[i]==MenuKeyListener.class) {
                ((MenuKeyListener)listeners[i+1]).menuKeyReleased(event);
            }
        }
!!!2408987.java!!!	fireMenuKeyTyped(inout event : MenuKeyEvent) : void
        Object[] listeners = listenerList.getListenerList();
        for (int i = listeners.length-2; i>=0; i-=2) {
            if (listeners[i]==MenuKeyListener.class) {
                ((MenuKeyListener)listeners[i+1]).menuKeyTyped(event);
            }
        }
!!!2409115.java!!!	menuSelectionChanged(inout isIncluded : boolean) : void
	if (DEBUG) {
	    System.out.println("In JPopupMenu.menuSelectionChanged " + isIncluded);
	}
        if(invoker instanceof JMenu) {
            JMenu m = (JMenu) invoker;
            if(isIncluded) 
                m.setPopupMenuVisible(true);
            else
                m.setPopupMenuVisible(false);
        }
        if (isPopupMenu() && !isIncluded)
          setVisible(false);
!!!2409243.java!!!	getSubElements() : MenuElement
        MenuElement result[];
        Vector tmp = new Vector();
        int c = getComponentCount();
        int i;
        Component m;

        for(i=0 ; i < c ; i++) {
            m = getComponent(i);
            if(m instanceof MenuElement)
                tmp.addElement(m);
        }

        result = new MenuElement[tmp.size()];
        for(i=0,c=tmp.size() ; i < c ; i++) 
            result[i] = (MenuElement) tmp.elementAt(i);
        return result;
!!!2409371.java!!!	getComponent() : Component
        return this;
!!!2411419.java!!!	isPopupTrigger(inout e : MouseEvent) : boolean
	return getUI().isPopupTrigger(e);
