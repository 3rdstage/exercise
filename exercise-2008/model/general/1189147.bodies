class DefaultTableModel
!!!9785115.java!!!	DefaultTableModel()
        this(0, 0);
!!!9785243.java!!!	newVector(in size : int) : Vector
 
	Vector v = new Vector(size); 
	v.setSize(size); 
	return v; 
!!!9785371.java!!!	DefaultTableModel(in rowCount : int, in columnCount : int)
        this(newVector(columnCount), rowCount); 
!!!9785499.java!!!	DefaultTableModel(inout columnNames : Vector, in rowCount : int)
        setDataVector(newVector(rowCount), columnNames);
!!!9785627.java!!!	DefaultTableModel(inout columnNames : Object, in rowCount : int)
        this(convertToVector(columnNames), rowCount);
!!!9785755.java!!!	DefaultTableModel(inout data : Vector, inout columnNames : Vector)
        setDataVector(data, columnNames);
!!!9785883.java!!!	DefaultTableModel(inout data : Object, inout columnNames : Object)
        setDataVector(data, columnNames);
!!!9786011.java!!!	getDataVector() : Vector
        return dataVector;
!!!9786139.java!!!	nonNullVector(inout v : Vector) : Vector
 
	return (v != null) ? v : new Vector(); 
!!!9786267.java!!!	setDataVector(inout dataVector : Vector, inout columnIdentifiers : Vector) : void
        this.dataVector = nonNullVector(dataVector);
        this.columnIdentifiers = nonNullVector(columnIdentifiers); 
	justifyRows(0, getRowCount()); 
        fireTableStructureChanged();
!!!9786395.java!!!	setDataVector(inout dataVector : Object, inout columnIdentifiers : Object) : void
        setDataVector(convertToVector(dataVector), convertToVector(columnIdentifiers));
!!!9786523.java!!!	newDataAvailable(inout event : TableModelEvent) : void
        fireTableChanged(event);
!!!9786651.java!!!	justifyRows(in from : int, in to : int) : void
 
	// Sometimes the DefaultTableModel is subclassed 
	// instead of the AbstractTableModel by mistake. 
	// Set the number of rows for the case when getRowCount 
	// is overridden. 
	dataVector.setSize(getRowCount()); 

        for (int i = from; i < to; i++) { 
	    if (dataVector.elementAt(i) == null) { 
		dataVector.setElementAt(new Vector(), i); 
	    }
	    ((Vector)dataVector.elementAt(i)).setSize(getColumnCount());
	}
!!!9786779.java!!!	newRowsAdded(inout e : TableModelEvent) : void
        justifyRows(e.getFirstRow(), e.getLastRow() + 1); 
        fireTableChanged(e);
!!!9786907.java!!!	rowsRemoved(inout event : TableModelEvent) : void
        fireTableChanged(event);
!!!9787035.java!!!	setNumRows(in rowCount : int) : void
 
        int old = getRowCount();
	if (old == rowCount) { 
	    return; 
	}
	dataVector.setSize(rowCount);
        if (rowCount <= old) {
            fireTableRowsDeleted(rowCount, old-1);
        }
        else {
	    justifyRows(old, rowCount); 
            fireTableRowsInserted(old, rowCount-1);
        }
!!!9787163.java!!!	setRowCount(in rowCount : int) : void
 
	setNumRows(rowCount); 
!!!9787291.java!!!	addRow(inout rowData : Vector) : void
        insertRow(getRowCount(), rowData);
!!!9787419.java!!!	addRow(inout rowData : Object) : void
        addRow(convertToVector(rowData));
!!!9787547.java!!!	insertRow(in row : int, inout rowData : Vector) : void
	dataVector.insertElementAt(rowData, row); 
	justifyRows(row, row+1); 
        fireTableRowsInserted(row, row);
!!!9787675.java!!!	insertRow(in row : int, inout rowData : Object) : void
        insertRow(row, convertToVector(rowData));
!!!9787803.java!!!	gcd(in i : int, in j : int) : int
	return (j == 0) ? i : gcd(j, i%j); 
!!!9787931.java!!!	rotate(inout v : Vector, in a : int, in b : int, in shift : int) : void
	int size = b - a; 
	int r = size - shift;
	int g = gcd(size, r); 
	for(int i = 0; i < g; i++) {
	    int to = i; 
	    Object tmp = v.elementAt(a + to); 
	    for(int from = (to + r) % size; from != i; from = (to + r) % size) {
		v.setElementAt(v.elementAt(a + from), a + to); 
		to = from; 
	    }
	    v.setElementAt(tmp, a + to); 
	}
!!!9788059.java!!!	moveRow(in start : int, in end : int, in to : int) : void
 
	int shift = to - start; 
	int first, last; 
	if (shift < 0) { 
	    first = to; 
	    last = end; 
	}
	else { 
	    first = start; 
	    last = to + end - start;  
	}
        rotate(dataVector, first, last + 1, shift); 

        fireTableRowsUpdated(first, last);
!!!9788187.java!!!	removeRow(in row : int) : void
        dataVector.removeElementAt(row);
        fireTableRowsDeleted(row, row);
!!!9788315.java!!!	setColumnIdentifiers(inout columnIdentifiers : Vector) : void
	setDataVector(dataVector, columnIdentifiers); 
!!!9788443.java!!!	setColumnIdentifiers(inout newIdentifiers : Object) : void
        setColumnIdentifiers(convertToVector(newIdentifiers));
!!!9788571.java!!!	setColumnCount(in columnCount : int) : void
 
	columnIdentifiers.setSize(columnCount); 
	justifyRows(0, getRowCount()); 
	fireTableStructureChanged();
!!!9788699.java!!!	addColumn(inout columnName : Object) : void
        addColumn(columnName, (Vector)null);
!!!9788827.java!!!	addColumn(inout columnName : Object, inout columnData : Vector) : void
        columnIdentifiers.addElement(columnName); 
	if (columnData != null) { 
            int columnSize = columnData.size(); 
            if (columnSize > getRowCount()) { 
	        dataVector.setSize(columnSize);
            }
	    justifyRows(0, getRowCount()); 
	    int newColumn = getColumnCount() - 1; 
	    for(int i = 0; i < columnSize; i++) { 
		  Vector row = (Vector)dataVector.elementAt(i);
		  row.setElementAt(columnData.elementAt(i), newColumn); 
	    }
	} 
        else { 
	    justifyRows(0, getRowCount()); 
        }

        fireTableStructureChanged();
!!!9788955.java!!!	addColumn(inout columnName : Object, inout columnData : Object) : void
        addColumn(columnName, convertToVector(columnData));
!!!9789083.java!!!	getRowCount() : int
        return dataVector.size();
!!!9789211.java!!!	getColumnCount() : int
        return columnIdentifiers.size();
!!!9789339.java!!!	getColumnName(in column : int) : String
        Object id = null; 
	// This test is to cover the case when 
	// getColumnCount has been subclassed by mistake ... 
	if (column < columnIdentifiers.size()) {  
	    id = columnIdentifiers.elementAt(column); 
	}
        return (id == null) ? super.getColumnName(column) 
                            : id.toString();
!!!9789467.java!!!	isCellEditable(in row : int, in column : int) : boolean
        return true;
!!!9789595.java!!!	getValueAt(in row : int, in column : int) : Object
        Vector rowVector = (Vector)dataVector.elementAt(row);
        return rowVector.elementAt(column);
!!!9789723.java!!!	setValueAt(inout aValue : Object, in row : int, in column : int) : void
        Vector rowVector = (Vector)dataVector.elementAt(row);
        rowVector.setElementAt(aValue, column);
        fireTableCellUpdated(row, column);
!!!9789851.java!!!	convertToVector(inout anArray : Object) : Vector
        if (anArray == null) { 
            return null;
	}
        Vector v = new Vector(anArray.length);
        for (int i=0; i < anArray.length; i++) {
            v.addElement(anArray[i]);
        }
        return v;
!!!9789979.java!!!	convertToVector(inout anArray : Object) : Vector
        if (anArray == null) {
            return null;
	}
        Vector v = new Vector(anArray.length);
        for (int i=0; i < anArray.length; i++) {
            v.addElement(convertToVector(anArray[i]));
        }
        return v;
