class Finalizer
!!!7111195.java!!!	hasBeenFinalized() : boolean
	return (next == this);
!!!7111323.java!!!	add() : void
	synchronized (lock) {
	    if (unfinalized != null) {
		this.next = unfinalized;
		unfinalized.prev = this;
	    }
	    unfinalized = this;
	}
!!!7111451.java!!!	remove() : void
	synchronized (lock) {
	    if (unfinalized == this) {
		if (this.next != null) {
		    unfinalized = this.next;
		} else {
		    unfinalized = this.prev;
		}
	    }
	    if (this.next != null) {
		this.next.prev = this.prev;
	    }
	    if (this.prev != null) {
		this.prev.next = this.next;
	    }
	    this.next = this;	/* Indicates that this has been finalized */
	    this.prev = this;
	}
!!!7111579.java!!!	Finalizer(inout finalizee : Object)
	super(finalizee, queue);
	add();
!!!7111707.java!!!	register(inout finalizee : Object) : void
	new Finalizer(finalizee);
!!!7111835.java!!!	runFinalizer() : void
	synchronized (this) {
	    if (hasBeenFinalized()) return;
	    remove();
	}
	try {
	    Object finalizee = this.get();
	    if (finalizee != null && !(finalizee instanceof java.lang.Enum)) {
		invokeFinalizeMethod(finalizee);
		/* Clear stack slot containing this variable, to decrease
		   the chances of false retention with a conservative GC */
		finalizee = null;
	    }
	} catch (Throwable x) { }
	super.clear();
!!!7111963.java!!!	forkSecondaryFinalizer(in proc : Runnable) : void
	PrivilegedAction pa = new PrivilegedAction() {
	    public Object run() {
		ThreadGroup tg = Thread.currentThread().getThreadGroup();
		for (ThreadGroup tgn = tg;
		     tgn != null;
		     tg = tgn, tgn = tg.getParent());
		Thread sft = new Thread(tg, proc, "Secondary finalizer");
		sft.start();
		try {
		    sft.join();
		} catch (InterruptedException x) {
		    /* Ignore */
		}
		return null;
	    }};
	AccessController.doPrivileged(pa);
!!!7112091.java!!!	runFinalization() : void
	forkSecondaryFinalizer(new Runnable() {
	    public void run() {
		for (;;) {
		    Finalizer f = (Finalizer)queue.poll();
		    if (f == null) break;
		    f.runFinalizer();
		}
	    }
	});
!!!7112219.java!!!	runAllFinalizers() : void
	forkSecondaryFinalizer(new Runnable() {
	    public void run() {
		for (;;) {
		    Finalizer f;
		    synchronized (lock) {
			f = unfinalized;
			if (f == null) break;
			unfinalized = f.next;
		    }
		    f.runFinalizer();
		}}});
