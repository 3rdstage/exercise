class AncestorNotifier
!!!8833691.java!!!	AncestorNotifier(inout root : JComponent)
	this.root = root;
       	addListeners(root, true);
!!!8833819.java!!!	addAncestorListener(inout l : AncestorListener) : void
	listenerList.add(AncestorListener.class, l);
!!!8833947.java!!!	removeAncestorListener(inout l : AncestorListener) : void
	listenerList.remove(AncestorListener.class, l);
!!!8834075.java!!!	getAncestorListeners() : AncestorListener
	return (AncestorListener[])listenerList.getListeners(AncestorListener.class);
!!!8834203.java!!!	fireAncestorAdded(inout source : JComponent, in id : int, inout ancestor : Container, inout ancestorParent : Container) : void
	// Guaranteed to return a non-null array
	Object[] listeners = listenerList.getListenerList();
	// Process the listeners last to first, notifying
	// those that are interested in this event
	for (int i = listeners.length-2; i>=0; i-=2) {
	    if (listeners[i]==AncestorListener.class) {
		// Lazily create the event:
		AncestorEvent ancestorEvent = 
		    new AncestorEvent(source, id, ancestor, ancestorParent);
		((AncestorListener)listeners[i+1]).ancestorAdded(ancestorEvent);
	    }	       
	}
!!!8834331.java!!!	fireAncestorRemoved(inout source : JComponent, in id : int, inout ancestor : Container, inout ancestorParent : Container) : void
	// Guaranteed to return a non-null array
	Object[] listeners = listenerList.getListenerList();
	// Process the listeners last to first, notifying
	// those that are interested in this event
	for (int i = listeners.length-2; i>=0; i-=2) {
	    if (listeners[i]==AncestorListener.class) {
		// Lazily create the event:
		AncestorEvent ancestorEvent = 
		    new AncestorEvent(source, id, ancestor, ancestorParent);
		((AncestorListener)listeners[i+1]).ancestorRemoved(ancestorEvent);
	    }	       
	}
!!!8834459.java!!!	fireAncestorMoved(inout source : JComponent, in id : int, inout ancestor : Container, inout ancestorParent : Container) : void
	// Guaranteed to return a non-null array
	Object[] listeners = listenerList.getListenerList();
	// Process the listeners last to first, notifying
	// those that are interested in this event
	for (int i = listeners.length-2; i>=0; i-=2) {
	    if (listeners[i]==AncestorListener.class) {
		// Lazily create the event:
		AncestorEvent ancestorEvent = 
		    new AncestorEvent(source, id, ancestor, ancestorParent);
		((AncestorListener)listeners[i+1]).ancestorMoved(ancestorEvent);
	    }	       
	}
!!!8834587.java!!!	removeAllListeners() : void
	removeListeners(root);
!!!8834715.java!!!	addListeners(inout ancestor : Component, inout addToFirst : boolean) : void
	Component a;

	firstInvisibleAncestor = null;
	for (a = ancestor;
	     firstInvisibleAncestor == null;
	     a = a.getParent()) {
	    if (addToFirst || a != ancestor) {
		a.addComponentListener(this);

		if (a instanceof JComponent) {
		    JComponent jAncestor = (JComponent)a;

		    jAncestor.addPropertyChangeListener(this);
		}
	    }
	    if (!a.isVisible() || a.getParent() == null || a instanceof Window) {
		firstInvisibleAncestor = a;
	    }
	}
	if (firstInvisibleAncestor instanceof Window &&
	    firstInvisibleAncestor.isVisible()) {
	    firstInvisibleAncestor = null;
	}
!!!8834843.java!!!	removeListeners(inout ancestor : Component) : void
	Component a;
	for (a = ancestor; a != null; a = a.getParent()) {
	    a.removeComponentListener(this);
	    if (a instanceof JComponent) {
		JComponent jAncestor = (JComponent)a;
		jAncestor.removePropertyChangeListener(this);
	    }
	    if (a == firstInvisibleAncestor || a instanceof Window) {
		break;
	    }
	}
!!!8835099.java!!!	componentMoved(inout e : ComponentEvent) : void
	Component source = e.getComponent();

	fireAncestorMoved(root, AncestorEvent.ANCESTOR_MOVED,
			  (Container)source, source.getParent());
!!!8835227.java!!!	componentShown(inout e : ComponentEvent) : void
	Component ancestor = e.getComponent();

	if (ancestor == firstInvisibleAncestor) {
	    addListeners(ancestor, false);
	    if (firstInvisibleAncestor == null) {
		fireAncestorAdded(root, AncestorEvent.ANCESTOR_ADDED,
				  (Container)ancestor, ancestor.getParent());
	    }
	}
!!!8835355.java!!!	componentHidden(inout e : ComponentEvent) : void
	Component ancestor = e.getComponent();
	boolean needsNotify = firstInvisibleAncestor == null;

	if ( !(ancestor instanceof Window) ) {
	    removeListeners(ancestor.getParent());
	}
	firstInvisibleAncestor = ancestor;
	if (needsNotify) {
	    fireAncestorRemoved(root, AncestorEvent.ANCESTOR_REMOVED,
				(Container)ancestor, ancestor.getParent());
	}
!!!8835483.java!!!	propertyChange(inout evt : PropertyChangeEvent) : void
	String s = evt.getPropertyName();

	if (s!=null && (s.equals("parent") || s.equals("ancestor"))) {
	    JComponent component = (JComponent)evt.getSource();

	    if (evt.getNewValue() != null) {
		if (component == firstInvisibleAncestor) {
		    addListeners(component, false);
		    if (firstInvisibleAncestor == null) {
			fireAncestorAdded(root, AncestorEvent.ANCESTOR_ADDED,
					  component, component.getParent());
		    }
		}
	    } else {
		boolean needsNotify = firstInvisibleAncestor == null;
		Container oldParent = (Container)evt.getOldValue();

		removeListeners(oldParent);
		firstInvisibleAncestor = component;
		if (needsNotify) {
		    fireAncestorRemoved(root, AncestorEvent.ANCESTOR_REMOVED,
					component, oldParent);
		}
	    }
	}
