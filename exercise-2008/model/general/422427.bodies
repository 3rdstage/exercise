class DragRecognitionSupport
!!!2515739.java!!!	getDragRecognitionSupport() : DragRecognitionSupport
        DragRecognitionSupport support =
            (DragRecognitionSupport)AppContext.getAppContext().
                get(DragRecognitionSupport.class);

        if (support == null) {
            support = new DragRecognitionSupport();
            AppContext.getAppContext().put(DragRecognitionSupport.class, support);
        }

        return support;
!!!2515867.java!!!	mousePressed(inout me : MouseEvent) : boolean
        return ((DragRecognitionSupport)getDragRecognitionSupport()).
            mousePressedImpl(me);
!!!2515995.java!!!	mouseReleased(inout me : MouseEvent) : MouseEvent
        return ((DragRecognitionSupport)getDragRecognitionSupport()).
            mouseReleasedImpl(me);
!!!2516123.java!!!	mouseDragged(inout me : MouseEvent, inout bd : BeforeDrag) : boolean
        return ((DragRecognitionSupport)getDragRecognitionSupport()).
            mouseDraggedImpl(me, bd);
!!!2516251.java!!!	clearState() : void
        dndArmedEvent = null;
        component = null;
!!!2516379.java!!!	mapDragOperationFromModifiers(inout me : MouseEvent, inout th : TransferHandler) : int

        if (th == null || !SwingUtilities.isLeftMouseButton(me)) {
            return TransferHandler.NONE;
        }

        return SunDragSourceContextPeer.
            convertModifiersToDropAction(me.getModifiersEx(),
                                         th.getSourceActions(component));
!!!2516507.java!!!	mousePressedImpl(inout me : MouseEvent) : boolean
        component = (JComponent)me.getSource();

        if (mapDragOperationFromModifiers(me, component.getTransferHandler())
                != TransferHandler.NONE) {

            motionThreshold = DragSource.getDragThreshold();
            dndArmedEvent = me;
            return true;
        }

        clearState();
        return false;
!!!2516635.java!!!	mouseReleasedImpl(inout me : MouseEvent) : MouseEvent
        /* no recognition has been going on */
        if (dndArmedEvent == null) {
            return null;
        }

        MouseEvent retEvent = null;

        if (me.getSource() == component) {
            retEvent = dndArmedEvent;
        } // else component has changed unexpectedly, so return null

        clearState();
        return retEvent;
!!!2516763.java!!!	mouseDraggedImpl(inout me : MouseEvent, inout bd : BeforeDrag) : boolean
        /* no recognition is in progress */
        if (dndArmedEvent == null) {
            return false;
        }

        /* component has changed unexpectedly, so bail */
        if (me.getSource() != component) {
            clearState();
            return false;
        }

        int dx = Math.abs(me.getX() - dndArmedEvent.getX());
        int dy = Math.abs(me.getY() - dndArmedEvent.getY());
        if ((dx > motionThreshold) || (dy > motionThreshold)) {
            TransferHandler th = component.getTransferHandler();
            int action = mapDragOperationFromModifiers(me, th);
            if (action != TransferHandler.NONE) {
                /* notify the BeforeDrag instance */
                if (bd != null) {
                    bd.dragStarting(dndArmedEvent);
                }
                th.exportAsDrag(component, dndArmedEvent, action);
                clearState();
            }
        }

        return true;
