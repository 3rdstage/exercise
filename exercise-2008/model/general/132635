format 76
"lang" // src::java::lang
  revision 4
  modified_by 37 "3rdstage"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "java/lang"
  java_package "java.lang"
  classview 133787 "lang"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 163227 "Thread"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A <i>thread</i> is a thread of execution in a program. The Java 
Virtual Machine allows an application to have multiple threads of 
execution running concurrently. 
<p>
Every thread has a priority. Threads with higher priority are 
executed in preference to threads with lower priority. Each thread 
may or may not also be marked as a daemon. When code running in 
some thread creates a new <code>Thread</code> object, the new 
thread has its priority initially set equal to the priority of the 
creating thread, and is a daemon thread if and only if the 
creating thread is a daemon. 
<p>
When a Java Virtual Machine starts up, there is usually a single 
non-daemon thread (which typically calls the method named 
<code>main</code> of some designated class). The Java Virtual 
Machine continues to execute threads until either of the following 
occurs: 
<ul>
<li>The <code>exit</code> method of class <code>Runtime</code> has been 
    called and the security manager has permitted the exit operation 
    to take place. 
<li>All threads that are not daemon threads have died, either by 
    returning from the call to the <code>run</code> method or by 
    throwing an exception that propagates beyond the <code>run</code>
    method.
</ul>
<p>
There are two ways to create a new thread of execution. One is to 
declare a class to be a subclass of <code>Thread</code>. This 
subclass should override the <code>run</code> method of class 
<code>Thread</code>. An instance of the subclass can then be 
allocated and started. For example, a thread that computes primes 
larger than a stated value could be written as follows: 
<p><hr><blockquote><pre>
    class PrimeThread extends Thread {
        long minPrime;
        PrimeThread(long minPrime) {
            this.minPrime = minPrime;
        }

        public void run() {
            // compute primes larger than minPrime
            &nbsp;.&nbsp;.&nbsp;.
        }
    }
</pre></blockquote><hr>
<p>
The following code would then create a thread and start it running: 
<p><blockquote><pre>
    PrimeThread p = new PrimeThread(143);
    p.start();
</pre></blockquote>
<p>
The other way to create a thread is to declare a class that 
implements the <code>Runnable</code> interface. That class then 
implements the <code>run</code> method. An instance of the class can 
then be allocated, passed as an argument when creating 
<code>Thread</code>, and started. The same example in this other 
style looks like the following: 
<p><hr><blockquote><pre>
    class PrimeRun implements Runnable {
        long minPrime;
        PrimeRun(long minPrime) {
            this.minPrime = minPrime;
        }

        public void run() {
            // compute primes larger than minPrime
            &nbsp;.&nbsp;.&nbsp;.
        }
    }
</pre></blockquote><hr>
<p>
The following code would then create a thread and start it running: 
<p><blockquote><pre>
    PrimeRun p = new PrimeRun(143);
    new Thread(p).start();
</pre></blockquote>
<p>
Every thread has a name for identification purposes. More than 
one thread may have the same name. If a name is not specified when 
a thread is created, a new name is generated for it. 

@author  unascribed
@version 1.156, 03/22/06
@see     java.lang.Runnable
@see     java.lang.Runtime#exit(int)
@see     java.lang.Thread#run()
@see     java.lang.Thread#stop()
@since   JDK1.0"
      classrelation 181787 // <realization>
	relation 181787 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 181787 // <realization>
	  b parent class_ref 163355 // Runnable
      end

      operation 397339 "registerNatives"
	class_operation private explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Make sure registerNatives is the first thing <clinit> does. "
      end

      extra_member 130459 "initialization"
	
	cpp "" ""
	java "  static {
        registerNatives();
    }"
	php ""
	python ""
	idl ""
      end

      attribute 210587 "name"
	private explicit_type "char"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 210715 "priority"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 181915 // threadQ (<unidirectional association>)
	relation 181915 --->
	  a role_name "threadQ" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 181915 // threadQ (<unidirectional association>)
	  b parent class_ref 163227 // Thread
      end

      attribute 210843 "eetop"
	private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 210971 "started"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " true iff this thread has been started"
      end

      attribute 211099 "single_step"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Whether or not to single_step this thread. "
      end

      attribute 211227 "daemon"
	private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Whether or not the thread is a daemon thread. "
      end

      attribute 211355 "stillborn"
	private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Whether or not this thread was asked to exit before it runs."
      end

      classrelation 182043 // target (<unidirectional association>)
	relation 182043 --->
	  a role_name "target" private
	    comment " What will be run. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 182043 // target (<unidirectional association>)
	  b parent class_ref 163355 // Runnable
      end

      classrelation 182171 // group (<unidirectional association>)
	relation 182171 --->
	  a role_name "group" private
	    comment " The group of this thread 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 182171 // group (<unidirectional association>)
	  b parent class_ref 163483 // ThreadGroup
      end

      classrelation 182299 // contextClassLoader (<unidirectional association>)
	relation 182299 --->
	  a role_name "contextClassLoader" private
	    comment " The context ClassLoader for this thread 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 182299 // contextClassLoader (<unidirectional association>)
	  b parent class_ref 163611 // ClassLoader
      end

      classrelation 182427 // inheritedAccessControlContext (<unidirectional association>)
	relation 182427 --->
	  a role_name "inheritedAccessControlContext" private
	    comment " The inherited AccessControlContext of this thread 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 182427 // inheritedAccessControlContext (<unidirectional association>)
	  b parent class_ref 163739 // AccessControlContext
      end

      attribute 211483 "threadInitNumber"
	class_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " For autonumbering anonymous threads. "
      end

      operation 397467 "nextThreadNum"
	class_operation private explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 182555 // threadLocals (<unidirectional association>)
	relation 182555 --->
	  a role_name "threadLocals" init_value "=  null" package
	    comment " ThreadLocal values pertaining to this thread. This map is maintained
by the ThreadLocal class. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 182555 // threadLocals (<unidirectional association>)
	  b parent class_ref 163995 // ThreadLocalMap
      end

      classrelation 182683 // inheritableThreadLocals (<unidirectional association>)
	relation 182683 --->
	  a role_name "inheritableThreadLocals" init_value "=  null" package
	    comment "
InheritableThreadLocal values pertaining to this thread. This map is
maintained by the InheritableThreadLocal class.  

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 182683 // inheritableThreadLocals (<unidirectional association>)
	  b parent class_ref 163995 // ThreadLocalMap
      end

      attribute 211611 "stackSize"
	private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The requested stack size for this thread, or 0 if the creator did
not specify a stack size.  It is up to the VM to do whatever it
likes with this number; some VMs will ignore it.
"
      end

      attribute 211739 "tid"
	private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Thread ID
"
      end

      attribute 211867 "threadSeqNumber"
	class_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " For generating thread ID "
      end

      attribute 211995 "threadStatus"
	private explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Java thread status for tools, 
initialized to indicate thread 'not yet started'
"
      end

      operation 397595 "nextThreadID"
	class_operation private explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 212123 "blocker"
	volatile private explicit_type "Interruptible"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The object in which this thread is blocked in an interruptible I/O
operation, if any.  The blocker's interrupt method should be invoked
after setting this thread's interrupt status.
"
      end

      attribute 212251 "blockerLock"
	private explicit_type "Object"
	init_value "=  new Object()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 397723 "blockedOn"
	package explicit_return_type "void"
	nparams 1
	  param inout name "b" explicit_type "Interruptible"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Set the blocker field; invoked via sun.misc.SharedSecrets from java.nio code"
      end

      attribute 212379 "MIN_PRIORITY"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The minimum priority that a thread can have. 
"
      end

      attribute 212507 "NORM_PRIORITY"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The default priority that is assigned to a thread. 
"
      end

      attribute 212635 "MAX_PRIORITY"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  10"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The maximum priority that a thread can have. 
"
      end

      operation 397851 "currentThread"
	class_operation public return_type class_ref 163227 // Thread
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a reference to the currently executing thread object.

@return  the currently executing thread."
      end

      operation 397979 "yield"
	class_operation public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Causes the currently executing thread object to temporarily pause 
and allow other threads to execute. "
      end

      operation 398107 "sleep"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "millis" explicit_type "long"
	nexceptions 1
	  exception class_ref 164123 // InterruptedException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Causes the currently executing thread to sleep (temporarily cease 
execution) for the specified number of milliseconds. The thread 
does not lose ownership of any monitors.

@param      millis   the length of time to sleep in milliseconds.
@exception  InterruptedException if another thread has interrupted
            the current thread.  The <i>interrupted status</i> of the
            current thread is cleared when this exception is thrown.
@see        java.lang.Object#notify()"
      end

      operation 398235 "sleep"
	class_operation public explicit_return_type "void"
	nparams 2
	  param in name "millis" explicit_type "long"
	  param in name "nanos" explicit_type "int"
	nexceptions 1
	  exception class_ref 164123 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Causes the currently executing thread to sleep (cease execution) 
for the specified number of milliseconds plus the specified number 
of nanoseconds. The thread does not lose ownership of any monitors.

@param      millis   the length of time to sleep in milliseconds.
@param      nanos    0-999999 additional nanoseconds to sleep.
@exception  IllegalArgumentException  if the value of millis is 
            negative or the value of nanos is not in the range 
            0-999999.
@exception  InterruptedException if another thread has interrupted
            the current thread.  The <i>interrupted status</i> of the
            current thread is cleared when this exception is thrown.
@see        java.lang.Object#notify()"
      end

      operation 398363 "init"
	private explicit_return_type "void"
	nparams 4
	  param inout name "g" type class_ref 163483 // ThreadGroup
	  param inout name "target" type class_ref 163355 // Runnable
	  param in name "name" explicit_type "String"
	  param in name "stackSize" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initialize a Thread.

@param g the Thread group
@param target the object whose run() method gets called
@param name the name of the new Thread
@param stackSize the desired stack size for the new thread, or
       zero to indicate that this parameter is to be ignored."
      end

      operation 398491 "Thread"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allocates a new <code>Thread</code> object. This constructor has 
the same effect as <code>Thread(null, null,</code>
<i>gname</i><code>)</code>, where <b><i>gname</i></b> is 
a newly generated name. Automatically generated names are of the 
form <code>\"Thread-\"+</code><i>n</i>, where <i>n</i> is an integer. 

@see     java.lang.Thread#Thread(java.lang.ThreadGroup,
         java.lang.Runnable, java.lang.String)"
      end

      operation 398619 "Thread"
	public explicit_return_type ""
	nparams 1
	  param inout name "target" type class_ref 163355 // Runnable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allocates a new <code>Thread</code> object. This constructor has 
the same effect as <code>Thread(null, target,</code>
<i>gname</i><code>)</code>, where <i>gname</i> is 
a newly generated name. Automatically generated names are of the 
form <code>\"Thread-\"+</code><i>n</i>, where <i>n</i> is an integer. 

@param   target   the object whose <code>run</code> method is called.
@see     java.lang.Thread#Thread(java.lang.ThreadGroup, 
         java.lang.Runnable, java.lang.String)"
      end

      operation 398747 "Thread"
	public explicit_return_type ""
	nparams 2
	  param inout name "group" type class_ref 163483 // ThreadGroup
	  param inout name "target" type class_ref 163355 // Runnable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allocates a new <code>Thread</code> object. This constructor has 
the same effect as <code>Thread(group, target,</code>
<i>gname</i><code>)</code>, where <i>gname</i> is 
a newly generated name. Automatically generated names are of the 
form <code>\"Thread-\"+</code><i>n</i>, where <i>n</i> is an integer. 

@param      group    the thread group.
@param      target   the object whose <code>run</code> method is called.
@exception  SecurityException  if the current thread cannot create a
            thread in the specified thread group.
@see        java.lang.Thread#Thread(java.lang.ThreadGroup, 
            java.lang.Runnable, java.lang.String)"
      end

      operation 398875 "Thread"
	public explicit_return_type ""
	nparams 1
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allocates a new <code>Thread</code> object. This constructor has 
the same effect as <code>Thread(null, null, name)</code>. 

@param   name   the name of the new thread.
@see     java.lang.Thread#Thread(java.lang.ThreadGroup, 
         java.lang.Runnable, java.lang.String)"
      end

      operation 399003 "Thread"
	public explicit_return_type ""
	nparams 2
	  param inout name "group" type class_ref 163483 // ThreadGroup
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allocates a new <code>Thread</code> object. This constructor has 
the same effect as <code>Thread(group, null, name)</code> 

@param      group   the thread group.
@param      name    the name of the new thread.
@exception  SecurityException  if the current thread cannot create a
              thread in the specified thread group.
@see        java.lang.Thread#Thread(java.lang.ThreadGroup, 
         java.lang.Runnable, java.lang.String)"
      end

      operation 399131 "Thread"
	public explicit_return_type ""
	nparams 2
	  param inout name "target" type class_ref 163355 // Runnable
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allocates a new <code>Thread</code> object. This constructor has 
the same effect as <code>Thread(null, target, name)</code>. 

@param   target   the object whose <code>run</code> method is called.
@param   name     the name of the new thread.
@see     java.lang.Thread#Thread(java.lang.ThreadGroup, 
         java.lang.Runnable, java.lang.String)"
      end

      operation 399259 "Thread"
	public explicit_return_type ""
	nparams 3
	  param inout name "group" type class_ref 163483 // ThreadGroup
	  param inout name "target" type class_ref 163355 // Runnable
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allocates a new <code>Thread</code> object so that it has 
<code>target</code> as its run object, has the specified 
<code>name</code> as its name, and belongs to the thread group 
referred to by <code>group</code>.
<p>
If <code>group</code> is <code>null</code> and there is a 
security manager, the group is determined by the security manager's 
<code>getThreadGroup</code> method. If <code>group</code> is 
<code>null</code> and there is not a security manager, or the
security manager's <code>getThreadGroup</code> method returns 
<code>null</code>, the group is set to be the same ThreadGroup 
as the thread that is creating the new thread.

<p>If there is a security manager, its <code>checkAccess</code> 
method is called with the ThreadGroup as its argument.
<p>In addition, its <code>checkPermission</code>
method is called with the
<code>RuntimePermission(\"enableContextClassLoaderOverride\")</code>
permission when invoked directly or indirectly by the constructor
of a subclass which overrides the <code>getContextClassLoader</code>
or <code>setContextClassLoader</code> methods.
This may result in a SecurityException.

<p>
If the <code>target</code> argument is not <code>null</code>, the 
<code>run</code> method of the <code>target</code> is called when 
this thread is started. If the target argument is 
<code>null</code>, this thread's <code>run</code> method is called 
when this thread is started. 
<p>
The priority of the newly created thread is set equal to the 
priority of the thread creating it, that is, the currently running 
thread. The method <code>setPriority</code> may be used to 
change the priority to a new value. 
<p>
The newly created thread is initially marked as being a daemon 
thread if and only if the thread creating it is currently marked 
as a daemon thread. The method <code>setDaemon </code> may be used 
to change whether or not a thread is a daemon. 

@param      group     the thread group.
@param      target   the object whose <code>run</code> method is called.
@param      name     the name of the new thread.
@exception  SecurityException  if the current thread cannot create a
              thread in the specified thread group or cannot
              override the context class loader methods.
@see        java.lang.Runnable#run()
@see        java.lang.Thread#run()
@see        java.lang.Thread#setDaemon(boolean)
@see        java.lang.Thread#setPriority(int)
@see        java.lang.ThreadGroup#checkAccess()
@see        SecurityManager#checkAccess"
      end

      operation 399387 "Thread"
	public explicit_return_type ""
	nparams 4
	  param inout name "group" type class_ref 163483 // ThreadGroup
	  param inout name "target" type class_ref 163355 // Runnable
	  param in name "name" explicit_type "String"
	  param in name "stackSize" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allocates a new <code>Thread</code> object so that it has
<code>target</code> as its run object, has the specified
<code>name</code> as its name, belongs to the thread group referred to
by <code>group</code>, and has the specified <i>stack size</i>.

<p>This constructor is identical to {@link
#Thread(ThreadGroup,Runnable,String)} with the exception of the fact
that it allows the thread stack size to be specified.  The stack size
is the approximate number of bytes of address space that the virtual
machine is to allocate for this thread's stack.  <b>The effect of the
<tt>stackSize</tt> parameter, if any, is highly platform dependent.</b>

<p>On some platforms, specifying a higher value for the
<tt>stackSize</tt> parameter may allow a thread to achieve greater
recursion depth before throwing a {@link StackOverflowError}.
Similarly, specifying a lower value may allow a greater number of
threads to exist concurrently without throwing an {@link
OutOfMemoryError} (or other internal error).  The details of
the relationship between the value of the <tt>stackSize</tt> parameter
and the maximum recursion depth and concurrency level are
platform-dependent.  <b>On some platforms, the value of the
<tt>stackSize</tt> parameter may have no effect whatsoever.</b>

<p>The virtual machine is free to treat the <tt>stackSize</tt>
parameter as a suggestion.  If the specified value is unreasonably low
for the platform, the virtual machine may instead use some
platform-specific minimum value; if the specified value is unreasonably
high, the virtual machine may instead use some platform-specific
maximum.  Likewise, the virtual machine is free to round the specified
value up or down as it sees fit (or to ignore it completely).

<p>Specifying a value of zero for the <tt>stackSize</tt> parameter will
cause this constructor to behave exactly like the
<tt>Thread(ThreadGroup, Runnable, String)</tt> constructor.

<p><i>Due to the platform-dependent nature of the behavior of this
constructor, extreme care should be exercised in its use.
The thread stack size necessary to perform a given computation will
likely vary from one JRE implementation to another.  In light of this
variation, careful tuning of the stack size parameter may be required,
and the tuning may need to be repeated for each JRE implementation on
which an application is to run.</i>

<p>Implementation note: Java platform implementers are encouraged to
document their implementation's behavior with respect to the
<tt>stackSize parameter</tt>.

@param      group    the thread group.
@param      target   the object whose <code>run</code> method is called.
@param      name     the name of the new thread.
@param      stackSize the desired stack size for the new thread, or
            zero to indicate that this parameter is to be ignored.
@exception  SecurityException  if the current thread cannot create a
              thread in the specified thread group."
      end

      operation 399515 "start"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Causes this thread to begin execution; the Java Virtual Machine 
calls the <code>run</code> method of this thread. 
<p>
The result is that two threads are running concurrently: the 
current thread (which returns from the call to the 
<code>start</code> method) and the other thread (which executes its 
<code>run</code> method). 
<p>
It is never legal to start a thread more than once.
In particular, a thread may not be restarted once it has completed
execution.

@exception  IllegalThreadStateException  if the thread was already
              started.
@see        java.lang.Thread#run()
@see        java.lang.Thread#stop()"
      end

      operation 399643 "start0"
	private explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 399771 "run"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If this thread was constructed using a separate 
<code>Runnable</code> run object, then that 
<code>Runnable</code> object's <code>run</code> method is called; 
otherwise, this method does nothing and returns. 
<p>
Subclasses of <code>Thread</code> should override this method. 

@see     java.lang.Thread#start()
@see     java.lang.Thread#stop()
@see     java.lang.Thread#Thread(java.lang.ThreadGroup, 
         java.lang.Runnable, java.lang.String)
@see     java.lang.Runnable#run()"
      end

      operation 399899 "exit"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called by the system to give a Thread
a chance to clean up before it actually exits."
      end

      operation 400027 "stop"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Forces the thread to stop executing.
<p>
If there is a security manager installed, its <code>checkAccess</code>
method is called with <code>this</code> 
as its argument. This may result in a 
<code>SecurityException</code> being raised (in the current thread). 
<p>
If this thread is different from the current thread (that is, the current
thread is trying to stop a thread other than itself), the
security manager's <code>checkPermission</code> method (with a
<code>RuntimePermission(\"stopThread\")</code> argument) is called in
addition.
Again, this may result in throwing a 
<code>SecurityException</code> (in the current thread). 
<p>
The thread represented by this thread is forced to stop whatever 
it is doing abnormally and to throw a newly created 
<code>ThreadDeath</code> object as an exception. 
<p>
It is permitted to stop a thread that has not yet been started. 
If the thread is eventually started, it immediately terminates. 
<p>
An application should not normally try to catch 
<code>ThreadDeath</code> unless it must do some extraordinary 
cleanup operation (note that the throwing of 
<code>ThreadDeath</code> causes <code>finally</code> clauses of 
<code>try</code> statements to be executed before the thread 
officially dies).  If a <code>catch</code> clause catches a 
<code>ThreadDeath</code> object, it is important to rethrow the 
object so that the thread actually dies. 
<p>
The top-level error handler that reacts to otherwise uncaught 
exceptions does not print out a message or otherwise notify the 
application if the uncaught exception is an instance of 
<code>ThreadDeath</code>. 

@exception  SecurityException  if the current thread cannot 
              modify this thread.
@see        java.lang.Thread#interrupt()
@see        java.lang.Thread#checkAccess()
@see        java.lang.Thread#run()
@see        java.lang.Thread#start()
@see        java.lang.ThreadDeath
@see        java.lang.ThreadGroup#uncaughtException(java.lang.Thread,
            java.lang.Throwable)
@see        SecurityManager#checkAccess(Thread)
@see        SecurityManager#checkPermission
@deprecated This method is inherently unsafe.  Stopping a thread with
	     Thread.stop causes it to unlock all of the monitors that it
	     has locked (as a natural consequence of the unchecked
	     <code>ThreadDeath</code> exception propagating up the stack).  If
      any of the objects previously protected by these monitors were in
      an inconsistent state, the damaged objects become visible to
      other threads, potentially resulting in arbitrary behavior.  Many
      uses of <code>stop</code> should be replaced by code that simply
      modifies some variable to indicate that the target thread should
      stop running.  The target thread should check this variable  
      regularly, and return from its run method in an orderly fashion
      if the variable indicates that it is to stop running.  If the
      target thread waits for long periods (on a condition variable,
      for example), the <code>interrupt</code> method should be used to
      interrupt the wait. 
      For more information, see 
      <a href=\"{@docRoot}/../guide/misc/threadPrimitiveDeprecation.html\">Why 
      are Thread.stop, Thread.suspend and Thread.resume Deprecated?</a>."
      end

      operation 400155 "stop"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 164251 // Throwable
	
	preserve_java_body_indent final synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Forces the thread to stop executing.
<p>
If there is a security manager installed, the <code>checkAccess</code>
method of this thread is called, which may result in a 
<code>SecurityException</code> being raised (in the current thread). 
<p>
If this thread is different from the current thread (that is, the current
thread is trying to stop a thread other than itself) or
<code>obj</code> is not an instance of <code>ThreadDeath</code>, the
security manager's <code>checkPermission</code> method (with the
<code>RuntimePermission(\"stopThread\")</code> argument) is called in
addition.
Again, this may result in throwing a 
<code>SecurityException</code> (in the current thread). 
<p>
If the argument <code>obj</code> is null, a 
<code>NullPointerException</code> is thrown (in the current thread). 
<p>
The thread represented by this thread is forced to complete 
whatever it is doing abnormally and to throw the 
<code>Throwable</code> object <code>obj</code> as an exception. This 
is an unusual action to take; normally, the <code>stop</code> method 
that takes no arguments should be used. 
<p>
It is permitted to stop a thread that has not yet been started. 
If the thread is eventually started, it immediately terminates. 

@param      obj   the Throwable object to be thrown.
@exception  SecurityException  if the current thread cannot modify
              this thread.
@see        java.lang.Thread#interrupt()
@see        java.lang.Thread#checkAccess()
@see        java.lang.Thread#run()
@see        java.lang.Thread#start()
@see        java.lang.Thread#stop()
@see        SecurityManager#checkAccess(Thread)
@see        SecurityManager#checkPermission
@deprecated This method is inherently unsafe.  See {@link #stop()}
       for details.  An additional danger of this
       method is that it may be used to generate exceptions that the
       target thread is unprepared to handle (including checked
       exceptions that the thread could not possibly throw, were it
       not for this method).
       For more information, see 
       <a href=\"{@docRoot}/../guide/misc/threadPrimitiveDeprecation.html\">Why 
       are Thread.stop, Thread.suspend and Thread.resume Deprecated?</a>."
      end

      operation 400283 "interrupt"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Interrupts this thread.

<p> Unless the current thread is interrupting itself, which is
always permitted, the {@link #checkAccess() checkAccess} method
of this thread is invoked, which may cause a {@link
SecurityException} to be thrown.

<p> If this thread is blocked in an invocation of the {@link
Object#wait() wait()}, {@link Object#wait(long) wait(long)}, or {@link
Object#wait(long, int) wait(long, int)} methods of the {@link Object}
class, or of the {@link #join()}, {@link #join(long)}, {@link
#join(long, int)}, {@link #sleep(long)}, or {@link #sleep(long, int)},
methods of this class, then its interrupt status will be cleared and it
will receive an {@link InterruptedException}.

<p> If this thread is blocked in an I/O operation upon an {@link
java.nio.channels.InterruptibleChannel </code>interruptible
channel<code>} then the channel will be closed, the thread's interrupt
status will be set, and the thread will receive a {@link
java.nio.channels.ClosedByInterruptException}.

<p> If this thread is blocked in a {@link java.nio.channels.Selector}
then the thread's interrupt status will be set and it will return
immediately from the selection operation, possibly with a non-zero
value, just as if the selector's {@link
java.nio.channels.Selector#wakeup wakeup} method were invoked.

<p> If none of the previous conditions hold then this thread's interrupt
status will be set. </p>

@throws  SecurityException
         if the current thread cannot modify this thread

@revised 1.4
@spec JSR-51"
      end

      operation 400411 "interrupted"
	class_operation public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether the current thread has been interrupted.  The
<i>interrupted status</i> of the thread is cleared by this method.  In
other words, if this method were to be called twice in succession, the
second call would return false (unless the current thread were
interrupted again, after the first call had cleared its interrupted
status and before the second call had examined it).

@return  <code>true</code> if the current thread has been interrupted;
         <code>false</code> otherwise.
@see java.lang.Thread#isInterrupted()"
      end

      operation 400539 "isInterrupted"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether this thread has been interrupted.  The <i>interrupted
status</i> of the thread is unaffected by this method.

@return  <code>true</code> if this thread has been interrupted;
         <code>false</code> otherwise.
@see     java.lang.Thread#interrupted()"
      end

      operation 400667 "isInterrupted"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "ClearInterrupted" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if some Thread has been interrupted.  The interrupted state
is reset or not based on the value of ClearInterrupted that is
passed."
      end

      operation 400795 "destroy"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Throws {@link NoSuchMethodError}.

@deprecated This method was originally designed to destroy this
    thread without any cleanup. Any monitors it held would have
    remained locked. However, the method was never implemented.
    If if were to be implemented, it would be deadlock-prone in
    much the manner of {@link #suspend}. If the target thread held
    a lock protecting a critical system resource when it was
    destroyed, no thread could ever access this resource again.
    If another thread ever attempted to lock this resource, deadlock
    would result. Such deadlocks typically manifest themselves as
    \"frozen\" processes. For more information, see
    <a href=\"{@docRoot}/../guide/misc/threadPrimitiveDeprecation.html\">
    Why are Thread.stop, Thread.suspend and Thread.resume Deprecated?</a>.
@throws NoSuchMethodError always"
      end

      operation 400923 "isAlive"
	public explicit_return_type "boolean"
	nparams 0
	
	final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if this thread is alive. A thread is alive if it has 
been started and has not yet died. 

@return  <code>true</code> if this thread is alive;
         <code>false</code> otherwise."
      end

      operation 401051 "suspend"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Suspends this thread.
<p>
First, the <code>checkAccess</code> method of this thread is called 
with no arguments. This may result in throwing a 
<code>SecurityException </code>(in the current thread). 
<p>
If the thread is alive, it is suspended and makes no further 
progress unless and until it is resumed. 

@exception  SecurityException  if the current thread cannot modify
              this thread.
@see #checkAccess
@deprecated   This method has been deprecated, as it is
  inherently deadlock-prone.  If the target thread holds a lock on the
  monitor protecting a critical system resource when it is suspended, no
  thread can access this resource until the target thread is resumed. If
  the thread that would resume the target thread attempts to lock this
  monitor prior to calling <code>resume</code>, deadlock results.  Such
  deadlocks typically manifest themselves as \"frozen\" processes.
  For more information, see 
  <a href=\"{@docRoot}/../guide/misc/threadPrimitiveDeprecation.html\">Why 
  are Thread.stop, Thread.suspend and Thread.resume Deprecated?</a>."
      end

      operation 401179 "resume"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Resumes a suspended thread.
<p>
First, the <code>checkAccess</code> method of this thread is called 
with no arguments. This may result in throwing a 
<code>SecurityException</code> (in the current thread). 
<p>
If the thread is alive but suspended, it is resumed and is 
permitted to make progress in its execution. 

@exception  SecurityException  if the current thread cannot modify this
              thread.
@see        #checkAccess
@see        java.lang.Thread#suspend()
@deprecated This method exists solely for use with {@link #suspend},
    which has been deprecated because it is deadlock-prone.
    For more information, see 
    <a href=\"{@docRoot}/../guide/misc/threadPrimitiveDeprecation.html\">Why 
    are Thread.stop, Thread.suspend and Thread.resume Deprecated?</a>."
      end

      operation 401307 "setPriority"
	public explicit_return_type "void"
	nparams 1
	  param in name "newPriority" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Changes the priority of this thread. 
<p>
First the <code>checkAccess</code> method of this thread is called 
with no arguments. This may result in throwing a 
<code>SecurityException</code>. 
<p>
Otherwise, the priority of this thread is set to the smaller of 
the specified <code>newPriority</code> and the maximum permitted 
priority of the thread's thread group. 

@param newPriority priority to set this thread to
@exception  IllegalArgumentException  If the priority is not in the
              range <code>MIN_PRIORITY</code> to
              <code>MAX_PRIORITY</code>.
@exception  SecurityException  if the current thread cannot modify
              this thread.
@see        #getPriority
@see        java.lang.Thread#checkAccess()
@see        java.lang.Thread#getPriority()
@see        java.lang.Thread#getThreadGroup()
@see        java.lang.Thread#MAX_PRIORITY
@see        java.lang.Thread#MIN_PRIORITY
@see        java.lang.ThreadGroup#getMaxPriority()"
      end

      operation 401435 "getPriority"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this thread's priority.

@return  this thread's priority.
@see     #setPriority
@see     java.lang.Thread#setPriority(int)"
      end

      operation 401563 "setName"
	public explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Changes the name of this thread to be equal to the argument 
<code>name</code>. 
<p>
First the <code>checkAccess</code> method of this thread is called 
with no arguments. This may result in throwing a 
<code>SecurityException</code>. 

@param      name   the new name for this thread.
@exception  SecurityException  if the current thread cannot modify this
              thread.
@see        #getName
@see        java.lang.Thread#checkAccess()
@see        java.lang.Thread#getName()"
      end

      operation 401691 "getName"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this thread's name.

@return  this thread's name.
@see     #setName
@see     java.lang.Thread#setName(java.lang.String)"
      end

      operation 401819 "getThreadGroup"
	public return_type class_ref 163483 // ThreadGroup
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the thread group to which this thread belongs. 
This method returns null if this thread has died
(been stopped).

@return  this thread's thread group."
      end

      operation 401947 "activeCount"
	class_operation public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of active threads in the current thread's thread
group.

@return  the number of active threads in the current thread's thread
         group."
      end

      operation 402075 "enumerate"
	class_operation public explicit_return_type "int"
	nparams 1
	  param inout name "tarray" type class_ref 163227 // Thread
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copies into the specified array every active thread in 
the current thread's thread group and its subgroups. This method simply 
calls the <code>enumerate</code> method of the current thread's thread 
group with the array argument. 
<p>
First, if there is a security manager, that <code>enumerate</code>
method calls the security
manager's <code>checkAccess</code> method 
with the thread group as its argument. This may result 
in throwing a <code>SecurityException</code>. 

@param tarray an array of Thread objects to copy to
@return  the number of threads put into the array
@exception  SecurityException  if a security manager exists and its  
            <code>checkAccess</code> method doesn't allow the operation.
@see     java.lang.ThreadGroup#enumerate(java.lang.Thread[])
@see     java.lang.SecurityManager#checkAccess(java.lang.ThreadGroup)"
      end

      operation 402203 "countStackFrames"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Counts the number of stack frames in this thread. The thread must 
be suspended. 

@return     the number of stack frames in this thread.
@exception  IllegalThreadStateException  if this thread is not
            suspended.
@deprecated The definition of this call depends on {@link #suspend},
		   which is deprecated.  Further, the results of this call
		   were never well-defined."
      end

      operation 402331 "join"
	public explicit_return_type "void"
	nparams 1
	  param in name "millis" explicit_type "long"
	nexceptions 1
	  exception class_ref 164123 // InterruptedException
	
	preserve_java_body_indent final synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Waits at most <code>millis</code> milliseconds for this thread to 
die. A timeout of <code>0</code> means to wait forever. 

@param      millis   the time to wait in milliseconds.
@exception  InterruptedException if another thread has interrupted
            the current thread.  The <i>interrupted status</i> of the
            current thread is cleared when this exception is thrown."
      end

      operation 402459 "join"
	public explicit_return_type "void"
	nparams 2
	  param in name "millis" explicit_type "long"
	  param in name "nanos" explicit_type "int"
	nexceptions 1
	  exception class_ref 164123 // InterruptedException
	
	preserve_java_body_indent final synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Waits at most <code>millis</code> milliseconds plus 
<code>nanos</code> nanoseconds for this thread to die. 

@param      millis   the time to wait in milliseconds.
@param      nanos    0-999999 additional nanoseconds to wait.
@exception  IllegalArgumentException  if the value of millis is negative
              the value of nanos is not in the range 0-999999.
@exception  InterruptedException if another thread has interrupted
            the current thread.  The <i>interrupted status</i> of the
            current thread is cleared when this exception is thrown."
      end

      operation 402587 "join"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 164123 // InterruptedException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Waits for this thread to die. 

@exception  InterruptedException if another thread has interrupted
            the current thread.  The <i>interrupted status</i> of the
            current thread is cleared when this exception is thrown."
      end

      operation 402715 "dumpStack"
	class_operation public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints a stack trace of the current thread. This method is used 
only for debugging. 

@see     java.lang.Throwable#printStackTrace()"
      end

      operation 402843 "setDaemon"
	public explicit_return_type "void"
	nparams 1
	  param inout name "on" explicit_type "boolean"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Marks this thread as either a daemon thread or a user thread. The 
Java Virtual Machine exits when the only threads running are all 
daemon threads. 
<p>
This method must be called before the thread is started. 
<p>
This method first calls the <code>checkAccess</code> method 
of this thread 
with no arguments. This may result in throwing a 
<code>SecurityException </code>(in the current thread). 

@param      on   if <code>true</code>, marks this thread as a
                 daemon thread.
@exception  IllegalThreadStateException  if this thread is active.
@exception  SecurityException  if the current thread cannot modify
              this thread.
@see        java.lang.Thread#isDaemon()
@see          #checkAccess"
      end

      operation 402971 "isDaemon"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if this thread is a daemon thread.

@return  <code>true</code> if this thread is a daemon thread;
         <code>false</code> otherwise.
@see     java.lang.Thread#setDaemon(boolean)"
      end

      operation 403099 "checkAccess"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if the currently running thread has permission to 
modify this thread. 
<p>
If there is a security manager, its <code>checkAccess</code> method 
is called with this thread as its argument. This may result in 
throwing a <code>SecurityException</code>. 
<p>
Note: This method was mistakenly non-final in JDK 1.1.
It has been made final in the Java 2 Platform.

@exception  SecurityException  if the current thread is not allowed to
              access this thread.
@see        java.lang.SecurityManager#checkAccess(java.lang.Thread)"
      end

      operation 403227 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of this thread, including the 
thread's name, priority, and thread group.

@return  a string representation of this thread."
      end

      operation 403355 "getContextClassLoader"
	public return_type class_ref 163611 // ClassLoader
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the context ClassLoader for this Thread. The context
ClassLoader is provided by the creator of the thread for use
by code running in this thread when loading classes and resources.
If not set, the default is the ClassLoader context of the parent
Thread. The context ClassLoader of the primordial thread is
typically set to the class loader used to load the application.

<p>First, if there is a security manager, and the caller's class
loader is not null and the caller's class loader is not the same as or
an ancestor of the context class loader for the thread whose
context class loader is being requested, then the security manager's
<code>checkPermission</code> 
method is called with a 
<code>RuntimePermission(\"getClassLoader\")</code> permission
 to see if it's ok to get the context ClassLoader.. 

@return the context ClassLoader for this Thread

@throws SecurityException
       if a security manager exists and its 
       <code>checkPermission</code> method doesn't allow 
       getting the context ClassLoader.
@see #setContextClassLoader
@see SecurityManager#checkPermission
@see java.lang.RuntimePermission

@since 1.2"
      end

      operation 403483 "setContextClassLoader"
	public explicit_return_type "void"
	nparams 1
	  param inout name "cl" type class_ref 163611 // ClassLoader
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the context ClassLoader for this Thread. The context
ClassLoader can be set when a thread is created, and allows
the creator of the thread to provide the appropriate class loader
to code running in the thread when loading classes and resources.

<p>First, if there is a security manager, its <code>checkPermission</code> 
method is called with a 
<code>RuntimePermission(\"setContextClassLoader\")</code> permission
 to see if it's ok to set the context ClassLoader.. 

@param cl the context ClassLoader for this Thread

@exception  SecurityException  if the current thread cannot set the 
context ClassLoader.
@see #getContextClassLoader
@see SecurityManager#checkPermission
@see java.lang.RuntimePermission

@since 1.2 "
      end

      operation 403611 "holdsLock"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if and only if the current thread holds the
monitor lock on the specified object.

<p>This method is designed to allow a program to assert that
the current thread already holds a specified lock:
<pre>
    assert Thread.holdsLock(obj);
</pre>

@param  obj the object on which to test lock ownership
@throws NullPointerException if obj is <tt>null</tt>
@return <tt>true</tt> if the current thread holds the monitor lock on
        the specified object.
@since 1.4"
      end

      classrelation 182811 // EMPTY_STACK_TRACE (<unidirectional association>)
	relation 182811 --->
	  a role_name "EMPTY_STACK_TRACE" multiplicity "[]" init_value "=  new StackTraceElement[0]" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 182811 // EMPTY_STACK_TRACE (<unidirectional association>)
	  b parent class_ref 164379 // StackTraceElement
      end

      operation 403739 "getStackTrace"
	public return_type class_ref 164379 // StackTraceElement
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of stack trace elements representing the stack dump
of this thread.  This method will return a zero-length array if
this thread has not started or has terminated. 
If the returned array is of non-zero length then the first element of 
the array represents the top of the stack, which is the most recent
method invocation in the sequence.  The last element of the array
represents the bottom of the stack, which is the least recent method
invocation in the sequence.

<p>If there is a security manager, and this thread is not 
the current thread, then the security manager's 
<tt>checkPermission</tt> method is called with a 
<tt>RuntimePermission(\"getStackTrace\")</tt> permission
to see if it's ok to get the stack trace. 

<p>Some virtual machines may, under some circumstances, omit one
or more stack frames from the stack trace.  In the extreme case,
a virtual machine that has no stack trace information concerning
this thread is permitted to return a zero-length array from this
method.  

@return an array of <tt>StackTraceElement</tt>, 
each represents one stack frame.

@throws SecurityException
       if a security manager exists and its 
       <tt>checkPermission</tt> method doesn't allow 
       getting the stack trace of thread.
@see SecurityManager#checkPermission
@see java.lang.RuntimePermission
@see Throwable#getStackTrace

@since 1.5"
      end

      operation 403867 "getAllStackTraces"
	class_operation public return_type class_ref 136603 // Map
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Thread, StackTraceElement[]> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a map of stack traces for all live threads.
The map keys are threads and each map value is an array of
<tt>StackTraceElement</tt> that represents the stack dump
of the corresponding <tt>Thread</tt>.
The returned stack traces are in the format specified for
the {@link #getStackTrace getStackTrace} method.

<p>The threads may be executing while this method is called.
The stack trace of each thread only represents a snapshot and
each stack trace may be obtained at different time.  A zero-length
array will be returned in the map value if the virtual machine has 
no stack trace information about a thread.

<p>If there is a security manager, then the security manager's 
<tt>checkPermission</tt> method is called with a 
<tt>RuntimePermission(\"getStackTrace\")</tt> permission as well as
<tt>RuntimePermission(\"modifyThreadGroup\")</tt> permission
to see if it is ok to get the stack trace of all threads. 

@return a <tt>Map</tt> from <tt>Thread</tt> to an array of 
<tt>StackTraceElement</tt> that represents the stack trace of 
the corresponding thread.

@throws SecurityException
       if a security manager exists and its 
       <tt>checkPermission</tt> method doesn't allow 
       getting the stack trace of thread.
@see #getStackTrace
@see SecurityManager#checkPermission
@see java.lang.RuntimePermission
@see Throwable#getStackTrace

@since 1.5"
      end

      classrelation 182939 // SUBCLASS_IMPLEMENTATION_PERMISSION (<unidirectional association>)
	relation 182939 --->
	  a role_name "SUBCLASS_IMPLEMENTATION_PERMISSION" init_value "= 
                    new RuntimePermission(\"enableContextClassLoaderOverride\")" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 182939 // SUBCLASS_IMPLEMENTATION_PERMISSION (<unidirectional association>)
	  b parent class_ref 164507 // RuntimePermission
      end

      attribute 212763 "subclassAudits"
	class_attribute const_attribute private explicit_type "SoftCache"
	init_value "=  new SoftCache(10)"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " cache of subclass security audit results "
      end

      operation 403995 "isCCLOverridden"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param inout name "cl" type class_ref 164635 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Verifies that this (possibly subclass) instance can be constructed
without violating security constraints: the subclass must not override
security-sensitive non-final methods, or else the
\"enableContextClassLoaderOverride\" RuntimePermission is checked."
      end

      operation 404123 "auditSubclass"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param in name "subcl" type class_ref 164635 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs reflective checks on given subclass to verify that it doesn't
override security-sensitive non-final methods.  Returns true if the
subclass overrides any of the methods, false otherwise."
      end

      operation 404251 "dumpThreads"
	class_operation private return_type class_ref 164379 // StackTraceElement
	nparams 1
	  param inout name "threads" type class_ref 163227 // Thread
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type}[][] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 404379 "getThreads"
	class_operation private return_type class_ref 163227 // Thread
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 404507 "getId"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the identifier of this Thread.  The thread ID is a positive
<tt>long</tt> number generated when this thread was created.  
The thread ID is unique and remains unchanged during its lifetime.  
When a thread is terminated, this thread ID may be reused.

@return this thread's ID.
@since 1.5"
      end

      class 164763 "State"
	visibility public stereotype "enum"
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 212891 "NEW"
	  public type class_ref 164763 // State
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Thread state for a thread which has not yet started.
"
	end

	attribute 213019 "RUNNABLE"
	  public type class_ref 164763 // State
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Thread state for a runnable thread.  A thread in the runnable
state is executing in the Java virtual machine but it may
be waiting for other resources from the operating system
such as processor.
"
	end

	attribute 213147 "BLOCKED"
	  public type class_ref 164763 // State
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Thread state for a thread blocked waiting for a monitor lock.
A thread in the blocked state is waiting for a monitor lock
to enter a synchronized block/method or 
reenter a synchronized block/method after calling
{@link Object#wait() Object.wait}.
"
	end

	attribute 213275 "WAITING"
	  public type class_ref 164763 // State
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Thread state for a waiting thread.
A thread is in the waiting state due to calling one of the 
following methods:
<ul>
  <li>{@link Object#wait() Object.wait} with no timeout</li>
  <li>{@link Thread#join() Thread.join} with no timeout</li>
  <li>{@link LockSupport#park() LockSupport.park}</li>
</ul>

<p>A thread in the waiting state is waiting for another thread to
perform a particular action.  

For example, a thread that has called <tt>Object.wait()</tt>
on an object is waiting for another thread to call 
<tt>Object.notify()</tt> or <tt>Object.notifyAll()</tt> on 
that object. A thread that has called <tt>Thread.join()</tt> 
is waiting for a specified thread to terminate.
"
	end

	attribute 213403 "TIMED_WAITING"
	  public type class_ref 164763 // State
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Thread state for a waiting thread with a specified waiting time.
A thread is in the timed waiting state due to calling one of 
the following methods with a specified positive waiting time:
<ul>
  <li>{@link Thread#sleep Thread.sleep}</li>
  <li>{@link Object#wait(long) Object.wait} with timeout</li>
  <li>{@link Thread#join(long) Thread.join} with timeout</li>
  <li>{@link LockSupport#parkNanos LockSupport.parkNanos}</li> 
  <li>{@link LockSupport#parkUntil LockSupport.parkUntil}</li>
</ul>
"
	end

	attribute 213531 "TERMINATED"
	  public type class_ref 164763 // State
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Thread state for a terminated thread.
The thread has completed execution."
	end
      end

      operation 404635 "getState"
	public return_type class_ref 164763 // State
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the state of this thread.
This method is designed for use in monitoring of the system state,
not for synchronization control.

@return this thread's state.
@since 1.5"
      end

      class 164891 "UncaughtExceptionHandler"
	visibility public stereotype "interface"
	cpp_decl ""
	java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 404763 "uncaughtException"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "t" type class_ref 163227 // Thread
	    param inout name "e" type class_ref 164251 // Throwable
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Method invoked when the given thread terminates due to the
given uncaught exception.
<p>Any exception thrown by this method will be ignored by the
Java Virtual Machine.
@param t the thread
@param e the exception"
	end
      end

      classrelation 183067 // uncaughtExceptionHandler (<unidirectional association>)
	relation 183067 --->
	  a role_name "uncaughtExceptionHandler" volatile private
	    comment " null unless explicitly set
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 183067 // uncaughtExceptionHandler (<unidirectional association>)
	  b parent class_ref 164891 // UncaughtExceptionHandler
      end

      classrelation 183195 // defaultUncaughtExceptionHandler (<unidirectional association>)
	relation 183195 --->
	  a role_name "defaultUncaughtExceptionHandler" class_relation volatile private
	    comment " null unless explicitly set
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 183195 // defaultUncaughtExceptionHandler (<unidirectional association>)
	  b parent class_ref 164891 // UncaughtExceptionHandler
      end

      operation 404891 "setDefaultUncaughtExceptionHandler"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "eh" type class_ref 164891 // UncaughtExceptionHandler
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the default handler invoked when a thread abruptly terminates
due to an uncaught exception, and no other handler has been defined
for that thread. 

<p>Uncaught exception handling is controlled first by the thread, then
by the thread's {@link ThreadGroup} object and finally by the default
uncaught exception handler. If the thread does not have an explicit
uncaught exception handler set, and the thread's thread group
(including parent thread groups)  does not specialize its 
<tt>uncaughtException</tt> method, then the default handler's
<tt>uncaughtException</tt> method will be invoked.
<p>By setting the default uncaught exception handler, an application
can change the way in which uncaught exceptions are handled (such as
logging to a specific device, or file) for those threads that would
already accept whatever &quot;default&quot; behavior the system
provided.

<p>Note that the default uncaught exception handler should not usually
defer to the thread's <tt>ThreadGroup</tt> object, as that could cause
infinite recursion.

@param eh the object to use as the default uncaught exception handler.
If <tt>null</tt> then there is no default handler.

@throws SecurityException if a security manager is present and it
        denies <tt>{@link RuntimePermission}
        (&quot;setDefaultUncaughtExceptionHandler&quot;)</tt>

@see #setUncaughtExceptionHandler
@see #getUncaughtExceptionHandler
@see ThreadGroup#uncaughtException
@since 1.5"
      end

      operation 405019 "getDefaultUncaughtExceptionHandler"
	class_operation public return_type class_ref 164891 // UncaughtExceptionHandler
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the default handler invoked when a thread abruptly terminates
due to an uncaught exception. If the returned value is <tt>null</tt>,
there is no default.
@since 1.5
@see #setDefaultUncaughtExceptionHandler"
      end

      operation 405147 "getUncaughtExceptionHandler"
	public return_type class_ref 164891 // UncaughtExceptionHandler
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the handler invoked when this thread abruptly terminates
due to an uncaught exception. If this thread has not had an
uncaught exception handler explicitly set then this thread's
<tt>ThreadGroup</tt> object is returned, unless this thread
has terminated, in which case <tt>null</tt> is returned.
@since 1.5"
      end

      operation 405275 "setUncaughtExceptionHandler"
	public explicit_return_type "void"
	nparams 1
	  param inout name "eh" type class_ref 164891 // UncaughtExceptionHandler
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the handler invoked when this thread abruptly terminates
due to an uncaught exception. 
<p>A thread can take full control of how it responds to uncaught
exceptions by having its uncaught exception handler explicitly set.
If no such handler is set then the thread's <tt>ThreadGroup</tt>
object acts as its handler.
@param eh the object to use as this thread's uncaught exception
handler. If <tt>null</tt> then this thread has no explicit handler.
@throws  SecurityException  if the current thread is not allowed to
         modify this thread.
@see #setDefaultUncaughtExceptionHandler
@see ThreadGroup#uncaughtException
@since 1.5"
      end

      operation 405403 "dispatchUncaughtException"
	private explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 164251 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Dispatch an uncaught exception to the handler. This method is 
intended to be called only by the JVM."
      end

      operation 405531 "setPriority0"
	private explicit_return_type "void"
	nparams 1
	  param in name "newPriority" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Some private helper methods "
      end

      operation 405659 "stop0"
	private explicit_return_type "void"
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 405787 "suspend0"
	private explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 405915 "resume0"
	private explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 406043 "interrupt0"
	private explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 163355 "Runnable"
      abstract visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The <code>Runnable</code> interface should be implemented by any
class whose instances are intended to be executed by a thread. The
class must define a method of no arguments called <code>run</code>.
<p>
This interface is designed to provide a common protocol for objects that
wish to execute code while they are active. For example,
<code>Runnable</code> is implemented by class <code>Thread</code>.
Being active simply means that a thread has been started and has not
yet been stopped.
<p>
In addition, <code>Runnable</code> provides the means for a class to be
active while not subclassing <code>Thread</code>. A class that implements
<code>Runnable</code> can run without subclassing <code>Thread</code>
by instantiating a <code>Thread</code> instance and passing itself in
as the target.  In most cases, the <code>Runnable</code> interface should
be used if you are only planning to override the <code>run()</code>
method and no other <code>Thread</code> methods.
This is important because classes should not be subclassed
unless the programmer intends on modifying or enhancing the fundamental
behavior of the class.

@author  Arthur van Hoff
@version 1.24, 12/19/03
@see     java.lang.Thread
@since   JDK1.0"
      operation 397211 "run"
	abstract public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "When an object implementing interface <code>Runnable</code> is used 
to create a thread, starting the thread causes the object's 
<code>run</code> method to be called in that separately executing 
thread. 
<p>
The general contract of the method <code>run</code> is that it may 
take any action whatsoever.

@see     java.lang.Thread#run()"
      end
    end

    class 163483 "ThreadGroup"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A thread group represents a set of threads. In addition, a thread 
group can also include other thread groups. The thread groups form 
a tree in which every thread group except the initial thread group 
has a parent. 
<p>
A thread is allowed to access information about its own thread 
group, but not to access information about its thread group's 
parent thread group or any other thread groups. 

@author  unascribed
@version 1.63, 06/17/04
@since   JDK1.0

 The locking strategy for this code is to try to lock only one level of the
tree wherever possible, but otherwise to lock from the bottom up.
That is, from child thread groups to parents.
This has the advantage of limiting the number of locks that need to be held
and in particular avoids having to grab the lock for the root thread group,
(or a global lock) which would be a source of contention on a 
multi-processor system with many thread groups.
This policy often leads to taking a snapshot of the state of a thread group
and working off of that snapshot, rather than holding the thread group locked
while we work on the children."
      classrelation 1792923 // <realization>
	relation 1792923 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1792923 // <realization>
	  b parent class_ref 164891 // UncaughtExceptionHandler
      end

      classrelation 1793051 // parent (<unidirectional association>)
	relation 1793051 --->
	  a role_name "parent" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1793051 // parent (<unidirectional association>)
	  b parent class_ref 163483 // ThreadGroup
      end

      attribute 2740635 "name"
	package explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2740763 "maxPriority"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2740891 "destroyed"
	package explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2741019 "daemon"
	package explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2741147 "vmAllowSuspension"
	package explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2741275 "nUnstartedThreads"
	package explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2741403 "nthreads"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1793179 // threads (<unidirectional association>)
	relation 1793179 --->
	  a role_name "threads" multiplicity "[]" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1793179 // threads (<unidirectional association>)
	  b parent class_ref 163227 // Thread
      end

      attribute 2741531 "ngroups"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1793307 // groups (<unidirectional association>)
	relation 1793307 --->
	  a role_name "groups" multiplicity "[]" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1793307 // groups (<unidirectional association>)
	  b parent class_ref 163483 // ThreadGroup
      end

      operation 7084955 "ThreadGroup"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an empty Thread group that is not in any Thread group. 
This method is used to create the system Thread group."
      end

      operation 7085083 "ThreadGroup"
	public explicit_return_type ""
	nparams 1
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new thread group. The parent of this new group is 
the thread group of the currently running thread. 
<p>
The <code>checkAccess</code> method of the parent thread group is 
called with no arguments; this may result in a security exception. 

@param   name   the name of the new thread group.
@exception  SecurityException  if the current thread cannot create a
              thread in the specified thread group.
@see     java.lang.ThreadGroup#checkAccess()
@since   JDK1.0"
      end

      operation 7085211 "ThreadGroup"
	public explicit_return_type ""
	nparams 2
	  param inout name "parent" type class_ref 163483 // ThreadGroup
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new thread group. The parent of this new group is the 
specified thread group. 
<p>
The <code>checkAccess</code> method of the parent thread group is 
called with no arguments; this may result in a security exception. 

@param     parent   the parent thread group.
@param     name     the name of the new thread group.
@exception  NullPointerException  if the thread group argument is
              <code>null</code>.
@exception  SecurityException  if the current thread cannot create a
              thread in the specified thread group.
@see     java.lang.SecurityException
@see     java.lang.ThreadGroup#checkAccess()
@since   JDK1.0"
      end

      operation 7085339 "getName"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of this thread group.

@return  the name of this thread group.
@since   JDK1.0"
      end

      operation 7085467 "getParent"
	public return_type class_ref 163483 // ThreadGroup
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the parent of this thread group.
<p>
First, if the parent is not <code>null</code>, the 
<code>checkAccess</code> method of the parent thread group is 
called with no arguments; this may result in a security exception. 

@return  the parent of this thread group. The top-level thread group
         is the only thread group whose parent is <code>null</code>.
@exception  SecurityException  if the current thread cannot modify
              this thread group.
@see        java.lang.ThreadGroup#checkAccess()
@see        java.lang.SecurityException
@see        java.lang.RuntimePermission
@since   JDK1.0"
      end

      operation 7085595 "getMaxPriority"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maximum priority of this thread group. Threads that are
part of this group cannot have a higher priority than the maximum
priority.

@return  the maximum priority that a thread in this thread group
         can have.
@see     #setMaxPriority
@since   JDK1.0"
      end

      operation 7085723 "isDaemon"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if this thread group is a daemon thread group. A 
daemon thread group is automatically destroyed when its last 
thread is stopped or its last thread group is destroyed. 

@return  <code>true</code> if this thread group is a daemon thread group;
         <code>false</code> otherwise.
@since   JDK1.0"
      end

      operation 7085851 "isDestroyed"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if this thread group has been destroyed.

@return  true if this object is destroyed
@since   JDK1.1"
      end

      operation 7085979 "setDaemon"
	public explicit_return_type "void"
	nparams 1
	  param inout name "daemon" explicit_type "boolean"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Changes the daemon status of this thread group.
<p>
First, the <code>checkAccess</code> method of this thread group is 
called with no arguments; this may result in a security exception. 
<p>
A daemon thread group is automatically destroyed when its last 
thread is stopped or its last thread group is destroyed. 

@param      daemon   if <code>true</code>, marks this thread group as
                     a daemon thread group; otherwise, marks this
                     thread group as normal.
@exception  SecurityException  if the current thread cannot modify
              this thread group.
@see        java.lang.SecurityException
@see        java.lang.ThreadGroup#checkAccess()
@since      JDK1.0"
      end

      operation 7086107 "setMaxPriority"
	public explicit_return_type "void"
	nparams 1
	  param in name "pri" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the maximum priority of the group. Threads in the thread 
group that already have a higher priority are not affected. 
<p>
First, the <code>checkAccess</code> method of this thread group is 
called with no arguments; this may result in a security exception. 
<p>
If the <code>pri</code> argument is less than 
{@link Thread#MIN_PRIORITY} or greater than 
{@link Thread#MAX_PRIORITY}, the maximum priority of the group 
remains unchanged.
<p>
Otherwise, the priority of this ThreadGroup object is set to the 
smaller of the specified <code>pri</code> and the maximum permitted 
priority of the parent of this thread group. (If this thread group 
is the system thread group, which has no parent, then its maximum 
priority is simply set to <code>pri</code>.) Then this method is 
called recursively, with <code>pri</code> as its argument, for 
every thread group that belongs to this thread group.

@param      pri   the new priority of the thread group.
@exception  SecurityException  if the current thread cannot modify
              this thread group.
@see        #getMaxPriority
@see        java.lang.SecurityException
@see        java.lang.ThreadGroup#checkAccess()
@since      JDK1.0"
      end

      operation 7086235 "parentOf"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "g" type class_ref 163483 // ThreadGroup
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if this thread group is either the thread group 
argument or one of its ancestor thread groups. 

@param   g   a thread group.
@return  <code>true</code> if this thread group is the thread group
         argument or one of its ancestor thread groups;
         <code>false</code> otherwise.
@since   JDK1.0"
      end

      operation 7086363 "checkAccess"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if the currently running thread has permission to 
modify this thread group. 
<p>
If there is a security manager, its <code>checkAccess</code> method 
is called with this thread group as its argument. This may result 
in throwing a <code>SecurityException</code>. 

@exception  SecurityException  if the current thread is not allowed to
              access this thread group.
@see        java.lang.SecurityManager#checkAccess(java.lang.ThreadGroup)
@since      JDK1.0"
      end

      operation 7086491 "activeCount"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an estimate of the number of active threads in this
thread group.  The result might not reflect concurrent activity,
and might be affected by the presence of certain system threads.
<p>
Due to the inherently imprecise nature of the result, it is
recommended that this method only be used for informational purposes.

@return  an estimate of the number of active threads in this thread
         group and in any other thread group that has this thread
         group as an ancestor.
@since   JDK1.0"
      end

      operation 7086619 "enumerate"
	public explicit_return_type "int"
	nparams 1
	  param inout name "list" type class_ref 163227 // Thread
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copies into the specified array every active thread in this 
thread group and its subgroups. 
<p>
First, the <code>checkAccess</code> method of this thread group is 
called with no arguments; this may result in a security exception. 
<p>
An application might use the <code>activeCount</code> method to 
get an estimate of how big the array should be, however <i>if the
array is too short to hold all the threads, the extra threads are
silently ignored.</i>  If it is critical to obtain every active
thread in this thread group and its subgroups, the caller should
verify that the returned int value is strictly less than the length
of <tt>list</tt>.
<p>
Due to the inherent race condition in this method, it is recommended
that the method only be used for informational purposes.

@param   list   an array into which to place the list of threads.
@return  the number of threads put into the array.
@exception  SecurityException  if the current thread does not
              have permission to enumerate this thread group.
@see     java.lang.ThreadGroup#activeCount()
@see     java.lang.ThreadGroup#checkAccess()
@since   JDK1.0"
      end

      operation 7086747 "enumerate"
	public explicit_return_type "int"
	nparams 2
	  param inout name "list" type class_ref 163227 // Thread
	  param inout name "recurse" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copies into the specified array every active thread in this 
thread group. If the <code>recurse</code> flag is 
<code>true</code>, references to every active thread in this 
thread's subgroups are also included. If the array is too short to 
hold all the threads, the extra threads are silently ignored. 
<p>
First, the <code>checkAccess</code> method of this thread group is 
called with no arguments; this may result in a security exception. 
<p>
An application might use the <code>activeCount</code> method to 
get an estimate of how big the array should be, however <i>if the
array is too short to hold all the threads, the extra threads are
silently ignored.</i>  If it is critical to obtain every active thread
in this thread group, the caller should verify that the returned int
value is strictly less than the length of <tt>list</tt>.
<p>
Due to the inherent race condition in this method, it is recommended
that the method only be used for informational purposes.

@param   list      an array into which to place the list of threads.
@param   recurse   a flag indicating whether also to include threads
                   in thread groups that are subgroups of this
                   thread group.
@return  the number of threads placed into the array.
@exception  SecurityException  if the current thread does not
              have permission to enumerate this thread group.
@see     java.lang.ThreadGroup#activeCount()
@see     java.lang.ThreadGroup#checkAccess()
@since   JDK1.0"
      end

      operation 7086875 "enumerate"
	private explicit_return_type "int"
	nparams 3
	  param inout name "list" type class_ref 163227 // Thread
	  param in name "n" explicit_type "int"
	  param inout name "recurse" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7087003 "activeGroupCount"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an estimate of the number of active groups in this
thread group.  The result might not reflect concurrent activity.
<p>
Due to the inherently imprecise nature of the result, it is
recommended that this method only be used for informational purposes.

@return  the number of active thread groups with this thread group as
         an ancestor.
@since   JDK1.0"
      end

      operation 7087131 "enumerate"
	public explicit_return_type "int"
	nparams 1
	  param inout name "list" type class_ref 163483 // ThreadGroup
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copies into the specified array references to every active 
subgroup in this thread group. 
<p>
First, the <code>checkAccess</code> method of this thread group is 
called with no arguments; this may result in a security exception. 
<p>
An application might use the <code>activeGroupCount</code> method to 
get an estimate of how big the array should be, however <i>if the
array is too short to hold all the thread groups, the extra thread
groups are silently ignored.</i>  If it is critical to obtain every
active subgroup in this thread group, the caller should verify that
the returned int value is strictly less than the length of
<tt>list</tt>.
<p>
Due to the inherent race condition in this method, it is recommended
that the method only be used for informational purposes.

@param   list   an array into which to place the list of thread groups.
@return  the number of thread groups put into the array.
@exception  SecurityException  if the current thread does not
              have permission to enumerate this thread group.
@see     java.lang.ThreadGroup#activeGroupCount()
@see     java.lang.ThreadGroup#checkAccess()
@since   JDK1.0"
      end

      operation 7087259 "enumerate"
	public explicit_return_type "int"
	nparams 2
	  param inout name "list" type class_ref 163483 // ThreadGroup
	  param inout name "recurse" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copies into the specified array references to every active 
subgroup in this thread group. If the <code>recurse</code> flag is 
<code>true</code>, references to all active subgroups of the 
subgroups and so forth are also included. 
<p>
First, the <code>checkAccess</code> method of this thread group is 
called with no arguments; this may result in a security exception. 
<p>
An application might use the <code>activeGroupCount</code> method to 
get an estimate of how big the array should be, however <i>if the
array is too short to hold all the thread groups, the extra thread
groups are silently ignored.</i>  If it is critical to obtain every
active subgroup in this thread group, the caller should verify that
the returned int value is strictly less than the length of
<tt>list</tt>.
<p>
Due to the inherent race condition in this method, it is recommended
that the method only be used for informational purposes.

@param   list      an array into which to place the list of threads.
@param   recurse   a flag indicating whether to recursively enumerate
                   all included thread groups.
@return  the number of thread groups put into the array.
@exception  SecurityException  if the current thread does not
              have permission to enumerate this thread group.
@see     java.lang.ThreadGroup#activeGroupCount()
@see     java.lang.ThreadGroup#checkAccess()
@since   JDK1.0"
      end

      operation 7087387 "enumerate"
	private explicit_return_type "int"
	nparams 3
	  param inout name "list" type class_ref 163483 // ThreadGroup
	  param in name "n" explicit_type "int"
	  param inout name "recurse" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7087515 "stop"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Stops all threads in this thread group.
<p>
First, the <code>checkAccess</code> method of this thread group is 
called with no arguments; this may result in a security exception. 
<p>
This method then calls the <code>stop</code> method on all the 
threads in this thread group and in all of its subgroups. 

@exception  SecurityException  if the current thread is not allowed
              to access this thread group or any of the threads in
              the thread group.
@see        java.lang.SecurityException
@see        java.lang.Thread#stop()
@see        java.lang.ThreadGroup#checkAccess()
@since      JDK1.0
@deprecated    This method is inherently unsafe.  See
    {@link Thread#stop} for details."
      end

      operation 7087643 "interrupt"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Interrupts all threads in this thread group.
<p>
First, the <code>checkAccess</code> method of this thread group is 
called with no arguments; this may result in a security exception. 
<p>
This method then calls the <code>interrupt</code> method on all the 
threads in this thread group and in all of its subgroups.

@exception  SecurityException  if the current thread is not allowed
              to access this thread group or any of the threads in
              the thread group.
@see        java.lang.Thread#interrupt()
@see        java.lang.SecurityException
@see        java.lang.ThreadGroup#checkAccess()
@since      1.2"
      end

      operation 7087771 "suspend"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Suspends all threads in this thread group.
<p>
First, the <code>checkAccess</code> method of this thread group is 
called with no arguments; this may result in a security exception. 
<p>
This method then calls the <code>suspend</code> method on all the 
threads in this thread group and in all of its subgroups. 

@exception  SecurityException  if the current thread is not allowed
              to access this thread group or any of the threads in
              the thread group.
@see        java.lang.Thread#suspend()
@see        java.lang.SecurityException
@see        java.lang.ThreadGroup#checkAccess()
@since      JDK1.0
@deprecated    This method is inherently deadlock-prone.  See
    {@link Thread#suspend} for details."
      end

      operation 7087899 "stopOrSuspend"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "suspend" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Helper method: recursively stops or suspends (as directed by the
boolean argument) all of the threads in this thread group and its
subgroups, except the current thread.  This method returns true
if (and only if) the current thread is found to be in this thread
group or one of its subgroups."
      end

      operation 7088027 "resume"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Resumes all threads in this thread group.
<p>
First, the <code>checkAccess</code> method of this thread group is 
called with no arguments; this may result in a security exception. 
<p>
This method then calls the <code>resume</code> method on all the 
threads in this thread group and in all of its sub groups. 

@exception  SecurityException  if the current thread is not allowed to
              access this thread group or any of the threads in the
              thread group.
@see        java.lang.SecurityException
@see        java.lang.Thread#resume()
@see        java.lang.ThreadGroup#checkAccess()
@since      JDK1.0
@deprecated    This method is used solely in conjunction with
     <tt>Thread.suspend</tt> and <tt>ThreadGroup.suspend</tt>,
      both of which have been deprecated, as they are inherently
      deadlock-prone.  See {@link Thread#suspend} for details."
      end

      operation 7088155 "destroy"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Destroys this thread group and all of its subgroups. This thread 
group must be empty, indicating that all threads that had been in 
this thread group have since stopped. 
<p>
First, the <code>checkAccess</code> method of this thread group is 
called with no arguments; this may result in a security exception. 

@exception  IllegalThreadStateException  if the thread group is not
              empty or if the thread group has already been destroyed.
@exception  SecurityException  if the current thread cannot modify this
              thread group.
@see        java.lang.ThreadGroup#checkAccess()
@since      JDK1.0"
      end

      operation 7088283 "add"
	private explicit_return_type "void"
	nparams 1
	  param inout name "g" type class_ref 163483 // ThreadGroup
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the specified Thread group to this group.
@param g the specified Thread group to be added
@exception IllegalThreadStateException If the Thread group has been destroyed."
      end

      operation 7088411 "remove"
	private explicit_return_type "void"
	nparams 1
	  param inout name "g" type class_ref 163483 // ThreadGroup
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the specified Thread group from this group.
@param g the Thread group to be removed
@return if this Thread has already been destroyed."
      end

      operation 7088539 "addUnstarted"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Increments the count of unstarted threads in the thread group.
Unstarted threads are not added to the thread group so that they
can be collected if they are never started, but they must be
counted so that daemon thread groups with unstarted threads in
them are not destroyed."
      end

      operation 7088667 "add"
	package explicit_return_type "void"
	nparams 1
	  param inout name "t" type class_ref 163227 // Thread
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the specified Thread to this group.
@param t the Thread to be added
@exception IllegalThreadStateException If the Thread group has been destroyed."
      end

      operation 7088795 "remove"
	package explicit_return_type "void"
	nparams 1
	  param inout name "t" type class_ref 163227 // Thread
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the specified Thread from this group.
@param t the Thread to be removed
@return if the Thread has already been destroyed."
      end

      operation 7088923 "list"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints information about this thread group to the standard 
output. This method is useful only for debugging. 

@since   JDK1.0"
      end

      operation 7089051 "list"
	package explicit_return_type "void"
	nparams 2
	  param inout name "out" type class_ref 162843 // PrintStream
	  param in name "indent" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7089179 "uncaughtException"
	public explicit_return_type "void"
	nparams 2
	  param inout name "t" type class_ref 163227 // Thread
	  param inout name "e" type class_ref 164251 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by the Java Virtual Machine when a thread in this 
thread group stops because of an uncaught exception, and the thread 
does not have a specific {@link Thread.UncaughtExceptionHandler} 
installed.
<p>
The <code>uncaughtException</code> method of 
<code>ThreadGroup</code> does the following: 
<ul>
<li>If this thread group has a parent thread group, the
    <code>uncaughtException</code> method of that parent is called
    with the same two arguments. 
<li>Otherwise, this method checks to see if there is a
    {@linkplain Thread#getDefaultUncaughtExceptionHandler default
    uncaught exception handler} installed, and if so, its
    <code>uncaughtException</code> method is called with the same 
    two arguments.
<li>Otherwise, this method determines if the <code>Throwable</code>
    argument is an instance of {@link ThreadDeath}. If so, nothing
    special is done. Otherwise, a message containing the
    thread's name, as returned from the thread's {@link
    Thread#getName getName} method, and a stack backtrace,
    using the <code>Throwable</code>'s {@link
    Throwable#printStackTrace printStackTrace} method, is
    printed to the {@linkplain System#err standard error stream}.
</ul>
<p>
Applications can override this method in subclasses of 
<code>ThreadGroup</code> to provide alternative handling of 
uncaught exceptions. 

@param   t   the thread that is about to exit.
@param   e   the uncaught exception.
@since   JDK1.0"
      end

      operation 7089307 "allowThreadSuspension"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "b" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Used by VM to control lowmem implicit suspension.

@param b boolean to allow or disallow suspension
@return true on success
@since   JDK1.1
@deprecated The definition of this call depends on {@link #suspend},
		   which is deprecated.  Further, the behavior of this call
		   was never specified."
      end

      operation 7089435 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of this Thread group.

@return  a string representation of this thread group.
@since   JDK1.0"
      end
    end

    class 163611 "ClassLoader"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A class loader is an object that is responsible for loading classes. The
class <tt>ClassLoader</tt> is an abstract class.  Given the <a
href=\"#name\">binary name</a> of a class, a class loader should attempt to
locate or generate data that constitutes a definition for the class.  A
typical strategy is to transform the name into a file name and then read a
\"class file\" of that name from a file system.

<p> Every {@link Class <tt>Class</tt>} object contains a {@link
Class#getClassLoader() reference} to the <tt>ClassLoader</tt> that defined
it.

<p> <tt>Class</tt> objects for array classes are not created by class
loaders, but are created automatically as required by the Java runtime.
The class loader for an array class, as returned by {@link
Class#getClassLoader()} is the same as the class loader for its element
type; if the element type is a primitive type, then the array class has no
class loader.

<p> Applications implement subclasses of <tt>ClassLoader</tt> in order to
extend the manner in which the Java virtual machine dynamically loads
classes.

<p> Class loaders may typically be used by security managers to indicate
security domains.

<p> The <tt>ClassLoader</tt> class uses a delegation model to search for
classes and resources.  Each instance of <tt>ClassLoader</tt> has an
associated parent class loader.  When requested to find a class or
resource, a <tt>ClassLoader</tt> instance will delegate the search for the
class or resource to its parent class loader before attempting to find the
class or resource itself.  The virtual machine's built-in class loader,
called the \"bootstrap class loader\", does not itself have a parent but may
serve as the parent of a <tt>ClassLoader</tt> instance.

<p> Normally, the Java virtual machine loads classes from the local file
system in a platform-dependent manner.  For example, on UNIX systems, the
virtual machine loads classes from the directory defined by the
<tt>CLASSPATH</tt> environment variable.

<p> However, some classes may not originate from a file; they may originate
from other sources, such as the network, or they could be constructed by an
application.  The method {@link #defineClass(String, byte[], int, int)
<tt>defineClass</tt>} converts an array of bytes into an instance of class
<tt>Class</tt>. Instances of this newly defined class can be created using
{@link Class#newInstance <tt>Class.newInstance</tt>}.

<p> The methods and constructors of objects created by a class loader may
reference other classes.  To determine the class(es) referred to, the Java
virtual machine invokes the {@link #loadClass <tt>loadClass</tt>} method of
the class loader that originally created the class.

<p> For example, an application could create a network class loader to
download class files from a server.  Sample code might look like:

<blockquote><pre>
  ClassLoader loader&nbsp;= new NetworkClassLoader(host,&nbsp;port);
  Object main&nbsp;= loader.loadClass(\"Main\", true).newInstance();
	 &nbsp;.&nbsp;.&nbsp;.
</pre></blockquote>

<p> The network class loader subclass must define the methods {@link
#findClass <tt>findClass</tt>} and <tt>loadClassData</tt> to load a class
from the network.  Once it has downloaded the bytes that make up the class,
it should use the method {@link #defineClass <tt>defineClass</tt>} to
create a class instance.  A sample implementation is:

<blockquote><pre>
    class NetworkClassLoader extends ClassLoader {
        String host;
        int port;

        public Class findClass(String name) {
            byte[] b = loadClassData(name);
            return defineClass(name, b, 0, b.length);
        }

        private byte[] loadClassData(String name) {
            // load the class data from the connection
            &nbsp;.&nbsp;.&nbsp;.
        }
    }
</pre></blockquote>

<h4> <a name=\"name\">Binary names</a> </h4>

<p> Any class name provided as a {@link String} parameter to methods in
<tt>ClassLoader</tt> must be a binary name as defined by the <a
href=\"http://java.sun.com/docs/books/jls/\">Java Language Specification</a>.

<p> Examples of valid class names include:
<blockquote><pre>
  \"java.lang.String\"
  \"javax.swing.JSpinner$DefaultEditor\"
  \"java.security.KeyStore$Builder$FileBuilder$1\"
  \"java.net.URLClassLoader$3$1\"
</pre></blockquote>

@version  1.186, 08/02/04
@see      #resolveClass(Class)
@since 1.0"
      operation 3257371 "registerNatives"
	class_operation private explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      extra_member 143643 "initialization"
	
	cpp "" ""
	java "  static {
        registerNatives();
    }"
	php ""
	python ""
	idl ""
      end

      attribute 927643 "initialized"
	private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " If initialization succeed this is set to true and security checks will
 succeed.  Otherwise the object is not initialized and the object is
 useless."
      end

      classrelation 891803 // parent (<unidirectional association>)
	relation 891803 --->
	  a role_name "parent" private
	    comment " The parent class loader for delegation
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 891803 // parent (<unidirectional association>)
	  b parent class_ref 163611 // ClassLoader
      end

      classrelation 891931 // package2certs (<unidirectional association>)
	relation 891931 --->
	  a role_name "package2certs" init_value "=  new Hashtable(11)" private
	    comment " Hashtable that maps packages to certs
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 891931 // package2certs (<unidirectional association>)
	  b parent class_ref 139035 // Hashtable
      end

      classrelation 892059 // nocerts (<unidirectional association>)
	relation 892059 --->
	  a role_name "nocerts" multiplicity "[]" package
	    comment " Shared among all packages with unsigned classes
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 892059 // nocerts (<unidirectional association>)
	  b parent class_ref 528283 // Certificate
      end

      classrelation 892187 // classes (<unidirectional association>)
	relation 892187 --->
	  a role_name "classes" init_value "=  new Vector()" private
	    comment " The classes loaded by this class loader.  The only purpose of this table
 is to keep the classes from being GC'ed until the loader is GC'ed.
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 892187 // classes (<unidirectional association>)
	  b parent class_ref 153883 // Vector
      end

      classrelation 892315 // domains (<unidirectional association>)
	relation 892315 --->
	  a role_name "domains" init_value "=  new HashSet()" private
	    comment " The initiating protection domains for all classes loaded by this loader
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 892315 // domains (<unidirectional association>)
	  b parent class_ref 136731 // Set
      end

      operation 3257499 "addClass"
	package explicit_return_type "void"
	nparams 1
	  param inout name "c" type class_ref 164635 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Invoked by the VM to record every loaded class with this loader."
      end

      classrelation 892443 // packages (<unidirectional association>)
	relation 892443 --->
	  a role_name "packages" init_value "=  new HashMap()" private
	    comment " The packages defined in this class loader.  Each package name is mapped
 to its corresponding Package object.
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 892443 // packages (<unidirectional association>)
	  b parent class_ref 144923 // HashMap
      end

      operation 3257627 "ClassLoader"
	protected explicit_return_type ""
	nparams 1
	  param inout name "parent" type class_ref 163611 // ClassLoader
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new class loader using the specified parent class loader for
delegation.

<p> If there is a security manager, its {@link
SecurityManager#checkCreateClassLoader()
<tt>checkCreateClassLoader</tt>} method is invoked.  This may result in
a security exception.  </p>

@param  parent
        The parent class loader

@throws  SecurityException
         If a security manager exists and its
         <tt>checkCreateClassLoader</tt> method doesn't allow creation
         of a new class loader.

@since  1.2"
      end

      operation 3257755 "ClassLoader"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new class loader using the <tt>ClassLoader</tt> returned by
the method {@link #getSystemClassLoader()
<tt>getSystemClassLoader()</tt>} as the parent class loader.

<p> If there is a security manager, its {@link
SecurityManager#checkCreateClassLoader()
<tt>checkCreateClassLoader</tt>} method is invoked.  This may result in
a security exception.  </p>

@throws  SecurityException
         If a security manager exists and its
         <tt>checkCreateClassLoader</tt> method doesn't allow creation
         of a new class loader."
      end

      operation 3257883 "loadClass"
	public return_type class_ref 164635 // Class
	nparams 1
	  param in name "name" explicit_type "String"
	nexceptions 1
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Class --

Loads the class with the specified <a href=\"#name\">binary name</a>.
This method searches for classes in the same manner as the {@link
#loadClass(String, boolean)} method.  It is invoked by the Java virtual
machine to resolve class references.  Invoking this method is equivalent
to invoking {@link #loadClass(String, boolean) <tt>loadClass(name,
false)</tt>}.  </p>

@param  name
        The <a href=\"#name\">binary name</a> of the class

@return  The resulting <tt>Class</tt> object

@throws  ClassNotFoundException
         If the class was not found"
      end

      operation 3258011 "loadClass"
	protected return_type class_ref 164635 // Class
	nparams 2
	  param in name "name" explicit_type "String"
	  param inout name "resolve" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Loads the class with the specified <a href=\"#name\">binary name</a>.  The
default implementation of this method searches for classes in the
following order:

<p><ol>

  <li><p> Invoke {@link #findLoadedClass(String)} to check if the class
  has already been loaded.  </p></li>

  <li><p> Invoke the {@link #loadClass(String) <tt>loadClass</tt>} method
  on the parent class loader.  If the parent is <tt>null</tt> the class
  loader built-in to the virtual machine is used, instead.  </p></li>

  <li><p> Invoke the {@link #findClass(String)} method to find the
  class.  </p></li>

</ol>

<p> If the class was found using the above steps, and the
<tt>resolve</tt> flag is true, this method will then invoke the {@link
#resolveClass(Class)} method on the resulting <tt>Class</tt> object.

<p> Subclasses of <tt>ClassLoader</tt> are encouraged to override {@link
#findClass(String)}, rather than this method.  </p>

@param  name
        The <a href=\"#name\">binary name</a> of the class

@param  resolve
        If <tt>true</tt> then resolve the class

@return  The resulting <tt>Class</tt> object

@throws  ClassNotFoundException
         If the class could not be found"
      end

      operation 3258139 "loadClassInternal"
	private return_type class_ref 164635 // Class
	nparams 1
	  param in name "name" explicit_type "String"
	nexceptions 1
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " This method is invoked by the virtual machine to load a class."
      end

      operation 3258267 "checkPackageAccess"
	private explicit_return_type "void"
	nparams 2
	  param inout name "cls" type class_ref 164635 // Class
	  param inout name "pd" type class_ref 526875 // ProtectionDomain
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3258395 "findClass"
	protected return_type class_ref 164635 // Class
	nparams 1
	  param in name "name" explicit_type "String"
	nexceptions 1
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds the class with the specified <a href=\"#name\">binary name</a>.
This method should be overridden by class loader implementations that
follow the delegation model for loading classes, and will be invoked by
the {@link #loadClass <tt>loadClass</tt>} method after checking the
parent class loader for the requested class.  The default implementation
throws a <tt>ClassNotFoundException</tt>.  </p>

@param  name
        The <a href=\"#name\">binary name</a> of the class

@return  The resulting <tt>Class</tt> object

@throws  ClassNotFoundException
         If the class could not be found

@since  1.2"
      end

      operation 3258523 "defineClass"
	protected return_type class_ref 164635 // Class
	nparams 3
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 528411 // ClassFormatError
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Converts an array of bytes into an instance of class <tt>Class</tt>.
Before the <tt>Class</tt> can be used it must be resolved.  This method
is deprecated in favor of the version that takes a <a
href=\"#name\">binary name</a> as its first argument, and is more secure.

@param  b
        The bytes that make up the class data.  The bytes in positions
        <tt>off</tt> through <tt>off+len-1</tt> should have the format
        of a valid class file as defined by the <a
        href=\"http://java.sun.com/docs/books/vmspec/\">Java Virtual
        Machine Specification</a>.

@param  off
        The start offset in <tt>b</tt> of the class data

@param  len
        The length of the class data

@return  The <tt>Class</tt> object that was created from the specified
         class data

@throws  ClassFormatError
         If the data did not contain a valid class

@throws  IndexOutOfBoundsException
         If either <tt>off</tt> or <tt>len</tt> is negative, or if
         <tt>off+len</tt> is greater than <tt>b.length</tt>.

@see  #loadClass(String, boolean)
@see  #resolveClass(Class)

@deprecated  Replaced by {@link #defineClass(String, byte[], int, int)
defineClass(String, byte[], int, int)}"
      end

      operation 3258651 "defineClass"
	protected return_type class_ref 164635 // Class
	nparams 4
	  param in name "name" explicit_type "String"
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 528411 // ClassFormatError
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts an array of bytes into an instance of class <tt>Class</tt>.
Before the <tt>Class</tt> can be used it must be resolved.

<p> This method assigns a default {@link java.security.ProtectionDomain
<tt>ProtectionDomain</tt>} to the newly defined class.  The
<tt>ProtectionDomain</tt> is effectively granted the same set of
permissions returned when {@link
java.security.Policy#getPermissions(java.security.CodeSource)
<tt>Policy.getPolicy().getPermissions(new CodeSource(null, null))</tt>}
is invoked.  The default domain is created on the first invocation of
{@link #defineClass(String, byte[], int, int) <tt>defineClass</tt>},
and re-used on subsequent invocations.

<p> To assign a specific <tt>ProtectionDomain</tt> to the class, use
the {@link #defineClass(String, byte[], int, int,
java.security.ProtectionDomain) <tt>defineClass</tt>} method that takes a
<tt>ProtectionDomain</tt> as one of its arguments.  </p>

@param  name
        The expected <a href=\"#name\">binary name</a> of the class, or
        <tt>null</tt> if not known

@param  b
        The bytes that make up the class data.  The bytes in positions
        <tt>off</tt> through <tt>off+len-1</tt> should have the format
        of a valid class file as defined by the <a
        href=\"http://java.sun.com/docs/books/vmspec/\">Java Virtual
        Machine Specification</a>.

@param  off
        The start offset in <tt>b</tt> of the class data

@param  len
        The length of the class data

@return  The <tt>Class</tt> object that was created from the specified
         class data.

@throws  ClassFormatError
         If the data did not contain a valid class

@throws  IndexOutOfBoundsException
         If either <tt>off</tt> or <tt>len</tt> is negative, or if
         <tt>off+len</tt> is greater than <tt>b.length</tt>.

@throws  SecurityException
         If an attempt is made to add this class to a package that
         contains classes that were signed by a different set of
         certificates than this class (which is unsigned), or if
         <tt>name</tt> begins with \"<tt>java.</tt>\".

@see  #loadClass(String, boolean)
@see  #resolveClass(Class)
@see  java.security.CodeSource
@see  java.security.SecureClassLoader

@since  1.1"
      end

      operation 3258779 "preDefineClass"
	private return_type class_ref 526875 // ProtectionDomain
	nparams 2
	  param in name "name" explicit_type "String"
	  param inout name "protectionDomain" type class_ref 526875 // ProtectionDomain
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Determine protection domain, and check that:
- not define java.* class,
- signer of this class matches signers for the rest of the classes in package."
      end

      operation 3258907 "defineClassSourceLocation"
	private explicit_return_type "String"
	nparams 1
	  param inout name "protectionDomain" type class_ref 526875 // ProtectionDomain
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3259035 "defineTransformedClass"
	private return_type class_ref 164635 // Class
	nparams 7
	  param in name "name" explicit_type "String"
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	  param inout name "protectionDomain" type class_ref 526875 // ProtectionDomain
	  param inout name "cfe" type class_ref 528411 // ClassFormatError
	  param in name "source" explicit_type "String"
	nexceptions 1
	  exception class_ref 528411 // ClassFormatError
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3259163 "postDefineClass"
	private explicit_return_type "void"
	nparams 2
	  param inout name "c" type class_ref 164635 // Class
	  param inout name "protectionDomain" type class_ref 526875 // ProtectionDomain
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3259291 "defineClass"
	protected return_type class_ref 164635 // Class
	nparams 5
	  param in name "name" explicit_type "String"
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	  param inout name "protectionDomain" type class_ref 526875 // ProtectionDomain
	nexceptions 1
	  exception class_ref 528411 // ClassFormatError
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts an array of bytes into an instance of class <tt>Class</tt>,
with an optional <tt>ProtectionDomain</tt>.  If the domain is
<tt>null</tt>, then a default domain will be assigned to the class as
specified in the documentation for {@link #defineClass(String, byte[],
int, int)}.  Before the class can be used it must be resolved.

<p> The first class defined in a package determines the exact set of
certificates that all subsequent classes defined in that package must
contain.  The set of certificates for a class is obtained from the
{@link java.security.CodeSource <tt>CodeSource</tt>} within the
<tt>ProtectionDomain</tt> of the class.  Any classes added to that
package must contain the same set of certificates or a
<tt>SecurityException</tt> will be thrown.  Note that if
<tt>name</tt> is <tt>null</tt>, this check is not performed.
You should always pass in the <a href=\"#name\">binary name</a> of the
class you are defining as well as the bytes.  This ensures that the
class you are defining is indeed the class you think it is.

<p> The specified <tt>name</tt> cannot begin with \"<tt>java.</tt>\", since
all classes in the \"<tt>java.*</tt> packages can only be defined by the
bootstrap class loader.  If <tt>name</tt> is not <tt>null</tt>, it
must be equal to the <a href=\"#name\">binary name</a> of the class
specified by the byte array \"<tt>b</tt>\", otherwise a {@link
<tt>NoClassDefFoundError</tt>} will be thrown.  </p>

@param  name
        The expected <a href=\"#name\">binary name</a> of the class, or
        <tt>null</tt> if not known

@param  b
        The bytes that make up the class data. The bytes in positions
        <tt>off</tt> through <tt>off+len-1</tt> should have the format
        of a valid class file as defined by the <a
        href=\"http://java.sun.com/docs/books/vmspec/\">Java Virtual
        Machine Specification</a>.

@param  off
        The start offset in <tt>b</tt> of the class data

@param  len
        The length of the class data

@param  protectionDomain
        The ProtectionDomain of the class

@return  The <tt>Class</tt> object created from the data,
         and optional <tt>ProtectionDomain</tt>.

@throws  ClassFormatError
         If the data did not contain a valid class

@throws  NoClassDefFoundError
         If <tt>name</tt> is not equal to the <a href=\"#name\">binary
         name</a> of the class specified by <tt>b</tt>

@throws  IndexOutOfBoundsException
         If either <tt>off</tt> or <tt>len</tt> is negative, or if
         <tt>off+len</tt> is greater than <tt>b.length</tt>.

@throws  SecurityException
         If an attempt is made to add this class to a package that
         contains classes that were signed by a different set of
         certificates than this class, or if <tt>name</tt> begins with
         \"<tt>java.</tt>\"."
      end

      operation 3259419 "defineClass"
	protected return_type class_ref 164635 // Class
	nparams 3
	  param in name "name" explicit_type "String"
	  param inout name "b" type class_ref 182427 // ByteBuffer
	  param inout name "protectionDomain" type class_ref 526875 // ProtectionDomain
	nexceptions 1
	  exception class_ref 528411 // ClassFormatError
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts a {@link java.nio.ByteBuffer <tt>ByteBuffer</tt>}
into an instance of class <tt>Class</tt>,
with an optional <tt>ProtectionDomain</tt>.  If the domain is
<tt>null</tt>, then a default domain will be assigned to the class as
specified in the documentation for {@link #defineClass(String, byte[],
int, int)}.  Before the class can be used it must be resolved.

<p>The rules about the first class defined in a package determining the set of
certificates for the package, and the restrictions on class names are identical
to those specified in the documentation for {@link #defineClass(String, byte[],
int, int, ProtectionDomain)}.

<p> An invocation of this method of the form
<i>cl</i><tt>.defineClass(</tt><i>name</i><tt>,</tt>
<i>bBuffer</i><tt>,</tt> <i>pd</i><tt>)</tt> yields exactly the same
result as the statements

<blockquote><tt>
...<br>
byte[] temp = new byte[</tt><i>bBuffer</i><tt>.{@link java.nio.ByteBuffer#remaining
remaining}()];<br>
	   </tt><i>bBuffer</i><tt>.{@link java.nio.ByteBuffer#get(byte[])
get}(temp);<br>
    return {@link #defineClass(String, byte[], int, int, ProtectionDomain)
</tt><i>cl</i><tt>.defineClass}(</tt><i>name</i><tt>, temp, 0, temp.length, </tt><i>pd</i><tt>);<br>
</tt></blockquote>

@param  name
        The expected <a href=\"#name\">binary name</a. of the class, or
        <tt>null</tt> if not known

@param  b
        The bytes that make up the class data. The bytes from positions
        <tt>b.position()</tt> through <tt>b.position() + b.limit() -1 </tt>
        should have the format of a valid class file as defined by the <a
        href=\"http://java.sun.com/docs/books/vmspec/\">Java Virtual
        Machine Specification</a>.

@param  protectionDomain
        The ProtectionDomain of the class, or <tt>null</tt>.

@return  The <tt>Class</tt> object created from the data,
         and optional <tt>ProtectionDomain</tt>.

@throws  ClassFormatError
         If the data did not contain a valid class.

@throws  NoClassDefFoundError
         If <tt>name</tt> is not equal to the <a href=\"#name\">binary
         name</a> of the class specified by <tt>b</tt>

@throws  SecurityException
         If an attempt is made to add this class to a package that
         contains classes that were signed by a different set of
         certificates than this class, or if <tt>name</tt> begins with
         \"<tt>java.</tt>\".

@see      #defineClass(String, byte[], int, int, ProtectionDomain)

@since  1.5"
      end

      operation 3259547 "defineClass0"
	private return_type class_ref 164635 // Class
	nparams 5
	  param in name "name" explicit_type "String"
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	  param inout name "pd" type class_ref 526875 // ProtectionDomain
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3259675 "defineClass1"
	private return_type class_ref 164635 // Class
	nparams 6
	  param in name "name" explicit_type "String"
	  param in name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	  param inout name "pd" type class_ref 526875 // ProtectionDomain
	  param in name "source" explicit_type "String"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3259803 "defineClass2"
	private return_type class_ref 164635 // Class
	nparams 6
	  param in name "name" explicit_type "String"
	  param inout name "b" type class_ref 182427 // ByteBuffer
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	  param inout name "pd" type class_ref 526875 // ProtectionDomain
	  param in name "source" explicit_type "String"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3259931 "checkName"
	private explicit_return_type "boolean"
	nparams 1
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " true if the name is null or has the potential to be a valid binary name"
      end

      operation 3260059 "checkCerts"
	private explicit_return_type "void"
	nparams 2
	  param in name "name" explicit_type "String"
	  param inout name "cs" type class_ref 527259 // CodeSource
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3260187 "compareCerts"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "pcerts" type class_ref 528283 // Certificate
	  param inout name "certs" type class_ref 528283 // Certificate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "check to make sure the certs for the new class (certs) are the same as
the certs for the first class inserted in the package (pcerts)"
      end

      operation 3260315 "resolveClass"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "c" type class_ref 164635 // Class
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Links the specified class.  This (misleadingly named) method may be
used by a class loader to link a class.  If the class <tt>c</tt> has
already been linked, then this method simply returns. Otherwise, the
class is linked as described in the \"Execution\" chapter of the <a
href=\"http://java.sun.com/docs/books/jls/\">Java Language
Specification</a>.
</p>

@param  c
        The class to link

@throws  NullPointerException
         If <tt>c</tt> is <tt>null</tt>.

@see  #defineClass(String, byte[], int, int)"
      end

      operation 3260443 "resolveClass0"
	private explicit_return_type "void"
	nparams 1
	  param inout name "c" type class_ref 164635 // Class
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3260571 "findSystemClass"
	protected return_type class_ref 164635 // Class
	nparams 1
	  param in name "name" explicit_type "String"
	nexceptions 1
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds a class with the specified <a href=\"#name\">binary name</a>,
loading it if necessary.

<p> This method loads the class through the system class loader (see
{@link #getSystemClassLoader()}).  The <tt>Class</tt> object returned
might have more than one <tt>ClassLoader</tt> associated with it.
Subclasses of <tt>ClassLoader</tt> need not usually invoke this method,
because most class loaders need to override just {@link
#findClass(String)}.  </p>

@param  name
        The <a href=\"#name\">binary name</a> of the class

@return  The <tt>Class</tt> object for the specified <tt>name</tt>

@throws  ClassNotFoundException
         If the class could not be found

@see  #ClassLoader(ClassLoader)
@see  #getParent()"
      end

      operation 3260699 "findBootstrapClass0"
	private return_type class_ref 164635 // Class
	nparams 1
	  param in name "name" explicit_type "String"
	nexceptions 1
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3260827 "findBootstrapClass"
	private return_type class_ref 164635 // Class
	nparams 1
	  param in name "name" explicit_type "String"
	nexceptions 1
	  exception class_ref 201883 // ClassNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3260955 "check"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Check to make sure the class loader has been initialized."
      end

      operation 3261083 "findLoadedClass"
	protected return_type class_ref 164635 // Class
	nparams 1
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the class with the given <a href=\"#name\">binary name</a> if this
loader has been recorded by the Java virtual machine as an initiating
loader of a class with that <a href=\"#name\">binary name</a>.  Otherwise
<tt>null</tt> is returned.  </p>

@param  name
        The <a href=\"#name\">binary name</a> of the class

@return  The <tt>Class</tt> object, or <tt>null</tt> if the class has
         not been loaded

@since  1.1"
      end

      operation 3261211 "findLoadedClass0"
	private return_type class_ref 164635 // Class
	nparams 1
	  param in name "name" explicit_type "String"
	
	final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3261339 "setSigners"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "c" type class_ref 164635 // Class
	  param inout name "signers" explicit_type "Object"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the signers of a class.  This should be invoked after defining a
class.  </p>

@param  c
        The <tt>Class</tt> object

@param  signers
        The signers for the class

@since  1.1"
      end

      operation 3261467 "getResource"
	public return_type class_ref 269467 // URL
	nparams 1
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Resource --

Finds the resource with the given name.  A resource is some data
(images, audio, text, etc) that can be accessed by class code in a way
that is independent of the location of the code.

<p> The name of a resource is a '<tt>/</tt>'-separated path name that
identifies the resource.

<p> This method will first search the parent class loader for the
resource; if the parent is <tt>null</tt> the path of the class loader
built-in to the virtual machine is searched.  That failing, this method
will invoke {@link #findResource(String)} to find the resource.  </p>

@param  name
        The resource name

@return  A <tt>URL</tt> object for reading the resource, or
         <tt>null</tt> if the resource could not be found or the invoker
         doesn't have adequate  privileges to get the resource.

@since  1.1"
      end

      operation 3261595 "getResources"
	public return_type class_ref 144411 // Enumeration
	nparams 1
	  param in name "name" explicit_type "String"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<URL> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds all the resources with the given name. A resource is some data
(images, audio, text, etc) that can be accessed by class code in a way
that is independent of the location of the code.

<p>The name of a resource is a <tt>/</tt>-separated path name that
identifies the resource.

<p> The search order is described in the documentation for {@link
#getResource(String)}.  </p>

@param  name
        The resource name

@return  An enumeration of {@link java.net.URL <tt>URL</tt>} objects for
         the resource.  If no resources could  be found, the enumeration
         will be empty.  Resources that the class loader doesn't have
         access to will not be in the enumeration.

@throws  IOException
         If I/O errors occur

@see  #findResources(String)

@since  1.2"
      end

      operation 3261723 "findResource"
	protected return_type class_ref 269467 // URL
	nparams 1
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds the resource with the given name. Class loader implementations
should override this method to specify where to find resources.  </p>

@param  name
        The resource name

@return  A <tt>URL</tt> object for reading the resource, or
         <tt>null</tt> if the resource could not be found

@since  1.2"
      end

      operation 3261851 "findResources"
	protected return_type class_ref 144411 // Enumeration
	nparams 1
	  param in name "name" explicit_type "String"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<URL> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an enumeration of {@link java.net.URL <tt>URL</tt>} objects
representing all the resources with the given name. Class loader
implementations should override this method to specify where to load
resources from.  </p>

@param  name
        The resource name

@return  An enumeration of {@link java.net.URL <tt>URL</tt>} objects for
         the resources

@throws  IOException
         If I/O errors occur

@since  1.2"
      end

      operation 3261979 "getSystemResource"
	class_operation public return_type class_ref 269467 // URL
	nparams 1
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Find a resource of the specified name from the search path used to load
classes.  This method locates the resource through the system class
loader (see {@link #getSystemClassLoader()}).  </p>

@param  name
        The resource name

@return  A {@link java.net.URL <tt>URL</tt>} object for reading the
         resource, or <tt>null</tt> if the resource could not be found

@since  1.1"
      end

      operation 3262107 "getSystemResources"
	class_operation public return_type class_ref 144411 // Enumeration
	nparams 1
	  param in name "name" explicit_type "String"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<URL> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds all resources of the specified name from the search path used to
load classes.  The resources thus found are returned as an
{@link java.util.Enumeration <tt>Enumeration</tt>} of {@link
java.net.URL <tt>URL</tt>} objects.

<p> The search order is described in the documentation for {@link
#getSystemResource(String)}.  </p>

@param  name
        The resource name

@return  An enumeration of resource {@link java.net.URL <tt>URL</tt>}
         objects

@throws  IOException
         If I/O errors occur

@since  1.2"
      end

      operation 3262235 "getBootstrapResource"
	class_operation private return_type class_ref 269467 // URL
	nparams 1
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Find resources from the VM's built-in classloader."
      end

      operation 3262363 "getBootstrapResources"
	class_operation private return_type class_ref 144411 // Enumeration
	nparams 1
	  param in name "name" explicit_type "String"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Find resources from the VM's built-in classloader."
      end

      operation 3262491 "getBootstrapClassPath"
	class_operation package explicit_return_type "URLClassPath"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the URLClassPath that is used for finding system resources."
      end

      attribute 927771 "bootstrapClassPath"
	class_attribute private explicit_type "URLClassPath"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 3262619 "getResourceAsStream"
	public return_type class_ref 179099 // InputStream
	nparams 1
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an input stream for reading the specified resource.

<p> The search order is described in the documentation for {@link
#getResource(String)}.  </p>

@param  name
        The resource name

@return  An input stream for reading the resource, or <tt>null</tt>
         if the resource could not be found

@since  1.1"
      end

      operation 3262747 "getSystemResourceAsStream"
	class_operation public return_type class_ref 179099 // InputStream
	nparams 1
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Open for reading, a resource of the specified name from the search path
used to load classes.  This method locates the resource through the
system class loader (see {@link #getSystemClassLoader()}).  </p>

@param  name
        The resource name

@return  An input stream for reading the resource, or <tt>null</tt>
	        if the resource could not be found

@since  1.1"
      end

      operation 3262875 "getParent"
	public return_type class_ref 163611 // ClassLoader
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Hierarchy --

Returns the parent class loader for delegation. Some implementations may
use <tt>null</tt> to represent the bootstrap class loader. This method
will return <tt>null</tt> in such implementations if this class loader's
parent is the bootstrap class loader.

<p> If a security manager is present, and the invoker's class loader is
not <tt>null</tt> and is not an ancestor of this class loader, then this
method invokes the security manager's {@link
SecurityManager#checkPermission(java.security.Permission)
<tt>checkPermission</tt>} method with a {@link
RuntimePermission#RuntimePermission(String)
<tt>RuntimePermission(\"getClassLoader\")</tt>} permission to verify
access to the parent class loader is permitted.  If not, a
<tt>SecurityException</tt> will be thrown.  </p>

@return  The parent <tt>ClassLoader</tt>

@throws  SecurityException
         If a security manager exists and its <tt>checkPermission</tt>
         method doesn't allow access to this class loader's parent class
         loader.

@since  1.2"
      end

      operation 3263003 "getSystemClassLoader"
	class_operation public return_type class_ref 163611 // ClassLoader
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the system class loader for delegation.  This is the default
delegation parent for new <tt>ClassLoader</tt> instances, and is
typically the class loader used to start the application.

<p> This method is first invoked early in the runtime's startup
sequence, at which point it creates the system class loader and sets it
as the context class loader of the invoking <tt>Thread</tt>.

<p> The default system class loader is an implementation-dependent
instance of this class.

<p> If the system property \"<tt>java.system.class.loader</tt>\" is defined
when this method is first invoked then the value of that property is
taken to be the name of a class that will be returned as the system
class loader.  The class is loaded using the default system class loader
and must define a public constructor that takes a single parameter of
type <tt>ClassLoader</tt> which is used as the delegation parent.  An
instance is then created using this constructor with the default system
class loader as the parameter.  The resulting class loader is defined
to be the system class loader.

<p> If a security manager is present, and the invoker's class loader is
not <tt>null</tt> and the invoker's class loader is not the same as or
an ancestor of the system class loader, then this method invokes the
security manager's {@link
SecurityManager#checkPermission(java.security.Permission)
<tt>checkPermission</tt>} method with a {@link
RuntimePermission#RuntimePermission(String)
<tt>RuntimePermission(\"getClassLoader\")</tt>} permission to verify
access to the system class loader.  If not, a
<tt>SecurityException</tt> will be thrown.  </p>

@return  The system <tt>ClassLoader</tt> for delegation, or
         <tt>null</tt> if none

@throws  SecurityException
         If a security manager exists and its <tt>checkPermission</tt>
         method doesn't allow access to the system class loader.

@throws  IllegalStateException
         If invoked recursively during the construction of the class
         loader specified by the \"<tt>java.system.class.loader</tt>\"
         property.

@throws  Error
         If the system property \"<tt>java.system.class.loader</tt>\"
         is defined but the named class could not be loaded, the
         provider class does not define the required constructor, or an
         exception is thrown by that constructor when it is invoked. The
         underlying cause of the error can be retrieved via the
         {@link Throwable#getCause()} method.

@revised  1.4"
      end

      operation 3263131 "initSystemClassLoader"
	class_operation private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3263259 "isAncestor"
	package explicit_return_type "boolean"
	nparams 1
	  param inout name "cl" type class_ref 163611 // ClassLoader
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns true if the specified class loader can be found in this class
 loader's delegation chain."
      end

      operation 3263387 "getCallerClassLoader"
	class_operation package return_type class_ref 163611 // ClassLoader
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the invoker's class loader, or null if none.
 NOTE: This must always be invoked when there is exactly one intervening
 frame from the core libraries on the stack between this method's
 invocation and the desired invoker."
      end

      classrelation 892571 // scl (<unidirectional association>)
	relation 892571 --->
	  a role_name "scl" class_relation private
	    comment " The class loader for the system
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 892571 // scl (<unidirectional association>)
	  b parent class_ref 163611 // ClassLoader
      end

      attribute 927899 "sclSet"
	class_attribute private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Set to true once the system class loader has been set"
      end

      operation 3263515 "definePackage"
	protected return_type class_ref 528539 // Package
	nparams 8
	  param in name "name" explicit_type "String"
	  param in name "specTitle" explicit_type "String"
	  param in name "specVersion" explicit_type "String"
	  param in name "specVendor" explicit_type "String"
	  param in name "implTitle" explicit_type "String"
	  param in name "implVersion" explicit_type "String"
	  param in name "implVendor" explicit_type "String"
	  param inout name "sealBase" type class_ref 269467 // URL
	nexceptions 1
	  exception class_ref 216859 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Package --

Defines a package by name in this <tt>ClassLoader</tt>.  This allows
class loaders to define the packages for their classes. Packages must
be created before the class is defined, and package names must be
unique within a class loader and cannot be redefined or changed once
created.  </p>

@param  name
        The package name

@param  specTitle
        The specification title

@param  specVersion
        The specification version

@param  specVendor
        The specification vendor

@param  implTitle
        The implementation title

@param  implVersion
        The implementation version

@param  implVendor
        The implementation vendor

@param  sealBase
        If not <tt>null</tt>, then this package is sealed with
        respect to the given code source {@link java.net.URL
        <tt>URL</tt>}  object.  Otherwise, the package is not sealed.

@return  The newly defined <tt>Package</tt> object

@throws  IllegalArgumentException
         If package name duplicates an existing package either in this
         class loader or one of its ancestors

@since  1.2"
      end

      operation 3263643 "getPackage"
	protected return_type class_ref 528539 // Package
	nparams 1
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <tt>Package</tt> that has been defined by this class loader
or any of its ancestors.  </p>

@param  name
        The package name

@return  The <tt>Package</tt> corresponding to the given name, or
         <tt>null</tt> if not found

@since  1.2"
      end

      operation 3263771 "getPackages"
	protected return_type class_ref 528539 // Package
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all of the <tt>Packages</tt> defined by this class loader and
its ancestors.  </p>

@return  The array of <tt>Package</tt> objects defined by this
         <tt>ClassLoader</tt>

@since  1.2"
      end

      operation 3263899 "findLibrary"
	protected explicit_return_type "String"
	nparams 1
	  param in name "libname" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -- Native library access --

Returns the absolute path name of a native library.  The VM invokes this
method to locate the native libraries that belong to classes loaded with
this class loader. If this method returns <tt>null</tt>, the VM
searches the library along the path specified as the
\"<tt>java.library.path</tt>\" property.  </p>

@param  libname
        The library name

@return  The absolute path of the native library

@see  System#loadLibrary(String)
@see  System#mapLibraryName(String)

@since  1.2"
      end

      class 528667 "NativeLibrary"
	visibility package 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 928027 "handle"
	  package explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " opaque handle to native library, used in native code."
	end

	attribute 928155 "jniVersion"
	  private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " the version of JNI environment the native library requires."
	end

	classrelation 892699 // fromClass (<unidirectional association>)
	  relation 892699 --->
	    a role_name "fromClass" private
	      comment " the class from which the library is loaded, also indicates
 the loader this native library belongs.
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 892699 // fromClass (<unidirectional association>)
	    b parent class_ref 164635 // Class
	end

	attribute 928283 "name"
	  package explicit_type "String"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " the canonicalized name of the native library."
	end

	operation 3264027 "load"
	  package explicit_return_type "void"
	  nparams 1
	    param in name "name" explicit_type "String"
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 3264155 "find"
	  package explicit_return_type "long"
	  nparams 1
	    param in name "name" explicit_type "String"
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 3264283 "unload"
	  package explicit_return_type "void"
	  nparams 0
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 3264411 "NativeLibrary"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "fromClass" type class_ref 164635 // Class
	    param in name "name" explicit_type "String"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 3264539 "finalize"
	  protected explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 3264667 "getFromClass"
	  class_operation package return_type class_ref 164635 // Class
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Invoked in the VM to determine the context class in
 JNI_Load/JNI_Unload"
	end
      end

      classrelation 892827 // defaultDomain (<unidirectional association>)
	relation 892827 --->
	  a role_name "defaultDomain" init_value "=  null" private
	    comment " The \"default\" domain. Set as the default ProtectionDomain on newly
 created classes.
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 892827 // defaultDomain (<unidirectional association>)
	  b parent class_ref 526875 // ProtectionDomain
      end

      operation 3264795 "getDefaultDomain"
	private return_type class_ref 526875 // ProtectionDomain
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns (and initializes) the default domain."
      end

      classrelation 892955 // loadedLibraryNames (<unidirectional association>)
	relation 892955 --->
	  a role_name "loadedLibraryNames" init_value "=  new Vector()" class_relation private
	    comment " All native library names we've loaded.
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 892955 // loadedLibraryNames (<unidirectional association>)
	  b parent class_ref 153883 // Vector
      end

      classrelation 893083 // systemNativeLibraries (<unidirectional association>)
	relation 893083 --->
	  a role_name "systemNativeLibraries" init_value "=  new Vector()" class_relation private
	    comment " Native libraries belonging to system classes.
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 893083 // systemNativeLibraries (<unidirectional association>)
	  b parent class_ref 153883 // Vector
      end

      classrelation 893211 // nativeLibraries (<unidirectional association>)
	relation 893211 --->
	  a role_name "nativeLibraries" init_value "=  new Vector()" private
	    comment " Native libraries associated with the class loader.
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 893211 // nativeLibraries (<unidirectional association>)
	  b parent class_ref 153883 // Vector
      end

      classrelation 893339 // nativeLibraryContext (<unidirectional association>)
	relation 893339 --->
	  a role_name "nativeLibraryContext" init_value "=  new Stack()" class_relation private
	    comment " native libraries being loaded/unloaded.
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 893339 // nativeLibraryContext (<unidirectional association>)
	  b parent class_ref 156571 // Stack
      end

      attribute 928411 "usr_paths"
	class_attribute private explicit_type "String"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The paths searched for libraries"
      end

      attribute 928539 "sys_paths"
	class_attribute private explicit_type "String"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 3264923 "initializePath"
	class_operation private explicit_return_type "String"
	nparams 1
	  param in name "propname" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3265051 "loadLibrary"
	class_operation package explicit_return_type "void"
	nparams 3
	  param inout name "fromClass" type class_ref 164635 // Class
	  param in name "name" explicit_type "String"
	  param inout name "isAbsolute" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Invoked in the java.lang.Runtime class to implement load and loadLibrary."
      end

      operation 3265179 "loadLibrary0"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param inout name "fromClass" type class_ref 164635 // Class
	  param in name "file" type class_ref 165147 // File
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, final ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3265307 "findNative"
	class_operation package explicit_return_type "long"
	nparams 2
	  param inout name "loader" type class_ref 163611 // ClassLoader
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Invoked in the VM class linking code."
      end

      attribute 928667 "defaultAssertionStatus"
	private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " -- Assertion management --
 The default toggle for assertion checking."
      end

      classrelation 893467 // packageAssertionStatus (<unidirectional association>)
	relation 893467 --->
	  a role_name "packageAssertionStatus" init_value "=  null" private
	    comment " Maps String packageName to Boolean package default assertion status Note
 that the default package is placed under a null map key.  If this field
 is null then we are delegating assertion status queries to the VM, i.e.,
 none of this ClassLoader's assertion status modification methods have
 been invoked.
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 893467 // packageAssertionStatus (<unidirectional association>)
	  b parent class_ref 136603 // Map
      end

      classrelation 893595 // classAssertionStatus (<unidirectional association>)
	relation 893595 --->
	  a role_name "classAssertionStatus" init_value "=  null" package
	    comment " Maps String fullyQualifiedClassName to Boolean assertionStatus If this
 field is null then we are delegating assertion status queries to the VM,
 i.e., none of this ClassLoader's assertion status modification methods
 have been invoked.
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 893595 // classAssertionStatus (<unidirectional association>)
	  b parent class_ref 136603 // Map
      end

      operation 3265435 "setDefaultAssertionStatus"
	public explicit_return_type "void"
	nparams 1
	  param inout name "enabled" explicit_type "boolean"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the default assertion status for this class loader.  This setting
determines whether classes loaded by this class loader and initialized
in the future will have assertions enabled or disabled by default.
This setting may be overridden on a per-package or per-class basis by
invoking {@link #setPackageAssertionStatus(String, boolean)} or {@link
#setClassAssertionStatus(String, boolean)}.  </p>

@param  enabled
        <tt>true</tt> if classes loaded by this class loader will
        henceforth have assertions enabled by default, <tt>false</tt>
        if they will have assertions disabled by default.

@since  1.4"
      end

      operation 3265563 "setPackageAssertionStatus"
	public explicit_return_type "void"
	nparams 2
	  param in name "packageName" explicit_type "String"
	  param inout name "enabled" explicit_type "boolean"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the package default assertion status for the named package.  The
package default assertion status determines the assertion status for
classes initialized in the future that belong to the named package or
any of its \"subpackages\".

<p> A subpackage of a package named p is any package whose name begins
with \"<tt>p.</tt>\".  For example, <tt>javax.swing.text</tt> is a
subpackage of <tt>javax.swing</tt>, and both <tt>java.util</tt> and
<tt>java.lang.reflect</tt> are subpackages of <tt>java</tt>.

<p> In the event that multiple package defaults apply to a given class,
the package default pertaining to the most specific package takes
precedence over the others.  For example, if <tt>javax.lang</tt> and
<tt>javax.lang.reflect</tt> both have package defaults associated with
them, the latter package default applies to classes in
<tt>javax.lang.reflect</tt>.

<p> Package defaults take precedence over the class loader's default
assertion status, and may be overridden on a per-class basis by invoking
{@link #setClassAssertionStatus(String, boolean)}.  </p>

@param  packageName
        The name of the package whose package default assertion status
        is to be set. A <tt>null</tt> value indicates the unnamed
        package that is \"current\" (<a *
        href=\"http://java.sun.com/docs/books/jls/\">Java Language
        Specification</a>, section 7.4.2).

@param  enabled
        <tt>true</tt> if classes loaded by this classloader and
        belonging to the named package or any of its subpackages will
        have assertions enabled by default, <tt>false</tt> if they will
        have assertions disabled by default.

@since  1.4"
      end

      operation 3265691 "setClassAssertionStatus"
	public explicit_return_type "void"
	nparams 2
	  param in name "className" explicit_type "String"
	  param inout name "enabled" explicit_type "boolean"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the desired assertion status for the named top-level class in this
class loader and any nested classes contained therein.  This setting
takes precedence over the class loader's default assertion status, and
over any applicable per-package default.  This method has no effect if
the named class has already been initialized.  (Once a class is
initialized, its assertion status cannot change.)

<p> If the named class is not a top-level class, this invocation will
have no effect on the actual assertion status of any class, and its
return value is undefined.  </p>

@param  className
        The fully qualified class name of the top-level class whose
        assertion status is to be set.

@param  enabled
        <tt>true</tt> if the named class is to have assertions
        enabled when (and if) it is initialized, <tt>false</tt> if the
        class is to have assertions disabled.

@since  1.4"
      end

      operation 3265819 "clearAssertionStatus"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the default assertion status for this class loader to
<tt>false</tt> and discards any package defaults or class assertion
status settings associated with the class loader.  This method is
provided so that class loaders can be made to ignore any command line or
persistent assertion status settings and \"start with a clean slate.\"
</p>

@since  1.4"
      end

      operation 3265947 "desiredAssertionStatus"
	package explicit_return_type "boolean"
	nparams 1
	  param in name "className" explicit_type "String"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the assertion status that would be assigned to the specified
class if it were to be initialized at the time this method is invoked.
If the named class has had its assertion status set, the most recent
setting will be returned; otherwise, if any package default assertion
status pertains to this class, the most recent setting for the most
specific pertinent package default assertion status is returned;
otherwise, this class loader's default assertion status is returned.
</p>

@param  className
        The fully qualified class name of the class whose desired
        assertion status is being queried.

@return  The desired assertion status of the specified class.

@see  #setClassAssertionStatus(String, boolean)
@see  #setPackageAssertionStatus(String, boolean)
@see  #setDefaultAssertionStatus(boolean)

@since  1.4"
      end

      operation 3266075 "initializeJavaAssertionMaps"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Set up the assertions with information provided by the VM."
      end

      operation 3266203 "retrieveDirectives"
	class_operation private return_type class_ref 528795 // AssertionStatusDirectives
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Retrieves the assertion directives from the VM."
      end
    end

    class 163867 "ThreadLocal"
      visibility public 
      nformals 3
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class provides thread-local variables.  These variables differ from
their normal counterparts in that each thread that accesses one (via its
<tt>get</tt> or <tt>set</tt> method) has its own, independently initialized
copy of the variable.  <tt>ThreadLocal</tt> instances are typically private
static fields in classes that wish to associate state with a thread (e.g.,
a user ID or Transaction ID).

<p>For example, in the class below, the private static <tt>ThreadLocal</tt>
instance (<tt>serialNum</tt>) maintains a \"serial number\" for each thread
that invokes the class's static <tt>SerialNum.get()</tt> method, which
returns the current thread's serial number.  (A thread's serial number is
assigned the first time it invokes <tt>SerialNum.get()</tt>, and remains
unchanged on subsequent calls.)
<pre>
public class SerialNum {
    // The next serial number to be assigned
    private static int nextSerialNum = 0;

    private static ThreadLocal serialNum = new ThreadLocal() {
        protected synchronized Object initialValue() {
            return new Integer(nextSerialNum++);
        }
    };

    public static int get() {
        return ((Integer) (serialNum.get())).intValue();
    }
}
</pre>

<p>Each thread holds an implicit reference to its copy of a thread-local
variable as long as the thread is alive and the <tt>ThreadLocal</tt>
instance is accessible; after a thread goes away, all of its copies of
thread-local instances are subject to garbage collection (unless other
references to these copies exist).

@author  Josh Bloch and Doug Lea
@version 1.33, 02/19/04
@since   1.2"
      class 163995 "ThreadLocalMap"
	visibility package 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	class 912923 "Entry"
	  visibility private 
	  nactuals 3
	  actual class class_ref 392347 // WeakReference
	    rank 0 value class_ref 163867 // ThreadLocal
	  actual class class_ref 392347 // WeakReference
	    rank 1 explicit_value ""
	  actual class class_ref 392347 // WeakReference
	    rank 2 explicit_value ""
	  cpp_decl ""
	  java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  
	  classrelation 1779739 // <realization>
	    relation 1779739 -_-|>
	      stereotype "bind"
	      a public
		java "${type}"
		classrelation_ref 1779739 // <realization>
	      b parent class_ref 392347 // WeakReference
	  end

	  attribute 2730651 "value"
	    private explicit_type "Object"
	    cpp_decl ""
	    java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	    comment " The value associated with this ThreadLocal. "
	  end

	  operation 6993691 "Entry"
	    private explicit_return_type ""
	    nparams 2
	      param inout name "k" type class_ref 163867 // ThreadLocal
	      param inout name "v" explicit_type "Object"
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end
	end

	attribute 2730779 "INITIAL_CAPACITY"
	  class_attribute const_attribute private explicit_type "int"
	  init_value "=  16"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "The initial capacity -- MUST be a power of two.
"
	end

	classrelation 1779867 // table (<unidirectional association>)
	  relation 1779867 --->
	    a role_name "table" multiplicity "[]" private
	      comment "
The table, resized as necessary.
table.length MUST always be a power of two.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 1779867 // table (<unidirectional association>)
	    b parent class_ref 912923 // Entry
	end

	attribute 2730907 "size"
	  private explicit_type "int"
	  init_value "=  0"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "The number of entries in the table.
"
	end

	attribute 2731035 "threshold"
	  private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "The next size value at which to resize.

 Default to 0"
	end

	operation 6993819 "setThreshold"
	  private explicit_return_type "void"
	  nparams 1
	    param in name "len" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Set the resize threshold to maintain at worst a 2/3 load factor."
	end

	operation 6993947 "nextIndex"
	  class_operation private explicit_return_type "int"
	  nparams 2
	    param in name "i" explicit_type "int"
	    param in name "len" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Increment i modulo len."
	end

	operation 6994075 "prevIndex"
	  class_operation private explicit_return_type "int"
	  nparams 2
	    param in name "i" explicit_type "int"
	    param in name "len" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Decrement i modulo len."
	end

	operation 6994203 "ThreadLocalMap"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "firstKey" type class_ref 163867 // ThreadLocal
	    param inout name "firstValue" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Construct a new map initially containing (firstKey, firstValue).
ThreadLocalMaps are constructed lazily, so we only create
one when we have at least one entry to put in it."
	end

	operation 6994331 "ThreadLocalMap"
	  private explicit_return_type ""
	  nparams 1
	    param inout name "parentMap" type class_ref 163995 // ThreadLocalMap
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Construct a new map including all Inheritable ThreadLocals
from given parent map. Called only by createInheritedMap.

@param parentMap the map associated with parent thread."
	end

	operation 6994459 "get"
	  private explicit_return_type "Object"
	  nparams 1
	    param inout name "key" type class_ref 163867 // ThreadLocal
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the value associated with key with code h.  This method itself
handles only the fast path: a direct hit of existing key. It
otherwise relays to getAfterMiss.  This is designed to maximize
performance for direct hits, in part by making this method readily
inlinable.

@param  key the thread local object
@param  h key's  hash code
@return the value associated with key"
	end

	operation 6994587 "getAfterMiss"
	  private explicit_return_type "Object"
	  nparams 3
	    param inout name "key" type class_ref 163867 // ThreadLocal
	    param in name "i" explicit_type "int"
	    param inout name "e" type class_ref 912923 // Entry
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Version of get method for use when key is not found in its
direct hash slot.

@param  key the thread local object
@param  i the table index for key's hash code
@param  e the entry at table[i];
@return the value associated with key"
	end

	operation 6994715 "set"
	  private explicit_return_type "void"
	  nparams 2
	    param inout name "key" type class_ref 163867 // ThreadLocal
	    param inout name "value" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Set the value associated with key.

@param key the thread local object
@param value the value to be set"
	end

	operation 6994843 "remove"
	  private explicit_return_type "void"
	  nparams 1
	    param inout name "key" type class_ref 163867 // ThreadLocal
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Remove the entry for key."
	end

	operation 6994971 "replaceStaleEntry"
	  private explicit_return_type "Object"
	  nparams 4
	    param inout name "key" type class_ref 163867 // ThreadLocal
	    param inout name "value" explicit_type "Object"
	    param in name "staleSlot" explicit_type "int"
	    param inout name "actAsGet" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Replace a stale entry encountered during a get or set operation
with an entry for the specified key.  If actAsGet is true and an
entry for the key already exists, the value in the entry is
unchanged; if no entry exists for the key, the value in the new
entry is obtained by calling key.initialValue.  If actAsGet is
false, the value passed in the value parameter is stored in the
entry, whether or not an entry already exists for the specified key.

As a side effect, this method expunges all stale entries in the
\"run\" containing the stale entry.  (A run is a sequence of entries
between two null slots.)

@param  key the key
@param  value the value to be associated with key; meaningful only
        if actAsGet is false.
@param  staleSlot index of the first stale entry encountered while
        searching for key.
@param  actAsGet true if this method should act as a get; false
        it should act as a set.
@return the value associated with key after the operation completes."
	end

	operation 6995099 "expungeStaleEntry"
	  private explicit_return_type "int"
	  nparams 1
	    param in name "staleSlot" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Expunge a stale entry by rehashing any possibly colliding entries
lying between staleSlot and the next null slot.  This also expunges
any other stale entries encountered before the trailing null.  See
Knuth, Section 6.4

@param staleSlot index of slot known to have null key
@return the index of the next null slot after staleSlot
(all between staleSlot and this slot will have been checked
for expunging)."
	end

	operation 6995227 "cleanSomeSlots"
	  private explicit_return_type "boolean"
	  nparams 2
	    param in name "i" explicit_type "int"
	    param in name "n" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Heuristically scan some cells looking for stale entries.
This is invoked when either a new element is added, or
another stale one has been expunged. It performs a
logarithmic number of scans, as a balance between no
scanning (fast but retains garbage) and a number of scans
proportional to number of elements, that would find all
garbage but would cause some insertions to take O(n) time.

@param i a position known NOT to hold a stale entry. The
scan starts at the element after i.

@param n scan control: <tt>log2(n)</tt> cells are scanned,
unless a stale entry one is found, in which case
<tt>log2(table.length)-1</tt> additional cells are scanned.
When called from insertions, this parameter is the number
of elements, but when from replaceStaleEntry, it is the
table length. (Note: all this could be changed to be either
more or less aggressive by weighting n instead of just
using straight log n. But this version is simple, fast, and
seems to work well.)

@return true if any stale entries have been removed."
	end

	operation 6995355 "rehash"
	  private explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Re-pack and/or re-size the table. First scan the entire
table removing stale entries. If this doesn't sufficiently
shrink the size of the table, double the table size."
	end

	operation 6995483 "resize"
	  private explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Double the capacity of the table."
	end

	operation 6995611 "expungeStaleEntries"
	  private explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Expunge all stale entries in the table."
	end
      end

      attribute 2730267 "threadLocalHashCode"
	const_attribute private explicit_type "int"
	init_value "=  nextHashCode()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "ThreadLocals rely on per-thread hash maps attached to each thread
(Thread.threadLocals and inheritableThreadLocals).  The ThreadLocal
objects act as keys, searched via threadLocalHashCode.  This is a
custom hash code (useful only within ThreadLocalMaps) that eliminates
collisions in the common case where consecutively constructed
ThreadLocals are used by the same threads, while remaining well-behaved
in less common cases.
"
      end

      attribute 2730395 "nextHashCode"
	class_attribute private explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The next hash code to be given out. Accessed only by like-named method.
"
      end

      attribute 2730523 "HASH_INCREMENT"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  0x61c88647"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The difference between successively generated hash codes - turns
implicit sequential thread-local IDs into near-optimally spread
multiplicative hash values for power-of-two-sized tables.
"
      end

      operation 6992411 "nextHashCode"
	class_operation private explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compute the next hash code. The static synchronization used here
should not be a performance bottleneck. When ThreadLocals are
generated in different threads at a fast enough rate to regularly
contend on this lock, memory contention is by far a more serious
problem than lock contention."
      end

      operation 6992539 "initialValue"
	protected explicit_return_type "T"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current thread's initial value for this thread-local
variable.  This method will be invoked at most once per accessing
thread for each thread-local, the first time the thread accesses the
variable with the {@link #get} method.  The <tt>initialValue</tt>
method will not be invoked in a thread if the thread invokes the {@link
#set} method prior to the <tt>get</tt> method.

<p>This implementation simply returns <tt>null</tt>; if the programmer
desires thread-local variables to be initialized to some value other
than <tt>null</tt>, <tt>ThreadLocal</tt> must be subclassed, and this
method overridden.  Typically, an anonymous inner class will be used.
Typical implementations of <tt>initialValue</tt> will invoke an
appropriate constructor and return the newly constructed object.

@return the initial value for this thread-local"
      end

      operation 6992667 "ThreadLocal"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a thread local variable."
      end

      operation 6992795 "get"
	public explicit_return_type "T"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value in the current thread's copy of this thread-local
variable.  Creates and initializes the copy if this is the first time
the thread has called this method.

@return the current thread's value of this thread-local"
      end

      operation 6992923 "set"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the current thread's copy of this thread-local variable
to the specified value.  Many applications will have no need for
this functionality, relying solely on the {@link #initialValue}
method to set the values of thread-locals.

@param value the value to be stored in the current threads' copy of
       this thread-local."
      end

      operation 6993051 "remove"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the value for this ThreadLocal.  This may help reduce
the storage requirements of ThreadLocals.  If this ThreadLocal
is accessed again, it will by default have its
<tt>initialValue</tt>.
@since 1.5"
      end

      operation 6993179 "getMap"
	package return_type class_ref 163995 // ThreadLocalMap
	nparams 1
	  param inout name "t" type class_ref 163227 // Thread
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the map associated with a ThreadLocal. Overridden in
InheritableThreadLocal.

@param  t the current thread
@return the map"
      end

      operation 6993307 "createMap"
	package explicit_return_type "void"
	nparams 2
	  param inout name "t" type class_ref 163227 // Thread
	  param inout name "firstValue" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create the map associated with a ThreadLocal. Overridden in
InheritableThreadLocal.

@param t the current thread
@param firstValue value for the initial entry of the map
@param map the map to store."
      end

      operation 6993435 "createInheritedMap"
	class_operation package return_type class_ref 163995 // ThreadLocalMap
	nparams 1
	  param inout name "parentMap" type class_ref 163995 // ThreadLocalMap
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Factory method to create map of inherited thread locals.
Designed to be called only from Thread constructor.

@param  parentMap the map associated with parent thread
@return a map containing the parent's inheritable bindings"
      end

      operation 6993563 "childValue"
	package explicit_return_type "T"
	nparams 1
	  param inout name "parentValue" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Method childValue is visibly defined in subclass
InheritableThreadLocal, but is internally defined here for the
sake of providing createInheritedMap factory method without
needing to subclass the map class in InheritableThreadLocal.
This technique is preferable to the alternative of embedding
instanceof tests in methods."
      end
    end

    class 164123 "InterruptedException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Thrown when a thread is waiting, sleeping, or otherwise paused for
a long time and another thread interrupts it using the
<code>interrupt</code>  method in class <code>Thread</code>. 

@author  Frank Yellin
@version 1.15, 12/19/03
@see     java.lang.Object#wait()
@see     java.lang.Object#wait(long)
@see     java.lang.Object#wait(long, int)
@see     java.lang.Thread#sleep(long)
@see     java.lang.Thread#interrupt()
@see     java.lang.Thread#interrupted()
@since   JDK1.0"
      classrelation 1781147 // <generalisation>
	relation 1781147 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1781147 // <generalisation>
	  b parent class_ref 165403 // Exception
      end

      operation 7002267 "InterruptedException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>InterruptedException</code> with no detail  message. "
      end

      operation 7002395 "InterruptedException"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>InterruptedException</code> with the 
specified detail message. 

@param   s   the detail message."
      end
    end

    class 164251 "Throwable"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The <code>Throwable</code> class is the superclass of all errors and
exceptions in the Java language. Only objects that are instances of this
class (or one of its subclasses) are thrown by the Java Virtual Machine or
can be thrown by the Java <code>throw</code> statement. Similarly, only
this class or one of its subclasses can be the argument type in a
<code>catch</code> clause.

<p>Instances of two subclasses, {@link java.lang.Error} and 
{@link java.lang.Exception}, are conventionally used to indicate 
that exceptional situations have occurred. Typically, these instances 
are freshly created in the context of the exceptional situation so 
as to include relevant information (such as stack trace data).

<p>A throwable contains a snapshot of the execution stack of its thread at
the time it was created. It can also contain a message string that gives
more information about the error. Finally, it can contain a <i>cause</i>:
another throwable that caused this throwable to get thrown.  The cause
facility is new in release 1.4.  It is also known as the <i>chained
exception</i> facility, as the cause can, itself, have a cause, and so on,
leading to a \"chain\" of exceptions, each caused by another.

<p>One reason that a throwable may have a cause is that the class that
throws it is built atop a lower layered abstraction, and an operation on
the upper layer fails due to a failure in the lower layer.  It would be bad
design to let the throwable thrown by the lower layer propagate outward, as
it is generally unrelated to the abstraction provided by the upper layer.
Further, doing so would tie the API of the upper layer to the details of
its implementation, assuming the lower layer's exception was a checked
exception.  Throwing a \"wrapped exception\" (i.e., an exception containing a
cause) allows the upper layer to communicate the details of the failure to
its caller without incurring either of these shortcomings.  It preserves
the flexibility to change the implementation of the upper layer without
changing its API (in particular, the set of exceptions thrown by its
methods).

<p>A second reason that a throwable may have a cause is that the method
that throws it must conform to a general-purpose interface that does not
permit the method to throw the cause directly.  For example, suppose
a persistent collection conforms to the {@link java.util.Collection
Collection} interface, and that its persistence is implemented atop
<tt>java.io</tt>.  Suppose the internals of the <tt>put</tt> method 
can throw an {@link java.io.IOException IOException}.  The implementation
can communicate the details of the <tt>IOException</tt> to its caller
while conforming to the <tt>Collection</tt> interface by wrapping the
<tt>IOException</tt> in an appropriate unchecked exception.  (The
specification for the persistent collection should indicate that it is
capable of throwing such exceptions.)

<p>A cause can be associated with a throwable in two ways: via a
constructor that takes the cause as an argument, or via the
{@link #initCause(Throwable)} method.  New throwable classes that
wish to allow causes to be associated with them should provide constructors
that take a cause and delegate (perhaps indirectly) to one of the
<tt>Throwable</tt> constructors that takes a cause.  For example:
<pre>
    try {
        lowLevelOp();
    } catch (LowLevelException le) {
        throw new HighLevelException(le);  // Chaining-aware constructor
    }
</pre>
Because the <tt>initCause</tt> method is public, it allows a cause to be
associated with any throwable, even a \"legacy throwable\" whose
implementation predates the addition of the exception chaining mechanism to
<tt>Throwable</tt>. For example:
<pre>
    try {
        lowLevelOp();
    } catch (LowLevelException le) {
        throw (HighLevelException)
new HighLevelException().initCause(le);  // Legacy constructor
    }
</pre>

<p>Prior to release 1.4, there were many throwables that had their own
non-standard exception chaining mechanisms (
{@link ExceptionInInitializerError}, {@link ClassNotFoundException},
{@link java.lang.reflect.UndeclaredThrowableException},
{@link java.lang.reflect.InvocationTargetException}, 
{@link java.io.WriteAbortedException},
{@link java.security.PrivilegedActionException},
{@link java.awt.print.PrinterIOException},
{@link java.rmi.RemoteException} and
{@link javax.naming.NamingException}).
All of these throwables have been retrofitted to 
use the standard exception chaining mechanism, while continuing to
implement their \"legacy\" chaining mechanisms for compatibility.

<p>Further, as of release 1.4, many general purpose <tt>Throwable</tt>
classes (for example {@link Exception}, {@link RuntimeException},
{@link Error}) have been retrofitted with constructors that take
a cause.  This was not strictly necessary, due to the existence of the
<tt>initCause</tt> method, but it is more convenient and expressive to
delegate to a constructor that takes a cause.

<p>By convention, class <code>Throwable</code> and its subclasses have two
constructors, one that takes no arguments and one that takes a
<code>String</code> argument that can be used to produce a detail message.
Further, those subclasses that might likely have a cause associated with
them should have two more constructors, one that takes a
<code>Throwable</code> (the cause), and one that takes a
<code>String</code> (the detail message) and a <code>Throwable</code> (the
cause).

<p>Also introduced in release 1.4 is the {@link #getStackTrace()} method,
which allows programmatic access to the stack trace information that was
previously available only in text form, via the various forms of the
{@link #printStackTrace()} method.  This information has been added to the
<i>serialized representation</i> of this class so <tt>getStackTrace</tt>
and <tt>printStackTrace</tt> will operate properly on a throwable that
was obtained by deserialization.

@author  unascribed
@author  Josh Bloch (Added exception chaining and programmatic access to
         stack trace in 1.4.)
@version 1.53, 12/19/03
@since JDK1.0"
      classrelation 269851 // <realization>
	relation 269851 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 269851 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      attribute 274843 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -3042686055658047285L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " use serialVersionUID from JDK 1.0.2 for interoperability "
      end

      attribute 274971 "backtrace"
	private explicit_type "Object"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Native code saves some indication of the stack backtrace in this slot.
"
      end

      attribute 275099 "detailMessage"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Specific details about the Throwable.  For example, for
<tt>FileNotFoundException</tt>, this contains the name of
the file that could not be found.

@serial
"
      end

      classrelation 269979 // cause (<unidirectional association>)
	relation 269979 --->
	  a role_name "cause" init_value "=  this" private
	    comment "
The throwable that caused this throwable to get thrown, or null if this
throwable was not caused by another throwable, or if the causative
throwable is unknown.  If this field is equal to this throwable itself,
it indicates that the cause of this throwable has not yet been
initialized.

@serial
@since 1.4

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 269979 // cause (<unidirectional association>)
	  b parent class_ref 164251 // Throwable
      end

      classrelation 270107 // stackTrace (<unidirectional association>)
	relation 270107 --->
	  a role_name "stackTrace" multiplicity "[]" private
	    comment "
The stack trace, as returned by {@link #getStackTrace()}.

@serial
@since 1.4

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 270107 // stackTrace (<unidirectional association>)
	  b parent class_ref 164379 // StackTraceElement
      end

      operation 828571 "Throwable"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This field is lazily initialized on first use or serialization and
nulled out when fillInStackTrace is called.


Constructs a new throwable with <code>null</code> as its detail message.
The cause is not initialized, and may subsequently be initialized by a
call to {@link #initCause}.

<p>The {@link #fillInStackTrace()} method is called to initialize
the stack trace data in the newly created throwable."
      end

      operation 828699 "Throwable"
	public explicit_return_type ""
	nparams 1
	  param in name "message" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new throwable with the specified detail message.  The
cause is not initialized, and may subsequently be initialized by
a call to {@link #initCause}.

<p>The {@link #fillInStackTrace()} method is called to initialize
the stack trace data in the newly created throwable.

@param   message   the detail message. The detail message is saved for 
         later retrieval by the {@link #getMessage()} method."
      end

      operation 828827 "Throwable"
	public explicit_return_type ""
	nparams 2
	  param in name "message" explicit_type "String"
	  param inout name "cause" type class_ref 164251 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new throwable with the specified detail message and
cause.  <p>Note that the detail message associated with
<code>cause</code> is <i>not</i> automatically incorporated in
this throwable's detail message.

<p>The {@link #fillInStackTrace()} method is called to initialize
the stack trace data in the newly created throwable.

@param  message the detail message (which is saved for later retrieval
        by the {@link #getMessage()} method).
@param  cause the cause (which is saved for later retrieval by the
        {@link #getCause()} method).  (A <tt>null</tt> value is
        permitted, and indicates that the cause is nonexistent or
        unknown.)
@since  1.4"
      end

      operation 828955 "Throwable"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 164251 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new throwable with the specified cause and a detail
message of <tt>(cause==null ? null : cause.toString())</tt> (which
typically contains the class and detail message of <tt>cause</tt>).
This constructor is useful for throwables that are little more than
wrappers for other throwables (for example, {@link
java.security.PrivilegedActionException}).

<p>The {@link #fillInStackTrace()} method is called to initialize
the stack trace data in the newly created throwable.

@param  cause the cause (which is saved for later retrieval by the
        {@link #getCause()} method).  (A <tt>null</tt> value is
        permitted, and indicates that the cause is nonexistent or
        unknown.)
@since  1.4"
      end

      operation 829083 "getMessage"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the detail message string of this throwable.

@return  the detail message string of this <tt>Throwable</tt> instance
         (which may be <tt>null</tt>)."
      end

      operation 829211 "getLocalizedMessage"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a localized description of this throwable.
Subclasses may override this method in order to produce a
locale-specific message.  For subclasses that do not override this
method, the default implementation returns the same result as
<code>getMessage()</code>.

@return  The localized description of this throwable.
@since   JDK1.1"
      end

      operation 829339 "getCause"
	public return_type class_ref 164251 // Throwable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the cause of this throwable or <code>null</code> if the
cause is nonexistent or unknown.  (The cause is the throwable that
caused this throwable to get thrown.)

<p>This implementation returns the cause that was supplied via one of
the constructors requiring a <tt>Throwable</tt>, or that was set after
creation with the {@link #initCause(Throwable)} method.  While it is
typically unnecessary to override this method, a subclass can override
it to return a cause set by some other means.  This is appropriate for
a \"legacy chained throwable\" that predates the addition of chained
exceptions to <tt>Throwable</tt>.  Note that it is <i>not</i>
necessary to override any of the <tt>PrintStackTrace</tt> methods,
all of which invoke the <tt>getCause</tt> method to determine the
cause of a throwable.

@return  the cause of this throwable or <code>null</code> if the
         cause is nonexistent or unknown.
@since 1.4"
      end

      operation 829467 "initCause"
	public return_type class_ref 164251 // Throwable
	nparams 1
	  param inout name "cause" type class_ref 164251 // Throwable
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes the <i>cause</i> of this throwable to the specified value.
(The cause is the throwable that caused this throwable to get thrown.) 

<p>This method can be called at most once.  It is generally called from 
within the constructor, or immediately after creating the
throwable.  If this throwable was created
with {@link #Throwable(Throwable)} or
{@link #Throwable(String,Throwable)}, this method cannot be called
even once.

@param  cause the cause (which is saved for later retrieval by the
        {@link #getCause()} method).  (A <tt>null</tt> value is
        permitted, and indicates that the cause is nonexistent or
        unknown.)
@return  a reference to this <code>Throwable</code> instance.
@throws IllegalArgumentException if <code>cause</code> is this
        throwable.  (A throwable cannot be its own cause.)
@throws IllegalStateException if this throwable was
        created with {@link #Throwable(Throwable)} or
        {@link #Throwable(String,Throwable)}, or this method has already
        been called on this throwable.
@since  1.4"
      end

      operation 829595 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a short description of this throwable.
If this <code>Throwable</code> object was created with a non-null detail
message string, then the result is the concatenation of three strings: 
<ul>
<li>The name of the actual class of this object 
<li>\": \" (a colon and a space)
<li>The result of the {@link #getMessage} method for this object 
</ul>
If this <code>Throwable</code> object was created with a <tt>null</tt>
detail message string, then the name of the actual class of this object
is returned. 

@return a string representation of this throwable."
      end

      operation 829723 "printStackTrace"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints this throwable and its backtrace to the 
standard error stream. This method prints a stack trace for this 
<code>Throwable</code> object on the error output stream that is 
the value of the field <code>System.err</code>. The first line of 
output contains the result of the {@link #toString()} method for 
this object.  Remaining lines represent data previously recorded by 
the method {@link #fillInStackTrace()}. The format of this 
information depends on the implementation, but the following 
example may be regarded as typical: 
<blockquote><pre>
java.lang.NullPointerException
        at MyClass.mash(MyClass.java:9)
        at MyClass.crunch(MyClass.java:6)
        at MyClass.main(MyClass.java:3)
</pre></blockquote>
This example was produced by running the program: 
<pre>
class MyClass {
    public static void main(String[] args) {
        crunch(null);
    }
    static void crunch(int[] a) {
        mash(a);
    }
    static void mash(int[] b) {
        System.out.println(b[0]);
    }
}
</pre>
The backtrace for a throwable with an initialized, non-null cause
should generally include the backtrace for the cause.  The format
of this information depends on the implementation, but the following
example may be regarded as typical:
<pre>
HighLevelException: MidLevelException: LowLevelException
        at Junk.a(Junk.java:13)
        at Junk.main(Junk.java:4)
Caused by: MidLevelException: LowLevelException
        at Junk.c(Junk.java:23)
        at Junk.b(Junk.java:17)
        at Junk.a(Junk.java:11)
        ... 1 more
Caused by: LowLevelException
        at Junk.e(Junk.java:30)
        at Junk.d(Junk.java:27)
        at Junk.c(Junk.java:21)
        ... 3 more
</pre>
Note the presence of lines containing the characters <tt>\"...\"</tt>.
These lines indicate that the remainder of the stack trace for this
exception matches the indicated number of frames from the bottom of the
stack trace of the exception that was caused by this exception (the
\"enclosing\" exception).  This shorthand can greatly reduce the length
of the output in the common case where a wrapped exception is thrown
from same method as the \"causative exception\" is caught.  The above
example was produced by running the program:
<pre>
public class Junk {
    public static void main(String args[]) { 
        try {
            a();
        } catch(HighLevelException e) {
            e.printStackTrace();
        }
    }
    static void a() throws HighLevelException {
        try {
            b();
        } catch(MidLevelException e) {
            throw new HighLevelException(e);
        }
    }
    static void b() throws MidLevelException {
        c();
    }   
    static void c() throws MidLevelException {
        try {
            d();
        } catch(LowLevelException e) {
            throw new MidLevelException(e);
        }
    }
    static void d() throws LowLevelException { 
       e();
    }
    static void e() throws LowLevelException {
        throw new LowLevelException();
    }
}

class HighLevelException extends Exception {
    HighLevelException(Throwable cause) { super(cause); }
}

class MidLevelException extends Exception {
    MidLevelException(Throwable cause)  { super(cause); }
}

class LowLevelException extends Exception {
}
</pre>"
      end

      operation 829851 "printStackTrace"
	public explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 162843 // PrintStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints this throwable and its backtrace to the specified print stream.

@param s <code>PrintStream</code> to use for output"
      end

      operation 829979 "printStackTraceAsCause"
	private explicit_return_type "void"
	nparams 2
	  param inout name "s" type class_ref 162843 // PrintStream
	  param inout name "causedTrace" type class_ref 164379 // StackTraceElement
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Print our stack trace as a cause for the specified stack trace."
      end

      operation 830107 "printStackTrace"
	public explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 221595 // PrintWriter
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints this throwable and its backtrace to the specified
print writer.

@param s <code>PrintWriter</code> to use for output
@since   JDK1.1"
      end

      operation 830235 "printStackTraceAsCause"
	private explicit_return_type "void"
	nparams 2
	  param inout name "s" type class_ref 221595 // PrintWriter
	  param inout name "causedTrace" type class_ref 164379 // StackTraceElement
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Print our stack trace as a cause for the specified stack trace."
      end

      operation 830363 "fillInStackTrace"
	public return_type class_ref 164251 // Throwable
	nparams 0
	
	synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Fills in the execution stack trace. This method records within this 
<code>Throwable</code> object information about the current state of 
the stack frames for the current thread.

@return  a reference to this <code>Throwable</code> instance.
@see     java.lang.Throwable#printStackTrace()"
      end

      operation 830491 "getStackTrace"
	public return_type class_ref 164379 // StackTraceElement
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Provides programmatic access to the stack trace information printed by
{@link #printStackTrace()}.  Returns an array of stack trace elements,
each representing one stack frame.  The zeroth element of the array
(assuming the array's length is non-zero) represents the top of the
stack, which is the last method invocation in the sequence.  Typically,
this is the point at which this throwable was created and thrown.
The last element of the array (assuming the array's length is non-zero)
represents the bottom of the stack, which is the first method invocation
in the sequence.

<p>Some virtual machines may, under some circumstances, omit one
or more stack frames from the stack trace.  In the extreme case,
a virtual machine that has no stack trace information concerning
this throwable is permitted to return a zero-length array from this
method.  Generally speaking, the array returned by this method will
contain one element for every frame that would be printed by
<tt>printStackTrace</tt>.

@return an array of stack trace elements representing the stack trace
        pertaining to this throwable.
@since  1.4"
      end

      operation 830619 "getOurStackTrace"
	private return_type class_ref 164379 // StackTraceElement
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 830747 "setStackTrace"
	public explicit_return_type "void"
	nparams 1
	  param inout name "stackTrace" type class_ref 164379 // StackTraceElement
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the stack trace elements that will be returned by
{@link #getStackTrace()} and printed by {@link #printStackTrace()}
and related methods.

This method, which is designed for use by RPC frameworks and other
advanced systems, allows the client to override the default
stack trace that is either generated by {@link #fillInStackTrace()}
when a throwable is constructed or deserialized when a throwable is
read from a serialization stream.

@param   stackTrace the stack trace elements to be associated with
this <code>Throwable</code>.  The specified array is copied by this
call; changes in the specified array after the method invocation
returns will have no affect on this <code>Throwable</code>'s stack
trace.

@throws NullPointerException if <code>stackTrace</code> is
        <code>null</code>, or if any of the elements of
        <code>stackTrace</code> are <code>null</code>

@since  1.4"
      end

      operation 830875 "getStackTraceDepth"
	private explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of elements in the stack trace (or 0 if the stack
trace is unavailable)."
      end

      operation 831003 "getStackTraceElement"
	private return_type class_ref 164379 // StackTraceElement
	nparams 1
	  param in name "index" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the specified element of the stack trace.

@param index index of the element to return.
@throws IndexOutOfBoundsException if <tt>index %lt; 0 ||
        index &gt;= getStackTraceDepth() </tt>"
      end

      operation 831131 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 205339 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 164379 "StackTraceElement"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An element in a stack trace, as returned by {@link
Throwable#getStackTrace()}.  Each element represents a single stack frame.
All stack frames except for the one at the top of the stack represent
a method invocation.  The frame at the top of the stack represents the 
execution point at which the stack trace was generated.  Typically,
this is the point at which the throwable corresponding to the stack trace
was created.

@since  1.4
@author Josh Bloch"
      classrelation 1788699 // <realization>
	relation 1788699 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1788699 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      attribute 2737691 "declaringClass"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Normally initialized by VM (public constructor added in 1.5)"
      end

      attribute 2737819 "methodName"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2737947 "fileName"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2738075 "lineNumber"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7045019 "StackTraceElement"
	public explicit_return_type ""
	nparams 4
	  param in name "declaringClass" explicit_type "String"
	  param in name "methodName" explicit_type "String"
	  param in name "fileName" explicit_type "String"
	  param in name "lineNumber" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a stack trace element representing the specified execution
point.

@param declaringClass the fully qualified name of the class containing
       the execution point represented by the stack trace element
@param methodName the name of the method containing the execution point
       represented by the stack trace element
@param fileName the name of the file containing the execution point
        represented by the stack trace element, or <tt>null</tt> if
        this information is unavailable
@param lineNumber the line number of the source line containing the
        execution point represented by this stack trace element, or
        a negative number if this information is unavailable. A value
        of -2 indicates that the method containing the execution point
        is a native method
@throws NullPointerException if <tt>declaringClass</tt> or
        <tt>methodName</tt> is null
@since 1.5"
      end

      operation 7045147 "getFileName"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the source file containing the execution point
represented by this stack trace element.  Generally, this corresponds
to the <tt>SourceFile</tt> attribute of the relevant <tt>class</tt>
file (as per <i>The Java Virtual Machine Specification</i>, Section
4.7.7).  In some systems, the name may refer to some source code unit
other than a file, such as an entry in source repository.

@return the name of the file containing the execution point
        represented by this stack trace element, or <tt>null</tt> if
        this information is unavailable."
      end

      operation 7045275 "getLineNumber"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the line number of the source line containing the execution
point represented by this stack trace element.  Generally, this is
derived from the <tt>LineNumberTable</tt> attribute of the relevant
<tt>class</tt> file (as per <i>The Java Virtual Machine
Specification</i>, Section 4.7.8).

@return the line number of the source line containing the execution
        point represented by this stack trace element, or a negative
        number if this information is unavailable."
      end

      operation 7045403 "getClassName"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the fully qualified name of the class containing the
execution point represented by this stack trace element.

@return the fully qualified name of the <tt>Class</tt> containing
        the execution point represented by this stack trace element."
      end

      operation 7045531 "getMethodName"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the method containing the execution point
represented by this stack trace element.  If the execution point is
contained in an instance or class initializer, this method will return
the appropriate <i>special method name</i>, <tt>&lt;init&gt;</tt> or
<tt>&lt;clinit&gt;</tt>, as per Section 3.9 of <i>The Java Virtual
Machine Specification</i>.

@return the name of the method containing the execution point
        represented by this stack trace element."
      end

      operation 7045659 "isNativeMethod"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the method containing the execution point
represented by this stack trace element is a native method.

@return <tt>true</tt> if the method containing the execution point
        represented by this stack trace element is a native method."
      end

      operation 7045787 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of this stack trace element.  The
format of this string depends on the implementation, but the following
examples may be regarded as typical:
<ul>
<li>
  <tt>\"MyClass.mash(MyClass.java:9)\"</tt> - Here, <tt>\"MyClass\"</tt>
  is the <i>fully-qualified name</i> of the class containing the
  execution point represented by this stack trace element,
  <tt>\"mash\"</tt> is the name of the method containing the execution
  point, <tt>\"MyClass.java\"</tt> is the source file containing the
  execution point, and <tt>\"9\"</tt> is the line number of the source
  line containing the execution point.
<li>
  <tt>\"MyClass.mash(MyClass.java)\"</tt> - As above, but the line
  number is unavailable.
<li>
  <tt>\"MyClass.mash(Unknown Source)\"</tt> - As above, but neither
  the file name nor the line  number are available.
<li>
  <tt>\"MyClass.mash(Native Method)\"</tt> - As above, but neither
  the file name nor the line  number are available, and the method
  containing the execution point is known to be a native method.
</ul>
@see    Throwable#printStackTrace()"
      end

      operation 7045915 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the specified object is another
<tt>StackTraceElement</tt> instance representing the same execution
point as this instance.  Two stack trace elements <tt>a</tt> and
<tt>b</tt> are equal if and only if:
<pre>
    equals(a.getFileName(), b.getFileName()) &&
    a.getLineNumber() == b.getLineNumber()) &&
    equals(a.getClassName(), b.getClassName()) &&
    equals(a.getMethodName(), b.getMethodName())
</pre>
where <tt>equals</tt> is defined as:
<pre>
    static boolean equals(Object a, Object b) {
        return a==b || (a != null && a.equals(b));
    }
</pre>

@param  obj the object to be compared with this stack trace element.
@return true if the specified object is another
        <tt>StackTraceElement</tt> instance representing the same
        execution point as this instance."
      end

      operation 7046043 "eq"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param inout name "a" explicit_type "Object"
	  param inout name "b" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7046171 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hash code value for this stack trace element."
      end

      attribute 2738203 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  6992337162326171013L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 164507 "RuntimePermission"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class is for runtime permissions. A RuntimePermission
contains a name (also referred to as a \"target name\") but
no actions list; you either have the named permission
or you don't.

<P>
The target name is the name of the runtime permission (see below). The
naming convention follows the  hierarchical property naming convention.
Also, an asterisk
may appear at the end of the name, following a \".\", or by itself, to
signify a wildcard match. For example: \"loadLibrary.*\" or \"*\" is valid,
\"*loadLibrary\" or \"a*b\" is not valid.
<P>
The following table lists all the possible RuntimePermission target names,
and for each provides a description of what the permission allows
and a discussion of the risks of granting code the permission.
<P>

<table border=1 cellpadding=5 summary=\"permission target name, 
 what the target allows,and associated risks\">
<tr>
<th>Permission Target Name</th>
<th>What the Permission Allows</th>
<th>Risks of Allowing this Permission</th>
</tr>

<tr>
  <td>createClassLoader</td>
  <td>Creation of a class loader</td>
  <td>This is an extremely dangerous permission to grant.
Malicious applications that can instantiate their own class
loaders could then load their own rogue classes into the system.
These newly loaded classes could be placed into any protection
domain by the class loader, thereby automatically granting the
classes the permissions for that domain.</td>
</tr>

<tr>
  <td>getClassLoader</td>
  <td>Retrieval of a class loader (e.g., the class loader for the calling
class)</td>
  <td>This would grant an attacker permission to get the
class loader for a particular class. This is dangerous because
having access to a class's class loader allows the attacker to
load other classes available to that class loader. The attacker
would typically otherwise not have access to those classes.</td>
</tr>

<tr>
  <td>setContextClassLoader</td>
  <td>Setting of the context class loader used by a thread</td>
  <td>The context class loader is used by system code and extensions
when they need to lookup resources that might not exist in the system
class loader. Granting setContextClassLoader permission would allow
code to change which context class loader is used
for a particular thread, including system threads.</td>
</tr>

<tr>
  <td>enableContextClassLoaderOverride</td>
  <td>Subclass implementation of the thread context class loader methods</td>
  <td>The context class loader is used by system code and extensions
when they need to lookup resources that might not exist in the system
class loader. Granting enableContextClassLoaderOverride permission would allow
a subclass of Thread to override the methods that are used
to get or set the context class loader for a particular thread.</td>
</tr>

<tr>
  <td>setSecurityManager</td>
  <td>Setting of the security manager (possibly replacing an existing one)
</td>
  <td>The security manager is a class that allows 
applications to implement a security policy. Granting the setSecurityManager
permission would allow code to change which security manager is used by
installing a different, possibly less restrictive security manager,
thereby bypassing checks that would have been enforced by the original
security manager.</td>
</tr>

<tr>
  <td>createSecurityManager</td>
  <td>Creation of a new security manager</td>
  <td>This gives code access to protected, sensitive methods that may
disclose information about other classes or the execution stack.</td>
</tr>

<tr>
  <td>getenv.{variable name}</td>
  <td>Reading of the value of the specified environment variable</td>
  <td>This would allow code to read the value, or determine the
      existence, of a particular environment variable.  This is
      dangerous if the variable contains confidential data.</td>
</tr>

<tr>
  <td>exitVM</td>
  <td>Halting of the Java Virtual Machine</td>
  <td>This allows an attacker to mount a denial-of-service attack
by automatically forcing the virtual machine to halt.
Note: The \"exitVM\" permission is automatically granted to all code
loaded from the application class path, thus enabling applications
to terminate themselves.</td>
</tr>

<tr>
  <td>shutdownHooks</td>
  <td>Registration and cancellation of virtual-machine shutdown hooks</td>
  <td>This allows an attacker to register a malicious shutdown
hook that interferes with the clean shutdown of the virtual machine.</td>
</tr>

<tr>
  <td>setFactory</td>
  <td>Setting of the socket factory used by ServerSocket or Socket,
or of the stream handler factory used by URL</td>
  <td>This allows code to set the actual implementation
for the socket, server socket, stream handler, or RMI socket factory.
An attacker may set a faulty implementation which mangles the data
stream.</td>
</tr>

<tr>
  <td>setIO</td>
  <td>Setting of System.out, System.in, and System.err</td>
  <td>This allows changing the value of the standard system streams.
An attacker may change System.in to monitor and
steal user input, or may set System.err to a \"null\" OutputStream,
which would hide any error messages sent to System.err. </td>
</tr>

<tr>
  <td>modifyThread</td>
  <td>Modification of threads, e.g., via calls to Thread
<tt>interrupt</tt>, <tt>stop</tt>, <tt>suspend</tt>,
<tt>resume</tt>, <tt>setDaemon</tt>, <tt>setPriority</tt>,
<tt>setName</tt> and <tt>setUncaughtExceptionHandler</tt>
methods</td> 
<td>This allows an attacker to modify the behaviour of
any thread in the system.</td>
</tr>

<tr>
  <td>stopThread</td>
  <td>Stopping of threads via calls to the Thread <code>stop</code>
method</td>
  <td>This allows code to stop any thread in the system provided that it is
already granted permission to access that thread.
This poses as a threat, because that code may corrupt the system by
killing existing threads.</td>
</tr>

<tr>
  <td>modifyThreadGroup</td>
  <td>modification of thread groups, e.g., via calls to ThreadGroup
<code>destroy</code>, <code>getParent</code>, <code>resume</code>, 
<code>setDaemon</code>, <code>setMaxPriority</code>, <code>stop</code>, 
and <code>suspend</code> methods</td>
  <td>This allows an attacker to create thread groups and
set their run priority.</td>
</tr>

<tr>
  <td>getProtectionDomain</td>
  <td>Retrieval of the ProtectionDomain for a class</td>
  <td>This allows code to obtain policy information
for a particular code source. While obtaining policy information
does not compromise the security of the system, it does give
attackers additional information, such as local file names for
example, to better aim an attack.</td>
</tr>

<tr>
  <td>readFileDescriptor</td>
  <td>Reading of file descriptors</td>
  <td>This would allow code to read the particular file associated
      with the file descriptor read. This is dangerous if the file
      contains confidential data.</td>
</tr>

<tr>
  <td>writeFileDescriptor</td>
  <td>Writing to file descriptors</td>
  <td>This allows code to write to a particular file associated
      with the descriptor. This is dangerous because it may allow
      malicious code to plant viruses or at the very least, fill up
      your entire disk.</td>
</tr>

<tr>
  <td>loadLibrary.{library name}</td>
  <td>Dynamic linking of the specified library</td>
  <td>It is dangerous to allow an applet permission to load native code
libraries, because the Java security architecture is not designed to and
does not prevent malicious behavior at the level of native code.</td>
</tr>

<tr>
  <td>accessClassInPackage.{package name}</td>
  <td>Access to the specified package via a class loader's
<code>loadClass</code> method when that class loader calls
the SecurityManager <code>checkPackageAccess</code> method</td>
  <td>This gives code access to classes in packages
to which it normally does not have access. Malicious code
may use these classes to help in its attempt to compromise
security in the system.</td>
</tr>

<tr>
  <td>defineClassInPackage.{package name}</td>
  <td>Definition of classes in the specified package, via a class
loader's <code>defineClass</code> method when that class loader calls
the SecurityManager <code>checkPackageDefinition</code> method.</td>
  <td>This grants code permission to define a class
in a particular package. This is dangerous because malicious
code with this permission may define rogue classes in
trusted packages like <code>java.security</code> or <code>java.lang</code>,
for example.</td>
</tr>

<tr>
  <td>accessDeclaredMembers</td>
  <td>Access to the declared members of a class</td>
  <td>This grants code permission to query a class for its public,
protected, default (package) access, and private fields and/or
methods. Although the code would have
access to the private and protected field and method names, it would not
have access to the private/protected field data and would not be able
to invoke any private methods. Nevertheless, malicious code
may use this information to better aim an attack.
Additionally, it may invoke any public methods and/or access public fields
in the class.  This could be dangerous if
the code would normally not be able to invoke those methods and/or
access the fields  because
it can't cast the object to the class/interface with those methods
and fields.
</td>
</tr>
<tr>
  <td>queuePrintJob</td>
  <td>Initiation of a print job request</td>
  <td>This could print sensitive information to a printer,
or simply waste paper.</td>
</tr>

<tr>
  <td>getStackTrace</td>
  <td>Retrieval of the stack trace information of another thread.</td>
  <td>This allows retrieval of the stack trace information of 
another thread.  This might allow malicious code to monitor the 
execution of threads and discover vulnerabilities in applications.</td>
</tr>

<tr>
  <td>setDefaultUncaughtExceptionHandler</td>
  <td>Setting the default handler to be used when a thread
  terminates abruptly due to an uncaught exception</td>
  <td>This allows an attacker to register a malicious
  uncaught exception handler that could interfere with termination
  of a thread</td>
</tr>

<tr>
  <td>preferences</td>
  <td>Represents the permission required to get access to the
  java.util.prefs.Preferences implementations user or system root
  which in turn allows retrieval or update operations within the
  Preferences persistent backing store.) </td>
  <td>This permission allows the user to read from or write to the
  preferences backing store if the user running the code has 
  sufficient OS privileges to read/write to that backing store.
  The actual backing store may reside within a traditional filesystem
  directory or within a registry depending on the platform OS</td>
</tr>

</table>

@see java.security.BasicPermission
@see java.security.Permission
@see java.security.Permissions
@see java.security.PermissionCollection
@see java.lang.SecurityManager

@version 1.53 04/04/20

@author Marianne Mueller
@author Roland Schemers"
      classrelation 1787419 // <generalisation>
	relation 1787419 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1787419 // <generalisation>
	  b parent class_ref 285083 // BasicPermission
      end

      attribute 2734875 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  7399184964622342223L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7033499 "RuntimePermission"
	public explicit_return_type ""
	nparams 1
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new RuntimePermission with the specified name.
The name is the symbolic name of the RuntimePermission, such as
\"exit\", \"setFactory\", etc. An asterisk
may appear at the end of the name, following a \".\", or by itself, to
signify a wildcard match.

@param name the name of the RuntimePermission."
      end

      operation 7033627 "RuntimePermission"
	public explicit_return_type ""
	nparams 2
	  param in name "name" explicit_type "String"
	  param in name "actions" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new RuntimePermission object with the specified name.
The name is the symbolic name of the RuntimePermission, and the
actions String is currently unused and should be null.

@param name the name of the RuntimePermission.
@param actions should be null."
      end
    end

    class 164635 "Class"
      visibility public 
      nformals 3
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Instances of the class <code>Class</code> represent classes and
interfaces in a running Java application.  An enum is a kind of
class and an annotation is a kind of interface.  Every array also
belongs to a class that is reflected as a <code>Class</code> object
that is shared by all arrays with the same element type and number
of dimensions.  The primitive Java types (<code>boolean</code>,
<code>byte</code>, <code>char</code>, <code>short</code>,
<code>int</code>, <code>long</code>, <code>float</code>, and
<code>double</code>), and the keyword <code>void</code> are also
represented as <code>Class</code> objects.

<p> <code>Class</code> has no public constructor. Instead <code>Class</code>
objects are constructed automatically by the Java Virtual Machine as classes
are loaded and by calls to the <code>defineClass</code> method in the class
loader.

<p> The following example uses a <code>Class</code> object to print the
class name of an object:

<p> <blockquote><pre>
    void printClassName(Object obj) {
        System.out.println(\"The class of \" + obj +
                           \" is \" + obj.getClass().getName());
    }
</pre></blockquote>

<p> It is also possible to get the <code>Class</code> object for a named
type (or for void) using a class literal 
(JLS Section <A HREF=\"http://java.sun.com/docs/books/jls/second_edition/html/expressions.doc.html#251530\">15.8.2</A>). 
For example:

<p> <blockquote><pre>
    System.out.println(\"The name of class Foo is: \"+Foo.class.getName());
</pre></blockquote>

@author  unascribed
@version 1.135, 05/25/01
@see     java.lang.ClassLoader#defineClass(byte[], int, int)
@since   JDK1.0"
      classrelation 1773723 // <realization>
	relation 1773723 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1773723 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      classrelation 1773851 // <realization>
	relation 1773851 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1773851 // <realization>
	  b parent class_ref 910747 // GenericDeclaration
      end

      classrelation 1773979 // <realization>
	relation 1773979 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1773979 // <realization>
	  b parent class_ref 911003 // Type
      end

      classrelation 1774107 // <realization>
	relation 1774107 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1774107 // <realization>
	  b parent class_ref 911131 // AnnotatedElement
      end

      attribute 2723995 "ANNOTATION"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  0x00002000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2724123 "ENUM"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  0x00004000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2724251 "SYNTHETIC"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  0x00001000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 6960539 "registerNatives"
	class_operation private explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      extra_member 161435 "initialization"
	
	cpp "" ""
	java "  static {
        registerNatives();
    }"
	php ""
	python ""
	idl ""
      end

      operation 6960667 "Class"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor. Only the Java Virtual Machine creates Class
objects."
      end

      operation 6960795 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts the object to a string. The string representation is the
string \"class\" or \"interface\", followed by a space, and then by the
fully qualified name of the class in the format returned by
<code>getName</code>.  If this <code>Class</code> object represents a
primitive type, this method returns the name of the primitive type.  If
this <code>Class</code> object represents void this method returns
\"void\".

@return a string representation of this class object."
      end

      operation 6960923 "forName"
	class_operation public return_type class_ref 164635 // Class
	nparams 1
	  param in name "className" explicit_type "String"
	nexceptions 1
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>Class</code> object associated with the class or
interface with the given string name.  Invoking this method is
equivalent to:

<blockquote><pre>
 Class.forName(className, true, currentLoader)
</pre></blockquote>

where <code>currentLoader</code> denotes the defining class loader of
the current class.

<p> For example, the following code fragment returns the
runtime <code>Class</code> descriptor for the class named
<code>java.lang.Thread</code>:

<blockquote><pre>
  Class&nbsp;t&nbsp;= Class.forName(\"java.lang.Thread\")
</pre></blockquote>
<p>
A call to <tt>forName(\"X\")</tt> causes the class named 
<tt>X</tt> to be initialized.

@param      className   the fully qualified name of the desired class.
@return     the <code>Class</code> object for the class with the
            specified name.
@exception LinkageError if the linkage fails
@exception ExceptionInInitializerError if the initialization provoked
           by this method fails
@exception ClassNotFoundException if the class cannot be located"
      end

      operation 6961051 "forName"
	class_operation public return_type class_ref 164635 // Class
	nparams 3
	  param in name "name" explicit_type "String"
	  param inout name "initialize" explicit_type "boolean"
	  param inout name "loader" type class_ref 163611 // ClassLoader
	nexceptions 1
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>Class</code> object associated with the class or
interface with the given string name, using the given class loader.
Given the fully qualified name for a class or interface (in the same
format returned by <code>getName</code>) this method attempts to
locate, load, and link the class or interface.  The specified class
loader is used to load the class or interface.  If the parameter
<code>loader</code> is null, the class is loaded through the bootstrap
class loader.  The class is initialized only if the
<code>initialize</code> parameter is <code>true</code> and if it has
not been initialized earlier.

<p> If <code>name</code> denotes a primitive type or void, an attempt
will be made to locate a user-defined class in the unnamed package whose
name is <code>name</code>. Therefore, this method cannot be used to
obtain any of the <code>Class</code> objects representing primitive
types or void.

<p> If <code>name</code> denotes an array class, the component type of
the array class is loaded but not initialized.

<p> For example, in an instance method the expression:

<blockquote><pre>
 Class.forName(\"Foo\")
</pre></blockquote>

is equivalent to:

<blockquote><pre>
 Class.forName(\"Foo\", true, this.getClass().getClassLoader())
</pre></blockquote>

Note that this method throws errors related to loading, linking or
initializing as specified in Sections 12.2, 12.3 and 12.4 of <em>The
Java Language Specification</em>.
Note that this method does not check whether the requested class 
is accessible to its caller.

<p> If the <code>loader</code> is <code>null</code>, and a security
manager is present, and the caller's class loader is not null, then this
method calls the security manager's <code>checkPermission</code> method
with a <code>RuntimePermission(\"getClassLoader\")</code> permission to
ensure it's ok to access the bootstrap class loader.

@param name       fully qualified name of the desired class
@param initialize whether the class must be initialized
@param loader     class loader from which the class must be loaded
@return           class object representing the desired class

@exception LinkageError if the linkage fails
@exception ExceptionInInitializerError if the initialization provoked
           by this method fails
@exception ClassNotFoundException if the class cannot be located by
           the specified class loader

@see 	  java.lang.Class#forName(String) 
@see 	  java.lang.ClassLoader
@since 	  1.2"
      end

      operation 6961179 "forName0"
	class_operation private return_type class_ref 164635 // Class
	nparams 3
	  param in name "name" explicit_type "String"
	  param inout name "initialize" explicit_type "boolean"
	  param inout name "loader" type class_ref 163611 // ClassLoader
	nexceptions 1
	  exception class_ref 201883 // ClassNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Called after security checks have been made. "
      end

      operation 6961307 "newInstance"
	public explicit_return_type "T"
	nparams 0
	nexceptions 2
	  exception class_ref 220059 // InstantiationException
	  exception class_ref 306331 // IllegalAccessException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new instance of the class represented by this <tt>Class</tt>
object.  The class is instantiated as if by a <code>new</code>
expression with an empty argument list.  The class is initialized if it
has not already been initialized.

<p>Note that this method propagates any exception thrown by the
nullary constructor, including a checked exception.  Use of
this method effectively bypasses the compile-time exception
checking that would otherwise be performed by the compiler.
The {@link
java.lang.reflect.Constructor#newInstance(java.lang.Object...)
Constructor.newInstance} method avoids this problem by wrapping
any exception thrown by the constructor in a (checked) {@link
java.lang.reflect.InvocationTargetException}.

@return     a newly allocated instance of the class represented by this
            object.
@exception  IllegalAccessException  if the class or its nullary 
              constructor is not accessible.
@exception  InstantiationException 
              if this <code>Class</code> represents an abstract class,
              an interface, an array class, a primitive type, or void;
              or if the class has no nullary constructor;
              or if the instantiation fails for some other reason.
@exception  ExceptionInInitializerError if the initialization
              provoked by this method fails.
@exception  SecurityException
            If a security manager, <i>s</i>, is present and any of the
            following conditions is met:

            <ul>

            <li> invocation of 
            <tt>{@link SecurityManager#checkMemberAccess
            s.checkMemberAccess(this, Member.PUBLIC)}</tt> denies
            creation of new instances of this class

            <li> the caller's class loader is not the same as or an
            ancestor of the class loader for the current class and
            invocation of <tt>{@link SecurityManager#checkPackageAccess
            s.checkPackageAccess()}</tt> denies access to the package
            of this class

            </ul>
"
      end

      operation 6961435 "newInstance0"
	private explicit_return_type "T"
	nparams 0
	nexceptions 2
	  exception class_ref 220059 // InstantiationException
	  exception class_ref 306331 // IllegalAccessException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 1774235 // cachedConstructor (<unidirectional association>)
	relation 1774235 --->
	  a role_name "cachedConstructor" volatile private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<T> ${name}${value};
"
	    classrelation_ref 1774235 // cachedConstructor (<unidirectional association>)
	  b parent class_ref 218395 // Constructor
      end

      classrelation 1774363 // newInstanceCallerCache (<unidirectional association>)
	relation 1774363 --->
	  a role_name "newInstanceCallerCache" volatile private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1774363 // newInstanceCallerCache (<unidirectional association>)
	  b parent class_ref 164635 // Class
      end

      operation 6961563 "isInstance"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if the specified <code>Object</code> is assignment-compatible
with the object represented by this <code>Class</code>.  This method is
the dynamic equivalent of the Java language <code>instanceof</code>
operator. The method returns <code>true</code> if the specified
<code>Object</code> argument is non-null and can be cast to the
reference type represented by this <code>Class</code> object without
raising a <code>ClassCastException.</code> It returns <code>false</code>
otherwise.

<p> Specifically, if this <code>Class</code> object represents a
declared class, this method returns <code>true</code> if the specified
<code>Object</code> argument is an instance of the represented class (or
of any of its subclasses); it returns <code>false</code> otherwise. If
this <code>Class</code> object represents an array class, this method
returns <code>true</code> if the specified <code>Object</code> argument
can be converted to an object of the array class by an identity
conversion or by a widening reference conversion; it returns
<code>false</code> otherwise. If this <code>Class</code> object
represents an interface, this method returns <code>true</code> if the
class or any superclass of the specified <code>Object</code> argument
implements this interface; it returns <code>false</code> otherwise. If
this <code>Class</code> object represents a primitive type, this method
returns <code>false</code>.

@param   obj the object to check
@return  true if <code>obj</code> is an instance of this class

@since JDK1.1"
      end

      operation 6961691 "isAssignableFrom"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "cls" type class_ref 164635 // Class
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if the class or interface represented by this
<code>Class</code> object is either the same as, or is a superclass or
superinterface of, the class or interface represented by the specified
<code>Class</code> parameter. It returns <code>true</code> if so;
otherwise it returns <code>false</code>. If this <code>Class</code>
object represents a primitive type, this method returns
<code>true</code> if the specified <code>Class</code> parameter is
exactly this <code>Class</code> object; otherwise it returns
<code>false</code>.

<p> Specifically, this method tests whether the type represented by the
specified <code>Class</code> parameter can be converted to the type
represented by this <code>Class</code> object via an identity conversion
or via a widening reference conversion. See <em>The Java Language
Specification</em>, sections 5.1.1 and 5.1.4 , for details.

@param cls the <code>Class</code> object to be checked
@return the <code>boolean</code> value indicating whether objects of the
type <code>cls</code> can be assigned to objects of this class
@exception NullPointerException if the specified Class parameter is
           null.
@since JDK1.1"
      end

      operation 6961819 "isInterface"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if the specified <code>Class</code> object represents an
interface type.

@return  <code>true</code> if this object represents an interface;
         <code>false</code> otherwise."
      end

      operation 6961947 "isArray"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if this <code>Class</code> object represents an array class.

@return  <code>true</code> if this object represents an array class;
         <code>false</code> otherwise.
@since   JDK1.1"
      end

      operation 6962075 "isPrimitive"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if the specified <code>Class</code> object represents a
primitive type.

<p> There are nine predefined <code>Class</code> objects to represent
the eight primitive types and void.  These are created by the Java
Virtual Machine, and have the same names as the primitive types that
they represent, namely <code>boolean</code>, <code>byte</code>,
<code>char</code>, <code>short</code>, <code>int</code>,
<code>long</code>, <code>float</code>, and <code>double</code>.

<p> These objects may only be accessed via the following public static
final variables, and are the only <code>Class</code> objects for which
this method returns <code>true</code>.

@return true if and only if this class represents a primitive type

@see     java.lang.Boolean#TYPE
@see     java.lang.Character#TYPE
@see     java.lang.Byte#TYPE
@see     java.lang.Short#TYPE
@see     java.lang.Integer#TYPE
@see     java.lang.Long#TYPE
@see     java.lang.Float#TYPE
@see     java.lang.Double#TYPE
@see     java.lang.Void#TYPE
@since JDK1.1"
      end

      operation 6962203 "isAnnotation"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if this <tt>Class</tt> object represents an annotation
type.  Note that if this method returns true, {@link #isInterface()}
would also return true, as all annotation types are also interfaces.

@return <tt>true</tt> if this class object represents an annotation
     type; <tt>false</tt> otherwise
@since 1.5"
      end

      operation 6962331 "isSynthetic"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this class is a synthetic class;
returns <tt>false</tt> otherwise.
@return <tt>true</tt> if and only if this class is a synthetic class as
        defined by the Java Language Specification.
@since 1.5"
      end

      operation 6962459 "getName"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the  name of the entity (class, interface, array class,
primitive type, or void) represented by this <tt>Class</tt> object,
as a <tt>String</tt>.

<p> If this class object represents a reference type that is not an
array type then the binary name of the class is returned, as specified
by the Java Language Specification, Second Edition.

<p> If this class object represents a primitive type or void, then the
name returned is a <tt>String</tt> equal to the Java language
keyword corresponding to the primitive type or void.

<p> If this class object represents a class of arrays, then the internal
form of the name consists of the name of the element type preceded by
one or more '<tt>[</tt>' characters representing the depth of the array
nesting.  The encoding of element type names is as follows:

<blockquote><table summary=\"Element types and encodings\">
<tr><th> Element Type <th> Encoding
<tr><td> boolean      <td align=center> Z
<tr><td> byte         <td align=center> B
<tr><td> char         <td align=center> C
<tr><td> class or interface  <td align=center> L<i>classname;</i>
<tr><td> double       <td align=center> D
<tr><td> float        <td align=center> F
<tr><td> int          <td align=center> I
<tr><td> long         <td align=center> J
<tr><td> short        <td align=center> S
</table></blockquote>

<p> The class or interface name <i>classname</i> is the binary name of
the class specified above.

<p> Examples:
<blockquote><pre>
String.class.getName()
    returns \"java.lang.String\"
byte.class.getName()
    returns \"byte\"
(new Object[3]).getClass().getName()
    returns \"[Ljava.lang.Object;\"
(new int[3][4][5][6][7][8][9]).getClass().getName()
    returns \"[[[[[[[I\"
</pre></blockquote>

@return  the name of the class or interface
         represented by this object."
      end

      attribute 2724379 "name"
	private explicit_type "String"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " cache the name to reduce the number of calls into the VM"
      end

      operation 6962587 "getName0"
	private explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6962715 "getClassLoader"
	public return_type class_ref 163611 // ClassLoader
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the class loader for the class.  Some implementations may use
null to represent the bootstrap class loader. This method will return
null in such implementations if this class was loaded by the bootstrap
class loader.

<p> If a security manager is present, and the caller's class loader is
not null and the caller's class loader is not the same as or an ancestor of
the class loader for the class whose class loader is requested, then
this method calls the security manager's <code>checkPermission</code> 
method with a <code>RuntimePermission(\"getClassLoader\")</code> 
permission to ensure it's ok to access the class loader for the class.

<p>If this object
represents a primitive type or void, null is returned.

@return  the class loader that loaded the class or interface
         represented by this object.
@throws SecurityException
   if a security manager exists and its 
   <code>checkPermission</code> method denies
   access to the class loader for the class.
@see java.lang.ClassLoader
@see SecurityManager#checkPermission
@see java.lang.RuntimePermission"
      end

      operation 6962843 "getClassLoader0"
	package return_type class_ref 163611 // ClassLoader
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Package-private to allow ClassLoader access"
      end

      operation 6962971 "getTypeParameters"
	public return_type class_ref 910875 // TypeVariable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Class<T>>[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of <tt>TypeVariable</tt> objects that represent the
type variables declared by the generic declaration represented by this
<tt>GenericDeclaration</tt> object, in declaration order.  Returns an
array of length 0 if the underlying generic declaration declares no type
variables.

@return an array of <tt>TypeVariable</tt> objects that represent
    the type variables declared by this generic declaration
@throws GenericSignatureFormatError if the generic
    signature of this generic declaration does not conform to
    the format specified in the Java Virtual Machine Specification,
    3rd edition
@since 1.5"
      end

      operation 6963099 "getSuperclass"
	public return_type class_ref 164635 // Class
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type}<? super T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>Class</code> representing the superclass of the entity
(class, interface, primitive type or void) represented by this
<code>Class</code>.  If this <code>Class</code> represents either the
<code>Object</code> class, an interface, a primitive type, or void, then
null is returned.  If this object represents an array class then the
<code>Class</code> object representing the <code>Object</code> class is
returned.

@return the superclass of the class represented by this object."
      end

      operation 6963227 "getGenericSuperclass"
	public return_type class_ref 911003 // Type
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <tt>Type</tt> representing the direct superclass of
the entity (class, interface, primitive type or void) represented by
this <tt>Class</tt>.

<p>If the superclass is a parameterized type, the <tt>Type</tt>
object returned must accurately reflect the actual type
parameters used in the source code. The parameterized type
representing the superclass is created if it had not been
created before. See the declaration of {@link
java.lang.reflect.ParameterizedType ParameterizedType} for the
semantics of the creation process for parameterized types.  If
this <tt>Class</tt> represents either the <tt>Object</tt>
class, an interface, a primitive type, or void, then null is
returned.  If this object represents an array class then the
<tt>Class</tt> object representing the <tt>Object</tt> class is
returned.

@throws GenericSignatureFormatError if the generic
    class signature does not conform to the format specified in the
    Java Virtual Machine Specification, 3rd edition
@throws TypeNotPresentException if the generic superclass
    refers to a non-existent type declaration
@throws MalformedParameterizedTypeException if the 
    generic superclass refers to a parameterized type that cannot be
    instantiated  for any reason
@return the superclass of the class represented by this object
@since 1.5"
      end

      operation 6963355 "getPackage"
	public return_type class_ref 528539 // Package
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the package for this class.  The class loader of this class is used
to find the package.  If the class was loaded by the bootstrap class
loader the set of packages loaded from CLASSPATH is searched to find the
package of the class. Null is returned if no package object was created
by the class loader of this class.

<p> Packages have attributes for versions and specifications only if the
information was defined in the manifests that accompany the classes, and
if the class loader created the package instance with the attributes
from the manifest.

@return the package of the class, or null if no package
        information is available from the archive or codebase."
      end

      operation 6963483 "getInterfaces"
	public return_type class_ref 164635 // Class
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines the interfaces implemented by the class or interface
represented by this object.

<p> If this object represents a class, the return value is an array
containing objects representing all interfaces implemented by the
class. The order of the interface objects in the array corresponds to
the order of the interface names in the <code>implements</code> clause
of the declaration of the class represented by this object. For 
example, given the declaration:
<blockquote><pre>
class Shimmer implements FloorWax, DessertTopping { ... }
</pre></blockquote>
suppose the value of <code>s</code> is an instance of 
<code>Shimmer</code>; the value of the expression:
<blockquote><pre>
s.getClass().getInterfaces()[0]
</pre></blockquote>
is the <code>Class</code> object that represents interface 
<code>FloorWax</code>; and the value of:
<blockquote><pre>
s.getClass().getInterfaces()[1]
</pre></blockquote>
is the <code>Class</code> object that represents interface 
<code>DessertTopping</code>.

<p> If this object represents an interface, the array contains objects
representing all interfaces extended by the interface. The order of the
interface objects in the array corresponds to the order of the interface
names in the <code>extends</code> clause of the declaration of the
interface represented by this object.

<p> If this object represents a class or interface that implements no
interfaces, the method returns an array of length 0.

<p> If this object represents a primitive type or void, the method
returns an array of length 0.

@return an array of interfaces implemented by this class."
      end

      operation 6963611 "getGenericInterfaces"
	public return_type class_ref 911003 // Type
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <tt>Type</tt>s representing the interfaces 
directly implemented by the class or interface represented by
this object.

<p>If a superinterface is a parameterized type, the
<tt>Type</tt> object returned for it must accurately reflect
the actual type parameters used in the source code. The
parameterized type representing each superinterface is created
if it had not been created before. See the declaration of
{@link java.lang.reflect.ParameterizedType ParameterizedType}
for the semantics of the creation process for parameterized
types.

<p> If this object represents a class, the return value is an
array containing objects representing all interfaces
implemented by the class. The order of the interface objects in
the array corresponds to the order of the interface names in
the <tt>implements</tt> clause of the declaration of the class
represented by this object.  In the case of an array class, the
interfaces <tt>Cloneable</tt> and <tt>Serializable</tt> are
returned in that order.

<p>If this object represents an interface, the array contains
objects representing all interfaces directly extended by the
interface.  The order of the interface objects in the array
corresponds to the order of the interface names in the
<tt>extends</tt> clause of the declaration of the interface
represented by this object.

<p>If this object represents a class or interface that
implements no interfaces, the method returns an array of length
0.

<p>If this object represents a primitive type or void, the
method returns an array of length 0.

@throws GenericSignatureFormatError
    if the generic class signature does not conform to the format
    specified in the Java Virtual Machine Specification, 3rd edition
@throws TypeNotPresentException if any of the generic
    superinterfaces refers to a non-existent type declaration
@throws MalformedParameterizedTypeException if any of the 
    generic superinterfaces refer to a parameterized type that cannot
    be instantiated  for any reason
@return an array of interfaces implemented by this class
@since 1.5"
      end

      operation 6963739 "getComponentType"
	public return_type class_ref 164635 // Class
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>Class</code> representing the component type of an
array.  If this class does not represent an array class this method
returns null.

@return the <code>Class</code> representing the component type of this
class if this class is an array
@see     java.lang.reflect.Array
@since JDK1.1"
      end

      operation 6963867 "getModifiers"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Java language modifiers for this class or interface, encoded
in an integer. The modifiers consist of the Java Virtual Machine's
constants for <code>public</code>, <code>protected</code>,
<code>private</code>, <code>final</code>, <code>static</code>,
<code>abstract</code> and <code>interface</code>; they should be decoded
using the methods of class <code>Modifier</code>.

<p> If the underlying class is an array class, then its
<code>public</code>, <code>private</code> and <code>protected</code>
modifiers are the same as those of its component type.  If this
<code>Class</code> represents a primitive type or void, its
<code>public</code> modifier is always <code>true</code>, and its
<code>protected</code> and <code>private</code> modifiers are always
<code>false</code>. If this object represents an array class, a
primitive type or void, then its <code>final</code> modifier is always
<code>true</code> and its interface modifier is always
<code>false</code>. The values of its other modifiers are not determined
by this specification.

<p> The modifier encodings are defined in <em>The Java Virtual Machine
Specification</em>, table 4.1.

@return the <code>int</code> representing the modifiers for this class
@see     java.lang.reflect.Modifier
@since JDK1.1"
      end

      operation 6963995 "getSigners"
	public explicit_return_type "Object"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the signers of this class.

@return  the signers of this class, or null if there are no signers.  In
		particular, this method returns null if this object represents
		a primitive type or void.
@since 	JDK1.1"
      end

      operation 6964123 "setSigners"
	package explicit_return_type "void"
	nparams 1
	  param inout name "signers" explicit_type "Object"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the signers of this class."
      end

      operation 6964251 "getEnclosingMethod"
	public return_type class_ref 170651 // Method
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If this <tt>Class</tt> object represents a local or anonymous
class within a method, returns a {@link
java.lang.reflect.Method Method} object representing the
immediately enclosing method of the underlying class. Returns
<tt>null</tt> otherwise.

In particular, this method returns <tt>null</tt> if the underlying
class is a local or anonymous class immediately enclosed by a type
declaration, instance initializer or static initializer.

@return the immediately enclosing method of the underlying class, if
    that class is a local or anonymous class; otherwise <tt>null</tt>.
@since 1.5"
      end

      operation 6964379 "getEnclosingMethod0"
	private explicit_return_type "Object"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 911387 "EnclosingMethodInfo"
	visibility private 
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1774491 // enclosingClass (<unidirectional association>)
	  relation 1774491 --->
	    a role_name "enclosingClass" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	      classrelation_ref 1774491 // enclosingClass (<unidirectional association>)
	    b parent class_ref 164635 // Class
	end

	attribute 2724507 "name"
	  private explicit_type "String"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2724635 "descriptor"
	  private explicit_type "String"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 6964635 "EnclosingMethodInfo"
	  private explicit_return_type ""
	  nparams 1
	    param inout name "enclosingInfo" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6964763 "isPartial"
	  package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6964891 "isConstructor"
	  package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6965019 "isMethod"
	  package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6965147 "getEnclosingClass"
	  package return_type class_ref 164635 // Class
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6965275 "getName"
	  package explicit_return_type "String"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6965403 "getDescriptor"
	  package explicit_return_type "String"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 6964507 "getEnclosingMethodInfo"
	private return_type class_ref 911387 // EnclosingMethodInfo
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6965531 "toClass"
	class_operation private return_type class_ref 164635 // Class
	nparams 1
	  param inout name "o" type class_ref 911003 // Type
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6965659 "getEnclosingConstructor"
	public return_type class_ref 218395 // Constructor
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If this <tt>Class</tt> object represents a local or anonymous
class within a constructor, returns a {@link
java.lang.reflect.Constructor Constructor} object representing
the immediately enclosing constructor of the underlying
class. Returns <tt>null</tt> otherwise.  In particular, this
method returns <tt>null</tt> if the underlying class is a local
or anonymous class immediately enclosed by a type declaration,
instance initializer or static initializer.

@return the immediately enclosing constructor of the underlying class, if
    that class is a local or anonymous class; otherwise <tt>null</tt>.
@since 1.5"
      end

      operation 6965787 "getDeclaringClass"
	public return_type class_ref 164635 // Class
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If the class or interface represented by this <code>Class</code> object
is a member of another class, returns the <code>Class</code> object
representing the class in which it was declared.  This method returns
null if this class or interface is not a member of any other class.  If
this <code>Class</code> object represents an array class, a primitive
type, or void,then this method returns null.

@return the declaring class for this class
@since JDK1.1"
      end

      operation 6965915 "getEnclosingClass"
	public return_type class_ref 164635 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the immediately enclosing class of the underlying
class.  If the underlying class is a top level class this
method returns <tt>null</tt>.
@return the immediately enclosing class of the underlying class
@since 1.5"
      end

      operation 6966043 "getSimpleName"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the simple name of the underlying class as given in the
source code. Returns an empty string if the underlying class is
anonymous.

<p>The simple name of an array is the simple name of the
component type with \"[]\" appended.  In particular the simple
name of an array whose component type is anonymous is \"[]\".

@return the simple name of the underlying class
@since 1.5"
      end

      operation 6966171 "isAsciiDigit"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param in name "c" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Character.isDigit answers <tt>true</tt> to some non-ascii
digits.  This one does not."
      end

      operation 6966299 "getCanonicalName"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the canonical name of the the underlying class as
defined by the Java Language Specification.  Returns null if
the underlying class does not have a canonical name (i.e., if
it is a local or anonymous class or an array whose component
type does not have a canonical name).
@return the canonical name of the underlying class if it exists, and
<tt>null</tt> otherwise.
@since 1.5"
      end

      operation 6966427 "isAnonymousClass"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if and only if the underlying class
is an anonymous class.

@return <tt>true</tt> if and only if this class is an anonymous class.
@since 1.5"
      end

      operation 6966555 "isLocalClass"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if and only if the underlying class
is a local class.

@return <tt>true</tt> if and only if this class is a local class.
@since 1.5"
      end

      operation 6966683 "isMemberClass"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if and only if the underlying class
is a member class.

@return <tt>true</tt> if and only if this class is a member class.
@since 1.5"
      end

      operation 6966811 "getSimpleBinaryName"
	private explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the \"simple binary name\" of the underlying class, i.e.,
the binary name without the leading enclosing class name.
Returns <tt>null</tt> if the underlying class is a top level
class."
      end

      operation 6966939 "isLocalOrAnonymousClass"
	private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this is a local class or an anonymous
class.  Returns <tt>false</tt> otherwise."
      end

      operation 6967067 "getClasses"
	public return_type class_ref 164635 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing <code>Class</code> objects representing all
the public classes and interfaces that are members of the class
represented by this <code>Class</code> object.  This includes public
class and interface members inherited from superclasses and public class
and interface members declared by the class.  This method returns an
array of length 0 if this <code>Class</code> object has no public member
classes or interfaces.  This method also returns an array of length 0 if
this <code>Class</code> object represents a primitive type, an array
class, or void.

@return the array of <code>Class</code> objects representing the public
members of this class
@exception  SecurityException
            If a security manager, <i>s</i>, is present and any of the
            following conditions is met:

            <ul>

            <li> invocation of 
            <tt>{@link SecurityManager#checkMemberAccess
            s.checkMemberAccess(this, Member.PUBLIC)}</tt> method
            denies access to the classes within this class

            <li> the caller's class loader is not the same as or an
            ancestor of the class loader for the current class and
            invocation of <tt>{@link SecurityManager#checkPackageAccess
            s.checkPackageAccess()}</tt> denies access to the package 
            of this class

            </ul>

@since JDK1.1"
      end

      operation 6967195 "getFields"
	public return_type class_ref 220443 // Field
	nparams 0
	nexceptions 1
	  exception class_ref 203419 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing <code>Field</code> objects reflecting all
the accessible public fields of the class or interface represented by
this <code>Class</code> object.  The elements in the array returned are
not sorted and are not in any particular order.  This method returns an
array of length 0 if the class or interface has no accessible public
fields, or if it represents an array class, a primitive type, or void.

<p> Specifically, if this <code>Class</code> object represents a class,
this method returns the public fields of this class and of all its
superclasses.  If this <code>Class</code> object represents an
interface, this method returns the fields of this interface and of all
its superinterfaces.

<p> The implicit length field for array class is not reflected by this
method. User code should use the methods of class <code>Array</code> to
manipulate arrays.

<p> See <em>The Java Language Specification</em>, sections 8.2 and 8.3.

@return the array of <code>Field</code> objects representing the
public fields
@exception  SecurityException
            If a security manager, <i>s</i>, is present and any of the
            following conditions is met:

            <ul>

            <li> invocation of 
            <tt>{@link SecurityManager#checkMemberAccess
            s.checkMemberAccess(this, Member.PUBLIC)}</tt> denies
            access to the fields within this class

            <li> the caller's class loader is not the same as or an
            ancestor of the class loader for the current class and
            invocation of <tt>{@link SecurityManager#checkPackageAccess
            s.checkPackageAccess()}</tt> denies access to the package
            of this class

            </ul>

@since JDK1.1"
      end

      operation 6967323 "getMethods"
	public return_type class_ref 170651 // Method
	nparams 0
	nexceptions 1
	  exception class_ref 203419 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing <code>Method</code> objects reflecting all
the public <em>member</em> methods of the class or interface represented
by this <code>Class</code> object, including those declared by the class
or interface and those inherited from superclasses and
superinterfaces.  Array classes return all the (public) member methods 
inherited from the <code>Object</code> class.  The elements in the array 
returned are not sorted and are not in any particular order.  This 
method returns an array of length 0 if this <code>Class</code> object
represents a class or interface that has no public member methods, or if
this <code>Class</code> object represents a primitive type or void.

<p> The class initialization method <code>&lt;clinit&gt;</code> is not
included in the returned array. If the class declares multiple public
member methods with the same parameter types, they are all included in
the returned array.

<p> See <em>The Java Language Specification</em>, sections 8.2 and 8.4.

@return the array of <code>Method</code> objects representing the
public methods of this class
@exception  SecurityException
            If a security manager, <i>s</i>, is present and any of the
            following conditions is met:

            <ul>

            <li> invocation of 
            <tt>{@link SecurityManager#checkMemberAccess
            s.checkMemberAccess(this, Member.PUBLIC)}</tt> denies
            access to the methods within this class

            <li> the caller's class loader is not the same as or an
            ancestor of the class loader for the current class and
            invocation of <tt>{@link SecurityManager#checkPackageAccess
            s.checkPackageAccess()}</tt> denies access to the package
            of this class

            </ul>

@since JDK1.1"
      end

      operation 6967451 "getConstructors"
	public return_type class_ref 218395 // Constructor
	nparams 0
	nexceptions 1
	  exception class_ref 203419 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing <code>Constructor</code> objects reflecting
all the public constructors of the class represented by this
<code>Class</code> object.  An array of length 0 is returned if the
class has no public constructors, or if the class is an array class, or
if the class reflects a primitive type or void.

@return the array containing <code>Method</code> objects for all the
declared public constructors of this class matches the specified
<code>parameterTypes</code>
@exception  SecurityException
            If a security manager, <i>s</i>, is present and any of the
            following conditions is met:

            <ul>

            <li> invocation of 
            <tt>{@link SecurityManager#checkMemberAccess
            s.checkMemberAccess(this, Member.PUBLIC)}</tt> denies
            access to the constructors within this class

            <li> the caller's class loader is not the same as or an
            ancestor of the class loader for the current class and
            invocation of <tt>{@link SecurityManager#checkPackageAccess
            s.checkPackageAccess()}</tt> denies access to the package
            of this class

            </ul>

@since JDK1.1"
      end

      operation 6967579 "getField"
	public return_type class_ref 220443 // Field
	nparams 1
	  param in name "name" explicit_type "String"
	nexceptions 2
	  exception class_ref 219931 // NoSuchFieldException
	  exception class_ref 203419 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>Field</code> object that reflects the specified public
member field of the class or interface represented by this
<code>Class</code> object. The <code>name</code> parameter is a
<code>String</code> specifying the simple name of the desired field.

<p> The field to be reflected is determined by the algorithm that
follows.  Let C be the class represented by this object:
<OL>
<LI> If C declares a public field with the name specified, that is the
     field to be reflected.</LI>
<LI> If no field was found in step 1 above, this algorithm is applied
	    recursively to each direct superinterface of C. The direct
	    superinterfaces are searched in the order they were declared.</LI>
<LI> If no field was found in steps 1 and 2 above, and C has a
     superclass S, then this algorithm is invoked recursively upon S.
     If C has no superclass, then a <code>NoSuchFieldException</code>
     is thrown.</LI>
</OL>

<p> See <em>The Java Language Specification</em>, sections 8.2 and 8.3.

@param name the field name
@return  the <code>Field</code> object of this class specified by 
<code>name</code>
@exception NoSuchFieldException if a field with the specified name is
             not found.
@exception NullPointerException if <code>name</code> is <code>null</code>
@exception  SecurityException
            If a security manager, <i>s</i>, is present and any of the
            following conditions is met:

            <ul>

            <li> invocation of 
            <tt>{@link SecurityManager#checkMemberAccess
            s.checkMemberAccess(this, Member.PUBLIC)}</tt> denies
            access to the field

            <li> the caller's class loader is not the same as or an
            ancestor of the class loader for the current class and
            invocation of <tt>{@link SecurityManager#checkPackageAccess
            s.checkPackageAccess()}</tt> denies access to the package
            of this class

            </ul>

@since JDK1.1"
      end

      operation 6967707 "getMethod"
	public return_type class_ref 170651 // Method
	nparams 2
	  param in name "name" explicit_type "String"
	  param inout name "parameterTypes" type class_ref 164635 // Class
	nexceptions 2
	  exception class_ref 791451 // NoSuchMethodException
	  exception class_ref 203419 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ... ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>Method</code> object that reflects the specified public
member method of the class or interface represented by this
<code>Class</code> object. The <code>name</code> parameter is a
<code>String</code> specifying the simple name the desired method. The
<code>parameterTypes</code> parameter is an array of <code>Class</code>
objects that identify the method's formal parameter types, in declared
order. If <code>parameterTypes</code> is <code>null</code>, it is 
treated as if it were an empty array.

<p> If the <code>name</code> is \"&lt;init&gt;\"or \"&lt;clinit&gt;\" a
<code>NoSuchMethodException</code> is raised. Otherwise, the method to
be reflected is determined by the algorithm that follows.  Let C be the
class represented by this object:
<OL>
<LI> C is searched for any <I>matching methods</I>. If no matching
	    method is found, the algorithm of step 1 is invoked recursively on
	    the superclass of C.</LI>
<LI> If no method was found in step 1 above, the superinterfaces of C
     are searched for a matching method. If any such method is found, it
     is reflected.</LI>
</OL>

To find a matching method in a class C:&nbsp; If C declares exactly one
public method with the specified name and exactly the same formal
parameter types, that is the method reflected. If more than one such
method is found in C, and one of these methods has a return type that is
more specific than any of the others, that method is reflected;
otherwise one of the methods is chosen arbitrarily.

<p> See <em>The Java Language Specification</em>, sections 8.2 and 8.4.

@param name the name of the method
@param parameterTypes the list of parameters
@return the <code>Method</code> object that matches the specified
<code>name</code> and <code>parameterTypes</code>
@exception NoSuchMethodException if a matching method is not found
           or if the name is \"&lt;init&gt;\"or \"&lt;clinit&gt;\".
@exception NullPointerException if <code>name</code> is <code>null</code>
@exception  SecurityException
            If a security manager, <i>s</i>, is present and any of the
            following conditions is met:

            <ul>

            <li> invocation of 
            <tt>{@link SecurityManager#checkMemberAccess
            s.checkMemberAccess(this, Member.PUBLIC)}</tt> denies
            access to the method

            <li> the caller's class loader is not the same as or an
            ancestor of the class loader for the current class and
            invocation of <tt>{@link SecurityManager#checkPackageAccess
            s.checkPackageAccess()}</tt> denies access to the package
            of this class

            </ul>

@since JDK1.1"
      end

      operation 6967835 "getConstructor"
	public return_type class_ref 218395 // Constructor
	nparams 1
	  param inout name "parameterTypes" type class_ref 164635 // Class
	nexceptions 2
	  exception class_ref 791451 // NoSuchMethodException
	  exception class_ref 203419 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${t0} ... ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>Constructor</code> object that reflects the specified
public constructor of the class represented by this <code>Class</code>
object. The <code>parameterTypes</code> parameter is an array of
<code>Class</code> objects that identify the constructor's formal
parameter types, in declared order.

<p> The constructor to reflect is the public constructor of the class
represented by this <code>Class</code> object whose formal parameter
types match those specified by <code>parameterTypes</code>.

@param parameterTypes the parameter array
@return the <code>Method</code> object of the public constructor that
matches the specified <code>parameterTypes</code>
@exception NoSuchMethodException if a matching method is not found.
@exception  SecurityException
            If a security manager, <i>s</i>, is present and any of the
            following conditions is met:

            <ul>

            <li> invocation of 
            <tt>{@link SecurityManager#checkMemberAccess
            s.checkMemberAccess(this, Member.PUBLIC)}</tt> denies
            access to the constructor

            <li> the caller's class loader is not the same as or an
            ancestor of the class loader for the current class and
            invocation of <tt>{@link SecurityManager#checkPackageAccess
            s.checkPackageAccess()}</tt> denies access to the package
            of this class

            </ul>

@since JDK1.1"
      end

      operation 6967963 "getDeclaredClasses"
	public return_type class_ref 164635 // Class
	nparams 0
	nexceptions 1
	  exception class_ref 203419 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of <code>Class</code> objects reflecting all the
classes and interfaces declared as members of the class represented by
this <code>Class</code> object. This includes public, protected, default
(package) access, and private classes and interfaces declared by the
class, but excludes inherited classes and interfaces.  This method
returns an array of length 0 if the class declares no classes or
interfaces as members, or if this <code>Class</code> object represents a
primitive type, an array class, or void.

@return the array of <code>Class</code> objects representing all the 
declared members of this class
@exception  SecurityException
            If a security manager, <i>s</i>, is present and any of the
            following conditions is met:

            <ul>

            <li> invocation of 
            <tt>{@link SecurityManager#checkMemberAccess
            s.checkMemberAccess(this, Member.DECLARED)}</tt> denies
            access to the declared classes within this class

            <li> the caller's class loader is not the same as or an
            ancestor of the class loader for the current class and
            invocation of <tt>{@link SecurityManager#checkPackageAccess
            s.checkPackageAccess()}</tt> denies access to the package
            of this class

            </ul>

@since JDK1.1"
      end

      operation 6968091 "getDeclaredFields"
	public return_type class_ref 220443 // Field
	nparams 0
	nexceptions 1
	  exception class_ref 203419 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of <code>Field</code> objects reflecting all the fields
declared by the class or interface represented by this
<code>Class</code> object. This includes public, protected, default
(package) access, and private fields, but excludes inherited fields.
The elements in the array returned are not sorted and are not in any
particular order.  This method returns an array of length 0 if the class
or interface declares no fields, or if this <code>Class</code> object
represents a primitive type, an array class, or void.

<p> See <em>The Java Language Specification</em>, sections 8.2 and 8.3.

@return    the array of <code>Field</code> objects representing all the
declared fields of this class
@exception  SecurityException
            If a security manager, <i>s</i>, is present and any of the
            following conditions is met:

            <ul>

            <li> invocation of 
            <tt>{@link SecurityManager#checkMemberAccess
            s.checkMemberAccess(this, Member.DECLARED)}</tt> denies
            access to the declared fields within this class

            <li> the caller's class loader is not the same as or an
            ancestor of the class loader for the current class and
            invocation of <tt>{@link SecurityManager#checkPackageAccess
            s.checkPackageAccess()}</tt> denies access to the package
            of this class

            </ul>

@since JDK1.1"
      end

      operation 6968219 "getDeclaredMethods"
	public return_type class_ref 170651 // Method
	nparams 0
	nexceptions 1
	  exception class_ref 203419 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of <code>Method</code> objects reflecting all the
methods declared by the class or interface represented by this
<code>Class</code> object. This includes public, protected, default
(package) access, and private methods, but excludes inherited methods.
The elements in the array returned are not sorted and are not in any
particular order.  This method returns an array of length 0 if the class
or interface declares no methods, or if this <code>Class</code> object
represents a primitive type, an array class, or void.  The class
initialization method <code>&lt;clinit&gt;</code> is not included in the
returned array. If the class declares multiple public member methods
with the same parameter types, they are all included in the returned
array.

<p> See <em>The Java Language Specification</em>, section 8.2.

@return    the array of <code>Method</code> objects representing all the
declared methods of this class
@exception  SecurityException
            If a security manager, <i>s</i>, is present and any of the
            following conditions is met:

            <ul>

            <li> invocation of 
            <tt>{@link SecurityManager#checkMemberAccess
            s.checkMemberAccess(this, Member.DECLARED)}</tt> denies
            access to the declared methods within this class

            <li> the caller's class loader is not the same as or an
            ancestor of the class loader for the current class and
            invocation of <tt>{@link SecurityManager#checkPackageAccess
            s.checkPackageAccess()}</tt> denies access to the package
            of this class

            </ul>

@since JDK1.1"
      end

      operation 6968347 "getDeclaredConstructors"
	public return_type class_ref 218395 // Constructor
	nparams 0
	nexceptions 1
	  exception class_ref 203419 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of <code>Constructor</code> objects reflecting all the
constructors declared by the class represented by this
<code>Class</code> object. These are public, protected, default
(package) access, and private constructors.  The elements in the array
returned are not sorted and are not in any particular order.  If the
class has a default constructor, it is included in the returned array.
This method returns an array of length 0 if this <code>Class</code>
object represents an interface, a primitive type, an array class, or
void.

<p> See <em>The Java Language Specification</em>, section 8.2.

@return    the array of <code>Method</code> objects representing all the
declared constructors of this class
@exception  SecurityException
            If a security manager, <i>s</i>, is present and any of the
            following conditions is met:

            <ul>

            <li> invocation of 
            <tt>{@link SecurityManager#checkMemberAccess
            s.checkMemberAccess(this, Member.DECLARED)}</tt> denies
            access to the declared constructors within this class

            <li> the caller's class loader is not the same as or an
            ancestor of the class loader for the current class and
            invocation of <tt>{@link SecurityManager#checkPackageAccess
            s.checkPackageAccess()}</tt> denies access to the package
            of this class

            </ul>

@since JDK1.1"
      end

      operation 6968475 "getDeclaredField"
	public return_type class_ref 220443 // Field
	nparams 1
	  param in name "name" explicit_type "String"
	nexceptions 2
	  exception class_ref 219931 // NoSuchFieldException
	  exception class_ref 203419 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>Field</code> object that reflects the specified declared
field of the class or interface represented by this <code>Class</code>
object. The <code>name</code> parameter is a <code>String</code> that
specifies the simple name of the desired field.  Note that this method
will not reflect the <code>length</code> field of an array class.

@param name the name of the field
@return the <code>Field</code> object for the specified field in this
class
@exception NoSuchFieldException if a field with the specified name is
             not found.
@exception NullPointerException if <code>name</code> is <code>null</code>
@exception  SecurityException
            If a security manager, <i>s</i>, is present and any of the
            following conditions is met:

            <ul>

            <li> invocation of 
            <tt>{@link SecurityManager#checkMemberAccess
            s.checkMemberAccess(this, Member.DECLARED)}</tt> denies
            access to the declared field

            <li> the caller's class loader is not the same as or an
            ancestor of the class loader for the current class and
            invocation of <tt>{@link SecurityManager#checkPackageAccess
            s.checkPackageAccess()}</tt> denies access to the package
            of this class

            </ul>

@since JDK1.1"
      end

      operation 6968603 "getDeclaredMethod"
	public return_type class_ref 170651 // Method
	nparams 2
	  param in name "name" explicit_type "String"
	  param inout name "parameterTypes" type class_ref 164635 // Class
	nexceptions 2
	  exception class_ref 791451 // NoSuchMethodException
	  exception class_ref 203419 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ... ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>Method</code> object that reflects the specified
declared method of the class or interface represented by this
<code>Class</code> object. The <code>name</code> parameter is a
<code>String</code> that specifies the simple name of the desired
method, and the <code>parameterTypes</code> parameter is an array of
<code>Class</code> objects that identify the method's formal parameter
types, in declared order.  If more than one method with the same
parameter types is declared in a class, and one of these methods has a
return type that is more specific than any of the others, that method is
returned; otherwise one of the methods is chosen arbitrarily.  If the
name is \"&lt;init&gt;\"or \"&lt;clinit&gt;\" a <code>NoSuchMethodException</code>
is raised.

@param name the name of the method
@param parameterTypes the parameter array
@return    the <code>Method</code> object for the method of this class
matching the specified name and parameters
@exception NoSuchMethodException if a matching method is not found.
@exception NullPointerException if <code>name</code> is <code>null</code>
@exception  SecurityException
            If a security manager, <i>s</i>, is present and any of the
            following conditions is met:

            <ul>

            <li> invocation of 
            <tt>{@link SecurityManager#checkMemberAccess
            s.checkMemberAccess(this, Member.DECLARED)}</tt> denies
            access to the declared method

            <li> the caller's class loader is not the same as or an
            ancestor of the class loader for the current class and
            invocation of <tt>{@link SecurityManager#checkPackageAccess
            s.checkPackageAccess()}</tt> denies access to the package
            of this class

            </ul>

@since JDK1.1"
      end

      operation 6968731 "getDeclaredConstructor"
	public return_type class_ref 218395 // Constructor
	nparams 1
	  param inout name "parameterTypes" type class_ref 164635 // Class
	nexceptions 2
	  exception class_ref 791451 // NoSuchMethodException
	  exception class_ref 203419 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${t0} ... ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>Constructor</code> object that reflects the specified
constructor of the class or interface represented by this
<code>Class</code> object.  The <code>parameterTypes</code> parameter is
an array of <code>Class</code> objects that identify the constructor's
formal parameter types, in declared order.

@param parameterTypes the parameter array
@return    The <code>Method</code> object for the constructor with the
specified parameter list
@exception NoSuchMethodException if a matching method is not found.
@exception  SecurityException
            If a security manager, <i>s</i>, is present and any of the
            following conditions is met:

            <ul>

            <li> invocation of 
            <tt>{@link SecurityManager#checkMemberAccess
            s.checkMemberAccess(this, Member.DECLARED)}</tt> denies
            access to the declared constructor

            <li> the caller's class loader is not the same as or an
            ancestor of the class loader for the current class and
            invocation of <tt>{@link SecurityManager#checkPackageAccess
            s.checkPackageAccess()}</tt> denies access to the package
            of this class

            </ul>

@since JDK1.1"
      end

      operation 6968859 "getResourceAsStream"
	public return_type class_ref 179099 // InputStream
	nparams 1
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds a resource with a given name.  The rules for searching resources
associated with a given class are implemented by the defining
{@linkplain ClassLoader class loader} of the class.  This method
delegates to this object's class loader.  If this object was loaded by
the bootstrap class loader, the method delegates to {@link
ClassLoader#getSystemResourceAsStream}.

<p> Before delegation, an absolute resource name is constructed from the
given resource name using this algorithm:

<ul>

<li> If the <tt>name</tt> begins with a <tt>'/'</tt>
(<tt>'&#92;u002f'</tt>), then the absolute name of the resource is the
portion of the <tt>name</tt> following the <tt>'/'</tt>. 

<li> Otherwise, the absolute name is of the following form:

<blockquote><pre>
  <tt>modified_package_name</tt>/<tt>name</tt>
</pre></blockquote>

<p> Where the <tt>modified_package_name</tt> is the package name of this
object with <tt>'/'</tt> substituted for <tt>'.'</tt>
(<tt>'&#92;u002e'</tt>).

</ul>

@param  name name of the desired resource
@return      A {@link java.io.InputStream} object or <tt>null</tt> if
             no resource with this name is found
@throws  NullPointerException If <tt>name</tt> is <tt>null</tt>
@since  JDK1.1"
      end

      operation 6968987 "getResource"
	public return_type class_ref 269467 // URL
	nparams 1
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds a resource with a given name.  The rules for searching resources
associated with a given class are implemented by the defining
{@linkplain ClassLoader class loader} of the class.  This method
delegates to this object's class loader.  If this object was loaded by
the bootstrap class loader, the method delegates to {@link
ClassLoader#getSystemResource}.

<p> Before delegation, an absolute resource name is constructed from the
given resource name using this algorithm:

<ul>

<li> If the <tt>name</tt> begins with a <tt>'/'</tt>
(<tt>'&#92;u002f'</tt>), then the absolute name of the resource is the
portion of the <tt>name</tt> following the <tt>'/'</tt>. 

<li> Otherwise, the absolute name is of the following form:

<blockquote><pre>
  <tt>modified_package_name</tt>/<tt>name</tt>
</pre></blockquote>

<p> Where the <tt>modified_package_name</tt> is the package name of this
object with <tt>'/'</tt> substituted for <tt>'.'</tt>
(<tt>'&#92;u002e'</tt>).

</ul>

@param  name name of the desired resource
@return      A  {@link java.net.URL} object or <tt>null</tt> if no
             resource with this name is found
@since  JDK1.1"
      end

      classrelation 1774619 // allPermDomain (<unidirectional association>)
	relation 1774619 --->
	  a role_name "allPermDomain" class_relation private
	    comment " protection domain returned when the internal domain is null 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1774619 // allPermDomain (<unidirectional association>)
	  b parent class_ref 526875 // ProtectionDomain
      end

      operation 6969115 "getProtectionDomain"
	public return_type class_ref 526875 // ProtectionDomain
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>ProtectionDomain</code> of this class.  If there is a
security manager installed, this method first calls the security
manager's <code>checkPermission</code> method with a
<code>RuntimePermission(\"getProtectionDomain\")</code> permission to
ensure it's ok to get the
<code>ProtectionDomain</code>.

@return the ProtectionDomain of this class

@throws SecurityException
       if a security manager exists and its 
       <code>checkPermission</code> method doesn't allow 
       getting the ProtectionDomain.

@see java.security.ProtectionDomain
@see SecurityManager#checkPermission
@see java.lang.RuntimePermission
@since 1.2"
      end

      operation 6969243 "getProtectionDomain0"
	private return_type class_ref 526875 // ProtectionDomain
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the ProtectionDomain of this class."
      end

      operation 6969371 "setProtectionDomain0"
	package explicit_return_type "void"
	nparams 1
	  param inout name "pd" type class_ref 526875 // ProtectionDomain
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the ProtectionDomain for this class. Called by
ClassLoader.defineClass."
      end

      operation 6969499 "getPrimitiveClass"
	class_operation package return_type class_ref 164635 // Class
	nparams 1
	  param in name "name" explicit_type "String"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the Virtual Machine's Class object for the named
primitive type."
      end

      operation 6969627 "checkMemberAccess"
	private explicit_return_type "void"
	nparams 2
	  param in name "which" explicit_type "int"
	  param inout name "ccl" type class_ref 163611 // ClassLoader
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check if client is allowed to access members.  If access is denied,
throw a SecurityException.

Be very careful not to change the stack depth of this checkMemberAccess
call for security reasons.
See java.lang.SecurityManager.checkMemberAccess.

<p> Default policy: allow all clients access with normal Java access
control."
      end

      operation 6969755 "resolveName"
	private explicit_return_type "String"
	nparams 1
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add a package name prefix if the name is not absolute Remove leading \"/\"
if name is absolute"
      end

      attribute 2724763 "useCaches"
	class_attribute private explicit_type "boolean"
	init_value "=  true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Reflection support.

 Caches for certain reflective results"
      end

      classrelation 1774747 // declaredFields (<unidirectional association>)
	relation 1774747 --->
	  a role_name "declaredFields" volatile private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1774747 // declaredFields (<unidirectional association>)
	  b parent class_ref 857499 // SoftReference
      end

      classrelation 1774875 // publicFields (<unidirectional association>)
	relation 1774875 --->
	  a role_name "publicFields" volatile private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1774875 // publicFields (<unidirectional association>)
	  b parent class_ref 857499 // SoftReference
      end

      classrelation 1775003 // declaredMethods (<unidirectional association>)
	relation 1775003 --->
	  a role_name "declaredMethods" volatile private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1775003 // declaredMethods (<unidirectional association>)
	  b parent class_ref 857499 // SoftReference
      end

      classrelation 1775131 // publicMethods (<unidirectional association>)
	relation 1775131 --->
	  a role_name "publicMethods" volatile private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1775131 // publicMethods (<unidirectional association>)
	  b parent class_ref 857499 // SoftReference
      end

      classrelation 1775259 // declaredConstructors (<unidirectional association>)
	relation 1775259 --->
	  a role_name "declaredConstructors" volatile private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1775259 // declaredConstructors (<unidirectional association>)
	  b parent class_ref 857499 // SoftReference
      end

      classrelation 1775387 // publicConstructors (<unidirectional association>)
	relation 1775387 --->
	  a role_name "publicConstructors" volatile private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1775387 // publicConstructors (<unidirectional association>)
	  b parent class_ref 857499 // SoftReference
      end

      classrelation 1775515 // declaredPublicFields (<unidirectional association>)
	relation 1775515 --->
	  a role_name "declaredPublicFields" volatile private
	    comment " Intermediate results for getFields and getMethods
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1775515 // declaredPublicFields (<unidirectional association>)
	  b parent class_ref 857499 // SoftReference
      end

      classrelation 1775643 // declaredPublicMethods (<unidirectional association>)
	relation 1775643 --->
	  a role_name "declaredPublicMethods" volatile private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1775643 // declaredPublicMethods (<unidirectional association>)
	  b parent class_ref 857499 // SoftReference
      end

      attribute 2724891 "classRedefinedCount"
	volatile private explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Incremented by the VM on each call to JVM TI RedefineClasses()
 that redefines this class or a superclass."
      end

      attribute 2725019 "lastRedefinedCount"
	volatile private explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Value of classRedefinedCount when we last cleared the cached values
 that are sensitive to class redefinition."
      end

      operation 6969883 "clearCachesOnClassRedefinition"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Clears cached values that might possibly have been obsoleted by
 a class redefinition."
      end

      operation 6970011 "getGenericSignature"
	private explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Generic signature handling"
      end

      attribute 2725147 "genericInfo"
	private explicit_type "ClassRepository"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Generic info repository; lazily initialized"
      end

      operation 6970139 "getFactory"
	private explicit_return_type "GenericsFactory"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " accessor for factory"
      end

      operation 6970267 "getGenericInfo"
	private explicit_return_type "ClassRepository"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " accessor for generic info repository"
      end

      operation 6970395 "getRawAnnotations"
	private explicit_return_type "byte"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Annotations handling"
      end

      operation 6970523 "getConstantPool"
	package explicit_return_type "ConstantPool"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6970651 "privateGetDeclaredFields"
	private return_type class_ref 220443 // Field
	nparams 1
	  param inout name "publicOnly" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " java.lang.reflect.Field handling


 Returns an array of \"root\" fields. These Field objects must NOT
 be propagated to the outside world, but must instead be copied
 via ReflectionFactory.copyField."
      end

      operation 6970779 "privateGetPublicFields"
	private return_type class_ref 220443 // Field
	nparams 1
	  param inout name "traversedInterfaces" type class_ref 136731 // Set
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns an array of \"root\" fields. These Field objects must NOT
 be propagated to the outside world, but must instead be copied
 via ReflectionFactory.copyField."
      end

      operation 6970907 "addAll"
	class_operation private explicit_return_type "void"
	nparams 2
	  param inout name "c" type class_ref 135067 // Collection
	  param inout name "o" type class_ref 220443 // Field
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6971035 "privateGetDeclaredConstructors"
	private return_type class_ref 218395 // Constructor
	nparams 1
	  param inout name "publicOnly" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " java.lang.reflect.Constructor handling


 Returns an array of \"root\" constructors. These Constructor
 objects must NOT be propagated to the outside world, but must
 instead be copied via ReflectionFactory.copyConstructor."
      end

      operation 6971163 "privateGetDeclaredMethods"
	private return_type class_ref 170651 // Method
	nparams 1
	  param inout name "publicOnly" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " java.lang.reflect.Method handling


 Returns an array of \"root\" methods. These Method objects must NOT
 be propagated to the outside world, but must instead be copied
 via ReflectionFactory.copyMethod."
      end

      class 911515 "MethodArray"
	visibility package 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1775771 // methods (<unidirectional association>)
	  relation 1775771 --->
	    a role_name "methods" multiplicity "[]" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 1775771 // methods (<unidirectional association>)
	    b parent class_ref 170651 // Method
	end

	attribute 2725275 "length"
	  private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 6971291 "MethodArray"
	  package explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6971419 "add"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "m" type class_ref 170651 // Method
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6971547 "addAll"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "ma" type class_ref 170651 // Method
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6971675 "addAll"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "ma" type class_ref 911515 // MethodArray
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6971803 "addIfNotPresent"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "newMethod" type class_ref 170651 // Method
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6971931 "addAllIfNotPresent"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "newMethods" type class_ref 911515 // MethodArray
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6972059 "length"
	  package explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6972187 "get"
	  package return_type class_ref 170651 // Method
	  nparams 1
	    param in name "i" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6972315 "removeByNameAndSignature"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "toRemove" type class_ref 170651 // Method
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6972443 "compactAndTrim"
	  package explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6972571 "getArray"
	  package return_type class_ref 170651 // Method
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 6972699 "privateGetPublicMethods"
	private return_type class_ref 170651 // Method
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns an array of \"root\" methods. These Method objects must NOT
 be propagated to the outside world, but must instead be copied
 via ReflectionFactory.copyMethod."
      end

      operation 6972827 "searchFields"
	private return_type class_ref 220443 // Field
	nparams 2
	  param inout name "fields" type class_ref 220443 // Field
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Helpers for fetchers of one field, method, or constructor"
      end

      operation 6972955 "getField0"
	private return_type class_ref 220443 // Field
	nparams 1
	  param in name "name" explicit_type "String"
	nexceptions 1
	  exception class_ref 219931 // NoSuchFieldException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6973083 "searchMethods"
	class_operation private return_type class_ref 170651 // Method
	nparams 3
	  param inout name "methods" type class_ref 170651 // Method
	  param in name "name" explicit_type "String"
	  param inout name "parameterTypes" type class_ref 164635 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6973211 "getMethod0"
	private return_type class_ref 170651 // Method
	nparams 2
	  param in name "name" explicit_type "String"
	  param inout name "parameterTypes" type class_ref 164635 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6973339 "getConstructor0"
	private return_type class_ref 218395 // Constructor
	nparams 2
	  param inout name "parameterTypes" type class_ref 164635 // Class
	  param in name "which" explicit_type "int"
	nexceptions 1
	  exception class_ref 791451 // NoSuchMethodException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6973467 "arrayContentsEq"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param inout name "a1" explicit_type "Object"
	  param inout name "a2" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Other helpers and base implementation"
      end

      operation 6973595 "copyFields"
	class_operation private return_type class_ref 220443 // Field
	nparams 1
	  param inout name "arg" type class_ref 220443 // Field
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6973723 "copyMethods"
	class_operation private return_type class_ref 170651 // Method
	nparams 1
	  param inout name "arg" type class_ref 170651 // Method
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6973851 "copyConstructors"
	class_operation private return_type class_ref 218395 // Constructor
	nparams 1
	  param inout name "arg" type class_ref 218395 // Constructor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6973979 "getDeclaredFields0"
	private return_type class_ref 220443 // Field
	nparams 1
	  param inout name "publicOnly" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6974107 "getDeclaredMethods0"
	private return_type class_ref 170651 // Method
	nparams 1
	  param inout name "publicOnly" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6974235 "getDeclaredConstructors0"
	private return_type class_ref 218395 // Constructor
	nparams 1
	  param inout name "publicOnly" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6974363 "getDeclaredClasses0"
	private return_type class_ref 164635 // Class
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6974491 "argumentTypesToString"
	class_operation private explicit_return_type "String"
	nparams 1
	  param inout name "argTypes" type class_ref 164635 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 2725403 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  3206093459760846163L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " use serialVersionUID from JDK 1.1 for interoperability "
      end

      classrelation 1775899 // serialPersistentFields (<unidirectional association>)
	relation 1775899 --->
	  a role_name "serialPersistentFields" multiplicity "[]" init_value "=  
        ObjectStreamClass.NO_FIELDS" class_relation const_relation private
	    comment "
Class Class is special cased within the Serialization Stream Protocol. 

A Class instance is written initially into an ObjectOutputStream in the 
following format:
<pre>
     <code>TC_CLASS</code> ClassDescriptor
     A ClassDescriptor is a special cased serialization of 
     a <code>java.io.ObjectStreamClass</code> instance. 
</pre>
A new handle is generated for the initial time the class descriptor
is written into the stream. Future references to the class descriptor
are written as references to the initial class descriptor instance.

@see java.io.ObjectStreamClass

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1775899 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 285723 // ObjectStreamField
      end

      operation 6974619 "desiredAssertionStatus"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the assertion status that would be assigned to this
class if it were to be initialized at the time this method is invoked.
If this class has had its assertion status set, the most recent
setting will be returned; otherwise, if any package default assertion
status pertains to this class, the most recent setting for the most
specific pertinent package default assertion status is returned;
otherwise, if this class is not a system class (i.e., it has a
class loader) its class loader's default assertion status is returned;
otherwise, the system class default assertion status is returned.
<p>
Few programmers will have any need for this method; it is provided
for the benefit of the JRE itself.  (It allows a class to determine at
the time that it is initialized whether assertions should be enabled.)
Note that this method is not guaranteed to return the actual
assertion status that was (or will be) associated with the specified
class when it was (or will be) initialized.

@return the desired assertion status of the specified class.
@see    java.lang.ClassLoader#setClassAssertionStatus
@see    java.lang.ClassLoader#setPackageAssertionStatus
@see    java.lang.ClassLoader#setDefaultAssertionStatus
@since  1.4"
      end

      operation 6974747 "desiredAssertionStatus0"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param inout name "clazz" type class_ref 164635 // Class
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Retrieves the desired assertion status of this class from the VM"
      end

      operation 6974875 "isEnum"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if and only if this class was declared as an enum in the
source code.

@return true if and only if this class was declared as an enum in the
    source code
@since 1.5"
      end

      operation 6975003 "getReflectionFactory"
	class_operation private explicit_return_type "ReflectionFactory"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Fetches the factory for reflective objects"
      end

      attribute 2725531 "reflectionFactory"
	class_attribute private explicit_type "ReflectionFactory"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2725659 "initted"
	class_attribute private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " To be able to query system properties as soon as they're available"
      end

      operation 6975131 "checkInitted"
	class_operation private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6975259 "getEnumConstants"
	public explicit_return_type "T"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the elements of this enum class or null if this
Class object does not represent an enum type.

@return an array containing the values comprising the enum class
    represented by this Class object in the order they're
    declared, or null if this Class object does not
    represent an enum type
@since 1.5"
      end

      attribute 2725787 "enumConstants"
	volatile private explicit_type "T"
	multiplicity "[]"
	init_value "=  null"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 6975387 "enumConstantDirectory"
	package return_type class_ref 136603 // Map
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String, T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a map from simple name to enum constant.  This package-private
method is used internally by Enum to implement 
    public static <T extends Enum<T>> T valueOf(Class<T>, String)
efficiently.  Note that the map is returned by this method is
created lazily on first use.  Typically it won't ever get created."
      end

      classrelation 1776027 // enumConstantDirectory (<unidirectional association>)
	relation 1776027 --->
	  a role_name "enumConstantDirectory" init_value "=  null" volatile private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, T> ${name}${value};
"
	    classrelation_ref 1776027 // enumConstantDirectory (<unidirectional association>)
	  b parent class_ref 136603 // Map
      end

      operation 6975515 "cast"
	public explicit_return_type "T"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Casts an object to the class or interface represented
by this <tt>Class</tt> object.

@param obj the object to be cast
@return the object after casting, or null if obj is null

@throws ClassCastException if the object is not
null and is not assignable to the type T.

@since 1.5"
      end

      operation 6975643 "asSubclass"
	public return_type class_ref 164635 // Class
	nparams 1
	  param inout name "clazz" type class_ref 164635 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type}<? extends U> ${name}${(}${t0}<U> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Casts this <tt>Class</tt> object to represent a subclass of the class
represented by the specified class object.  Checks that that the cast
is valid, and throws a <tt>ClassCastException</tt> if it is not.  If
this method succeeds, it always returns a reference to this class object.

<p>This method is useful when a client needs to \"narrow\" the type of
a <tt>Class</tt> object to pass it to an API that restricts the
<tt>Class</tt> objects that it is willing to accept.  A cast would
generate a compile-time warning, as the correctness of the cast
could not be checked at runtime (because generic types are implemented
by erasure).

@return this <tt>Class</tt> object, cast to represent a subclass of
   the specified class object.
@throws ClassCastException if this <tt>Class</tt> object does not
   represent a subclass of the specified class (here \"subclass\" includes
   the class itself).
@since 1.5"
      end

      operation 6975771 "getAnnotation"
	public explicit_return_type "A"
	nparams 1
	  param inout name "annotationClass" type class_ref 164635 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<A extends Annotation> ${type} ${name}${(}${t0}<A> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}"
      end

      operation 6975899 "isAnnotationPresent"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "annotationClass" type class_ref 164635 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends Annotation> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}"
      end

      classrelation 1776155 // EMPTY_ANNOTATIONS_ARRAY (<unidirectional association>)
	relation 1776155 --->
	  a role_name "EMPTY_ANNOTATIONS_ARRAY" multiplicity "[]" init_value "=  new Annotation[0]" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1776155 // EMPTY_ANNOTATIONS_ARRAY (<unidirectional association>)
	  b parent class_ref 911259 // Annotation
      end

      operation 6976027 "getAnnotations"
	public return_type class_ref 911259 // Annotation
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}"
      end

      operation 6976155 "getDeclaredAnnotations"
	public return_type class_ref 911259 // Annotation
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}"
      end

      classrelation 1776283 // annotations (<unidirectional association>)
	relation 1776283 --->
	  a role_name "annotations" private
	    comment " Annotations cache
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Class, Annotation> ${name}${value};
"
	    classrelation_ref 1776283 // annotations (<unidirectional association>)
	  b parent class_ref 136603 // Map
      end

      classrelation 1776411 // declaredAnnotations (<unidirectional association>)
	relation 1776411 --->
	  a role_name "declaredAnnotations" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Class, Annotation> ${name}${value};
"
	    classrelation_ref 1776411 // declaredAnnotations (<unidirectional association>)
	  b parent class_ref 136603 // Map
      end

      operation 6976283 "initAnnotationsIfNecessary"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 2725915 "annotationType"
	private explicit_type "AnnotationType"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Annotation types cache their internal (AnnotationType) form"
      end

      operation 6976411 "setAnnotationType"
	package explicit_return_type "void"
	nparams 1
	  param inout name "type" explicit_type "AnnotationType"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6976539 "getAnnotationType"
	package explicit_return_type "AnnotationType"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 165403 "Exception"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The class <code>Exception</code> and its subclasses are a form of 
<code>Throwable</code> that indicates conditions that a reasonable 
application might want to catch.

@author  Frank Yellin
@version 1.31, 12/19/03
@see     java.lang.Error
@since   JDK1.0"
      classrelation 270235 // <generalisation>
	relation 270235 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 270235 // <generalisation>
	  b parent class_ref 164251 // Throwable
      end

      attribute 275227 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value "=  -3387516993124229948L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 831259 "Exception"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new exception with <code>null</code> as its detail message.
The cause is not initialized, and may subsequently be initialized by a
call to {@link #initCause}."
      end

      operation 831387 "Exception"
	public explicit_return_type ""
	nparams 1
	  param in name "message" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new exception with the specified detail message.  The
cause is not initialized, and may subsequently be initialized by
a call to {@link #initCause}.

@param   message   the detail message. The detail message is saved for 
         later retrieval by the {@link #getMessage()} method."
      end

      operation 831515 "Exception"
	public explicit_return_type ""
	nparams 2
	  param in name "message" explicit_type "String"
	  param inout name "cause" type class_ref 164251 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new exception with the specified detail message and
cause.  <p>Note that the detail message associated with
<code>cause</code> is <i>not</i> automatically incorporated in
this exception's detail message.

@param  message the detail message (which is saved for later retrieval
        by the {@link #getMessage()} method).
@param  cause the cause (which is saved for later retrieval by the
        {@link #getCause()} method).  (A <tt>null</tt> value is
        permitted, and indicates that the cause is nonexistent or
        unknown.)
@since  1.4"
      end

      operation 831643 "Exception"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 164251 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new exception with the specified cause and a detail
message of <tt>(cause==null ? null : cause.toString())</tt> (which
typically contains the class and detail message of <tt>cause</tt>).
This constructor is useful for exceptions that are little more than
wrappers for other throwables (for example, {@link
java.security.PrivilegedActionException}).

@param  cause the cause (which is saved for later retrieval by the
        {@link #getCause()} method).  (A <tt>null</tt> value is
        permitted, and indicates that the cause is nonexistent or
        unknown.)
@since  1.4"
      end
    end

    class 168347 "Object"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Class <code>Object</code> is the root of the class hierarchy. 
Every class has <code>Object</code> as a superclass. All objects, 
including arrays, implement the methods of this class. 

@author  unascribed
@version 1.68, 04/08/04
@see     java.lang.Class
@since   JDK1.0"
      operation 2906651 "registerNatives"
	class_operation private explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      extra_member 141979 "initialization"
	
	cpp "" ""
	java "  static {
        registerNatives();
    }"
	php ""
	python ""
	idl ""
      end

      operation 2906779 "getClass"
	public return_type class_ref 164635 // Class
	nparams 0
	
	final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type}<? extends Object> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the runtime class of an object. That <tt>Class</tt> 
object is the object that is locked by <tt>static synchronized</tt> 
methods of the represented class.

@return The <code>java.lang.Class</code> object that represents
        the runtime class of the object.  The result is of type
        {@code Class<? extends X>} where X is the
	       erasure of the static type of the expression on which
	       <code>getClass</code> is called."
      end

      operation 2906907 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hash code value for the object. This method is 
supported for the benefit of hashtables such as those provided by 
<code>java.util.Hashtable</code>. 
<p>
The general contract of <code>hashCode</code> is: 
<ul>
<li>Whenever it is invoked on the same object more than once during 
    an execution of a Java application, the <tt>hashCode</tt> method 
    must consistently return the same integer, provided no information 
    used in <tt>equals</tt> comparisons on the object is modified.
    This integer need not remain consistent from one execution of an
    application to another execution of the same application. 
<li>If two objects are equal according to the <tt>equals(Object)</tt>
    method, then calling the <code>hashCode</code> method on each of 
    the two objects must produce the same integer result. 
<li>It is <em>not</em> required that if two objects are unequal 
    according to the {@link java.lang.Object#equals(java.lang.Object)} 
    method, then calling the <tt>hashCode</tt> method on each of the 
    two objects must produce distinct integer results.  However, the 
    programmer should be aware that producing distinct integer results 
    for unequal objects may improve the performance of hashtables.
</ul>
<p>
As much as is reasonably practical, the hashCode method defined by 
class <tt>Object</tt> does return distinct integers for distinct 
objects. (This is typically implemented by converting the internal 
address of the object into an integer, but this implementation 
technique is not required by the 
Java<font size=\"-2\"><sup>TM</sup></font> programming language.)

@return  a hash code value for this object.
@see     java.lang.Object#equals(java.lang.Object)
@see     java.util.Hashtable"
      end

      operation 2907035 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether some other object is \"equal to\" this one.
<p>
The <code>equals</code> method implements an equivalence relation
on non-null object references:
<ul>
<li>It is <i>reflexive</i>: for any non-null reference value
    <code>x</code>, <code>x.equals(x)</code> should return
    <code>true</code>.
<li>It is <i>symmetric</i>: for any non-null reference values
    <code>x</code> and <code>y</code>, <code>x.equals(y)</code>
    should return <code>true</code> if and only if
    <code>y.equals(x)</code> returns <code>true</code>.
<li>It is <i>transitive</i>: for any non-null reference values
    <code>x</code>, <code>y</code>, and <code>z</code>, if
    <code>x.equals(y)</code> returns <code>true</code> and
    <code>y.equals(z)</code> returns <code>true</code>, then
    <code>x.equals(z)</code> should return <code>true</code>.
<li>It is <i>consistent</i>: for any non-null reference values
    <code>x</code> and <code>y</code>, multiple invocations of
    <tt>x.equals(y)</tt> consistently return <code>true</code>
    or consistently return <code>false</code>, provided no
    information used in <code>equals</code> comparisons on the
    objects is modified.
<li>For any non-null reference value <code>x</code>,
    <code>x.equals(null)</code> should return <code>false</code>.
</ul>
<p>
The <tt>equals</tt> method for class <code>Object</code> implements 
the most discriminating possible equivalence relation on objects; 
that is, for any non-null reference values <code>x</code> and
<code>y</code>, this method returns <code>true</code> if and only
if <code>x</code> and <code>y</code> refer to the same object
(<code>x == y</code> has the value <code>true</code>).
<p>
Note that it is generally necessary to override the <tt>hashCode</tt>
method whenever this method is overridden, so as to maintain the
general contract for the <tt>hashCode</tt> method, which states
that equal objects must have equal hash codes. 

@param   obj   the reference object with which to compare.
@return  <code>true</code> if this object is the same as the obj
         argument; <code>false</code> otherwise.
@see     #hashCode()
@see     java.util.Hashtable"
      end

      operation 2907163 "clone"
	protected explicit_return_type "Object"
	nparams 0
	nexceptions 1
	  exception class_ref 383643 // CloneNotSupportedException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates and returns a copy of this object.  The precise meaning 
of \"copy\" may depend on the class of the object. The general 
intent is that, for any object <tt>x</tt>, the expression:
<blockquote>
<pre>
x.clone() != x</pre></blockquote>
will be true, and that the expression:
<blockquote>
<pre>
x.clone().getClass() == x.getClass()</pre></blockquote>
will be <tt>true</tt>, but these are not absolute requirements. 
While it is typically the case that:
<blockquote>
<pre>
x.clone().equals(x)</pre></blockquote>
will be <tt>true</tt>, this is not an absolute requirement. 
<p>
By convention, the returned object should be obtained by calling
<tt>super.clone</tt>.  If a class and all of its superclasses (except
<tt>Object</tt>) obey this convention, it will be the case that
<tt>x.clone().getClass() == x.getClass()</tt>.
<p>
By convention, the object returned by this method should be independent
of this object (which is being cloned).  To achieve this independence,
it may be necessary to modify one or more fields of the object returned
by <tt>super.clone</tt> before returning it.  Typically, this means
copying any mutable objects that comprise the internal \"deep structure\"
of the object being cloned and replacing the references to these
objects with references to the copies.  If a class contains only
primitive fields or references to immutable objects, then it is usually
the case that no fields in the object returned by <tt>super.clone</tt>
need to be modified.
<p>
The method <tt>clone</tt> for class <tt>Object</tt> performs a 
specific cloning operation. First, if the class of this object does 
not implement the interface <tt>Cloneable</tt>, then a 
<tt>CloneNotSupportedException</tt> is thrown. Note that all arrays 
are considered to implement the interface <tt>Cloneable</tt>. 
Otherwise, this method creates a new instance of the class of this 
object and initializes all its fields with exactly the contents of 
the corresponding fields of this object, as if by assignment; the
contents of the fields are not themselves cloned. Thus, this method 
performs a \"shallow copy\" of this object, not a \"deep copy\" operation.
<p>
The class <tt>Object</tt> does not itself implement the interface 
<tt>Cloneable</tt>, so calling the <tt>clone</tt> method on an object 
whose class is <tt>Object</tt> will result in throwing an
exception at run time.

@return     a clone of this instance.
@exception  CloneNotSupportedException  if the object's class does not
              support the <code>Cloneable</code> interface. Subclasses
              that override the <code>clone</code> method can also
              throw this exception to indicate that an instance cannot
              be cloned.
@see java.lang.Cloneable"
      end

      operation 2907291 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of the object. In general, the 
<code>toString</code> method returns a string that 
\"textually represents\" this object. The result should 
be a concise but informative representation that is easy for a 
person to read.
It is recommended that all subclasses override this method.
<p>
The <code>toString</code> method for class <code>Object</code> 
returns a string consisting of the name of the class of which the 
object is an instance, the at-sign character `<code>@</code>', and 
the unsigned hexadecimal representation of the hash code of the 
object. In other words, this method returns a string equal to the 
value of:
<blockquote>
<pre>
getClass().getName() + '@' + Integer.toHexString(hashCode())
</pre></blockquote>

@return  a string representation of the object."
      end

      operation 2907419 "notify"
	public explicit_return_type "void"
	nparams 0
	
	final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Wakes up a single thread that is waiting on this object's 
monitor. If any threads are waiting on this object, one of them 
is chosen to be awakened. The choice is arbitrary and occurs at 
the discretion of the implementation. A thread waits on an object's 
monitor by calling one of the <code>wait</code> methods.
<p>
The awakened thread will not be able to proceed until the current 
thread relinquishes the lock on this object. The awakened thread will 
compete in the usual manner with any other threads that might be 
actively competing to synchronize on this object; for example, the 
awakened thread enjoys no reliable privilege or disadvantage in being 
the next thread to lock this object.
<p>
This method should only be called by a thread that is the owner 
of this object's monitor. A thread becomes the owner of the 
object's monitor in one of three ways: 
<ul>
<li>By executing a synchronized instance method of that object. 
<li>By executing the body of a <code>synchronized</code> statement 
    that synchronizes on the object. 
<li>For objects of type <code>Class,</code> by executing a 
    synchronized static method of that class. 
</ul>
<p>
Only one thread at a time can own an object's monitor. 

@exception  IllegalMonitorStateException  if the current thread is not
              the owner of this object's monitor.
@see        java.lang.Object#notifyAll()
@see        java.lang.Object#wait()"
      end

      operation 2907547 "notifyAll"
	public explicit_return_type "void"
	nparams 0
	
	final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Wakes up all threads that are waiting on this object's monitor. A 
thread waits on an object's monitor by calling one of the 
<code>wait</code> methods.
<p>
The awakened threads will not be able to proceed until the current 
thread relinquishes the lock on this object. The awakened threads 
will compete in the usual manner with any other threads that might 
be actively competing to synchronize on this object; for example, 
the awakened threads enjoy no reliable privilege or disadvantage in 
being the next thread to lock this object.
<p>
This method should only be called by a thread that is the owner 
of this object's monitor. See the <code>notify</code> method for a 
description of the ways in which a thread can become the owner of 
a monitor. 

@exception  IllegalMonitorStateException  if the current thread is not
              the owner of this object's monitor.
@see        java.lang.Object#notify()
@see        java.lang.Object#wait()"
      end

      operation 2907675 "wait"
	public explicit_return_type "void"
	nparams 1
	  param in name "timeout" explicit_type "long"
	nexceptions 1
	  exception class_ref 164123 // InterruptedException
	
	final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Causes current thread to wait until either another thread invokes the 
{@link java.lang.Object#notify()} method or the 
{@link java.lang.Object#notifyAll()} method for this object, or a 
specified amount of time has elapsed. 
<p>
The current thread must own this object's monitor. 
<p>
This method causes the current thread (call it <var>T</var>) to 
place itself in the wait set for this object and then to relinquish 
any and all synchronization claims on this object. Thread <var>T</var> 
becomes disabled for thread scheduling purposes and lies dormant 
until one of four things happens:
<ul>
<li>Some other thread invokes the <tt>notify</tt> method for this 
object and thread <var>T</var> happens to be arbitrarily chosen as 
the thread to be awakened. 
<li>Some other thread invokes the <tt>notifyAll</tt> method for this 
object. 
<li>Some other thread {@link java.lang.Thread#interrupt() interrupts} 
thread <var>T</var>. 
<li>The specified amount of real time has elapsed, more or less.  If 
<tt>timeout</tt> is zero, however, then real time is not taken into 
consideration and the thread simply waits until notified. 
</ul>
The thread <var>T</var> is then removed from the wait set for this 
object and re-enabled for thread scheduling. It then competes in the 
usual manner with other threads for the right to synchronize on the 
object; once it has gained control of the object, all its 
synchronization claims on the object are restored to the status quo 
ante - that is, to the situation as of the time that the <tt>wait</tt> 
method was invoked. Thread <var>T</var> then returns from the 
invocation of the <tt>wait</tt> method. Thus, on return from the 
<tt>wait</tt> method, the synchronization state of the object and of 
thread <tt>T</tt> is exactly as it was when the <tt>wait</tt> method 
was invoked. 
<p>
A thread can also wake up without being notified, interrupted, or
timing out, a so-called <i>spurious wakeup</i>.  While this will rarely
occur in practice, applications must guard against it by testing for
the condition that should have caused the thread to be awakened, and
continuing to wait if the condition is not satisfied.  In other words,
waits should always occur in loops, like this one:
<pre>
    synchronized (obj) {
        while (&lt;condition does not hold&gt;)
            obj.wait(timeout);
        ... // Perform action appropriate to condition
    }
</pre>
(For more information on this topic, see Section 3.2.3 in Doug Lea's
\"Concurrent Programming in Java (Second Edition)\" (Addison-Wesley,
2000), or Item 50 in Joshua Bloch's \"Effective Java Programming
Language Guide\" (Addison-Wesley, 2001).
<p>
If the current thread is 
{@link java.lang.Thread#interrupt() interrupted} by another thread 
while it is waiting, then an <tt>InterruptedException</tt> is thrown. 
This exception is not thrown until the lock status of this object has 
been restored as described above.
<p>
Note that the <tt>wait</tt> method, as it places the current thread 
into the wait set for this object, unlocks only this object; any 
other objects on which the current thread may be synchronized remain 
locked while the thread waits.
<p>
This method should only be called by a thread that is the owner 
of this object's monitor. See the <code>notify</code> method for a 
description of the ways in which a thread can become the owner of 
a monitor. 

@param      timeout   the maximum time to wait in milliseconds.
@exception  IllegalArgumentException      if the value of timeout is
		     negative.
@exception  IllegalMonitorStateException  if the current thread is not
              the owner of the object's monitor.
@exception  InterruptedException if another thread interrupted the
            current thread before or while the current thread
            was waiting for a notification.  The <i>interrupted
            status</i> of the current thread is cleared when
            this exception is thrown.
@see        java.lang.Object#notify()
@see        java.lang.Object#notifyAll()"
      end

      operation 2907803 "wait"
	public explicit_return_type "void"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param in name "nanos" explicit_type "int"
	nexceptions 1
	  exception class_ref 164123 // InterruptedException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Causes current thread to wait until another thread invokes the 
{@link java.lang.Object#notify()} method or the 
{@link java.lang.Object#notifyAll()} method for this object, or 
some other thread interrupts the current thread, or a certain 
amount of real time has elapsed. 
<p>
This method is similar to the <code>wait</code> method of one 
argument, but it allows finer control over the amount of time to 
wait for a notification before giving up. The amount of real time, 
measured in nanoseconds, is given by:
<blockquote>
<pre>
1000000*timeout+nanos</pre></blockquote>
<p>
In all other respects, this method does the same thing as the 
method {@link #wait(long)} of one argument. In particular, 
<tt>wait(0, 0)</tt> means the same thing as <tt>wait(0)</tt>.
<p>
The current thread must own this object's monitor. The thread 
releases ownership of this monitor and waits until either of the 
following two conditions has occurred: 
<ul>
<li>Another thread notifies threads waiting on this object's monitor 
    to wake up either through a call to the <code>notify</code> method 
    or the <code>notifyAll</code> method. 
<li>The timeout period, specified by <code>timeout</code> 
    milliseconds plus <code>nanos</code> nanoseconds arguments, has 
    elapsed. 
</ul>
<p>
The thread then waits until it can re-obtain ownership of the 
monitor and resumes execution.
<p>
As in the one argument version, interrupts and spurious wakeups are
possible, and this method should always be used in a loop:
<pre>
    synchronized (obj) {
        while (&lt;condition does not hold&gt;)
            obj.wait(timeout, nanos);
        ... // Perform action appropriate to condition
    }
</pre>
This method should only be called by a thread that is the owner 
of this object's monitor. See the <code>notify</code> method for a 
description of the ways in which a thread can become the owner of 
a monitor. 

@param      timeout   the maximum time to wait in milliseconds.
@param      nanos      additional time, in nanoseconds range
                      0-999999.
@exception  IllegalArgumentException      if the value of timeout is
			    negative or the value of nanos is
			    not in the range 0-999999.
@exception  IllegalMonitorStateException  if the current thread is not
              the owner of this object's monitor.
@exception  InterruptedException if another thread interrupted the
            current thread before or while the current thread
            was waiting for a notification.  The <i>interrupted
            status</i> of the current thread is cleared when
            this exception is thrown."
      end

      operation 2907931 "wait"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 164123 // InterruptedException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Causes current thread to wait until another thread invokes the 
{@link java.lang.Object#notify()} method or the 
{@link java.lang.Object#notifyAll()} method for this object. 
In other words, this method behaves exactly as if it simply 
performs the call <tt>wait(0)</tt>.
<p>
The current thread must own this object's monitor. The thread 
releases ownership of this monitor and waits until another thread 
notifies threads waiting on this object's monitor to wake up 
either through a call to the <code>notify</code> method or the 
<code>notifyAll</code> method. The thread then waits until it can 
re-obtain ownership of the monitor and resumes execution. 
<p>
As in the one argument version, interrupts and spurious wakeups are
possible, and this method should always be used in a loop:
<pre>
    synchronized (obj) {
        while (&lt;condition does not hold&gt;)
            obj.wait();
        ... // Perform action appropriate to condition
    }
</pre>
This method should only be called by a thread that is the owner 
of this object's monitor. See the <code>notify</code> method for a 
description of the ways in which a thread can become the owner of 
a monitor. 

@exception  IllegalMonitorStateException  if the current thread is not
              the owner of the object's monitor.
@exception  InterruptedException if another thread interrupted the
            current thread before or while the current thread
            was waiting for a notification.  The <i>interrupted
            status</i> of the current thread is cleared when
            this exception is thrown.
@see        java.lang.Object#notify()
@see        java.lang.Object#notifyAll()"
      end

      operation 2908059 "finalize"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 164251 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by the garbage collector on an object when garbage collection
determines that there are no more references to the object.
A subclass overrides the <code>finalize</code> method to dispose of
system resources or to perform other cleanup. 
<p>
The general contract of <tt>finalize</tt> is that it is invoked 
if and when the Java<font size=\"-2\"><sup>TM</sup></font> virtual 
machine has determined that there is no longer any
means by which this object can be accessed by any thread that has
not yet died, except as a result of an action taken by the
finalization of some other object or class which is ready to be
finalized. The <tt>finalize</tt> method may take any action, including
making this object available again to other threads; the usual purpose
of <tt>finalize</tt>, however, is to perform cleanup actions before 
the object is irrevocably discarded. For example, the finalize method 
for an object that represents an input/output connection might perform
explicit I/O transactions to break the connection before the object is
permanently discarded. 
<p>
The <tt>finalize</tt> method of class <tt>Object</tt> performs no 
special action; it simply returns normally. Subclasses of 
<tt>Object</tt> may override this definition.
<p>
The Java programming language does not guarantee which thread will 
invoke the <tt>finalize</tt> method for any given object. It is 
guaranteed, however, that the thread that invokes finalize will not 
be holding any user-visible synchronization locks when finalize is 
invoked. If an uncaught exception is thrown by the finalize method, 
the exception is ignored and finalization of that object terminates.
<p>
After the <tt>finalize</tt> method has been invoked for an object, no 
further action is taken until the Java virtual machine has again 
determined that there is no longer any means by which this object can 
be accessed by any thread that has not yet died, including possible
actions by other objects or classes which are ready to be finalized, 
at which point the object may be discarded.
<p>
The <tt>finalize</tt> method is never invoked more than once by a Java
virtual machine for any given object.
<p>
Any exception thrown by the <code>finalize</code> method causes 
the finalization of this object to be halted, but is otherwise 
ignored. 

@throws Throwable the <code>Exception</code> raised by this method"
      end
    end

    class 170395 "Integer"
      visibility public 
      nactuals 3
      actual class class_ref 221467 // Comparable
        rank 0 value class_ref 170395 // Integer
      actual class class_ref 221467 // Comparable
        rank 1 explicit_value ""
      actual class class_ref 221467 // Comparable
        rank 2 explicit_value ""
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The <code>Integer</code> class wraps a value of the primitive type
<code>int</code> in an object. An object of type
<code>Integer</code> contains a single field whose type is
<code>int</code>.

 <p>

In addition, this class provides several methods for converting an
<code>int</code> to a <code>String</code> and a <code>String</code>
to an <code>int</code>, as well as other constants and methods
useful when dealing with an <code>int</code>.

<p>Implementation note: The implementations of the \"bit twiddling\"
methods (such as {@link #highestOneBit(int) highestOneBit} and
{@link #numberOfTrailingZeros(int) numberOfTrailingZeros}) are
based on material from Henry S. Warren, Jr.'s <i>Hacker's
Delight</i>, (Addison Wesley, 2002).

@author  Lee Boynton
@author  Arthur van Hoff
@author  Josh Bloch
@version 1.90, 05/11/04
@since JDK1.0"
      classrelation 1780379 // <generalisation>
	relation 1780379 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1780379 // <generalisation>
	  b parent class_ref 413979 // Number
      end

      classrelation 1780507 // <realization>
	relation 1780507 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 1780507 // <realization>
	  b parent class_ref 221467 // Comparable
      end

      attribute 2731163 "MIN_VALUE"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0x80000000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A constant holding the minimum value an <code>int</code> can
have, -2<sup>31</sup>.
"
      end

      attribute 2731291 "MAX_VALUE"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0x7fffffff"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A constant holding the maximum value an <code>int</code> can
have, 2<sup>31</sup>-1.
"
      end

      classrelation 1780635 // TYPE (<unidirectional association>)
	relation 1780635 --->
	  a role_name "TYPE" init_value "=  (Class<Integer>) Class.getPrimitiveClass(\"int\")" class_relation const_relation public
	    comment "
The <code>Class</code> instance representing the primitive type
<code>int</code>.

@since   JDK1.1

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Integer> ${name}${value};
"
	    classrelation_ref 1780635 // TYPE (<unidirectional association>)
	  b parent class_ref 164635 // Class
      end

      attribute 2731419 "digits"
	class_attribute const_attribute package explicit_type "char"
	multiplicity "[]"
	init_value "=  {
	'0' , '1' , '2' , '3' , '4' , '5' ,
	'6' , '7' , '8' , '9' , 'a' , 'b' ,
	'c' , 'd' , 'e' , 'f' , 'g' , 'h' ,
	'i' , 'j' , 'k' , 'l' , 'm' , 'n' ,
	'o' , 'p' , 'q' , 'r' , 's' , 't' ,
	'u' , 'v' , 'w' , 'x' , 'y' , 'z'
    }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "All possible chars for representing a number as a String
"
      end

      operation 6996635 "toString"
	class_operation public explicit_return_type "String"
	nparams 2
	  param in name "i" explicit_type "int"
	  param in name "radix" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of the first argument in the
radix specified by the second argument.
<p>
If the radix is smaller than <code>Character.MIN_RADIX</code>
or larger than <code>Character.MAX_RADIX</code>, then the radix
<code>10</code> is used instead.
<p>
If the first argument is negative, the first element of the
result is the ASCII minus character <code>'-'</code>
(<code>'&#92;u002D'</code>). If the first argument is not
negative, no sign character appears in the result.
<p>
The remaining characters of the result represent the magnitude
of the first argument. If the magnitude is zero, it is
represented by a single zero character <code>'0'</code>
(<code>'&#92;u0030'</code>); otherwise, the first character of
the representation of the magnitude will not be the zero
character.  The following ASCII characters are used as digits: 
<blockquote><pre>
  0123456789abcdefghijklmnopqrstuvwxyz
</pre></blockquote>
These are <code>'&#92;u0030'</code> through
<code>'&#92;u0039'</code> and <code>'&#92;u0061'</code> through
<code>'&#92;u007A'</code>. If <code>radix</code> is
<var>N</var>, then the first <var>N</var> of these characters
are used as radix-<var>N</var> digits in the order shown. Thus,
the digits for hexadecimal (radix 16) are
<code>0123456789abcdef</code>. If uppercase letters are
desired, the {@link java.lang.String#toUpperCase()} method may
be called on the result:
<blockquote><pre>
Integer.toString(n, 16).toUpperCase()
</pre></blockquote>

@param   i       an integer to be converted to a string.
@param   radix   the radix to use in the string representation.
@return  a string representation of the argument in the specified radix.
@see     java.lang.Character#MAX_RADIX
@see     java.lang.Character#MIN_RADIX"
      end

      operation 6996763 "toHexString"
	class_operation public explicit_return_type "String"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of the integer argument as an
unsigned integer in base&nbsp;16.
<p>
The unsigned integer value is the argument plus 2<sup>32</sup>
if the argument is negative; otherwise, it is equal to the
argument.  This value is converted to a string of ASCII digits
in hexadecimal (base&nbsp;16) with no extra leading
<code>0</code>s. If the unsigned magnitude is zero, it is
represented by a single zero character <code>'0'</code>
(<code>'&#92;u0030'</code>); otherwise, the first character of
the representation of the unsigned magnitude will not be the
zero character. The following characters are used as
hexadecimal digits:
<blockquote><pre>
0123456789abcdef
</pre></blockquote>
These are the characters <code>'&#92;u0030'</code> through
<code>'&#92;u0039'</code> and <code>'&#92;u0061'</code> through
<code>'&#92;u0066'</code>. If uppercase letters are
desired, the {@link java.lang.String#toUpperCase()} method may
be called on the result:
<blockquote><pre>
Integer.toHexString(n).toUpperCase()
</pre></blockquote>

@param   i   an integer to be converted to a string.
@return  the string representation of the unsigned integer value
         represented by the argument in hexadecimal (base&nbsp;16).
@since   JDK1.0.2"
      end

      operation 6996891 "toOctalString"
	class_operation public explicit_return_type "String"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of the integer argument as an
unsigned integer in base&nbsp;8.
<p>
The unsigned integer value is the argument plus 2<sup>32</sup>
if the argument is negative; otherwise, it is equal to the
argument.  This value is converted to a string of ASCII digits
in octal (base&nbsp;8) with no extra leading <code>0</code>s.
<p>
If the unsigned magnitude is zero, it is represented by a
single zero character <code>'0'</code>
(<code>'&#92;u0030'</code>); otherwise, the first character of
the representation of the unsigned magnitude will not be the
zero character. The following characters are used as octal
digits:
<blockquote><pre>
01234567
</pre></blockquote>
These are the characters <code>'&#92;u0030'</code> through
<code>'&#92;u0037'</code>.

@param   i   an integer to be converted to a string.
@return  the string representation of the unsigned integer value
         represented by the argument in octal (base&nbsp;8).
@since   JDK1.0.2"
      end

      operation 6997019 "toBinaryString"
	class_operation public explicit_return_type "String"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of the integer argument as an
unsigned integer in base&nbsp;2.
<p>
The unsigned integer value is the argument plus 2<sup>32</sup>
if the argument is negative; otherwise it is equal to the
argument.  This value is converted to a string of ASCII digits
in binary (base&nbsp;2) with no extra leading <code>0</code>s.
If the unsigned magnitude is zero, it is represented by a
single zero character <code>'0'</code>
(<code>'&#92;u0030'</code>); otherwise, the first character of
the representation of the unsigned magnitude will not be the
zero character. The characters <code>'0'</code>
(<code>'&#92;u0030'</code>) and <code>'1'</code>
(<code>'&#92;u0031'</code>) are used as binary digits.

@param   i   an integer to be converted to a string.
@return  the string representation of the unsigned integer value
         represented by the argument in binary (base&nbsp;2).
@since   JDK1.0.2"
      end

      operation 6997147 "toUnsignedString"
	class_operation private explicit_return_type "String"
	nparams 2
	  param in name "i" explicit_type "int"
	  param in name "shift" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convert the integer to an unsigned number."
      end

      attribute 2731547 "DigitTens"
	class_attribute const_attribute package explicit_type "char"
	multiplicity "[]"
	init_value "=  {
	'0', '0', '0', '0', '0', '0', '0', '0', '0', '0',
	'1', '1', '1', '1', '1', '1', '1', '1', '1', '1',
	'2', '2', '2', '2', '2', '2', '2', '2', '2', '2',
	'3', '3', '3', '3', '3', '3', '3', '3', '3', '3',
	'4', '4', '4', '4', '4', '4', '4', '4', '4', '4',
	'5', '5', '5', '5', '5', '5', '5', '5', '5', '5',
	'6', '6', '6', '6', '6', '6', '6', '6', '6', '6',
	'7', '7', '7', '7', '7', '7', '7', '7', '7', '7',
	'8', '8', '8', '8', '8', '8', '8', '8', '8', '8',
	'9', '9', '9', '9', '9', '9', '9', '9', '9', '9',
	} "
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2731675 "DigitOnes"
	class_attribute const_attribute package explicit_type "char"
	multiplicity "[]"
	init_value "=  { 
	'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
	'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
	'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
	'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
	'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
	'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
	'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
	'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
	'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
	'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
	} "
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 6997275 "toString"
	class_operation public explicit_return_type "String"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " I use the \"invariant division by multiplication\" trick to
 accelerate Integer.toString.  In particular we want to
 avoid division by 10.

 The \"trick\" has roughly the same performance characteristics
 as the \"classic\" Integer.toString code on a non-JIT VM.
 The trick avoids .rem and .div calls but has a longer code
 path and is thus dominated by dispatch overhead.  In the
 JIT case the dispatch overhead doesn't exist and the
 \"trick\" is considerably faster than the classic code.

 TODO-FIXME: convert (x * 52429) into the equiv shift-add
 sequence.

 RE:  Division by Invariant Integers using Multiplication
      T Gralund, P Montgomery
      ACM PLDI 1994


Returns a <code>String</code> object representing the
specified integer. The argument is converted to signed decimal
representation and returned as a string, exactly as if the
argument and radix 10 were given as arguments to the {@link
#toString(int, int)} method.

@param   i   an integer to be converted.
@return  a string representation of the argument in base&nbsp;10."
      end

      operation 6997403 "getChars"
	class_operation package explicit_return_type "void"
	nparams 3
	  param in name "i" explicit_type "int"
	  param in name "index" explicit_type "int"
	  param in name "buf" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Places characters representing the integer i into the
character array buf. The characters are placed into
the buffer backwards starting with the least significant
digit at the specified index (exclusive), and working
backwards from there.

Will fail if i == Integer.MIN_VALUE"
      end

      attribute 2731803 "sizeTable"
	class_attribute const_attribute package explicit_type "int"
	multiplicity "[]"
	init_value "=  { 9, 99, 999, 9999, 99999, 999999, 9999999,
                                      99999999, 999999999, Integer.MAX_VALUE }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 6997531 "stringSize"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "x" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Requires positive x"
      end

      operation 6997659 "parseInt"
	class_operation public explicit_return_type "int"
	nparams 2
	  param in name "s" explicit_type "String"
	  param in name "radix" explicit_type "int"
	nexceptions 1
	  exception class_ref 533659 // NumberFormatException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parses the string argument as a signed integer in the radix 
specified by the second argument. The characters in the string 
must all be digits of the specified radix (as determined by 
whether {@link java.lang.Character#digit(char, int)} returns a 
nonnegative value), except that the first character may be an 
ASCII minus sign <code>'-'</code> (<code>'&#92;u002D'</code>) to 
indicate a negative value. The resulting integer value is returned. 
<p>
An exception of type <code>NumberFormatException</code> is
thrown if any of the following situations occurs:
<ul>
<li>The first argument is <code>null</code> or is a string of
length zero.
<li>The radix is either smaller than 
{@link java.lang.Character#MIN_RADIX} or
larger than {@link java.lang.Character#MAX_RADIX}. 
<li>Any character of the string is not a digit of the specified
radix, except that the first character may be a minus sign
<code>'-'</code> (<code>'&#92;u002D'</code>) provided that the
string is longer than length 1.
<li>The value represented by the string is not a value of type
<code>int</code>. 
</ul><p>
Examples:
<blockquote><pre>
parseInt(\"0\", 10) returns 0
parseInt(\"473\", 10) returns 473
parseInt(\"-0\", 10) returns 0
parseInt(\"-FF\", 16) returns -255
parseInt(\"1100110\", 2) returns 102
parseInt(\"2147483647\", 10) returns 2147483647
parseInt(\"-2147483648\", 10) returns -2147483648
parseInt(\"2147483648\", 10) throws a NumberFormatException
parseInt(\"99\", 8) throws a NumberFormatException
parseInt(\"Kona\", 10) throws a NumberFormatException
parseInt(\"Kona\", 27) returns 411787
</pre></blockquote>

@param      s   the <code>String</code> containing the integer 
			representation to be parsed
@param      radix   the radix to be used while parsing <code>s</code>.
@return     the integer represented by the string argument in the
            specified radix.
@exception  NumberFormatException if the <code>String</code>
		   does not contain a parsable <code>int</code>."
      end

      operation 6997787 "parseInt"
	class_operation public explicit_return_type "int"
	nparams 1
	  param in name "s" explicit_type "String"
	nexceptions 1
	  exception class_ref 533659 // NumberFormatException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parses the string argument as a signed decimal integer. The 
characters in the string must all be decimal digits, except that 
the first character may be an ASCII minus sign <code>'-'</code> 
(<code>'&#92;u002D'</code>) to indicate a negative value. The resulting 
integer value is returned, exactly as if the argument and the radix 
10 were given as arguments to the 
{@link #parseInt(java.lang.String, int)} method.

@param s	   a <code>String</code> containing the <code>int</code>
            representation to be parsed
@return     the integer value represented by the argument in decimal.
@exception  NumberFormatException  if the string does not contain a
              parsable integer."
      end

      operation 6997915 "valueOf"
	class_operation public return_type class_ref 170395 // Integer
	nparams 2
	  param in name "s" explicit_type "String"
	  param in name "radix" explicit_type "int"
	nexceptions 1
	  exception class_ref 533659 // NumberFormatException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <code>Integer</code> object holding the value
extracted from the specified <code>String</code> when parsed
with the radix given by the second argument. The first argument
is interpreted as representing a signed integer in the radix
specified by the second argument, exactly as if the arguments
were given to the {@link #parseInt(java.lang.String, int)}
method. The result is an <code>Integer</code> object that
represents the integer value specified by the string.
<p>
In other words, this method returns an <code>Integer</code>
object equal to the value of:

<blockquote><code>
new Integer(Integer.parseInt(s, radix))  
</code></blockquote>

@param      s   the string to be parsed.
@param      radix the radix to be used in interpreting <code>s</code>
@return     an <code>Integer</code> object holding the value
            represented by the string argument in the specified
            radix.
@exception NumberFormatException if the <code>String</code>
		  does not contain a parsable <code>int</code>."
      end

      operation 6998043 "valueOf"
	class_operation public return_type class_ref 170395 // Integer
	nparams 1
	  param in name "s" explicit_type "String"
	nexceptions 1
	  exception class_ref 533659 // NumberFormatException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <code>Integer</code> object holding the
value of the specified <code>String</code>. The argument is
interpreted as representing a signed decimal integer, exactly
as if the argument were given to the {@link
#parseInt(java.lang.String)} method. The result is an
<code>Integer</code> object that represents the integer value
specified by the string.
<p>
In other words, this method returns an <code>Integer</code>
object equal to the value of:

<blockquote><code>
new Integer(Integer.parseInt(s))
</code></blockquote>

@param      s   the string to be parsed.
@return     an <code>Integer</code> object holding the value
            represented by the string argument.
@exception  NumberFormatException  if the string cannot be parsed 
            as an integer."
      end

      class 913179 "IntegerCache"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 6998171 "IntegerCache"
	  private explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	classrelation 1780763 // cache (<unidirectional association>)
	  relation 1780763 --->
	    a role_name "cache" multiplicity "[]" init_value "=  new Integer[-(-128) + 127 + 1]" class_relation const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 1780763 // cache (<unidirectional association>)
	    b parent class_ref 170395 // Integer
	end

	extra_member 161819 "initialization"
	  
	  cpp "" ""
	  java "  static {
	    for(int i = 0; i < cache.length; i++)
		cache[i] = new Integer(i - 128);
	}"
	  php ""
	  python ""
	  idl ""
	end
      end

      operation 6998299 "valueOf"
	class_operation public return_type class_ref 170395 // Integer
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <tt>Integer</tt> instance representing the specified
<tt>int</tt> value.
If a new <tt>Integer</tt> instance is not required, this method
should generally be used in preference to the constructor
{@link #Integer(int)}, as this method is likely to yield
significantly better space and time performance by caching
frequently requested values.

@param  i an <code>int</code> value.
@return a <tt>Integer</tt> instance representing <tt>i</tt>.
@since  1.5"
      end

      attribute 2731931 "value"
	const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The value of the <code>Integer</code>.

@serial
"
      end

      operation 6998427 "Integer"
	public explicit_return_type ""
	nparams 1
	  param in name "value" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a newly allocated <code>Integer</code> object that
represents the specified <code>int</code> value.

@param   value   the value to be represented by the 
			<code>Integer</code> object."
      end

      operation 6998555 "Integer"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	nexceptions 1
	  exception class_ref 533659 // NumberFormatException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a newly allocated <code>Integer</code> object that
represents the <code>int</code> value indicated by the
<code>String</code> parameter. The string is converted to an
<code>int</code> value in exactly the manner used by the
<code>parseInt</code> method for radix 10.

@param      s   the <code>String</code> to be converted to an
                <code>Integer</code>.
@exception  NumberFormatException  if the <code>String</code> does not
              contain a parsable integer.
@see        java.lang.Integer#parseInt(java.lang.String, int)"
      end

      operation 6998683 "byteValue"
	public explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this <code>Integer</code> as a
<code>byte</code>."
      end

      operation 6998811 "shortValue"
	public explicit_return_type "short"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this <code>Integer</code> as a
<code>short</code>."
      end

      operation 6998939 "intValue"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this <code>Integer</code> as an
<code>int</code>."
      end

      operation 6999067 "longValue"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this <code>Integer</code> as a
<code>long</code>."
      end

      operation 6999195 "floatValue"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this <code>Integer</code> as a
<code>float</code>."
      end

      operation 6999323 "doubleValue"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this <code>Integer</code> as a
<code>double</code>."
      end

      operation 6999451 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>String</code> object representing this
<code>Integer</code>'s value. The value is converted to signed
decimal representation and returned as a string, exactly as if
the integer value were given as an argument to the {@link
java.lang.Integer#toString(int)} method.

@return  a string representation of the value of this object in
         base&nbsp;10."
      end

      operation 6999579 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hash code for this <code>Integer</code>.

@return  a hash code value for this object, equal to the 
         primitive <code>int</code> value represented by this 
         <code>Integer</code> object. "
      end

      operation 6999707 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this object to the specified object.  The result is
<code>true</code> if and only if the argument is not
<code>null</code> and is an <code>Integer</code> object that
contains the same <code>int</code> value as this object.

@param   obj   the object to compare with.
@return  <code>true</code> if the objects are the same;
         <code>false</code> otherwise."
      end

      operation 6999835 "getInteger"
	class_operation public return_type class_ref 170395 // Integer
	nparams 1
	  param in name "nm" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines the integer value of the system property with the
specified name.
<p>
The first argument is treated as the name of a system property. 
System properties are accessible through the 
{@link java.lang.System#getProperty(java.lang.String)} method. The 
string value of this property is then interpreted as an integer 
value and an <code>Integer</code> object representing this value is 
returned. Details of possible numeric formats can be found with 
the definition of <code>getProperty</code>. 
<p>
If there is no property with the specified name, if the specified name
is empty or <code>null</code>, or if the property does not have 
the correct numeric format, then <code>null</code> is returned.
<p>
In other words, this method returns an <code>Integer</code>
object equal to the value of:

<blockquote><code>
getInteger(nm, null)
</code></blockquote>

@param   nm   property name.
@return  the <code>Integer</code> value of the property.
@see     java.lang.System#getProperty(java.lang.String)
@see     java.lang.System#getProperty(java.lang.String, java.lang.String)"
      end

      operation 6999963 "getInteger"
	class_operation public return_type class_ref 170395 // Integer
	nparams 2
	  param in name "nm" explicit_type "String"
	  param in name "val" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines the integer value of the system property with the
specified name.
<p>
The first argument is treated as the name of a system property.
System properties are accessible through the {@link
java.lang.System#getProperty(java.lang.String)} method. The 
string value of this property is then interpreted as an integer 
value and an <code>Integer</code> object representing this value is 
returned. Details of possible numeric formats can be found with 
the definition of <code>getProperty</code>. 
<p>
The second argument is the default value. An <code>Integer</code> object
that represents the value of the second argument is returned if there
is no property of the specified name, if the property does not have
the correct numeric format, or if the specified name is empty or
 <code>null</code>.
<p>
In other words, this method returns an <code>Integer</code> object 
equal to the value of:
<blockquote><code>
getInteger(nm, new Integer(val))
</code></blockquote>
but in practice it may be implemented in a manner such as: 
<blockquote><pre>
Integer result = getInteger(nm, null);
return (result == null) ? new Integer(val) : result;
</pre></blockquote>
to avoid the unnecessary allocation of an <code>Integer</code> 
object when the default value is not needed. 

@param   nm   property name.
@param   val   default value.
@return  the <code>Integer</code> value of the property.
@see     java.lang.System#getProperty(java.lang.String)
@see     java.lang.System#getProperty(java.lang.String, java.lang.String)"
      end

      operation 7000091 "getInteger"
	class_operation public return_type class_ref 170395 // Integer
	nparams 2
	  param in name "nm" explicit_type "String"
	  param inout name "val" type class_ref 170395 // Integer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the integer value of the system property with the
specified name.  The first argument is treated as the name of a
system property.  System properties are accessible through the
{@link java.lang.System#getProperty(java.lang.String)} method.
The string value of this property is then interpreted as an
integer value, as per the <code>Integer.decode</code> method,
and an <code>Integer</code> object representing this value is
returned.
<p>
<ul><li>If the property value begins with the two ASCII characters 
        <code>0x</code> or the ASCII character <code>#</code>, not 
     followed by a minus sign, then the rest of it is parsed as a 
     hexadecimal integer exactly as by the method 
     {@link #valueOf(java.lang.String, int)} with radix 16. 
<li>If the property value begins with the ASCII character 
    <code>0</code> followed by another character, it is parsed as an 
    octal integer exactly as by the method 
    {@link #valueOf(java.lang.String, int)} with radix 8. 
<li>Otherwise, the property value is parsed as a decimal integer 
exactly as by the method {@link #valueOf(java.lang.String, int)} 
with radix 10. 
</ul><p>
The second argument is the default value. The default value is
returned if there is no property of the specified name, if the
property does not have the correct numeric format, or if the
specified name is empty or <code>null</code>.

@param   nm   property name.
@param   val   default value.
@return  the <code>Integer</code> value of the property.
@see     java.lang.System#getProperty(java.lang.String)
@see java.lang.System#getProperty(java.lang.String, java.lang.String)
@see java.lang.Integer#decode"
      end

      operation 7000219 "decode"
	class_operation public return_type class_ref 170395 // Integer
	nparams 1
	  param in name "nm" explicit_type "String"
	nexceptions 1
	  exception class_ref 533659 // NumberFormatException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Decodes a <code>String</code> into an <code>Integer</code>.
Accepts decimal, hexadecimal, and octal numbers given
by the following grammar:

<blockquote>
<dl>
<dt><i>DecodableString:</i>
<dd><i>Sign<sub>opt</sub> DecimalNumeral</i>
<dd><i>Sign<sub>opt</sub></i> <code>0x</code> <i>HexDigits</i>
<dd><i>Sign<sub>opt</sub></i> <code>0X</code> <i>HexDigits</i>
<dd><i>Sign<sub>opt</sub></i> <code>#</code> <i>HexDigits</i>
<dd><i>Sign<sub>opt</sub></i> <code>0</code> <i>OctalDigits</i>
<p>
<dt><i>Sign:</i>
<dd><code>-</code>
</dl>
</blockquote>

<i>DecimalNumeral</i>, <i>HexDigits</i>, and <i>OctalDigits</i>
are defined in <a href=\"http://java.sun.com/docs/books/jls/second_edition/html/lexical.doc.html#48282\">&sect;3.10.1</a> 
of the <a href=\"http://java.sun.com/docs/books/jls/html/\">Java 
Language Specification</a>.
<p>
The sequence of characters following an (optional) negative
sign and/or radix specifier (&quot;<code>0x</code>&quot;,
&quot;<code>0X</code>&quot;, &quot;<code>#</code>&quot;, or
leading zero) is parsed as by the <code>Integer.parseInt</code>
method with the indicated radix (10, 16, or 8).  This sequence
of characters must represent a positive value or a {@link
NumberFormatException} will be thrown.  The result is negated
if first character of the specified <code>String</code> is the
minus sign.  No whitespace characters are permitted in the
<code>String</code>.

@param     nm the <code>String</code> to decode.
@return    a <code>Integer</code> object holding the <code>int</code>
		   value represented by <code>nm</code>
@exception NumberFormatException  if the <code>String</code> does not
           contain a parsable integer.
@see java.lang.Integer#parseInt(java.lang.String, int)
@since 1.2"
      end

      operation 7000347 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "anotherInteger" type class_ref 170395 // Integer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares two <code>Integer</code> objects numerically.

@param   anotherInteger   the <code>Integer</code> to be compared.
@return	the value <code>0</code> if this <code>Integer</code> is
		equal to the argument <code>Integer</code>; a value less than
		<code>0</code> if this <code>Integer</code> is numerically less
		than the argument <code>Integer</code>; and a value greater 
		than <code>0</code> if this <code>Integer</code> is numerically
		 greater than the argument <code>Integer</code> (signed
		 comparison).
@since   1.2"
      end

      attribute 2732059 "SIZE"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  32"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Bit twiddling

The number of bits used to represent an <tt>int</tt> value in two's
complement binary form.

@since 1.5
"
      end

      operation 7000475 "highestOneBit"
	class_operation public explicit_return_type "int"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <tt>int</tt> value with at most a single one-bit, in the
position of the highest-order (\"leftmost\") one-bit in the specified
<tt>int</tt> value.  Returns zero if the specified value has no
one-bits in its two's complement binary representation, that is, if it
is equal to zero.

@return an <tt>int</tt> value with a single one-bit, in the position
    of the highest-order one-bit in the specified value, or zero if
    the specified value is itself equal to zero.
@since 1.5"
      end

      operation 7000603 "lowestOneBit"
	class_operation public explicit_return_type "int"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <tt>int</tt> value with at most a single one-bit, in the
position of the lowest-order (\"rightmost\") one-bit in the specified
<tt>int</tt> value.  Returns zero if the specified value has no
one-bits in its two's complement binary representation, that is, if it
is equal to zero.

@return an <tt>int</tt> value with a single one-bit, in the position
    of the lowest-order one-bit in the specified value, or zero if
    the specified value is itself equal to zero.
@since 1.5"
      end

      operation 7000731 "numberOfLeadingZeros"
	class_operation public explicit_return_type "int"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of zero bits preceding the highest-order
(\"leftmost\") one-bit in the two's complement binary representation
of the specified <tt>int</tt> value.  Returns 32 if the
specified value has no one-bits in its two's complement representation,
in other words if it is equal to zero.

<p>Note that this method is closely related to the logarithm base 2.
For all positive <tt>int</tt> values x:
<ul>
<li>floor(log<sub>2</sub>(x)) = <tt>31 - numberOfLeadingZeros(x)</tt>
<li>ceil(log<sub>2</sub>(x)) = <tt>32 - numberOfLeadingZeros(x - 1)</tt>
</ul>

@return the number of zero bits preceding the highest-order
    (\"leftmost\") one-bit in the two's complement binary representation
    of the specified <tt>int</tt> value, or 32 if the value
    is equal to zero.
@since 1.5"
      end

      operation 7000859 "numberOfTrailingZeros"
	class_operation public explicit_return_type "int"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of zero bits following the lowest-order (\"rightmost\")
one-bit in the two's complement binary representation of the specified
<tt>int</tt> value.  Returns 32 if the specified value has no
one-bits in its two's complement representation, in other words if it is
equal to zero.

@return the number of zero bits following the lowest-order (\"rightmost\")
    one-bit in the two's complement binary representation of the
    specified <tt>int</tt> value, or 32 if the value is equal
    to zero.
@since 1.5"
      end

      operation 7000987 "bitCount"
	class_operation public explicit_return_type "int"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of one-bits in the two's complement binary
representation of the specified <tt>int</tt> value.  This function is
sometimes referred to as the <i>population count</i>.

@return the number of one-bits in the two's complement binary
    representation of the specified <tt>int</tt> value.
@since 1.5"
      end

      operation 7001115 "rotateLeft"
	class_operation public explicit_return_type "int"
	nparams 2
	  param in name "i" explicit_type "int"
	  param in name "distance" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value obtained by rotating the two's complement binary
representation of the specified <tt>int</tt> value left by the
specified number of bits.  (Bits shifted out of the left hand, or
high-order, side reenter on the right, or low-order.)

<p>Note that left rotation with a negative distance is equivalent to
right rotation: <tt>rotateLeft(val, -distance) == rotateRight(val,
distance)</tt>.  Note also that rotation by any multiple of 32 is a
no-op, so all but the last five bits of the rotation distance can be
ignored, even if the distance is negative: <tt>rotateLeft(val,
distance) == rotateLeft(val, distance & 0x1F)</tt>.

@return the value obtained by rotating the two's complement binary
    representation of the specified <tt>int</tt> value left by the
    specified number of bits.
@since 1.5"
      end

      operation 7001243 "rotateRight"
	class_operation public explicit_return_type "int"
	nparams 2
	  param in name "i" explicit_type "int"
	  param in name "distance" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value obtained by rotating the two's complement binary
representation of the specified <tt>int</tt> value right by the
specified number of bits.  (Bits shifted out of the right hand, or
low-order, side reenter on the left, or high-order.)

<p>Note that right rotation with a negative distance is equivalent to
left rotation: <tt>rotateRight(val, -distance) == rotateLeft(val,
distance)</tt>.  Note also that rotation by any multiple of 32 is a
no-op, so all but the last five bits of the rotation distance can be
ignored, even if the distance is negative: <tt>rotateRight(val,
distance) == rotateRight(val, distance & 0x1F)</tt>.

@return the value obtained by rotating the two's complement binary
    representation of the specified <tt>int</tt> value right by the
    specified number of bits.
@since 1.5"
      end

      operation 7001371 "reverse"
	class_operation public explicit_return_type "int"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value obtained by reversing the order of the bits in the
two's complement binary representation of the specified <tt>int</tt>
value.

@return the value obtained by reversing order of the bits in the
    specified <tt>int</tt> value.
@since 1.5"
      end

      operation 7001499 "signum"
	class_operation public explicit_return_type "int"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the signum function of the specified <tt>int</tt> value.  (The
return value is -1 if the specified value is negative; 0 if the
specified value is zero; and 1 if the specified value is positive.)

@return the signum function of the specified <tt>int</tt> value.
@since 1.5"
      end

      operation 7001627 "reverseBytes"
	class_operation public explicit_return_type "int"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value obtained by reversing the order of the bytes in the
two's complement representation of the specified <tt>int</tt> value.

@return the value obtained by reversing the bytes in the specified
    <tt>int</tt> value.
@since 1.5"
      end

      attribute 2732187 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  1360826667806852920L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " use serialVersionUID from JDK 1.0.2 for interoperability "
      end
    end

    class 173723 "Process"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The {@link ProcessBuilder#start()} and
{@link Runtime#exec(String[],String[],File) Runtime.exec}
methods create a native process and
return an instance of a subclass of <code>Process</code> that can
be used to control the process and obtain information about it.
The class <code>Process</code> provides methods for performing
input from the process, performing output to the process, waiting
for the process to complete, checking the exit status of the process,
and destroying (killing) the process.

<p>
The methods that create processes may not work well for special
processes on certain native platforms, such as native windowing
processes, daemon processes, Win16/DOS processes on Microsoft Windows, or shell
scripts. The created subprocess does not have its own terminal or
console. All its standard io (i.e. stdin, stdout, stderr)  operations
will be redirected to the parent process through three streams
({@link #getOutputStream()},
{@link #getInputStream()},
{@link #getErrorStream()}).
The parent process uses these streams to feed input to and get output
from the subprocess. Because some native platforms only provide
limited buffer size for standard input and output streams, failure
to promptly write the input stream or read the output stream of
the subprocess may cause the subprocess to block, and even deadlock.

<p>
The subprocess is not killed when there are no more references to 
the <code>Process</code> object, but rather the subprocess 
continues executing asynchronously.

<p>
There is no requirement that a process represented by a <code>Process</code> 
object execute asynchronously or concurrently with respect to the Java 
process that owns the <code>Process</code> object.

@author  unascribed
@version 1.23, 12/19/03
@see     ProcessBuilder
@see     Runtime#exec(String[], String[], File)
@since   JDK1.0"
      operation 7019675 "getOutputStream"
	abstract public return_type class_ref 183835 // OutputStream
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the output stream of the subprocess.
Output to the stream is piped into the standard input stream of 
the process represented by this <code>Process</code> object. 
<p>
Implementation note: It is a good idea for the output stream to 
be buffered.

@return  the output stream connected to the normal input of the
         subprocess."
      end

      operation 7019803 "getInputStream"
	abstract public return_type class_ref 179099 // InputStream
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the input stream of the subprocess.
The stream obtains data piped from the standard output stream 
of the process represented by this <code>Process</code> object. 
<p>
Implementation note: It is a good idea for the input stream to 
be buffered.

@return  the input stream connected to the normal output of the
         subprocess.
@see ProcessBuilder#redirectErrorStream()"
      end

      operation 7019931 "getErrorStream"
	abstract public return_type class_ref 179099 // InputStream
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the error stream of the subprocess.
The stream obtains data piped from the error output stream of the 
process represented by this <code>Process</code> object. 
<p>
Implementation note: It is a good idea for the input stream to be 
buffered.

@return  the input stream connected to the error stream of the
         subprocess.
@see ProcessBuilder#redirectErrorStream()"
      end

      operation 7020059 "waitFor"
	abstract public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 164123 // InterruptedException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "causes the current thread to wait, if necessary, until the 
process represented by this <code>Process</code> object has 
terminated. This method returns 
immediately if the subprocess has already terminated. If the
subprocess has not yet terminated, the calling thread will be
blocked until the subprocess exits.

@return     the exit value of the process. By convention, 
            <code>0</code> indicates normal termination.
@exception  InterruptedException  if the current thread is 
            {@link Thread#interrupt() interrupted} by another thread 
            while it is waiting, then the wait is ended and an 
            {@link InterruptedException} is thrown."
      end

      operation 7020187 "exitValue"
	abstract public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the exit value for the subprocess.

@return  the exit value of the subprocess represented by this 
         <code>Process</code> object. by convention, the value 
         <code>0</code> indicates normal termination.
@exception  IllegalThreadStateException  if the subprocess represented 
            by this <code>Process</code> object has not yet terminated."
      end

      operation 7020315 "destroy"
	abstract public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Kills the subprocess. The subprocess represented by this 
<code>Process</code> object is forcibly terminated."
      end
    end

    class 179611 "String"
      visibility public 
      nactuals 3
      actual class class_ref 221467 // Comparable
        rank 0 explicit_value "string"
      actual class class_ref 221467 // Comparable
        rank 1 explicit_value ""
      actual class class_ref 221467 // Comparable
        rank 2 explicit_value ""
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The <code>String</code> class represents character strings. All
string literals in Java programs, such as <code>\"abc\"</code>, are
implemented as instances of this class.
<p>
Strings are constant; their values cannot be changed after they
are created. String buffers support mutable strings.
Because String objects are immutable they can be shared. For example:
<p><blockquote><pre>
    String str = \"abc\";
</pre></blockquote><p>
is equivalent to:
<p><blockquote><pre>
    char data[] = {'a', 'b', 'c'};
    String str = new String(data);
</pre></blockquote><p>
Here are some more examples of how strings can be used:
<p><blockquote><pre>
    System.out.println(\"abc\");
    String cde = \"cde\";
    System.out.println(\"abc\" + cde);
    String c = \"abc\".substring(2,3);
    String d = cde.substring(1, 2);
</pre></blockquote>
<p>
The class <code>String</code> includes methods for examining
individual characters of the sequence, for comparing strings, for
searching strings, for extracting substrings, and for creating a
copy of a string with all characters translated to uppercase or to
lowercase. Case mapping is based on the Unicode Standard version 
specified by the {@link java.lang.Character Character} class.
<p>
The Java language provides special support for the string
concatenation operator (&nbsp;+&nbsp;), and for conversion of
other objects to strings. String concatenation is implemented
through the <code>StringBuilder</code>(or <code>StringBuffer</code>)
class and its <code>append</code> method.
String conversions are implemented through the method
<code>toString</code>, defined by <code>Object</code> and
inherited by all classes in Java. For additional information on
string concatenation and conversion, see Gosling, Joy, and Steele,
<i>The Java Language Specification</i>.

<p> Unless otherwise noted, passing a <tt>null</tt> argument to a constructor
or method in this class will cause a {@link NullPointerException} to be
thrown.

<p>A <code>String</code> represents a string in the UTF-16 format
in which <em>supplementary characters</em> are represented by <em>surrogate
pairs</em> (see the section <a href=\"Character.html#unicode\">Unicode
Character Representations</a> in the <code>Character</code> class for
more information).
Index values refer to <code>char</code> code units, so a supplementary
character uses two positions in a <code>String</code>.
<p>The <code>String</code> class provides methods for dealing with
Unicode code points (i.e., characters), in addition to those for
dealing with Unicode code units (i.e., <code>char</code> values).

@author  Lee Boynton
@author  Arthur van Hoff
@version 1.189, 10/21/05
@see     java.lang.Object#toString()
@see     java.lang.StringBuffer
@see     java.lang.StringBuilder
@see     java.nio.charset.Charset
@since   JDK1.0"
      classrelation 1788955 // <realization>
	relation 1788955 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1788955 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      classrelation 1789083 // <realization>
	relation 1789083 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 1789083 // <realization>
	  b parent class_ref 221467 // Comparable
      end

      classrelation 1789211 // <realization>
	relation 1789211 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1789211 // <realization>
	  b parent class_ref 393755 // CharSequence
      end

      attribute 2738843 "value"
	const_attribute private explicit_type "char"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The value is used for character storage. "
      end

      attribute 2738971 "offset"
	const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The offset is the first index of the storage that is used. "
      end

      attribute 2739099 "count"
	const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The count is the number of characters in the String. "
      end

      attribute 2739227 "hash"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Cache the hash code for the string 
 Default to 0"
      end

      attribute 2739355 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -6849794470754667710L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " use serialVersionUID from JDK 1.0.2 for interoperability "
      end

      classrelation 1789339 // serialPersistentFields (<unidirectional association>)
	relation 1789339 --->
	  a role_name "serialPersistentFields" multiplicity "[]" init_value "= 
        new ObjectStreamField[0]" class_relation const_relation private
	    comment "
Class String is special cased within the Serialization Stream Protocol.

A String instance is written initially into an ObjectOutputStream in the
following format:
<pre>
     <code>TC_STRING</code> (utf String)
</pre>
The String is written by method <code>DataOutput.writeUTF</code>.
A new handle is generated to  refer to all future references to the
string instance within the stream.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1789339 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 285723 // ObjectStreamField
      end

      operation 7052187 "String"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes a newly created <code>String</code> object so that it
represents an empty character sequence.  Note that use of this 
constructor is unnecessary since Strings are immutable. "
      end

      operation 7052315 "String"
	public explicit_return_type "String"
	nparams 1
	  param in name "original" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes a newly created <code>String</code> object so that it
represents the same sequence of characters as the argument; in other
words, the newly created string is a copy of the argument string. Unless 
an explicit copy of <code>original</code> is needed, use of this 
constructor is unnecessary since Strings are immutable. 

@param   original   a <code>String</code>."
      end

      operation 7052443 "String"
	public explicit_return_type "String"
	nparams 1
	  param in name "value" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allocates a new <code>String</code> so that it represents the
sequence of characters currently contained in the character array
argument. The contents of the character array are copied; subsequent
modification of the character array does not affect the newly created
string.

@param  value   the initial value of the string."
      end

      operation 7052571 "String"
	public explicit_return_type "String"
	nparams 3
	  param in name "value" explicit_type "char"
	  param in name "offset" explicit_type "int"
	  param in name "count" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allocates a new <code>String</code> that contains characters from
a subarray of the character array argument. The <code>offset</code>
argument is the index of the first character of the subarray and
the <code>count</code> argument specifies the length of the
subarray. The contents of the subarray are copied; subsequent
modification of the character array does not affect the newly
created string.

@param      value    array that is the source of characters.
@param      offset   the initial offset.
@param      count    the length.
@exception  IndexOutOfBoundsException  if the <code>offset</code>
              and <code>count</code> arguments index characters outside
              the bounds of the <code>value</code> array."
      end

      operation 7052699 "String"
	public explicit_return_type "String"
	nparams 3
	  param in name "codePoints" explicit_type "int"
	  param in name "offset" explicit_type "int"
	  param in name "count" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allocates a new <code>String</code> that contains characters
from a subarray of the Unicode code point array argument. The
<code>offset</code> argument is the index of the first code
point of the subarray and the <code>count</code> argument
specifies the length of the subarray. The contents of the
subarray are converted to <code>char</code>s; subsequent
modification of the <code>int</code> array does not affect the
newly created string.

@param codePoints array that is the source of Unicode code points.
@param offset     the initial offset.
@param count      the length.
@exception IllegalArgumentException if any invalid Unicode code point
is found in <code>codePoints</code>
@exception  IndexOutOfBoundsException  if the <code>offset</code>
              and <code>count</code> arguments index characters outside
              the bounds of the <code>codePoints</code> array.
@since 1.5"
      end

      operation 7052827 "String"
	public explicit_return_type "String"
	nparams 4
	  param in name "ascii" explicit_type "byte"
	  param in name "hibyte" explicit_type "int"
	  param in name "offset" explicit_type "int"
	  param in name "count" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Allocates a new <code>String</code> constructed from a subarray
of an array of 8-bit integer values.
<p>
The <code>offset</code> argument is the index of the first byte
of the subarray, and the <code>count</code> argument specifies the
length of the subarray.
<p>
Each <code>byte</code> in the subarray is converted to a
<code>char</code> as specified in the method above.

@deprecated This method does not properly convert bytes into characters.
As of JDK&nbsp;1.1, the preferred way to do this is via the
<code>String</code> constructors that take a charset name or that use
the platform's default charset.

@param      ascii     the bytes to be converted to characters.
@param      hibyte    the top 8 bits of each 16-bit Unicode character.
@param      offset    the initial offset.
@param      count     the length.
@exception  IndexOutOfBoundsException  if the <code>offset</code>
              or <code>count</code> argument is invalid.
@see        java.lang.String#String(byte[], int)
@see        java.lang.String#String(byte[], int, int, java.lang.String)
@see        java.lang.String#String(byte[], int, int)
@see        java.lang.String#String(byte[], java.lang.String)
@see        java.lang.String#String(byte[])"
      end

      operation 7052955 "String"
	public explicit_return_type "String"
	nparams 2
	  param in name "ascii" explicit_type "byte"
	  param in name "hibyte" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Allocates a new <code>String</code> containing characters
constructed from an array of 8-bit integer values. Each character
<i>c</i>in the resulting string is constructed from the
corresponding component <i>b</i> in the byte array such that:
<p><blockquote><pre>
    <b><i>c</i></b> == (char)(((hibyte &amp; 0xff) &lt;&lt; 8)
                        | (<b><i>b</i></b> &amp; 0xff))
</pre></blockquote>

@deprecated This method does not properly convert bytes into characters.
As of JDK&nbsp;1.1, the preferred way to do this is via the
<code>String</code> constructors that take a charset name or
that use the platform's default charset.

@param      ascii    the bytes to be converted to characters.
@param      hibyte   the top 8 bits of each 16-bit Unicode character.
@see        java.lang.String#String(byte[], int, int, java.lang.String)
@see        java.lang.String#String(byte[], int, int)
@see        java.lang.String#String(byte[], java.lang.String)
@see        java.lang.String#String(byte[])"
      end

      operation 7053083 "checkBounds"
	class_operation private explicit_return_type "void"
	nparams 3
	  param in name "bytes" explicit_type "byte"
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Common private utility method used to bounds check the byte array
and requested offset & length values used by the String(byte[],..)
constructors."
      end

      operation 7053211 "String"
	public explicit_return_type "String"
	nparams 4
	  param in name "bytes" explicit_type "byte"
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	  param in name "charsetName" explicit_type "String"
	nexceptions 1
	  exception class_ref 205723 // UnsupportedEncodingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new <tt>String</tt> by decoding the specified subarray of
bytes using the specified charset.  The length of the new
<tt>String</tt> is a function of the charset, and hence may not be equal
to the length of the subarray.

<p> The behavior of this constructor when the given bytes are not valid
in the given charset is unspecified.  The {@link
java.nio.charset.CharsetDecoder} class should be used when more control
over the decoding process is required.

@param  bytes   the bytes to be decoded into characters
@param  offset  the index of the first byte to decode
@param  length  the number of bytes to decode
@param  charsetName  the name of a supported
                {@link java.nio.charset.Charset </code>charset<code>}
@throws  UnsupportedEncodingException
         if the named charset is not supported
@throws  IndexOutOfBoundsException
         if the <tt>offset</tt> and <tt>length</tt> arguments
         index characters outside the bounds of the <tt>bytes</tt>
         array
@since JDK1.1"
      end

      operation 7053339 "String"
	public explicit_return_type "String"
	nparams 2
	  param in name "bytes" explicit_type "byte"
	  param in name "charsetName" explicit_type "String"
	nexceptions 1
	  exception class_ref 205723 // UnsupportedEncodingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new <tt>String</tt> by decoding the specified array of
bytes using the specified charset.  The length of the new
<tt>String</tt> is a function of the charset, and hence may not be equal
to the length of the byte array.

<p> The behavior of this constructor when the given bytes are not valid
in the given charset is unspecified.  The {@link
java.nio.charset.CharsetDecoder} class should be used when more control
over the decoding process is required.

@param  bytes   the bytes to be decoded into characters
@param  charsetName  the name of a supported
                {@link java.nio.charset.Charset </code>charset<code>}

@exception  UnsupportedEncodingException
            If the named charset is not supported
@since      JDK1.1"
      end

      operation 7053467 "String"
	public explicit_return_type "String"
	nparams 3
	  param in name "bytes" explicit_type "byte"
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new <tt>String</tt> by decoding the specified subarray of
bytes using the platform's default charset.  The length of the new
<tt>String</tt> is a function of the charset, and hence may not be equal
to the length of the subarray.

<p> The behavior of this constructor when the given bytes are not valid
in the default charset is unspecified.  The {@link
java.nio.charset.CharsetDecoder} class should be used when more control
over the decoding process is required.

@param  bytes   the bytes to be decoded into characters
@param  offset  the index of the first byte to decode
@param  length  the number of bytes to decode
@throws IndexOutOfBoundsException
        if the <code>offset</code> and the <code>length</code>
        arguments index characters outside the bounds of the
        <code>bytes</code> array
@since  JDK1.1"
      end

      operation 7053595 "String"
	public explicit_return_type "String"
	nparams 1
	  param in name "bytes" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new <tt>String</tt> by decoding the specified array of
bytes using the platform's default charset.  The length of the new
<tt>String</tt> is a function of the charset, and hence may not be equal
to the length of the byte array.

<p> The behavior of this constructor when the given bytes are not valid
in the default charset is unspecified.  The {@link
java.nio.charset.CharsetDecoder} class should be used when more control
over the decoding process is required.

@param  bytes   the bytes to be decoded into characters
@since  JDK1.1"
      end

      operation 7053723 "String"
	public explicit_return_type "String"
	nparams 1
	  param inout name "buffer" type class_ref 198171 // StringBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allocates a new string that contains the sequence of characters
currently contained in the string buffer argument. The contents of
the string buffer are copied; subsequent modification of the string
buffer does not affect the newly created string.

@param   buffer   a <code>StringBuffer</code>."
      end

      operation 7053851 "String"
	public explicit_return_type "String"
	nparams 1
	  param inout name "builder" type class_ref 360091 // StringBuilder
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allocates a new string that contains the sequence of characters
currently contained in the string builder argument. The contents of
the string builder are copied; subsequent modification of the string
builder does not affect the newly created string.

<p>This constructor is provided to ease migration to
<code>StringBuilder</code>. Obtaining a string from a string builder
via the <code>toString</code> method is likely to run faster and is
generally preferred.

@param   builder   a <code>StringBuilder</code>
@since 1.5"
      end

      operation 7053979 "String"
	package explicit_return_type "String"
	nparams 3
	  param in name "offset" explicit_type "int"
	  param in name "count" explicit_type "int"
	  param in name "value" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Package private constructor which shares value array for speed."
      end

      operation 7054107 "length"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the length of this string.
The length is equal to the number of 16-bit
Unicode characters in the string.

@return  the length of the sequence of characters represented by this
         object."
      end

      operation 7054235 "charAt"
	public explicit_return_type "char"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>char</code> value at the
specified index. An index ranges from <code>0</code> to
<code>length() - 1</code>. The first <code>char</code> value of the sequence
is at index <code>0</code>, the next at index <code>1</code>,
and so on, as for array indexing.

<p>If the <code>char</code> value specified by the index is a
<a href=\"Character.html#unicode\">surrogate</a>, the surrogate
value is returned.

@param      index   the index of the <code>char</code> value.
@return     the <code>char</code> value at the specified index of this string.
            The first <code>char</code> value is at index <code>0</code>.
@exception  IndexOutOfBoundsException  if the <code>index</code>
            argument is negative or not less than the length of this
            string."
      end

      operation 7054363 "codePointAt"
	public explicit_return_type "int"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the character (Unicode code point) at the specified
index. The index refers to <code>char</code> values
(Unicode code units) and ranges from <code>0</code> to
{@link #length()}<code> - 1</code>.

<p> If the <code>char</code> value specified at the given index
is in the high-surrogate range, the following index is less
than the length of this <code>String</code>, and the
<code>char</code> value at the following index is in the
low-surrogate range, then the supplementary code point
corresponding to this surrogate pair is returned. Otherwise,
the <code>char</code> value at the given index is returned.

@param      index the index to the <code>char</code> values
@return     the code point value of the character at the
            <code>index</code>
@exception  IndexOutOfBoundsException  if the <code>index</code>
            argument is negative or not less than the length of this
            string.
@since      1.5"
      end

      operation 7054491 "codePointBefore"
	public explicit_return_type "int"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the character (Unicode code point) before the specified
index. The index refers to <code>char</code> values
(Unicode code units) and ranges from <code>1</code> to {@link
CharSequence#length() length}.

<p> If the <code>char</code> value at <code>(index - 1)</code>
is in the low-surrogate range, <code>(index - 2)</code> is not
negative, and the <code>char</code> value at <code>(index -
2)</code> is in the high-surrogate range, then the
supplementary code point value of the surrogate pair is
returned. If the <code>char</code> value at <code>index -
1</code> is an unpaired low-surrogate or a high-surrogate, the
surrogate value is returned.

@param     index the index following the code point that should be returned
@return    the Unicode code point value before the given index.
@exception IndexOutOfBoundsException if the <code>index</code>
           argument is less than 1 or greater than the length
           of this string.
@since     1.5"
      end

      operation 7054619 "codePointCount"
	public explicit_return_type "int"
	nparams 2
	  param in name "beginIndex" explicit_type "int"
	  param in name "endIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of Unicode code points in the specified text
range of this <code>String</code>. The text range begins at the
specified <code>beginIndex</code> and extends to the
<code>char</code> at index <code>endIndex - 1</code>. Thus the
length (in <code>char</code>s) of the text range is
<code>endIndex-beginIndex</code>. Unpaired surrogates within
the text range count as one code point each.

@param beginIndex the index to the first <code>char</code> of
the text range.
@param endIndex the index after the last <code>char</code> of
the text range.
@return the number of Unicode code points in the specified text
range
@exception IndexOutOfBoundsException if the
<code>beginIndex</code> is negative, or <code>endIndex</code>
is larger than the length of this <code>String</code>, or
<code>beginIndex</code> is larger than <code>endIndex</code>.
@since  1.5"
      end

      operation 7054747 "offsetByCodePoints"
	public explicit_return_type "int"
	nparams 2
	  param in name "index" explicit_type "int"
	  param in name "codePointOffset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index within this <code>String</code> that is
offset from the given <code>index</code> by
<code>codePointOffset</code> code points. Unpaired surrogates
within the text range given by <code>index</code> and
<code>codePointOffset</code> count as one code point each.

@param index the index to be offset
@param codePointOffset the offset in code points
@return the index within this <code>String</code>
@exception IndexOutOfBoundsException if <code>index</code>
  is negative or larger then the length of this
  <code>String</code>, or if <code>codePointOffset</code> is positive
  and the substring starting with <code>index</code> has fewer
  than <code>codePointOffset</code> code points,
  or if <code>codePointOffset</code> is negative and the substring
  before <code>index</code> has fewer than the absolute value
  of <code>codePointOffset</code> code points.
@since 1.5"
      end

      operation 7054875 "getChars"
	package explicit_return_type "void"
	nparams 2
	  param in name "dst" explicit_type "char"
	  param in name "dstBegin" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copy characters from this string into dst starting at dstBegin.
This method doesn't perform any range checking."
      end

      operation 7055003 "getChars"
	public explicit_return_type "void"
	nparams 4
	  param in name "srcBegin" explicit_type "int"
	  param in name "srcEnd" explicit_type "int"
	  param in name "dst" explicit_type "char"
	  param in name "dstBegin" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copies characters from this string into the destination character
array.
<p>
The first character to be copied is at index <code>srcBegin</code>;
the last character to be copied is at index <code>srcEnd-1</code>
(thus the total number of characters to be copied is
<code>srcEnd-srcBegin</code>). The characters are copied into the
subarray of <code>dst</code> starting at index <code>dstBegin</code>
and ending at index:
<p><blockquote><pre>
    dstbegin + (srcEnd-srcBegin) - 1
</pre></blockquote>

@param      srcBegin   index of the first character in the string
                       to copy.
@param      srcEnd     index after the last character in the string
                       to copy.
@param      dst        the destination array.
@param      dstBegin   the start offset in the destination array.
@exception IndexOutOfBoundsException If any of the following
           is true:
           <ul><li><code>srcBegin</code> is negative.
           <li><code>srcBegin</code> is greater than <code>srcEnd</code>
           <li><code>srcEnd</code> is greater than the length of this
               string
           <li><code>dstBegin</code> is negative
           <li><code>dstBegin+(srcEnd-srcBegin)</code> is larger than
               <code>dst.length</code></ul>"
      end

      operation 7055131 "getBytes"
	public explicit_return_type "void"
	nparams 4
	  param in name "srcBegin" explicit_type "int"
	  param in name "srcEnd" explicit_type "int"
	  param in name "dst" explicit_type "byte"
	  param in name "dstBegin" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Copies characters from this string into the destination byte
array. Each byte receives the 8 low-order bits of the
corresponding character. The eight high-order bits of each character
are not copied and do not participate in the transfer in any way.
<p>
The first character to be copied is at index <code>srcBegin</code>;
the last character to be copied is at index <code>srcEnd-1</code>.
The total number of characters to be copied is
<code>srcEnd-srcBegin</code>. The characters, converted to bytes,
are copied into the subarray of <code>dst</code> starting at index
<code>dstBegin</code> and ending at index:
<p><blockquote><pre>
    dstbegin + (srcEnd-srcBegin) - 1
</pre></blockquote>

@deprecated This method does not properly convert characters into bytes.
As of JDK&nbsp;1.1, the preferred way to do this is via the
<code>getBytes()</code> method, which uses the platform's default
charset.

@param      srcBegin   index of the first character in the string
                       to copy.
@param      srcEnd     index after the last character in the string
                       to copy.
@param      dst        the destination array.
@param      dstBegin   the start offset in the destination array.
@exception IndexOutOfBoundsException if any of the following
           is true:
          <ul><li><code>srcBegin</code> is negative
          <li><code>srcBegin</code> is greater than <code>srcEnd</code>
          <li><code>srcEnd</code> is greater than the length of this
           String
          <li><code>dstBegin</code> is negative
          <li><code>dstBegin+(srcEnd-srcBegin)</code> is larger than
           <code>dst.length</code></ul>"
      end

      operation 7055259 "getBytes"
	public explicit_return_type "byte"
	nparams 1
	  param in name "charsetName" explicit_type "String"
	nexceptions 1
	  exception class_ref 205723 // UnsupportedEncodingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Encodes this <tt>String</tt> into a sequence of bytes using the
named charset, storing the result into a new byte array.

<p> The behavior of this method when this string cannot be encoded in
the given charset is unspecified.  The {@link
java.nio.charset.CharsetEncoder} class should be used when more control
over the encoding process is required.

@param  charsetName
        the name of a supported
        {@link java.nio.charset.Charset </code>charset<code>}

@return  The resultant byte array

@exception  UnsupportedEncodingException
            If the named charset is not supported

@since      JDK1.1"
      end

      operation 7055387 "getBytes"
	public explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Encodes this <tt>String</tt> into a sequence of bytes using the
platform's default charset, storing the result into a new byte array.

<p> The behavior of this method when this string cannot be encoded in
the default charset is unspecified.  The {@link
java.nio.charset.CharsetEncoder} class should be used when more control
over the encoding process is required.

@return  The resultant byte array

@since      JDK1.1"
      end

      operation 7055515 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "anObject" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this string to the specified object.
The result is <code>true</code> if and only if the argument is not
<code>null</code> and is a <code>String</code> object that represents
the same sequence of characters as this object.

@param   anObject   the object to compare this <code>String</code>
                    against.
@return  <code>true</code> if the <code>String </code>are equal;
         <code>false</code> otherwise.
@see     java.lang.String#compareTo(java.lang.String)
@see     java.lang.String#equalsIgnoreCase(java.lang.String)"
      end

      operation 7055643 "contentEquals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "sb" type class_ref 198171 // StringBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if and only if this <tt>String</tt> represents
the same sequence of characters as the specified <tt>StringBuffer</tt>.

@param   sb         the <tt>StringBuffer</tt> to compare to.
@return  <tt>true</tt> if and only if this <tt>String</tt> represents
         the same sequence of characters as the specified
         <tt>StringBuffer</tt>, otherwise <tt>false</tt>.
@throws NullPointerException if <code>sb</code> is <code>null</code>
@since 1.4"
      end

      operation 7055771 "contentEquals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "cs" type class_ref 393755 // CharSequence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if and only if this <tt>String</tt> represents
the same sequence of char values as the specified sequence.

@param   cs         the sequence to compare to.
@return  <tt>true</tt> if and only if this <tt>String</tt> represents
         the same sequence of char values as the specified
         sequence, otherwise <tt>false</tt>.
@throws NullPointerException if <code>cs</code> is <code>null</code>
@since 1.5"
      end

      operation 7055899 "equalsIgnoreCase"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "anotherString" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this <code>String</code> to another <code>String</code>,
ignoring case considerations.  Two strings are considered equal
ignoring case if they are of the same length, and corresponding
characters in the two strings are equal ignoring case.
<p>
Two characters <code>c1</code> and <code>c2</code> are considered
the same, ignoring case if at least one of the following is true:
<ul><li>The two characters are the same (as compared by the
<code>==</code> operator).
<li>Applying the method {@link java.lang.Character#toUpperCase(char)}
to each character produces the same result.
<li>Applying the method {@link java.lang.Character#toLowerCase(char)}
to each character produces the same result.</ul>

@param   anotherString   the <code>String</code> to compare this
                         <code>String</code> against.
@return  <code>true</code> if the argument is not <code>null</code>
         and the <code>String</code>s are equal,
         ignoring case; <code>false</code> otherwise.
@see     #equals(Object)
@see     java.lang.Character#toLowerCase(char)
@see java.lang.Character#toUpperCase(char)"
      end

      operation 7056027 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param in name "anotherString" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares two strings lexicographically.
The comparison is based on the Unicode value of each character in
the strings. The character sequence represented by this
<code>String</code> object is compared lexicographically to the
character sequence represented by the argument string. The result is
a negative integer if this <code>String</code> object
lexicographically precedes the argument string. The result is a
positive integer if this <code>String</code> object lexicographically
follows the argument string. The result is zero if the strings
are equal; <code>compareTo</code> returns <code>0</code> exactly when
the {@link #equals(Object)} method would return <code>true</code>.
<p>
This is the definition of lexicographic ordering. If two strings are
different, then either they have different characters at some index
that is a valid index for both strings, or their lengths are different,
or both. If they have different characters at one or more index
positions, let <i>k</i> be the smallest such index; then the string
whose character at position <i>k</i> has the smaller value, as
determined by using the &lt; operator, lexicographically precedes the
other string. In this case, <code>compareTo</code> returns the
difference of the two character values at position <code>k</code> in
the two string -- that is, the value:
<blockquote><pre>
this.charAt(k)-anotherString.charAt(k)
</pre></blockquote>
If there is no index position at which they differ, then the shorter
string lexicographically precedes the longer string. In this case,
<code>compareTo</code> returns the difference of the lengths of the
strings -- that is, the value:
<blockquote><pre>
this.length()-anotherString.length()
</pre></blockquote>

@param   anotherString   the <code>String</code> to be compared.
@return  the value <code>0</code> if the argument string is equal to
         this string; a value less than <code>0</code> if this string
         is lexicographically less than the string argument; and a
         value greater than <code>0</code> if this string is
         lexicographically greater than the string argument."
      end

      classrelation 1789467 // CASE_INSENSITIVE_ORDER (<unidirectional association>)
	relation 1789467 --->
	  a role_name "CASE_INSENSITIVE_ORDER" init_value "=  new CaseInsensitiveComparator()" class_relation const_relation public
	    comment "
A Comparator that orders <code>String</code> objects as by
<code>compareToIgnoreCase</code>. This comparator is serializable.
<p>
Note that this Comparator does <em>not</em> take locale into account,
and will result in an unsatisfactory ordering for certain locales.
The java.text package provides <em>Collators</em> to allow
locale-sensitive ordering.

@see     java.text.Collator#compare(String, String)
@since   1.2

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String> ${name}${value};
"
	    classrelation_ref 1789467 // CASE_INSENSITIVE_ORDER (<unidirectional association>)
	  b parent class_ref 138139 // Comparator
      end

      class 916891 "CaseInsensitiveComparator"
	visibility private 
	nactuals 4
	actual class class_ref 138139 // Comparator
	  rank 0 explicit_value "string"
	actual class class_ref 138139 // Comparator
	  rank 1 explicit_value ""
	actual class class_ref 138139 // Comparator
	  rank 2 explicit_value ""
	actual class class_ref 138139 // Comparator
	  rank 3 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1789595 // <realization>
	  relation 1789595 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 1789595 // <realization>
	    b parent class_ref 138139 // Comparator
	end

	classrelation 1789723 // <realization>
	  relation 1789723 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 1789723 // <realization>
	    b parent class_ref 137883 // Serializable
	end

	attribute 2739483 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value "=  8575799808933029326L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " use serialVersionUID from JDK 1.2.2 for interoperability"
	end

	operation 7056155 "compare"
	  public explicit_return_type "int"
	  nparams 2
	    param in name "s1" explicit_type "String"
	    param in name "s2" explicit_type "String"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 7056283 "compareToIgnoreCase"
	public explicit_return_type "int"
	nparams 1
	  param in name "str" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares two strings lexicographically, ignoring case
differences. This method returns an integer whose sign is that of
calling <code>compareTo</code> with normalized versions of the strings
where case differences have been eliminated by calling
<code>Character.toLowerCase(Character.toUpperCase(character))</code> on
each character.
<p>
Note that this method does <em>not</em> take locale into account,
and will result in an unsatisfactory ordering for certain locales.
The java.text package provides <em>collators</em> to allow
locale-sensitive ordering.

@param   str   the <code>String</code> to be compared.
@return  a negative integer, zero, or a positive integer as the
		specified String is greater than, equal to, or less
		than this String, ignoring case considerations.
@see     java.text.Collator#compare(String, String)
@since   1.2"
      end

      operation 7056411 "regionMatches"
	public explicit_return_type "boolean"
	nparams 4
	  param in name "toffset" explicit_type "int"
	  param in name "other" explicit_type "String"
	  param in name "ooffset" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if two string regions are equal.
<p>
A substring of this <tt>String</tt> object is compared to a substring
of the argument other. The result is true if these substrings
represent identical character sequences. The substring of this
<tt>String</tt> object to be compared begins at index <tt>toffset</tt>
and has length <tt>len</tt>. The substring of other to be compared
begins at index <tt>ooffset</tt> and has length <tt>len</tt>. The
result is <tt>false</tt> if and only if at least one of the following
is true:
<ul><li><tt>toffset</tt> is negative.
<li><tt>ooffset</tt> is negative.
<li><tt>toffset+len</tt> is greater than the length of this
<tt>String</tt> object.
<li><tt>ooffset+len</tt> is greater than the length of the other
argument.
<li>There is some nonnegative integer <i>k</i> less than <tt>len</tt>
such that:
<tt>this.charAt(toffset+<i>k</i>)&nbsp;!=&nbsp;other.charAt(ooffset+<i>k</i>)</tt>
</ul>

@param   toffset   the starting offset of the subregion in this string.
@param   other     the string argument.
@param   ooffset   the starting offset of the subregion in the string
                   argument.
@param   len       the number of characters to compare.
@return  <code>true</code> if the specified subregion of this string
         exactly matches the specified subregion of the string argument;
         <code>false</code> otherwise."
      end

      operation 7056539 "regionMatches"
	public explicit_return_type "boolean"
	nparams 5
	  param inout name "ignoreCase" explicit_type "boolean"
	  param in name "toffset" explicit_type "int"
	  param in name "other" explicit_type "String"
	  param in name "ooffset" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if two string regions are equal.
<p>
A substring of this <tt>String</tt> object is compared to a substring
of the argument <tt>other</tt>. The result is <tt>true</tt> if these
substrings represent character sequences that are the same, ignoring
case if and only if <tt>ignoreCase</tt> is true. The substring of
this <tt>String</tt> object to be compared begins at index
<tt>toffset</tt> and has length <tt>len</tt>. The substring of
<tt>other</tt> to be compared begins at index <tt>ooffset</tt> and
has length <tt>len</tt>. The result is <tt>false</tt> if and only if
at least one of the following is true:
<ul><li><tt>toffset</tt> is negative.
<li><tt>ooffset</tt> is negative.
<li><tt>toffset+len</tt> is greater than the length of this
<tt>String</tt> object.
<li><tt>ooffset+len</tt> is greater than the length of the other
argument.
<li><tt>ignoreCase</tt> is <tt>false</tt> and there is some nonnegative
integer <i>k</i> less than <tt>len</tt> such that:
<blockquote><pre>
this.charAt(toffset+k) != other.charAt(ooffset+k)
</pre></blockquote>
<li><tt>ignoreCase</tt> is <tt>true</tt> and there is some nonnegative
integer <i>k</i> less than <tt>len</tt> such that:
<blockquote><pre>
Character.toLowerCase(this.charAt(toffset+k)) !=
Character.toLowerCase(other.charAt(ooffset+k))
</pre></blockquote>
and:
<blockquote><pre>
Character.toUpperCase(this.charAt(toffset+k)) !=
        Character.toUpperCase(other.charAt(ooffset+k))
</pre></blockquote>
</ul>

@param   ignoreCase   if <code>true</code>, ignore case when comparing
                      characters.
@param   toffset      the starting offset of the subregion in this
                      string.
@param   other        the string argument.
@param   ooffset      the starting offset of the subregion in the string
                      argument.
@param   len          the number of characters to compare.
@return  <code>true</code> if the specified subregion of this string
         matches the specified subregion of the string argument;
         <code>false</code> otherwise. Whether the matching is exact
         or case insensitive depends on the <code>ignoreCase</code>
         argument."
      end

      operation 7056667 "startsWith"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "prefix" explicit_type "String"
	  param in name "toffset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if this string starts with the specified prefix beginning
a specified index.

@param   prefix    the prefix.
@param   toffset   where to begin looking in the string.
@return  <code>true</code> if the character sequence represented by the
         argument is a prefix of the substring of this object starting
         at index <code>toffset</code>; <code>false</code> otherwise.
         The result is <code>false</code> if <code>toffset</code> is
         negative or greater than the length of this
         <code>String</code> object; otherwise the result is the same
         as the result of the expression
         <pre>
         this.substring(toffset).startsWith(prefix)
         </pre>"
      end

      operation 7056795 "startsWith"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "prefix" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if this string starts with the specified prefix.

@param   prefix   the prefix.
@return  <code>true</code> if the character sequence represented by the
         argument is a prefix of the character sequence represented by
         this string; <code>false</code> otherwise.
         Note also that <code>true</code> will be returned if the
         argument is an empty string or is equal to this
         <code>String</code> object as determined by the
         {@link #equals(Object)} method.
@since   1. 0"
      end

      operation 7056923 "endsWith"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "suffix" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if this string ends with the specified suffix.

@param   suffix   the suffix.
@return  <code>true</code> if the character sequence represented by the
         argument is a suffix of the character sequence represented by
         this object; <code>false</code> otherwise. Note that the
         result will be <code>true</code> if the argument is the
         empty string or is equal to this <code>String</code> object
         as determined by the {@link #equals(Object)} method."
      end

      operation 7057051 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hash code for this string. The hash code for a
<code>String</code> object is computed as
<blockquote><pre>
s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]
</pre></blockquote>
using <code>int</code> arithmetic, where <code>s[i]</code> is the
<i>i</i>th character of the string, <code>n</code> is the length of
the string, and <code>^</code> indicates exponentiation.
(The hash value of the empty string is zero.)

@return  a hash code value for this object."
      end

      operation 7057179 "indexOf"
	public explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index within this string of the first occurrence of
the specified character. If a character with value
<code>ch</code> occurs in the character sequence represented by
this <code>String</code> object, then the index (in Unicode
code units) of the first such occurrence is returned. For
values of <code>ch</code> in the range from 0 to 0xFFFF
(inclusive), this is the smallest value <i>k</i> such that:
<blockquote><pre>
this.charAt(<i>k</i>) == ch
</pre></blockquote>
is true. For other values of <code>ch</code>, it is the
smallest value <i>k</i> such that:
<blockquote><pre>
this.codePointAt(<i>k</i>) == ch
</pre></blockquote>
is true. In either case, if no such character occurs in this
string, then <code>-1</code> is returned.

@param   ch   a character (Unicode code point).
@return  the index of the first occurrence of the character in the
         character sequence represented by this object, or
         <code>-1</code> if the character does not occur."
      end

      operation 7057307 "indexOf"
	public explicit_return_type "int"
	nparams 2
	  param in name "ch" explicit_type "int"
	  param in name "fromIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index within this string of the first occurrence of the
specified character, starting the search at the specified index.
<p>
If a character with value <code>ch</code> occurs in the
character sequence represented by this <code>String</code>
object at an index no smaller than <code>fromIndex</code>, then
the index of the first such occurrence is returned. For values
of <code>ch</code> in the range from 0 to 0xFFFF (inclusive),
this is the smallest value <i>k</i> such that:
<blockquote><pre>
(this.charAt(<i>k</i>) == ch) && (<i>k</i> &gt;= fromIndex)
</pre></blockquote>
is true. For other values of <code>ch</code>, it is the
smallest value <i>k</i> such that:
<blockquote><pre>
(this.codePointAt(<i>k</i>) == ch) && (<i>k</i> &gt;= fromIndex)
</pre></blockquote>
is true. In either case, if no such character occurs in this
string at or after position <code>fromIndex</code>, then
<code>-1</code> is returned.

<p>
There is no restriction on the value of <code>fromIndex</code>. If it
is negative, it has the same effect as if it were zero: this entire
string may be searched. If it is greater than the length of this
string, it has the same effect as if it were equal to the length of
this string: <code>-1</code> is returned.

<p>All indices are specified in <code>char</code> values
(Unicode code units).

@param   ch          a character (Unicode code point).
@param   fromIndex   the index to start the search from.
@return  the index of the first occurrence of the character in the
         character sequence represented by this object that is greater
         than or equal to <code>fromIndex</code>, or <code>-1</code>
         if the character does not occur."
      end

      operation 7057435 "lastIndexOf"
	public explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index within this string of the last occurrence of
the specified character. For values of <code>ch</code> in the
range from 0 to 0xFFFF (inclusive), the index (in Unicode code
units) returned is the largest value <i>k</i> such that:
<blockquote><pre>
this.charAt(<i>k</i>) == ch
</pre></blockquote>
is true. For other values of <code>ch</code>, it is the
largest value <i>k</i> such that:
<blockquote><pre>
this.codePointAt(<i>k</i>) == ch
</pre></blockquote>
is true.  In either case, if no such character occurs in this
string, then <code>-1</code> is returned.  The
<code>String</code> is searched backwards starting at the last
character.

@param   ch   a character (Unicode code point).
@return  the index of the last occurrence of the character in the
         character sequence represented by this object, or
         <code>-1</code> if the character does not occur."
      end

      operation 7057563 "lastIndexOf"
	public explicit_return_type "int"
	nparams 2
	  param in name "ch" explicit_type "int"
	  param in name "fromIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index within this string of the last occurrence of
the specified character, searching backward starting at the
specified index. For values of <code>ch</code> in the range
from 0 to 0xFFFF (inclusive), the index returned is the largest
value <i>k</i> such that:
<blockquote><pre>
(this.charAt(<i>k</i>) == ch) && (<i>k</i> &lt;= fromIndex)
</pre></blockquote>
is true. For other values of <code>ch</code>, it is the
largest value <i>k</i> such that:
<blockquote><pre>
(this.codePointAt(<i>k</i>) == ch) && (<i>k</i> &lt;= fromIndex)
</pre></blockquote>
is true. In either case, if no such character occurs in this
string at or before position <code>fromIndex</code>, then
<code>-1</code> is returned.

<p>All indices are specified in <code>char</code> values
(Unicode code units).

@param   ch          a character (Unicode code point).
@param   fromIndex   the index to start the search from. There is no
         restriction on the value of <code>fromIndex</code>. If it is
         greater than or equal to the length of this string, it has
         the same effect as if it were equal to one less than the
         length of this string: this entire string may be searched.
         If it is negative, it has the same effect as if it were -1:
         -1 is returned.
@return  the index of the last occurrence of the character in the
         character sequence represented by this object that is less
         than or equal to <code>fromIndex</code>, or <code>-1</code>
         if the character does not occur before that point."
      end

      operation 7057691 "indexOf"
	public explicit_return_type "int"
	nparams 1
	  param in name "str" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index within this string of the first occurrence of the
specified substring. The integer returned is the smallest value
<i>k</i> such that:
<blockquote><pre>
this.startsWith(str, <i>k</i>)
</pre></blockquote>
is <code>true</code>.

@param   str   any string.
@return  if the string argument occurs as a substring within this
         object, then the index of the first character of the first
         such substring is returned; if it does not occur as a
         substring, <code>-1</code> is returned."
      end

      operation 7057819 "indexOf"
	public explicit_return_type "int"
	nparams 2
	  param in name "str" explicit_type "String"
	  param in name "fromIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index within this string of the first occurrence of the
specified substring, starting at the specified index.  The integer
returned is the smallest value <tt>k</tt> for which:
<blockquote><pre>
    k &gt;= Math.min(fromIndex, str.length()) && this.startsWith(str, k)
</pre></blockquote>
If no such value of <i>k</i> exists, then -1 is returned.

@param   str         the substring for which to search.
@param   fromIndex   the index from which to start the search.
@return  the index within this string of the first occurrence of the
         specified substring, starting at the specified index."
      end

      operation 7057947 "indexOf"
	class_operation package explicit_return_type "int"
	nparams 7
	  param in name "source" explicit_type "char"
	  param in name "sourceOffset" explicit_type "int"
	  param in name "sourceCount" explicit_type "int"
	  param in name "target" explicit_type "char"
	  param in name "targetOffset" explicit_type "int"
	  param in name "targetCount" explicit_type "int"
	  param in name "fromIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Code shared by String and StringBuffer to do searches. The
source is the character array being searched, and the target
is the string being searched for.

@param   source       the characters being searched.
@param   sourceOffset offset of the source string.
@param   sourceCount  count of the source string.
@param   target       the characters being searched for.
@param   targetOffset offset of the target string.
@param   targetCount  count of the target string.
@param   fromIndex    the index to begin searching from."
      end

      operation 7058075 "lastIndexOf"
	public explicit_return_type "int"
	nparams 1
	  param in name "str" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index within this string of the rightmost occurrence
of the specified substring.  The rightmost empty string \"\" is
considered to occur at the index value <code>this.length()</code>.
The returned index is the largest value <i>k</i> such that
<blockquote><pre>
this.startsWith(str, k)
</pre></blockquote>
is true.

@param   str   the substring to search for.
@return  if the string argument occurs one or more times as a substring
         within this object, then the index of the first character of
         the last such substring is returned. If it does not occur as
         a substring, <code>-1</code> is returned."
      end

      operation 7058203 "lastIndexOf"
	public explicit_return_type "int"
	nparams 2
	  param in name "str" explicit_type "String"
	  param in name "fromIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index within this string of the last occurrence of the
specified substring, searching backward starting at the specified index.
The integer returned is the largest value <i>k</i> such that:
<blockquote><pre>
    k &lt;= Math.min(fromIndex, str.length()) && this.startsWith(str, k)
</pre></blockquote>
If no such value of <i>k</i> exists, then -1 is returned.

@param   str         the substring to search for.
@param   fromIndex   the index to start the search from.
@return  the index within this string of the last occurrence of the
         specified substring."
      end

      operation 7058331 "lastIndexOf"
	class_operation package explicit_return_type "int"
	nparams 7
	  param in name "source" explicit_type "char"
	  param in name "sourceOffset" explicit_type "int"
	  param in name "sourceCount" explicit_type "int"
	  param in name "target" explicit_type "char"
	  param in name "targetOffset" explicit_type "int"
	  param in name "targetCount" explicit_type "int"
	  param in name "fromIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Code shared by String and StringBuffer to do searches. The
source is the character array being searched, and the target
is the string being searched for.

@param   source       the characters being searched.
@param   sourceOffset offset of the source string.
@param   sourceCount  count of the source string.
@param   target       the characters being searched for.
@param   targetOffset offset of the target string.
@param   targetCount  count of the target string.
@param   fromIndex    the index to begin searching from."
      end

      operation 7058459 "substring"
	public explicit_return_type "String"
	nparams 1
	  param in name "beginIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new string that is a substring of this string. The
substring begins with the character at the specified index and
extends to the end of this string. <p>
Examples:
<blockquote><pre>
\"unhappy\".substring(2) returns \"happy\"
\"Harbison\".substring(3) returns \"bison\"
\"emptiness\".substring(9) returns \"\" (an empty string)
</pre></blockquote>

@param      beginIndex   the beginning index, inclusive.
@return     the specified substring.
@exception  IndexOutOfBoundsException  if
            <code>beginIndex</code> is negative or larger than the
            length of this <code>String</code> object."
      end

      operation 7058587 "substring"
	public explicit_return_type "String"
	nparams 2
	  param in name "beginIndex" explicit_type "int"
	  param in name "endIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new string that is a substring of this string. The
substring begins at the specified <code>beginIndex</code> and
extends to the character at index <code>endIndex - 1</code>.
Thus the length of the substring is <code>endIndex-beginIndex</code>.
<p>
Examples:
<blockquote><pre>
\"hamburger\".substring(4, 8) returns \"urge\"
\"smiles\".substring(1, 5) returns \"mile\"
</pre></blockquote>

@param      beginIndex   the beginning index, inclusive.
@param      endIndex     the ending index, exclusive.
@return     the specified substring.
@exception  IndexOutOfBoundsException  if the
            <code>beginIndex</code> is negative, or
            <code>endIndex</code> is larger than the length of
            this <code>String</code> object, or
            <code>beginIndex</code> is larger than
            <code>endIndex</code>."
      end

      operation 7058715 "subSequence"
	public return_type class_ref 393755 // CharSequence
	nparams 2
	  param in name "beginIndex" explicit_type "int"
	  param in name "endIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new character sequence that is a subsequence of this sequence.

<p> An invocation of this method of the form

<blockquote><pre>
str.subSequence(begin,&nbsp;end)</pre></blockquote>

behaves in exactly the same way as the invocation

<blockquote><pre>
str.substring(begin,&nbsp;end)</pre></blockquote>

This method is defined so that the <tt>String</tt> class can implement
the {@link CharSequence} interface. </p>

@param      beginIndex   the begin index, inclusive.
@param      endIndex     the end index, exclusive.
@return     the specified subsequence.

@throws  IndexOutOfBoundsException
         if <tt>beginIndex</tt> or <tt>endIndex</tt> are negative,
         if <tt>endIndex</tt> is greater than <tt>length()</tt>,
         or if <tt>beginIndex</tt> is greater than <tt>startIndex</tt>

@since 1.4
@spec JSR-51"
      end

      operation 7058843 "concat"
	public explicit_return_type "String"
	nparams 1
	  param in name "str" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Concatenates the specified string to the end of this string.
<p>
If the length of the argument string is <code>0</code>, then this
<code>String</code> object is returned. Otherwise, a new
<code>String</code> object is created, representing a character
sequence that is the concatenation of the character sequence
represented by this <code>String</code> object and the character
sequence represented by the argument string.<p>
Examples:
<blockquote><pre>
\"cares\".concat(\"s\") returns \"caress\"
\"to\".concat(\"get\").concat(\"her\") returns \"together\"
</pre></blockquote>

@param   str   the <code>String</code> that is concatenated to the end
               of this <code>String</code>.
@return  a string that represents the concatenation of this object's
         characters followed by the string argument's characters."
      end

      operation 7058971 "replace"
	public explicit_return_type "String"
	nparams 2
	  param in name "oldChar" explicit_type "char"
	  param in name "newChar" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new string resulting from replacing all occurrences of
<code>oldChar</code> in this string with <code>newChar</code>.
<p>
If the character <code>oldChar</code> does not occur in the
character sequence represented by this <code>String</code> object,
then a reference to this <code>String</code> object is returned.
Otherwise, a new <code>String</code> object is created that
represents a character sequence identical to the character sequence
represented by this <code>String</code> object, except that every
occurrence of <code>oldChar</code> is replaced by an occurrence
of <code>newChar</code>.
<p>
Examples:
<blockquote><pre>
\"mesquite in your cellar\".replace('e', 'o')
        returns \"mosquito in your collar\"
\"the war of baronets\".replace('r', 'y')
        returns \"the way of bayonets\"
\"sparring with a purple porpoise\".replace('p', 't')
        returns \"starring with a turtle tortoise\"
\"JonL\".replace('q', 'x') returns \"JonL\" (no change)
</pre></blockquote>

@param   oldChar   the old character.
@param   newChar   the new character.
@return  a string derived from this string by replacing every
         occurrence of <code>oldChar</code> with <code>newChar</code>."
      end

      operation 7059099 "matches"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "regex" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells whether or not this string matches the given <a
href=\"../util/regex/Pattern.html#sum\">regular expression</a>.

<p> An invocation of this method of the form
<i>str</i><tt>.matches(</tt><i>regex</i><tt>)</tt> yields exactly the
same result as the expression

<blockquote><tt> {@link java.util.regex.Pattern}.{@link
java.util.regex.Pattern#matches(String,CharSequence)
matches}(</tt><i>regex</i><tt>,</tt> <i>str</i><tt>)</tt></blockquote>

@param   regex
         the regular expression to which this string is to be matched

@return  <tt>true</tt> if, and only if, this string matches the
         given regular expression

@throws  PatternSyntaxException
         if the regular expression's syntax is invalid

@see java.util.regex.Pattern

@since 1.4
@spec JSR-51"
      end

      operation 7059227 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "s" type class_ref 393755 // CharSequence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if and only if this string contains the specified
sequence of char values.

@param s the sequence to search for
@return true if this string contains <code>s</code>, false otherwise
@throws NullPointerException if <code>s</code> is <code>null</code>
@since 1.5"
      end

      operation 7059355 "replaceFirst"
	public explicit_return_type "String"
	nparams 2
	  param in name "regex" explicit_type "String"
	  param in name "replacement" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replaces the first substring of this string that matches the given <a
href=\"../util/regex/Pattern.html#sum\">regular expression</a> with the
given replacement.

<p> An invocation of this method of the form
<i>str</i><tt>.replaceFirst(</tt><i>regex</i><tt>,</tt> <i>repl</i><tt>)</tt>
yields exactly the same result as the expression

<blockquote><tt>
{@link java.util.regex.Pattern}.{@link java.util.regex.Pattern#compile
compile}(</tt><i>regex</i><tt>).{@link
java.util.regex.Pattern#matcher(java.lang.CharSequence)
matcher}(</tt><i>str</i><tt>).{@link java.util.regex.Matcher#replaceFirst
replaceFirst}(</tt><i>repl</i><tt>)</tt></blockquote>

@param   regex
         the regular expression to which this string is to be matched

@return  The resulting <tt>String</tt>

@throws  PatternSyntaxException
         if the regular expression's syntax is invalid

@see java.util.regex.Pattern

@since 1.4
@spec JSR-51"
      end

      operation 7059483 "replaceAll"
	public explicit_return_type "String"
	nparams 2
	  param in name "regex" explicit_type "String"
	  param in name "replacement" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replaces each substring of this string that matches the given <a
href=\"../util/regex/Pattern.html#sum\">regular expression</a> with the
given replacement.

<p> An invocation of this method of the form
<i>str</i><tt>.replaceAll(</tt><i>regex</i><tt>,</tt> <i>repl</i><tt>)</tt>
yields exactly the same result as the expression

<blockquote><tt>
{@link java.util.regex.Pattern}.{@link java.util.regex.Pattern#compile
compile}(</tt><i>regex</i><tt>).{@link
java.util.regex.Pattern#matcher(java.lang.CharSequence)
matcher}(</tt><i>str</i><tt>).{@link java.util.regex.Matcher#replaceAll
replaceAll}(</tt><i>repl</i><tt>)</tt></blockquote>

@param   regex
         the regular expression to which this string is to be matched

@return  The resulting <tt>String</tt>

@throws  PatternSyntaxException
         if the regular expression's syntax is invalid

@see java.util.regex.Pattern

@since 1.4
@spec JSR-51"
      end

      operation 7059611 "replace"
	public explicit_return_type "String"
	nparams 2
	  param inout name "target" type class_ref 393755 // CharSequence
	  param inout name "replacement" type class_ref 393755 // CharSequence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replaces each substring of this string that matches the literal target
sequence with the specified literal replacement sequence. The 
replacement proceeds from the beginning of the string to the end, for 
example, replacing \"aa\" with \"b\" in the string \"aaa\" will result in 
\"ba\" rather than \"ab\".

@param  target The sequence of char values to be replaced
@param  replacement The replacement sequence of char values
@return  The resulting string
@throws NullPointerException if <code>target</code> or
        <code>replacement</code> is <code>null</code>.
@since 1.5"
      end

      operation 7059739 "split"
	public explicit_return_type "String"
	nparams 2
	  param in name "regex" explicit_type "String"
	  param in name "limit" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Splits this string around matches of the given 
<a href=\"../util/regex/Pattern.html#sum\">regular expression</a>.

<p> The array returned by this method contains each substring of this
string that is terminated by another substring that matches the given
expression or is terminated by the end of the string.  The substrings in
the array are in the order in which they occur in this string.  If the
expression does not match any part of the input then the resulting array
has just one element, namely this string.

<p> The <tt>limit</tt> parameter controls the number of times the
pattern is applied and therefore affects the length of the resulting
array.  If the limit <i>n</i> is greater than zero then the pattern
will be applied at most <i>n</i>&nbsp;-&nbsp;1 times, the array's
length will be no greater than <i>n</i>, and the array's last entry
will contain all input beyond the last matched delimiter.  If <i>n</i>
is non-positive then the pattern will be applied as many times as
possible and the array can have any length.  If <i>n</i> is zero then
the pattern will be applied as many times as possible, the array can
have any length, and trailing empty strings will be discarded.

<p> The string <tt>\"boo:and:foo\"</tt>, for example, yields the
following results with these parameters:

<blockquote><table cellpadding=1 cellspacing=0 summary=\"Split example showing regex, limit, and result\">
<tr>
    <th>Regex</th>
    <th>Limit</th>
    <th>Result</th>
</tr>
<tr><td align=center>:</td>
    <td align=center>2</td>
    <td><tt>{ \"boo\", \"and:foo\" }</tt></td></tr>
<tr><td align=center>:</td>
    <td align=center>5</td>
    <td><tt>{ \"boo\", \"and\", \"foo\" }</tt></td></tr>
<tr><td align=center>:</td>
    <td align=center>-2</td>
    <td><tt>{ \"boo\", \"and\", \"foo\" }</tt></td></tr>
<tr><td align=center>o</td>
    <td align=center>5</td>
    <td><tt>{ \"b\", \"\", \":and:f\", \"\", \"\" }</tt></td></tr>
<tr><td align=center>o</td>
    <td align=center>-2</td>
    <td><tt>{ \"b\", \"\", \":and:f\", \"\", \"\" }</tt></td></tr>
<tr><td align=center>o</td>
    <td align=center>0</td>
    <td><tt>{ \"b\", \"\", \":and:f\" }</tt></td></tr>
</table></blockquote>

<p> An invocation of this method of the form
<i>str.</i><tt>split(</tt><i>regex</i><tt>,</tt>&nbsp;<i>n</i><tt>)</tt>
yields the same result as the expression

<blockquote>
{@link java.util.regex.Pattern}.{@link java.util.regex.Pattern#compile
compile}<tt>(</tt><i>regex</i><tt>)</tt>.{@link
java.util.regex.Pattern#split(java.lang.CharSequence,int)
split}<tt>(</tt><i>str</i><tt>,</tt>&nbsp;<i>n</i><tt>)</tt>
</blockquote>


@param  regex
        the delimiting regular expression

@param  limit
        the result threshold, as described above

@return  the array of strings computed by splitting this string
         around matches of the given regular expression

@throws  PatternSyntaxException
         if the regular expression's syntax is invalid

@see java.util.regex.Pattern

@since 1.4
@spec JSR-51"
      end

      operation 7059867 "split"
	public explicit_return_type "String"
	nparams 1
	  param in name "regex" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Splits this string around matches of the given 
{@linkplain java.util.regex.Pattern#sum regular expression}.

<p> This method works as if by invoking the two-argument {@link
#split(String, int) split} method with the given expression and a limit
argument of zero.  Trailing empty strings are therefore not included in
the resulting array.

<p> The string <tt>\"boo:and:foo\"</tt>, for example, yields the following
results with these expressions:

<blockquote><table cellpadding=1 cellspacing=0 summary=\"Split examples showing regex and result\">
<tr>
 <th>Regex</th>
 <th>Result</th>
</tr>
<tr><td align=center>:</td>
    <td><tt>{ \"boo\", \"and\", \"foo\" }</tt></td></tr>
<tr><td align=center>o</td>
    <td><tt>{ \"b\", \"\", \":and:f\" }</tt></td></tr>
</table></blockquote>


@param  regex
        the delimiting regular expression

@return  the array of strings computed by splitting this string
         around matches of the given regular expression

@throws  PatternSyntaxException
         if the regular expression's syntax is invalid

@see java.util.regex.Pattern

@since 1.4
@spec JSR-51"
      end

      operation 7059995 "toLowerCase"
	public explicit_return_type "String"
	nparams 1
	  param inout name "locale" type class_ref 138907 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts all of the characters in this <code>String</code> to lower
case using the rules of the given <code>Locale</code>.  Case mapping is based
on the Unicode Standard version specified by the {@link java.lang.Character Character}
class. Since case mappings are not always 1:1 char mappings, the resulting 
<code>String</code> may be a different length than the original <code>String</code>.
<p>
Examples of lowercase  mappings are in the following table:
<table border=\"1\" summary=\"Lowercase mapping examples showing language code of locale, upper case, lower case, and description\">
<tr>
  <th>Language Code of Locale</th>
  <th>Upper Case</th>
  <th>Lower Case</th>
  <th>Description</th>
</tr>
<tr>
  <td>tr (Turkish)</td>
  <td>&#92;u0130</td>
  <td>&#92;u0069</td>
  <td>capital letter I with dot above -&gt; small letter i</td>
</tr>
<tr>
  <td>tr (Turkish)</td>
  <td>&#92;u0049</td>
  <td>&#92;u0131</td>
  <td>capital letter I -&gt; small letter dotless i </td>
</tr>
<tr>
  <td>(all)</td>
  <td>French Fries</td>
  <td>french fries</td>
  <td>lowercased all chars in String</td>
</tr>
<tr>
  <td>(all)</td>
  <td><img src=\"doc-files/capiota.gif\" alt=\"capiota\"><img src=\"doc-files/capchi.gif\" alt=\"capchi\">
      <img src=\"doc-files/captheta.gif\" alt=\"captheta\"><img src=\"doc-files/capupsil.gif\" alt=\"capupsil\">
      <img src=\"doc-files/capsigma.gif\" alt=\"capsigma\"></td>
  <td><img src=\"doc-files/iota.gif\" alt=\"iota\"><img src=\"doc-files/chi.gif\" alt=\"chi\">
      <img src=\"doc-files/theta.gif\" alt=\"theta\"><img src=\"doc-files/upsilon.gif\" alt=\"upsilon\">
      <img src=\"doc-files/sigma1.gif\" alt=\"sigma\"></td>
  <td>lowercased all chars in String</td>
</tr>
</table>

@param locale use the case transformation rules for this locale
@return the <code>String</code>, converted to lowercase.
@see     java.lang.String#toLowerCase()
@see     java.lang.String#toUpperCase()
@see     java.lang.String#toUpperCase(Locale)
@since   1.1"
      end

      operation 7060123 "toLowerCase"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts all of the characters in this <code>String</code> to lower
case using the rules of the default locale. This is equivalent to calling
<code>toLowerCase(Locale.getDefault())</code>.
<p>
@return  the <code>String</code>, converted to lowercase.
@see     java.lang.String#toLowerCase(Locale)"
      end

      operation 7060251 "toUpperCase"
	public explicit_return_type "String"
	nparams 1
	  param inout name "locale" type class_ref 138907 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts all of the characters in this <code>String</code> to upper
case using the rules of the given <code>Locale</code>. Case mapping is based
on the Unicode Standard version specified by the {@link java.lang.Character Character}
class. Since case mappings are not always 1:1 char mappings, the resulting 
<code>String</code> may be a different length than the original <code>String</code>.
<p>
Examples of locale-sensitive and 1:M case mappings are in the following table.
<p>
<table border=\"1\" summary=\"Examples of locale-sensitive and 1:M case mappings. Shows Language code of locale, lower case, upper case, and description.\">
<tr>
  <th>Language Code of Locale</th>
  <th>Lower Case</th>
  <th>Upper Case</th>
  <th>Description</th>
</tr>
<tr>
  <td>tr (Turkish)</td>
  <td>&#92;u0069</td>
  <td>&#92;u0130</td>
  <td>small letter i -&gt; capital letter I with dot above</td>
</tr>
<tr>
  <td>tr (Turkish)</td>
  <td>&#92;u0131</td>
  <td>&#92;u0049</td>
  <td>small letter dotless i -&gt; capital letter I</td>
</tr>
<tr>
  <td>(all)</td>
  <td>&#92;u00df</td>
  <td>&#92;u0053 &#92;u0053</td>
  <td>small letter sharp s -&gt; two letters: SS</td>
</tr>
<tr>
  <td>(all)</td>
  <td>Fahrvergn&uuml;gen</td>
  <td>FAHRVERGN&Uuml;GEN</td>
  <td></td>
</tr>
</table>
@param locale use the case transformation rules for this locale
@return the <code>String</code>, converted to uppercase.
@see     java.lang.String#toUpperCase()
@see     java.lang.String#toLowerCase()
@see     java.lang.String#toLowerCase(Locale)
@since   1.1"
      end

      operation 7060379 "toUpperCase"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts all of the characters in this <code>String</code> to upper
case using the rules of the default locale. This method is equivalent to
<code>toUpperCase(Locale.getDefault())</code>.
<p>
@return  the <code>String</code>, converted to uppercase.
@see     java.lang.String#toUpperCase(Locale)"
      end

      operation 7060507 "trim"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of the string, with leading and trailing whitespace
omitted.
<p>
If this <code>String</code> object represents an empty character
sequence, or the first and last characters of character sequence
represented by this <code>String</code> object both have codes
greater than <code>'&#92;u0020'</code> (the space character), then a
reference to this <code>String</code> object is returned.
<p>
Otherwise, if there is no character with a code greater than
<code>'&#92;u0020'</code> in the string, then a new
<code>String</code> object representing an empty string is created
and returned.
<p>
Otherwise, let <i>k</i> be the index of the first character in the
string whose code is greater than <code>'&#92;u0020'</code>, and let
<i>m</i> be the index of the last character in the string whose code
is greater than <code>'&#92;u0020'</code>. A new <code>String</code>
object is created, representing the substring of this string that
begins with the character at index <i>k</i> and ends with the
character at index <i>m</i>-that is, the result of
<code>this.substring(<i>k</i>,&nbsp;<i>m</i>+1)</code>.
<p>
This method may be used to trim whitespace (as defined above) from
the beginning and end of a string.

@return  A copy of this string with leading and trailing white
         space removed, or this string if it has no leading or
         trailing white space."
      end

      operation 7060635 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This object (which is already a string!) is itself returned.

@return  the string itself."
      end

      operation 7060763 "toCharArray"
	public explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts this string to a new character array.

@return  a newly allocated character array whose length is the length
         of this string and whose contents are initialized to contain
         the character sequence represented by this string."
      end

      operation 7060891 "format"
	class_operation public explicit_return_type "String"
	nparams 2
	  param in name "format" explicit_type "String"
	  param inout name "args" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ... ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a formatted string using the specified format string and
arguments.

<p> The locale always used is the one returned by {@link
java.util.Locale#getDefault() Locale.getDefault()}.

@param  format
        A <a href=\"../util/Formatter.html#syntax\">format string</a> 

@param  args
        Arguments referenced by the format specifiers in the format
        string.  If there are more arguments than format specifiers, the
        extra arguments are ignored.  The number of arguments is
        variable and may be zero.  The maximum number of arguments is
        limited by the maximum dimension of a Java array as defined by
        the <a href=\"http://java.sun.com/docs/books/vmspec/\">Java
        Virtual Machine Specification</a>.  The behaviour on a
        <tt>null</tt> argument depends on the <a
        href=\"../util/Formatter.html#syntax\">conversion</a>.

@throws  IllegalFormatException
         If a format string contains an illegal syntax, a format
         specifier that is incompatible with the given arguments,
         insufficient arguments given the format string, or other
         illegal conditions.  For specification of all possible
         formatting errors, see the <a
         href=\"../util/Formatter.html#detail\">Details</a> section of the
         formatter class specification.
         
@throws  NullPointerException
         If the <tt>format</tt> is <tt>null</tt>

@return  A formatted string

@see  java.util.Formatter
@since  1.5"
      end

      operation 7061019 "format"
	class_operation public explicit_return_type "String"
	nparams 3
	  param inout name "l" type class_ref 138907 // Locale
	  param in name "format" explicit_type "String"
	  param inout name "args" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ... ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a formatted string using the specified locale, format string,
and arguments.

@param  l
        The {@linkplain java.util.Locale locale} to apply during
        formatting.  If <tt>l</tt> is <tt>null</tt> then no localization
        is applied.

@param  format
        A <a href=\"../util/Formatter.html#syntax\">format string</a> 

@param  args
        Arguments referenced by the format specifiers in the format
        string.  If there are more arguments than format specifiers, the
        extra arguments are ignored.  The number of arguments is
        variable and may be zero.  The maximum number of arguments is
        limited by the maximum dimension of a Java array as defined by
        the <a href=\"http://java.sun.com/docs/books/vmspec/\">Java
        Virtual Machine Specification</a>.  The behaviour on a
        <tt>null</tt> argument depends on the <a
        href=\"../util/Formatter.html#syntax\">conversion</a>.

@throws  IllegalFormatException
         If a format string contains an illegal syntax, a format
         specifier that is incompatible with the given arguments,
         insufficient arguments given the format string, or other
         illegal conditions.  For specification of all possible
         formatting errors, see the <a
         href=\"../util/Formatter.html#detail\">Details</a> section of the
         formatter class specification
         
@throws  NullPointerException
         If the <tt>format</tt> is <tt>null</tt>

@return  A formatted string

@see  java.util.Formatter
@since  1.5"
      end

      operation 7061147 "valueOf"
	class_operation public explicit_return_type "String"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the string representation of the <code>Object</code> argument.

@param   obj   an <code>Object</code>.
@return  if the argument is <code>null</code>, then a string equal to
         <code>\"null\"</code>; otherwise, the value of
         <code>obj.toString()</code> is returned.
@see     java.lang.Object#toString()"
      end

      operation 7061275 "valueOf"
	class_operation public explicit_return_type "String"
	nparams 1
	  param in name "data" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the string representation of the <code>char</code> array
argument. The contents of the character array are copied; subsequent
modification of the character array does not affect the newly
created string.

@param   data   a <code>char</code> array.
@return  a newly allocated string representing the same sequence of
         characters contained in the character array argument."
      end

      operation 7061403 "valueOf"
	class_operation public explicit_return_type "String"
	nparams 3
	  param in name "data" explicit_type "char"
	  param in name "offset" explicit_type "int"
	  param in name "count" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the string representation of a specific subarray of the
<code>char</code> array argument.
<p>
The <code>offset</code> argument is the index of the first
character of the subarray. The <code>count</code> argument
specifies the length of the subarray. The contents of the subarray
are copied; subsequent modification of the character array does not
affect the newly created string.

@param   data     the character array.
@param   offset   the initial offset into the value of the
                 <code>String</code>.
@param   count    the length of the value of the <code>String</code>.
@return  a string representing the sequence of characters contained 
         in the subarray of the character array argument.
@exception IndexOutOfBoundsException if <code>offset</code> is
         negative, or <code>count</code> is negative, or
         <code>offset+count</code> is larger than
         <code>data.length</code>."
      end

      operation 7061531 "copyValueOf"
	class_operation public explicit_return_type "String"
	nparams 3
	  param in name "data" explicit_type "char"
	  param in name "offset" explicit_type "int"
	  param in name "count" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a String that represents the character sequence in the
array specified.

@param   data     the character array.
@param   offset   initial offset of the subarray.
@param   count    length of the subarray.
@return  a <code>String</code> that contains the characters of the
         specified subarray of the character array."
      end

      operation 7061659 "copyValueOf"
	class_operation public explicit_return_type "String"
	nparams 1
	  param in name "data" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a String that represents the character sequence in the
array specified.

@param   data   the character array.
@return  a <code>String</code> that contains the characters of the
         character array."
      end

      operation 7061787 "valueOf"
	class_operation public explicit_return_type "String"
	nparams 1
	  param inout name "b" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the string representation of the <code>boolean</code> argument.

@param   b   a <code>boolean</code>.
@return  if the argument is <code>true</code>, a string equal to
         <code>\"true\"</code> is returned; otherwise, a string equal to
         <code>\"false\"</code> is returned."
      end

      operation 7061915 "valueOf"
	class_operation public explicit_return_type "String"
	nparams 1
	  param in name "c" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the string representation of the <code>char</code>
argument.

@param   c   a <code>char</code>.
@return  a string of length <code>1</code> containing
         as its single character the argument <code>c</code>."
      end

      operation 7062043 "valueOf"
	class_operation public explicit_return_type "String"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the string representation of the <code>int</code> argument.
<p>
The representation is exactly the one returned by the
<code>Integer.toString</code> method of one argument.

@param   i   an <code>int</code>.
@return  a string representation of the <code>int</code> argument.
@see     java.lang.Integer#toString(int, int)"
      end

      operation 7062171 "valueOf"
	class_operation public explicit_return_type "String"
	nparams 1
	  param in name "l" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the string representation of the <code>long</code> argument.
<p>
The representation is exactly the one returned by the
<code>Long.toString</code> method of one argument.

@param   l   a <code>long</code>.
@return  a string representation of the <code>long</code> argument.
@see     java.lang.Long#toString(long)"
      end

      operation 7062299 "valueOf"
	class_operation public explicit_return_type "String"
	nparams 1
	  param in name "f" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the string representation of the <code>float</code> argument.
<p>
The representation is exactly the one returned by the
<code>Float.toString</code> method of one argument.

@param   f   a <code>float</code>.
@return  a string representation of the <code>float</code> argument.
@see     java.lang.Float#toString(float)"
      end

      operation 7062427 "valueOf"
	class_operation public explicit_return_type "String"
	nparams 1
	  param in name "d" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the string representation of the <code>double</code> argument.
<p>
The representation is exactly the one returned by the
<code>Double.toString</code> method of one argument.

@param   d   a <code>double</code>.
@return  a  string representation of the <code>double</code> argument.
@see     java.lang.Double#toString(double)"
      end

      operation 7062555 "intern"
	public explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a canonical representation for the string object.
<p>
A pool of strings, initially empty, is maintained privately by the
class <code>String</code>.
<p>
When the intern method is invoked, if the pool already contains a
string equal to this <code>String</code> object as determined by
the {@link #equals(Object)} method, then the string from the pool is
returned. Otherwise, this <code>String</code> object is added to the
pool and a reference to this <code>String</code> object is returned.
<p>
It follows that for any two strings <code>s</code> and <code>t</code>,
<code>s.intern()&nbsp;==&nbsp;t.intern()</code> is <code>true</code>
if and only if <code>s.equals(t)</code> is <code>true</code>.
<p>
All literal strings and string-valued constant expressions are
interned. String literals are defined in &sect;3.10.5 of the
<a href=\"http://java.sun.com/docs/books/jls/html/\">Java Language
Specification</a>

@return  a string that has the same contents as this string, but is
         guaranteed to be from a pool of unique strings."
      end
    end

    class 198171 "StringBuffer"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A thread-safe, mutable sequence of characters. 
A string buffer is like a {@link String}, but can be modified. At any 
point in time it contains some particular sequence of characters, but 
the length and content of the sequence can be changed through certain 
method calls.
<p>
String buffers are safe for use by multiple threads. The methods 
are synchronized where necessary so that all the operations on any 
particular instance behave as if they occur in some serial order 
that is consistent with the order of the method calls made by each of 
the individual threads involved.
<p>
The principal operations on a <code>StringBuffer</code> are the 
<code>append</code> and <code>insert</code> methods, which are 
overloaded so as to accept data of any type. Each effectively 
converts a given datum to a string and then appends or inserts the 
characters of that string to the string buffer. The 
<code>append</code> method always adds these characters at the end 
of the buffer; the <code>insert</code> method adds the characters at 
a specified point. 
<p>
For example, if <code>z</code> refers to a string buffer object 
whose current contents are \"<code>start</code>\", then 
the method call <code>z.append(\"le\")</code> would cause the string 
buffer to contain \"<code>startle</code>\", whereas 
<code>z.insert(4, \"le\")</code> would alter the string buffer to 
contain \"<code>starlet</code>\". 
<p>
In general, if sb refers to an instance of a <code>StringBuffer</code>, 
then <code>sb.append(x)</code> has the same effect as 
<code>sb.insert(sb.length(),&nbsp;x)</code>.
<p>
Whenever an operation occurs involving a source sequence (such as
appending or inserting from a source sequence) this class synchronizes
only on the string buffer performing the operation, not on the source.
<p>
Every string buffer has a capacity. As long as the length of the 
character sequence contained in the string buffer does not exceed 
the capacity, it is not necessary to allocate a new internal 
buffer array. If the internal buffer overflows, it is 
automatically made larger. 

As of  release JDK 5, this class has been supplemented with an equivalent 
class designed for use by a single thread, {@link StringBuilder}.  The 
<tt>StringBuilder</tt> class should generally be used in preference to 
this one, as it supports all of the same operations but it is faster, as 
it performs no synchronization.

@author	Arthur van Hoff
@version 	1.99, 07/15/04
@see     java.lang.StringBuilder
@see     java.lang.String
@since   JDK1.0"
      classrelation 1789851 // <generalisation>
	relation 1789851 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1789851 // <generalisation>
	  b parent class_ref 909211 // AbstractStringBuilder
      end

      classrelation 1789979 // <realization>
	relation 1789979 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1789979 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      classrelation 1790107 // <realization>
	relation 1790107 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1790107 // <realization>
	  b parent class_ref 393755 // CharSequence
      end

      attribute 2739611 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value "=  3388685877147921107L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " use serialVersionUID from JDK 1.0.2 for interoperability "
      end

      operation 7062683 "StringBuffer"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a string buffer with no characters in it and an 
initial capacity of 16 characters. "
      end

      operation 7062811 "StringBuffer"
	public explicit_return_type ""
	nparams 1
	  param in name "capacity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a string buffer with no characters in it and 
the specified initial capacity. 

@param      capacity  the initial capacity.
@exception  NegativeArraySizeException  if the <code>capacity</code>
              argument is less than <code>0</code>."
      end

      operation 7062939 "StringBuffer"
	public explicit_return_type ""
	nparams 1
	  param in name "str" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a string buffer initialized to the contents of the 
specified string. The initial capacity of the string buffer is 
<code>16</code> plus the length of the string argument.

@param   str   the initial contents of the buffer.
@exception NullPointerException if <code>str</code> is <code>null</code>"
      end

      operation 7063067 "StringBuffer"
	public explicit_return_type ""
	nparams 1
	  param inout name "seq" type class_ref 393755 // CharSequence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a string buffer that contains the same characters
as the specified <code>CharSequence</code>. The initial capacity of
the string buffer is <code>16</code> plus the length of the
<code>CharSequence</code> argument.
<p>
If the length of the specified <code>CharSequence</code> is
less than or equal to zero, then an empty buffer of capacity
<code>16</code> is returned.

@param      seq   the sequence to copy.
@exception NullPointerException if <code>seq</code> is <code>null</code>
@since 1.5"
      end

      operation 7063195 "length"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7063323 "capacity"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7063451 "ensureCapacity"
	public explicit_return_type "void"
	nparams 1
	  param in name "minimumCapacity" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7063579 "trimToSize"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@since      1.5"
      end

      operation 7063707 "setLength"
	public explicit_return_type "void"
	nparams 1
	  param in name "newLength" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws IndexOutOfBoundsException {@inheritDoc}
@see        #length()"
      end

      operation 7063835 "charAt"
	public explicit_return_type "char"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws IndexOutOfBoundsException {@inheritDoc}
@see        #length()"
      end

      operation 7063963 "codePointAt"
	public explicit_return_type "int"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@since      1.5"
      end

      operation 7064091 "codePointBefore"
	public explicit_return_type "int"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@since     1.5"
      end

      operation 7064219 "codePointCount"
	public explicit_return_type "int"
	nparams 2
	  param in name "beginIndex" explicit_type "int"
	  param in name "endIndex" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@since     1.5"
      end

      operation 7064347 "offsetByCodePoints"
	public explicit_return_type "int"
	nparams 2
	  param in name "index" explicit_type "int"
	  param in name "codePointOffset" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@since     1.5"
      end

      operation 7064475 "getChars"
	public explicit_return_type "void"
	nparams 4
	  param in name "srcBegin" explicit_type "int"
	  param in name "srcEnd" explicit_type "int"
	  param in name "dst" explicit_type "char"
	  param in name "dstBegin" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NullPointerException {@inheritDoc}
@throws IndexOutOfBoundsException {@inheritDoc}"
      end

      operation 7064603 "setCharAt"
	public explicit_return_type "void"
	nparams 2
	  param in name "index" explicit_type "int"
	  param in name "ch" explicit_type "char"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws IndexOutOfBoundsException {@inheritDoc}
@see        #length()"
      end

      operation 7064731 "append"
	public return_type class_ref 198171 // StringBuffer
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@see     java.lang.String#valueOf(java.lang.Object)
@see     #append(java.lang.String)"
      end

      operation 7064859 "append"
	public return_type class_ref 198171 // StringBuffer
	nparams 1
	  param in name "str" explicit_type "String"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7064987 "append"
	public return_type class_ref 198171 // StringBuffer
	nparams 1
	  param inout name "sb" type class_ref 198171 // StringBuffer
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the specified <tt>StringBuffer</tt> to this sequence.
<p>
The characters of the <tt>StringBuffer</tt> argument are appended, 
in order, to the contents of this <tt>StringBuffer</tt>, increasing the 
length of this <tt>StringBuffer</tt> by the length of the argument. 
If <tt>sb</tt> is <tt>null</tt>, then the four characters 
<tt>\"null\"</tt> are appended to this <tt>StringBuffer</tt>.
<p>
Let <i>n</i> be the length of the old character sequence, the one 
contained in the <tt>StringBuffer</tt> just prior to execution of the 
<tt>append</tt> method. Then the character at index <i>k</i> in 
the new character sequence is equal to the character at index <i>k</i> 
in the old character sequence, if <i>k</i> is less than <i>n</i>; 
otherwise, it is equal to the character at index <i>k-n</i> in the 
argument <code>sb</code>.
<p>
This method synchronizes on <code>this</code> (the destination) 
object but does not synchronize on the source (<code>sb</code>).

@param   sb   the <tt>StringBuffer</tt> to append.
@return  a reference to this object.
@since 1.4"
      end

      operation 7065115 "append"
	public return_type class_ref 198171 // StringBuffer
	nparams 1
	  param inout name "s" type class_ref 393755 // CharSequence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the specified <code>CharSequence</code> to this
sequence.
<p>
The characters of the <code>CharSequence</code> argument are appended, 
in order, increasing the length of this sequence by the length of the 
argument.

<p>The result of this method is exactly the same as if it were an
invocation of this.append(s, 0, s.length());

<p>This method synchronizes on this (the destination) 
object but does not synchronize on the source (<code>s</code>).

<p>If <code>s</code> is <code>null</code>, then the four characters 
<code>\"null\"</code> are appended.

@param   s the <code>CharSequence</code> to append.
@return  a reference to this object.
@since 1.5"
      end

      operation 7065243 "append"
	public return_type class_ref 198171 // StringBuffer
	nparams 3
	  param inout name "s" type class_ref 393755 // CharSequence
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws IndexOutOfBoundsException {@inheritDoc}
@since      1.5"
      end

      operation 7065371 "append"
	public return_type class_ref 198171 // StringBuffer
	nparams 1
	  param in name "str" explicit_type "char"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7065499 "append"
	public return_type class_ref 198171 // StringBuffer
	nparams 3
	  param in name "str" explicit_type "char"
	  param in name "offset" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7065627 "append"
	public return_type class_ref 198171 // StringBuffer
	nparams 1
	  param inout name "b" explicit_type "boolean"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@see     java.lang.String#valueOf(boolean)
@see     #append(java.lang.String)"
      end

      operation 7065755 "append"
	public return_type class_ref 198171 // StringBuffer
	nparams 1
	  param in name "c" explicit_type "char"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7065883 "append"
	public return_type class_ref 198171 // StringBuffer
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@see     java.lang.String#valueOf(int)
@see     #append(java.lang.String)"
      end

      operation 7066011 "appendCodePoint"
	public return_type class_ref 198171 // StringBuffer
	nparams 1
	  param in name "codePoint" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@since 1.5"
      end

      operation 7066139 "append"
	public return_type class_ref 198171 // StringBuffer
	nparams 1
	  param in name "lng" explicit_type "long"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@see     java.lang.String#valueOf(long)
@see     #append(java.lang.String)"
      end

      operation 7066267 "append"
	public return_type class_ref 198171 // StringBuffer
	nparams 1
	  param in name "f" explicit_type "float"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@see     java.lang.String#valueOf(float)
@see     #append(java.lang.String)"
      end

      operation 7066395 "append"
	public return_type class_ref 198171 // StringBuffer
	nparams 1
	  param in name "d" explicit_type "double"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@see     java.lang.String#valueOf(double)
@see     #append(java.lang.String)"
      end

      operation 7066523 "delete"
	public return_type class_ref 198171 // StringBuffer
	nparams 2
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws StringIndexOutOfBoundsException {@inheritDoc}
@since      1.2"
      end

      operation 7066651 "deleteCharAt"
	public return_type class_ref 198171 // StringBuffer
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws StringIndexOutOfBoundsException {@inheritDoc}
@since      1.2"
      end

      operation 7066779 "replace"
	public return_type class_ref 198171 // StringBuffer
	nparams 3
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	  param in name "str" explicit_type "String"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws StringIndexOutOfBoundsException {@inheritDoc}
@since      1.2"
      end

      operation 7066907 "substring"
	public explicit_return_type "String"
	nparams 1
	  param in name "start" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws StringIndexOutOfBoundsException {@inheritDoc}
@since      1.2"
      end

      operation 7067035 "subSequence"
	public return_type class_ref 393755 // CharSequence
	nparams 2
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws IndexOutOfBoundsException {@inheritDoc}
@since      1.4"
      end

      operation 7067163 "substring"
	public explicit_return_type "String"
	nparams 2
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws StringIndexOutOfBoundsException {@inheritDoc}
@since      1.2"
      end

      operation 7067291 "insert"
	public return_type class_ref 198171 // StringBuffer
	nparams 4
	  param in name "index" explicit_type "int"
	  param in name "str" explicit_type "char"
	  param in name "offset" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws StringIndexOutOfBoundsException {@inheritDoc}
@since      1.2"
      end

      operation 7067419 "insert"
	public return_type class_ref 198171 // StringBuffer
	nparams 2
	  param in name "offset" explicit_type "int"
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws StringIndexOutOfBoundsException {@inheritDoc}
@see        java.lang.String#valueOf(java.lang.Object)
@see        #insert(int, java.lang.String)
@see        #length()"
      end

      operation 7067547 "insert"
	public return_type class_ref 198171 // StringBuffer
	nparams 2
	  param in name "offset" explicit_type "int"
	  param in name "str" explicit_type "String"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws StringIndexOutOfBoundsException {@inheritDoc}
@see        #length()"
      end

      operation 7067675 "insert"
	public return_type class_ref 198171 // StringBuffer
	nparams 2
	  param in name "offset" explicit_type "int"
	  param in name "str" explicit_type "char"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws StringIndexOutOfBoundsException {@inheritDoc}"
      end

      operation 7067803 "insert"
	public return_type class_ref 198171 // StringBuffer
	nparams 2
	  param in name "dstOffset" explicit_type "int"
	  param inout name "s" type class_ref 393755 // CharSequence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws IndexOutOfBoundsException {@inheritDoc}
@since      1.5"
      end

      operation 7067931 "insert"
	public return_type class_ref 198171 // StringBuffer
	nparams 4
	  param in name "dstOffset" explicit_type "int"
	  param inout name "s" type class_ref 393755 // CharSequence
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws IndexOutOfBoundsException {@inheritDoc}
@since      1.5"
      end

      operation 7068059 "insert"
	public return_type class_ref 198171 // StringBuffer
	nparams 2
	  param in name "offset" explicit_type "int"
	  param inout name "b" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws StringIndexOutOfBoundsException {@inheritDoc}
@see        java.lang.String#valueOf(boolean)
@see        #insert(int, java.lang.String)
@see        #length()"
      end

      operation 7068187 "insert"
	public return_type class_ref 198171 // StringBuffer
	nparams 2
	  param in name "offset" explicit_type "int"
	  param in name "c" explicit_type "char"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws IndexOutOfBoundsException {@inheritDoc}
@see        #length()"
      end

      operation 7068315 "insert"
	public return_type class_ref 198171 // StringBuffer
	nparams 2
	  param in name "offset" explicit_type "int"
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws StringIndexOutOfBoundsException {@inheritDoc}
@see        java.lang.String#valueOf(int)
@see        #insert(int, java.lang.String)
@see        #length()"
      end

      operation 7068443 "insert"
	public return_type class_ref 198171 // StringBuffer
	nparams 2
	  param in name "offset" explicit_type "int"
	  param in name "l" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws StringIndexOutOfBoundsException {@inheritDoc}
@see        java.lang.String#valueOf(long)
@see        #insert(int, java.lang.String)
@see        #length()"
      end

      operation 7068571 "insert"
	public return_type class_ref 198171 // StringBuffer
	nparams 2
	  param in name "offset" explicit_type "int"
	  param in name "f" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws StringIndexOutOfBoundsException {@inheritDoc}
@see        java.lang.String#valueOf(float)
@see        #insert(int, java.lang.String)
@see        #length()"
      end

      operation 7068699 "insert"
	public return_type class_ref 198171 // StringBuffer
	nparams 2
	  param in name "offset" explicit_type "int"
	  param in name "d" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws StringIndexOutOfBoundsException {@inheritDoc}
@see        java.lang.String#valueOf(double)
@see        #insert(int, java.lang.String)
@see        #length()"
      end

      operation 7068827 "indexOf"
	public explicit_return_type "int"
	nparams 1
	  param in name "str" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NullPointerException {@inheritDoc}
@since      1.4"
      end

      operation 7068955 "indexOf"
	public explicit_return_type "int"
	nparams 2
	  param in name "str" explicit_type "String"
	  param in name "fromIndex" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NullPointerException {@inheritDoc}
@since      1.4"
      end

      operation 7069083 "lastIndexOf"
	public explicit_return_type "int"
	nparams 1
	  param in name "str" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NullPointerException {@inheritDoc}
@since      1.4"
      end

      operation 7069211 "lastIndexOf"
	public explicit_return_type "int"
	nparams 2
	  param in name "str" explicit_type "String"
	  param in name "fromIndex" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NullPointerException {@inheritDoc}
@since      1.4"
      end

      operation 7069339 "reverse"
	public return_type class_ref 198171 // StringBuffer
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@since   JDK1.0.2"
      end

      operation 7069467 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 1790235 // serialPersistentFields (<unidirectional association>)
	relation 1790235 --->
	  a role_name "serialPersistentFields" multiplicity "[]" init_value "=  
    { 
        new java.io.ObjectStreamField(\"value\", char[].class), 
        new java.io.ObjectStreamField(\"count\", Integer.TYPE),
        new java.io.ObjectStreamField(\"shared\", Boolean.TYPE),
    }" class_relation const_relation private
	    comment "
Serializable fields for StringBuffer.

@serialField value  char[]
             The backing character array of this StringBuffer.
@serialField count int
             The number of characters in this StringBuffer.
@serialField shared  boolean
             A flag indicating whether the backing array is shared. 
             The value is ignored upon deserialization.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1790235 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 285723 // ObjectStreamField
      end

      operation 7069595 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 205339 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "readObject is called to restore the state of the StringBuffer from
a stream."
      end

      operation 7069723 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 201115 // ObjectInputStream
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "readObject is called to restore the state of the StringBuffer from
a stream."
      end
    end

    class 201883 "ClassNotFoundException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Thrown when an application tries to load in a class through its 
string name using:
<ul>
<li>The <code>forName</code> method in class <code>Class</code>.
<li>The <code>findSystemClass</code> method in class
    <code>ClassLoader</code> .
<li>The <code>loadClass</code> method in class <code>ClassLoader</code>.
</ul>
<p>
but no definition for the class with the specified name could be found. 

<p>As of release 1.4, this exception has been retrofitted to conform to
the general purpose exception-chaining mechanism.  The \"optional exception
that was raised while loading the class\" that may be provided at
construction time and accessed via the {@link #getException()} method is
now known as the <i>cause</i>, and may be accessed via the {@link
Throwable#getCause()} method, as well as the aforementioned \"legacy method.\"

@author  unascribed
@version 1.20, 02/19/04
@see     java.lang.Class#forName(java.lang.String)
@see     java.lang.ClassLoader#findSystemClass(java.lang.String)
@see     java.lang.ClassLoader#loadClass(java.lang.String, boolean)
@since   JDK1.0"
      classrelation 1776923 // <generalisation>
	relation 1776923 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1776923 // <generalisation>
	  b parent class_ref 165403 // Exception
      end

      attribute 2726043 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  9176873029745254542L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "use serialVersionUID from JDK 1.1.X for interoperability
"
      end

      classrelation 1777051 // ex (<unidirectional association>)
	relation 1777051 --->
	  a role_name "ex" private
	    comment "
This field holds the exception ex if the 
ClassNotFoundException(String s, Throwable ex) constructor was
used to instantiate the object
@serial 
@since 1.2

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1777051 // ex (<unidirectional association>)
	  b parent class_ref 164251 // Throwable
      end

      operation 6977435 "ClassNotFoundException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>ClassNotFoundException</code> with no detail message."
      end

      operation 6977563 "ClassNotFoundException"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>ClassNotFoundException</code> with the 
specified detail message. 

@param   s   the detail message."
      end

      operation 6977691 "ClassNotFoundException"
	public explicit_return_type ""
	nparams 2
	  param in name "s" explicit_type "String"
	  param inout name "ex" type class_ref 164251 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>ClassNotFoundException</code> with the
specified detail message and optional exception that was
raised while loading the class.

@param s the detail message
@param ex the exception that was raised while loading the class
@since 1.2"
      end

      operation 6977819 "getException"
	public return_type class_ref 164251 // Throwable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the exception that was raised if an error occurred while
attempting to load the class. Otherwise, returns <tt>null</tt>.

<p>This method predates the general-purpose exception chaining facility.
The {@link Throwable#getCause()} method is now the preferred means of
obtaining this information.

@return the <code>Exception</code> that was raised while loading a class
@since 1.2"
      end

      operation 6977947 "getCause"
	public return_type class_ref 164251 // Throwable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the cause of this exception (the exception that was raised
if an error occurred while attempting to load the class; otherwise
<tt>null</tt>).

@return  the cause of this exception.
@since   1.4"
      end
    end

    class 203419 "SecurityException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Thrown by the security manager to indicate a security violation. 

@author  unascribed
@version 1.16, 12/19/03
@see     java.lang.SecurityManager
@since   JDK1.0"
      classrelation 1787547 // <generalisation>
	relation 1787547 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1787547 // <generalisation>
	  b parent class_ref 241051 // RuntimeException
      end

      attribute 2735003 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  6878364983674394167L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7033755 "SecurityException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SecurityException</code> with no detail  message."
      end

      operation 7033883 "SecurityException"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SecurityException</code> with the specified 
detail message. 

@param   s   the detail message."
      end

      operation 7034011 "SecurityException"
	public explicit_return_type ""
	nparams 2
	  param in name "message" explicit_type "String"
	  param inout name "cause" type class_ref 164251 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>SecurityException</code> with the specified
detail message and cause.

@param message the detail message (which is saved for later retrieval
       by the {@link #getMessage()} method).
@param cause the cause (which is saved for later retrieval by the
       {@link #getCause()} method).  (A <tt>null</tt> value is permitted,
       and indicates that the cause is nonexistent or unknown.)
@since 1.5"
      end

      operation 7034139 "SecurityException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 164251 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>SecurityException</code> with the specified cause
and a detail message of <tt>(cause==null ? null : cause.toString())</tt>
(which typically contains the class and detail message of
<tt>cause</tt>).

@param cause the cause (which is saved for later retrieval by the
       {@link #getCause()} method).  (A <tt>null</tt> value is permitted,
       and indicates that the cause is nonexistent or unknown.)
@since 1.5"
      end
    end

    class 204187 "Enum"
      abstract visibility public 
      nformals 3
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 3
      actual class class_ref 221467 // Comparable
        rank 0 explicit_value "E"
      actual class class_ref 221467 // Comparable
        rank 1 explicit_value ""
      actual class class_ref 221467 // Comparable
        rank 2 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This is the common base class of all Java language enumeration types.

@author  Josh Bloch
@author  Neal Gafter
@version 1.13, 10/04/07
@since   1.5"
      classrelation 1777947 // <realization>
	relation 1777947 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 1777947 // <realization>
	  b parent class_ref 221467 // Comparable
      end

      classrelation 1778075 // <realization>
	relation 1778075 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1778075 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      attribute 2728603 "name"
	const_attribute private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The name of this enum constant, as declared in the enum declaration.
Most programmers should use the {@link #toString} method rather than
accessing this field.
"
      end

      operation 6984987 "name"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of this enum constant, exactly as declared in its
enum declaration.

<b>Most programmers should use the {@link #toString} method in
preference to this one, as the toString method may return
a more user-friendly name.</b>  This method is designed primarily for
use in specialized situations where correctness depends on getting the
exact name, which will not vary from release to release.

@return the name of this enum constant"
      end

      attribute 2728731 "ordinal"
	const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The ordinal of this enumeration constant (its position
in the enum declaration, where the initial constant is assigned
an ordinal of zero).

Most programmers will have no use for this field.  It is designed
for use by sophisticated enum-based data structures, such as
{@link java.util.EnumSet} and {@link java.util.EnumMap}.
"
      end

      operation 6985115 "ordinal"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the ordinal of this enumeration constant (its position
in its enum declaration, where the initial constant is assigned
an ordinal of zero).

Most programmers will have no use for this method.  It is
designed for use by sophisticated enum-based data structures, such
as {@link java.util.EnumSet} and {@link java.util.EnumMap}.

@return the ordinal of this enumeration constant"
      end

      operation 6985243 "Enum"
	protected explicit_return_type ""
	nparams 2
	  param in name "name" explicit_type "String"
	  param in name "ordinal" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sole constructor.  Programmers cannot invoke this constructor.
It is for use by code emitted by the compiler in response to
enum type declarations.

@param name - The name of this enum constant, which is the identifier
              used to declare it.
@param ordinal - The ordinal of this enumeration constant (its position
        in the enum declaration, where the initial constant is assigned
        an ordinal of zero)."
      end

      operation 6985371 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of this enum constant, as contained in the
declaration.  This method may be overridden, though it typically
isn't necessary or desirable.  An enum type should override this
method when a more \"programmer-friendly\" string form exists.

@return the name of this enum constant"
      end

      operation 6985499 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" explicit_type "Object"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the specified object is equal to this
enum constant.

@param other the object to be compared for equality with this object.
@return  true if the specified object is equal to this
         enum constant."
      end

      operation 6985627 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hash code for this enum constant.

@return a hash code for this enum constant."
      end

      operation 6985755 "clone"
	protected explicit_return_type "Object"
	nparams 0
	nexceptions 1
	  exception class_ref 383643 // CloneNotSupportedException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws CloneNotSupportedException.  This guarantees that enums
are never cloned, which is necessary to preserve their \"singleton\"
status.

@return (never returns)"
      end

      operation 6985883 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "o" explicit_type "E"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this enum with the specified object for order.  Returns a
negative integer, zero, or a positive integer as this object is less
than, equal to, or greater than the specified object.

Enum constants are only comparable to other enum constants of the
same enum type.  The natural order implemented by this
method is the order in which the constants are declared."
      end

      operation 6986011 "getDeclaringClass"
	public return_type class_ref 164635 // Class
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Class object corresponding to this enum constant's
enum type.  Two enum constants e1 and  e2 are of the
same enum type if and only if
  e1.getDeclaringClass() == e2.getDeclaringClass().
(The value returned by this method may differ from the one returned
by the {@link Object#getClass} method for enum constants with
constant-specific class bodies.)

@return the Class object corresponding to this enum constant's
    enum type"
      end

      operation 6986139 "valueOf"
	class_operation public explicit_return_type "T"
	nparams 2
	  param inout name "enumType" type class_ref 164635 // Class
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T extends Enum<T>> ${type} ${name}${(}${t0}<T> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the enum constant of the specified enum type with the
specified name.  The name must match exactly an identifier used
to declare an enum constant in this type.  (Extraneous whitespace
characters are not permitted.) 

@param enumType the <tt>Class</tt> object of the enum type from which
     to return a constant
@param name the name of the constant to return
@return the enum constant of the specified enum type with the
     specified name
@throws IllegalArgumentException if the specified enum type has
        no constant with the specified name, or the specified
        class object does not represent an enum type
@throws NullPointerException if <tt>enumType</tt> or <tt>name</tt>
        is null
@since 1.5"
      end

      operation 6986267 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 201115 // ObjectInputStream
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "prevent default deserialization"
      end

      operation 6986395 "readObjectNoData"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 289307 // ObjectStreamException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 216859 "IllegalArgumentException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Thrown to indicate that a method has been passed an illegal or 
inappropriate argument.

@author  unascribed
@version 1.23, 12/19/03
@see	    java.lang.Thread#setPriority(int)
@since   JDK1.0"
      classrelation 1779355 // <generalisation>
	relation 1779355 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1779355 // <generalisation>
	  b parent class_ref 241051 // RuntimeException
      end

      operation 6991387 "IllegalArgumentException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>IllegalArgumentException</code> with no 
detail message. "
      end

      operation 6991515 "IllegalArgumentException"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>IllegalArgumentException</code> with the 
specified detail message. 

@param   s   the detail message."
      end

      operation 6991643 "IllegalArgumentException"
	public explicit_return_type ""
	nparams 2
	  param in name "message" explicit_type "String"
	  param inout name "cause" type class_ref 164251 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new exception with the specified detail message and
cause.

<p>Note that the detail message associated with <code>cause</code> is
<i>not</i> automatically incorporated in this exception's detail
message.

@param  message the detail message (which is saved for later retrieval
        by the {@link Throwable#getMessage()} method).
@param  cause the cause (which is saved for later retrieval by the
        {@link Throwable#getCause()} method).  (A <tt>null</tt> value
        is permitted, and indicates that the cause is nonexistent or
        unknown.)
@since 1.5"
      end

      operation 6991771 "IllegalArgumentException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 164251 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new exception with the specified cause and a detail
message of <tt>(cause==null ? null : cause.toString())</tt> (which
typically contains the class and detail message of <tt>cause</tt>).
This constructor is useful for exceptions that are little more than
wrappers for other throwables (for example, {@link
java.security.PrivilegedActionException}).

@param  cause the cause (which is saved for later retrieval by the
        {@link Throwable#getCause()} method).  (A <tt>null</tt> value is
        permitted, and indicates that the cause is nonexistent or
        unknown.)
@since  1.5"
      end

      attribute 2730139 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -5365630128856068164L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 219931 "NoSuchFieldException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Signals that the class doesn't have a field of a specified name.

@author  unascribed
@version 1.14, 12/19/03
@since   JDK1.1"
      classrelation 1782299 // <generalisation>
	relation 1782299 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1782299 // <generalisation>
	  b parent class_ref 165403 // Exception
      end

      operation 7014427 "NoSuchFieldException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor."
      end

      operation 7014555 "NoSuchFieldException"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor with a detail message.

@param s the detail message"
      end
    end

    class 220059 "InstantiationException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Thrown when an application tries to create an instance of a class 
using the <code>newInstance</code> method in class 
<code>Class</code>, but the specified class object cannot be 
instantiated because it is an interface or is an abstract class. 

@author  unascribed
@version 1.17, 12/19/03
@see     java.lang.Class#newInstance()
@since   JDK1.0"
      classrelation 1780251 // <generalisation>
	relation 1780251 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1780251 // <generalisation>
	  b parent class_ref 165403 // Exception
      end

      operation 6996379 "InstantiationException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>InstantiationException</code> with no detail message."
      end

      operation 6996507 "InstantiationException"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>InstantiationException</code> with the 
specified detail message. 

@param   s   the detail message."
      end
    end

    class 220315 "UnsupportedOperationException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Thrown to indicate that the requested operation is not supported.<p>

This class is a member of the
<a href=\"{@docRoot}/../guide/collections/index.html\">
Java Collections Framework</a>.

@author  Josh Bloch
@version 1.19, 12/19/03
@since   1.2"
      classrelation 1609499 // <generalisation>
	relation 1609499 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1609499 // <generalisation>
	  b parent class_ref 241051 // RuntimeException
      end

      operation 6288027 "UnsupportedOperationException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an UnsupportedOperationException with no detail message."
      end

      operation 6288155 "UnsupportedOperationException"
	public explicit_return_type ""
	nparams 1
	  param in name "message" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an UnsupportedOperationException with the specified
detail message.

@param message the detail message"
      end

      operation 6288283 "UnsupportedOperationException"
	public explicit_return_type ""
	nparams 2
	  param in name "message" explicit_type "String"
	  param inout name "cause" type class_ref 164251 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new exception with the specified detail message and
cause.

<p>Note that the detail message associated with <code>cause</code> is
<i>not</i> automatically incorporated in this exception's detail
message.

@param  message the detail message (which is saved for later retrieval
        by the {@link Throwable#getMessage()} method).
@param  cause the cause (which is saved for later retrieval by the
        {@link Throwable#getCause()} method).  (A <tt>null</tt> value
        is permitted, and indicates that the cause is nonexistent or
        unknown.)
@since 1.5"
      end

      operation 6288411 "UnsupportedOperationException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 164251 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new exception with the specified cause and a detail
message of <tt>(cause==null ? null : cause.toString())</tt> (which
typically contains the class and detail message of <tt>cause</tt>).
This constructor is useful for exceptions that are little more than
wrappers for other throwables (for example, {@link
java.security.PrivilegedActionException}).

@param  cause the cause (which is saved for later retrieval by the
        {@link Throwable#getCause()} method).  (A <tt>null</tt> value is
        permitted, and indicates that the cause is nonexistent or
        unknown.)
@since  1.5"
      end

      attribute 2468635 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value "=  -1242599979055084673L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 221467 "Comparable"
      visibility public stereotype "interface"
      nformals 3
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This interface imposes a total ordering on the objects of each class that
implements it.  This ordering is referred to as the class's <i>natural
ordering</i>, and the class's <tt>compareTo</tt> method is referred to as
its <i>natural comparison method</i>.<p>

Lists (and arrays) of objects that implement this interface can be sorted
automatically by <tt>Collections.sort</tt> (and <tt>Arrays.sort</tt>).
Objects that implement this interface can be used as keys in a sorted map
or elements in a sorted set, without the need to specify a comparator.<p>

The natural ordering for a class <tt>C</tt> is said to be <i>consistent
with equals</i> if and only if <tt>(e1.compareTo((Object)e2) == 0)</tt> has
the same boolean value as <tt>e1.equals((Object)e2)</tt> for every
<tt>e1</tt> and <tt>e2</tt> of class <tt>C</tt>.  Note that <tt>null</tt>
is not an instance of any class, and <tt>e.compareTo(null)</tt> should
throw a <tt>NullPointerException</tt> even though <tt>e.equals(null)</tt>
returns <tt>false</tt>.<p>

It is strongly recommended (though not required) that natural orderings be
consistent with equals.  This is so because sorted sets (and sorted maps)
without explicit comparators behave \"strangely\" when they are used with
elements (or keys) whose natural ordering is inconsistent with equals.  In
particular, such a sorted set (or sorted map) violates the general contract
for set (or map), which is defined in terms of the <tt>equals</tt>
method.<p>

For example, if one adds two keys <tt>a</tt> and <tt>b</tt> such that
<tt>(!a.equals((Object)b) && a.compareTo((Object)b) == 0)</tt> to a sorted
set that does not use an explicit comparator, the second <tt>add</tt>
operation returns false (and the size of the sorted set does not increase)
because <tt>a</tt> and <tt>b</tt> are equivalent from the sorted set's
perspective.<p>

Virtually all Java core classes that implement comparable have natural
orderings that are consistent with equals.  One exception is
<tt>java.math.BigDecimal</tt>, whose natural ordering equates
<tt>BigDecimal</tt> objects with equal values and different precisions 
(such as 4.0 and 4.00).<p>

For the mathematically inclined, the <i>relation</i> that defines
the natural ordering on a given class C is:<pre>
      {(x, y) such that x.compareTo((Object)y) &lt;= 0}.
</pre> The <i>quotient</i> for this total order is: <pre>
      {(x, y) such that x.compareTo((Object)y) == 0}.
</pre>

It follows immediately from the contract for <tt>compareTo</tt> that the
quotient is an <i>equivalence relation</i> on <tt>C</tt>, and that the
natural ordering is a <i>total order</i> on <tt>C</tt>.  When we say that a
class's natural ordering is <i>consistent with equals</i>, we mean that the
quotient for the natural ordering is the equivalence relation defined by
the class's <tt>equals(Object)</tt> method:<pre>
    {(x, y) such that x.equals((Object)y)}.
</pre><p>

This interface is a member of the 
<a href=\"{@docRoot}/../guide/collections/index.html\">
Java Collections Framework</a>.

@author  Josh Bloch
@version 1.22, 12/19/03
@see java.util.Comparator
@see java.util.Collections#sort(java.util.List)
@see java.util.Arrays#sort(Object[])
@see java.util.SortedSet
@see java.util.SortedMap
@see java.util.TreeSet
@see java.util.TreeMap
@since 1.2"
      operation 826267 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "o" explicit_type "T"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this object with the specified object for order.  Returns a
negative integer, zero, or a positive integer as this object is less
than, equal to, or greater than the specified object.<p>

In the foregoing description, the notation
<tt>sgn(</tt><i>expression</i><tt>)</tt> designates the mathematical
<i>signum</i> function, which is defined to return one of <tt>-1</tt>,
<tt>0</tt>, or <tt>1</tt> according to whether the value of <i>expression</i>
is negative, zero or positive.

The implementor must ensure <tt>sgn(x.compareTo(y)) ==
-sgn(y.compareTo(x))</tt> for all <tt>x</tt> and <tt>y</tt>.  (This
implies that <tt>x.compareTo(y)</tt> must throw an exception iff
<tt>y.compareTo(x)</tt> throws an exception.)<p>

The implementor must also ensure that the relation is transitive:
<tt>(x.compareTo(y)&gt;0 &amp;&amp; y.compareTo(z)&gt;0)</tt> implies
<tt>x.compareTo(z)&gt;0</tt>.<p>

Finally, the implementer must ensure that <tt>x.compareTo(y)==0</tt>
implies that <tt>sgn(x.compareTo(z)) == sgn(y.compareTo(z))</tt>, for
all <tt>z</tt>.<p>

It is strongly recommended, but <i>not</i> strictly required that
<tt>(x.compareTo(y)==0) == (x.equals(y))</tt>.  Generally speaking, any
class that implements the <tt>Comparable</tt> interface and violates
this condition should clearly indicate this fact.  The recommended
language is \"Note: this class has a natural ordering that is
inconsistent with equals.\"

@param   o the Object to be compared.
@return  a negative integer, zero, or a positive integer as this object
		is less than, equal to, or greater than the specified object.

@throws ClassCastException if the specified object's type prevents it
        from being compared to this Object."
      end
    end

    class 221851 "Error"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An <code>Error</code> is a subclass of <code>Throwable</code> 
that indicates serious problems that a reasonable application 
should not try to catch. Most such errors are abnormal conditions. 
The <code>ThreadDeath</code> error, though a \"normal\" condition,
is also a subclass of <code>Error</code> because most applications
should not try to catch it. 
<p>
A method is not required to declare in its <code>throws</code> 
clause any subclasses of <code>Error</code> that might be thrown 
during the execution of the method but not caught, since these 
errors are abnormal conditions that should never occur. 

@author  Frank Yellin
@version 1.16, 12/19/03
@see     java.lang.ThreadDeath
@since   JDK1.0"
      classrelation 270619 // <generalisation>
	relation 270619 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 270619 // <generalisation>
	  b parent class_ref 164251 // Throwable
      end

      attribute 275611 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value "=  4980196508277280342L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 832283 "Error"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new error with <code>null</code> as its detail message.
The cause is not initialized, and may subsequently be initialized by a
call to {@link #initCause}."
      end

      operation 832411 "Error"
	public explicit_return_type ""
	nparams 1
	  param in name "message" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new error with the specified detail message.  The
cause is not initialized, and may subsequently be initialized by
a call to {@link #initCause}.

@param   message   the detail message. The detail message is saved for 
         later retrieval by the {@link #getMessage()} method."
      end

      operation 832539 "Error"
	public explicit_return_type ""
	nparams 2
	  param in name "message" explicit_type "String"
	  param inout name "cause" type class_ref 164251 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new error with the specified detail message and
cause.  <p>Note that the detail message associated with
<code>cause</code> is <i>not</i> automatically incorporated in
this error's detail message.

@param  message the detail message (which is saved for later retrieval
        by the {@link #getMessage()} method).
@param  cause the cause (which is saved for later retrieval by the
        {@link #getCause()} method).  (A <tt>null</tt> value is
        permitted, and indicates that the cause is nonexistent or
        unknown.)
@since  1.4"
      end

      operation 832667 "Error"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 164251 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new error with the specified cause and a detail
message of <tt>(cause==null ? null : cause.toString())</tt> (which
typically contains the class and detail message of <tt>cause</tt>).
This constructor is useful for errors that are little more than
wrappers for other throwables.

@param  cause the cause (which is saved for later retrieval by the
        {@link #getCause()} method).  (A <tt>null</tt> value is
        permitted, and indicates that the cause is nonexistent or
        unknown.)
@since  1.4"
      end
    end

    class 233755 "ClassCastException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Thrown to indicate that the code has attempted to cast an object 
to a subclass of which it is not an instance. For example, the 
following code generates a <code>ClassCastException</code>: 
<p><blockquote><pre>
    Object x = new Integer(0);
    System.out.println((String)x);
</pre></blockquote>

@author  unascribed
@version 1.20, 12/19/03
@since   JDK1.0"
      classrelation 1776539 // <generalisation>
	relation 1776539 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1776539 // <generalisation>
	  b parent class_ref 241051 // RuntimeException
      end

      operation 6976667 "ClassCastException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>ClassCastException</code> with no detail message. "
      end

      operation 6976795 "ClassCastException"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>ClassCastException</code> with the specified 
detail message. 

@param   s   the detail message."
      end
    end

    class 241051 "RuntimeException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<code>RuntimeException</code> is the superclass of those 
exceptions that can be thrown during the normal operation of the 
Java Virtual Machine. 
<p>
A method is not required to declare in its <code>throws</code> 
clause any subclasses of <code>RuntimeException</code> that might 
be thrown during the execution of the method but not caught. 


@author  Frank Yellin
@version 1.13, 12/19/03
@since   JDK1.0"
      classrelation 395419 // <generalisation>
	relation 395419 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 395419 // <generalisation>
	  b parent class_ref 165403 // Exception
      end

      attribute 445851 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value "=  -7034897190745766939L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1564827 "RuntimeException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructs a new runtime exception with <code>null</code> as its
detail message.  The cause is not initialized, and may subsequently be
initialized by a call to {@link #initCause}."
      end

      operation 1564955 "RuntimeException"
	public explicit_return_type ""
	nparams 1
	  param in name "message" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructs a new runtime exception with the specified detail message.
The cause is not initialized, and may subsequently be initialized by a
call to {@link #initCause}.

@param   message   the detail message. The detail message is saved for 
         later retrieval by the {@link #getMessage()} method."
      end

      operation 1565083 "RuntimeException"
	public explicit_return_type ""
	nparams 2
	  param in name "message" explicit_type "String"
	  param inout name "cause" type class_ref 164251 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new runtime exception with the specified detail message and
cause.  <p>Note that the detail message associated with
<code>cause</code> is <i>not</i> automatically incorporated in
this runtime exception's detail message.

@param  message the detail message (which is saved for later retrieval
        by the {@link #getMessage()} method).
@param  cause the cause (which is saved for later retrieval by the
        {@link #getCause()} method).  (A <tt>null</tt> value is
        permitted, and indicates that the cause is nonexistent or
        unknown.)
@since  1.4"
      end

      operation 1565211 "RuntimeException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 164251 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructs a new runtime exception with the specified cause and a
detail message of <tt>(cause==null ? null : cause.toString())</tt>
(which typically contains the class and detail message of
<tt>cause</tt>).  This constructor is useful for runtime exceptions
that are little more than wrappers for other throwables.

@param  cause the cause (which is saved for later retrieval by the
        {@link #getCause()} method).  (A <tt>null</tt> value is
        permitted, and indicates that the cause is nonexistent or
        unknown.)
@since  1.4"
      end
    end

    class 277915 "Long"
      visibility public 
      nactuals 3
      actual class class_ref 221467 // Comparable
        rank 0 value class_ref 277915 // Long
      actual class class_ref 221467 // Comparable
        rank 1 explicit_value ""
      actual class class_ref 221467 // Comparable
        rank 2 explicit_value ""
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The <code>Long</code> class wraps a value of the primitive type
<code>long</code> in an object. An object of type <code>Long</code>
contains a single field whose type is <code>long</code>.

<p> 

In addition, this class provides several methods for converting a
<code>long</code> to a <code>String</code> and a
<code>String</code> to a <code>long</code>, as well as other
constants and methods useful when dealing with a <code>long</code>.

<p>Implementation note: The implementations of the \"bit twiddling\"
methods (such as {@link #highestOneBit(long) highestOneBit} and
{@link #numberOfTrailingZeros(long) numberOfTrailingZeros}) are
based on material from Henry S. Warren, Jr.'s <i>Hacker's
Delight</i>, (Addison Wesley, 2002).

@author  Lee Boynton
@author  Arthur van Hoff
@author  Josh Bloch
@version 1.79, 05/11/04
@since   JDK1.0"
      classrelation 1781275 // <generalisation>
	relation 1781275 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1781275 // <generalisation>
	  b parent class_ref 413979 // Number
      end

      classrelation 1781403 // <realization>
	relation 1781403 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 1781403 // <realization>
	  b parent class_ref 221467 // Comparable
      end

      attribute 2732315 "MIN_VALUE"
	class_attribute const_attribute public explicit_type "long"
	init_value "=  0x8000000000000000L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A constant holding the minimum value a <code>long</code> can
have, -2<sup>63</sup>.
"
      end

      attribute 2732443 "MAX_VALUE"
	class_attribute const_attribute public explicit_type "long"
	init_value "=  0x7fffffffffffffffL"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A constant holding the maximum value a <code>long</code> can
have, 2<sup>63</sup>-1.
"
      end

      classrelation 1781531 // TYPE (<unidirectional association>)
	relation 1781531 --->
	  a role_name "TYPE" init_value "=  (Class<Long>) Class.getPrimitiveClass(\"long\")" class_relation const_relation public
	    comment "
The <code>Class</code> instance representing the primitive type
<code>long</code>.

@since   JDK1.1

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Long> ${name}${value};
"
	    classrelation_ref 1781531 // TYPE (<unidirectional association>)
	  b parent class_ref 164635 // Class
      end

      operation 7002651 "toString"
	class_operation public explicit_return_type "String"
	nparams 2
	  param in name "i" explicit_type "long"
	  param in name "radix" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of the first argument in the
radix specified by the second argument.
<p>
If the radix is smaller than <code>Character.MIN_RADIX</code>
or larger than <code>Character.MAX_RADIX</code>, then the radix
<code>10</code> is used instead.
<p>
If the first argument is negative, the first element of the
result is the ASCII minus sign <code>'-'</code>
(<code>'&#92;u002d'</code>). If the first argument is not
negative, no sign character appears in the result.
<p>
The remaining characters of the result represent the magnitude
of the first argument. If the magnitude is zero, it is
represented by a single zero character <code>'0'</code>
(<code>'&#92;u0030'</code>); otherwise, the first character of
the representation of the magnitude will not be the zero
character.  The following ASCII characters are used as digits:
<blockquote><pre>
  0123456789abcdefghijklmnopqrstuvwxyz
</pre></blockquote>
These are <code>'&#92;u0030'</code> through
<code>'&#92;u0039'</code> and <code>'&#92;u0061'</code> through
<code>'&#92;u007a'</code>. If <code>radix</code> is
<var>N</var>, then the first <var>N</var> of these characters
are used as radix-<var>N</var> digits in the order shown. Thus,
the digits for hexadecimal (radix 16) are
<code>0123456789abcdef</code>. If uppercase letters are
desired, the {@link java.lang.String#toUpperCase()} method may
be called on the result:
<blockquote><pre>
Long.toString(n, 16).toUpperCase()
</pre></blockquote>

@param   i       a <code>long</code>to be converted to a string.
@param   radix   the radix to use in the string representation.
@return  a string representation of the argument in the specified radix.
@see     java.lang.Character#MAX_RADIX
@see     java.lang.Character#MIN_RADIX"
      end

      operation 7002779 "toHexString"
	class_operation public explicit_return_type "String"
	nparams 1
	  param in name "i" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of the <code>long</code>
argument as an unsigned integer in base&nbsp;16.
<p>
The unsigned <code>long</code> value is the argument plus
2<sup>64</sup> if the argument is negative; otherwise, it is
equal to the argument.  This value is converted to a string of
ASCII digits in hexadecimal (base&nbsp;16) with no extra
leading <code>0</code>s.  If the unsigned magnitude is zero, it
is represented by a single zero character <code>'0'</code>
(<code>'&#92;u0030'</code>); otherwise, the first character of
the representation of the unsigned magnitude will not be the
zero character. The following characters are used as
hexadecimal digits:
<blockquote><pre>
0123456789abcdef
</pre></blockquote>
These are the characters <code>'&#92;u0030'</code> through
<code>'&#92;u0039'</code> and  <code>'&#92;u0061'</code> through
<code>'&#92;u0066'</code>.  If uppercase letters are desired,
the {@link java.lang.String#toUpperCase()} method may be called
on the result:
<blockquote><pre>
Long.toHexString(n).toUpperCase()
</pre></blockquote>

@param   i   a <code>long</code> to be converted to a string.
@return  the string representation of the unsigned <code>long</code>
		value represented by the argument in hexadecimal
		(base&nbsp;16).
@since   JDK 1.0.2"
      end

      operation 7002907 "toOctalString"
	class_operation public explicit_return_type "String"
	nparams 1
	  param in name "i" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of the <code>long</code>
argument as an unsigned integer in base&nbsp;8.
<p>
The unsigned <code>long</code> value is the argument plus
2<sup>64</sup> if the argument is negative; otherwise, it is
equal to the argument.  This value is converted to a string of
ASCII digits in octal (base&nbsp;8) with no extra leading
<code>0</code>s.
<p>
If the unsigned magnitude is zero, it is represented by a
single zero character <code>'0'</code>
(<code>'&#92;u0030'</code>); otherwise, the first character of
the representation of the unsigned magnitude will not be the
zero character. The following characters are used as octal
digits:
<blockquote><pre>
01234567
</pre></blockquote>
These are the characters <code>'&#92;u0030'</code> through 
<code>'&#92;u0037'</code>. 

@param   i   a <code>long</code> to be converted to a string.
@return  the string representation of the unsigned <code>long</code> 
		value represented by the argument in octal (base&nbsp;8).
@since   JDK 1.0.2"
      end

      operation 7003035 "toBinaryString"
	class_operation public explicit_return_type "String"
	nparams 1
	  param in name "i" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of the <code>long</code>
argument as an unsigned integer in base&nbsp;2.
<p>
The unsigned <code>long</code> value is the argument plus
2<sup>64</sup> if the argument is negative; otherwise, it is
equal to the argument.  This value is converted to a string of
ASCII digits in binary (base&nbsp;2) with no extra leading
<code>0</code>s.  If the unsigned magnitude is zero, it is
represented by a single zero character <code>'0'</code>
(<code>'&#92;u0030'</code>); otherwise, the first character of
the representation of the unsigned magnitude will not be the
zero character. The characters <code>'0'</code>
(<code>'&#92;u0030'</code>) and <code>'1'</code>
(<code>'&#92;u0031'</code>) are used as binary digits.

@param   i   a <code>long</code> to be converted to a string.
@return  the string representation of the unsigned <code>long</code> 
         value represented by the argument in binary (base&nbsp;2).
@since   JDK 1.0.2"
      end

      operation 7003163 "toUnsignedString"
	class_operation private explicit_return_type "String"
	nparams 2
	  param in name "i" explicit_type "long"
	  param in name "shift" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convert the integer to an unsigned number."
      end

      operation 7003291 "toString"
	class_operation public explicit_return_type "String"
	nparams 1
	  param in name "i" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>String</code> object representing the specified
<code>long</code>.  The argument is converted to signed decimal
representation and returned as a string, exactly as if the
argument and the radix 10 were given as arguments to the {@link
#toString(long, int)} method.

@param   i   a <code>long</code> to be converted.
@return  a string representation of the argument in base&nbsp;10."
      end

      operation 7003419 "getChars"
	class_operation package explicit_return_type "void"
	nparams 3
	  param in name "i" explicit_type "long"
	  param in name "index" explicit_type "int"
	  param in name "buf" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Places characters representing the integer i into the
character array buf. The characters are placed into
the buffer backwards starting with the least significant
digit at the specified index (exclusive), and working
backwards from there.

Will fail if i == Long.MIN_VALUE"
      end

      operation 7003547 "stringSize"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "x" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Requires positive x"
      end

      operation 7003675 "parseLong"
	class_operation public explicit_return_type "long"
	nparams 2
	  param in name "s" explicit_type "String"
	  param in name "radix" explicit_type "int"
	nexceptions 1
	  exception class_ref 533659 // NumberFormatException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parses the string argument as a signed <code>long</code> in the
radix specified by the second argument. The characters in the
string must all be digits of the specified radix (as determined
by whether {@link java.lang.Character#digit(char, int)} returns
a nonnegative value), except that the first character may be an
ASCII minus sign <code>'-'</code> (<code>'&#92;u002D'</code>) to
indicate a negative value. The resulting <code>long</code>
value is returned.
<p>
Note that neither the character <code>L</code>
(<code>'&#92;u004C'</code>) nor <code>l</code>
(<code>'&#92;u006C'</code>) is permitted to appear at the end
of the string as a type indicator, as would be permitted in
Java programming language source code - except that either
<code>L</code> or <code>l</code> may appear as a digit for a
radix greater than 22.
<p>
An exception of type <code>NumberFormatException</code> is
thrown if any of the following situations occurs:
<ul>
<li>The first argument is <code>null</code> or is a string of
length zero.
<li>The <code>radix</code> is either smaller than {@link
java.lang.Character#MIN_RADIX} or larger than {@link
java.lang.Character#MAX_RADIX}.
<li>Any character of the string is not a digit of the specified
radix, except that the first character may be a minus sign
<code>'-'</code> (<code>'&#92;u002d'</code>) provided that the
string is longer than length 1.
<li>The value represented by the string is not a value of type
     <code>long</code>. 
</ul><p>
Examples:
<blockquote><pre>
parseLong(\"0\", 10) returns 0L
parseLong(\"473\", 10) returns 473L
parseLong(\"-0\", 10) returns 0L
parseLong(\"-FF\", 16) returns -255L
parseLong(\"1100110\", 2) returns 102L
parseLong(\"99\", 8) throws a NumberFormatException
parseLong(\"Hazelnut\", 10) throws a NumberFormatException
parseLong(\"Hazelnut\", 36) returns 1356099454469L
</pre></blockquote>

@param      s       the <code>String</code> containing the
                    <code>long</code> representation to be parsed.
@param      radix   the radix to be used while parsing <code>s</code>.
@return     the <code>long</code> represented by the string argument in
            the specified radix.
@exception  NumberFormatException  if the string does not contain a
              parsable <code>long</code>."
      end

      operation 7003803 "parseLong"
	class_operation public explicit_return_type "long"
	nparams 1
	  param in name "s" explicit_type "String"
	nexceptions 1
	  exception class_ref 533659 // NumberFormatException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parses the string argument as a signed decimal
<code>long</code>.  The characters in the string must all be
decimal digits, except that the first character may be an ASCII
minus sign <code>'-'</code> (<code>&#92;u002D'</code>) to
indicate a negative value. The resulting <code>long</code>
value is returned, exactly as if the argument and the radix
<code>10</code> were given as arguments to the {@link
#parseLong(java.lang.String, int)} method.
<p>
Note that neither the character <code>L</code>
(<code>'&#92;u004C'</code>) nor <code>l</code>
(<code>'&#92;u006C'</code>) is permitted to appear at the end
of the string as a type indicator, as would be permitted in
Java programming language source code.

@param      s   a <code>String</code> containing the <code>long</code>
            representation to be parsed
@return     the <code>long</code> represented by the argument in 
		   decimal.
@exception  NumberFormatException  if the string does not contain a
              parsable <code>long</code>."
      end

      operation 7003931 "valueOf"
	class_operation public return_type class_ref 277915 // Long
	nparams 2
	  param in name "s" explicit_type "String"
	  param in name "radix" explicit_type "int"
	nexceptions 1
	  exception class_ref 533659 // NumberFormatException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>Long</code> object holding the value
extracted from the specified <code>String</code> when parsed
with the radix given by the second argument.  The first
argument is interpreted as representing a signed
<code>long</code> in the radix specified by the second
argument, exactly as if the arguments were given to the {@link
#parseLong(java.lang.String, int)} method. The result is a
<code>Long</code> object that represents the <code>long</code>
value specified by the string.
<p>
In other words, this method returns a <code>Long</code> object equal 
to the value of:

<blockquote><code>
new Long(Long.parseLong(s, radix))
</code></blockquote>

@param      s       the string to be parsed
@param      radix   the radix to be used in interpreting <code>s</code>
@return     a <code>Long</code> object holding the value
            represented by the string argument in the specified
            radix.
@exception  NumberFormatException  If the <code>String</code> does not
            contain a parsable <code>long</code>."
      end

      operation 7004059 "valueOf"
	class_operation public return_type class_ref 277915 // Long
	nparams 1
	  param in name "s" explicit_type "String"
	nexceptions 1
	  exception class_ref 533659 // NumberFormatException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>Long</code> object holding the value
of the specified <code>String</code>. The argument is
interpreted as representing a signed decimal <code>long</code>,
exactly as if the argument were given to the {@link
#parseLong(java.lang.String)} method. The result is a
<code>Long</code> object that represents the integer value
specified by the string.
<p>
In other words, this method returns a <code>Long</code> object
equal to the value of:

<blockquote><pre>
new Long(Long.parseLong(s))
</pre></blockquote>

@param      s   the string to be parsed.
@return     a <code>Long</code> object holding the value
            represented by the string argument.
@exception  NumberFormatException  If the string cannot be parsed
             as a <code>long</code>."
      end

      class 913563 "LongCache"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 7004187 "LongCache"
	  private explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	classrelation 1781659 // cache (<unidirectional association>)
	  relation 1781659 --->
	    a role_name "cache" multiplicity "[]" init_value "=  new Long[-(-128) + 127 + 1]" class_relation const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 1781659 // cache (<unidirectional association>)
	    b parent class_ref 277915 // Long
	end

	extra_member 161947 "initialization"
	  
	  cpp "" ""
	  java "  static {
	    for(int i = 0; i < cache.length; i++)
		cache[i] = new Long(i - 128);
	}"
	  php ""
	  python ""
	  idl ""
	end
      end

      operation 7004315 "valueOf"
	class_operation public return_type class_ref 277915 // Long
	nparams 1
	  param in name "l" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <tt>Long</tt> instance representing the specified
<tt>long</tt> value.
If a new <tt>Long</tt> instance is not required, this method
should generally be used in preference to the constructor
{@link #Long(long)}, as this method is likely to yield
significantly better space and time performance by caching
frequently requested values.

@param  l a long value.
@return a <tt>Long</tt> instance representing <tt>l</tt>.
@since  1.5"
      end

      operation 7004443 "decode"
	class_operation public return_type class_ref 277915 // Long
	nparams 1
	  param in name "nm" explicit_type "String"
	nexceptions 1
	  exception class_ref 533659 // NumberFormatException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Decodes a <code>String</code> into a <code>Long</code>.
Accepts decimal, hexadecimal, and octal numbers given by the
following grammar:

<blockquote>
<dl>
<dt><i>DecodableString:</i>
<dd><i>Sign<sub>opt</sub> DecimalNumeral</i>
<dd><i>Sign<sub>opt</sub></i> <code>0x</code> <i>HexDigits</i>
<dd><i>Sign<sub>opt</sub></i> <code>0X</code> <i>HexDigits</i>
<dd><i>Sign<sub>opt</sub></i> <code>#</code> <i>HexDigits</i>
<dd><i>Sign<sub>opt</sub></i> <code>0</code> <i>OctalDigits</i>
<p>
<dt><i>Sign:</i>
<dd><code>-</code>
</dl>
</blockquote>

<i>DecimalNumeral</i>, <i>HexDigits</i>, and <i>OctalDigits</i>
are defined in <a href=\"http://java.sun.com/docs/books/jls/second_edition/html/lexical.doc.html#48282\">&sect;3.10.1</a> 
of the <a href=\"http://java.sun.com/docs/books/jls/html/\">Java 
Language Specification</a>.
<p>
The sequence of characters following an (optional) negative
sign and/or radix specifier (&quot;<code>0x</code>&quot;,
&quot;<code>0X</code>&quot;, &quot;<code>#</code>&quot;, or
leading zero) is parsed as by the <code>Long.parseLong</code>
method with the indicated radix (10, 16, or 8).  This sequence
of characters must represent a positive value or a {@link
NumberFormatException} will be thrown.  The result is negated
if first character of the specified <code>String</code> is the
minus sign.  No whitespace characters are permitted in the
<code>String</code>.

@param     nm the <code>String</code> to decode.
@return    a <code>Long</code> object holding the <code>long</code>
		  value represented by <code>nm</code>
@exception NumberFormatException  if the <code>String</code> does not
           contain a parsable <code>long</code>.
@see java.lang.Long#parseLong(String, int)
@since 1.2"
      end

      attribute 2732571 "value"
	const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The value of the <code>Long</code>.

@serial
"
      end

      operation 7004571 "Long"
	public explicit_return_type ""
	nparams 1
	  param in name "value" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a newly allocated <code>Long</code> object that
represents the specified <code>long</code> argument.

@param   value   the value to be represented by the 
         <code>Long</code> object."
      end

      operation 7004699 "Long"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	nexceptions 1
	  exception class_ref 533659 // NumberFormatException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a newly allocated <code>Long</code> object that
represents the <code>long</code> value indicated by the
<code>String</code> parameter. The string is converted to a
<code>long</code> value in exactly the manner used by the
<code>parseLong</code> method for radix 10.

@param      s   the <code>String</code> to be converted to a 
		   <code>Long</code>.
@exception  NumberFormatException  if the <code>String</code> does not
              contain a parsable <code>long</code>.
@see        java.lang.Long#parseLong(java.lang.String, int)"
      end

      operation 7004827 "byteValue"
	public explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this <code>Long</code> as a
<code>byte</code>."
      end

      operation 7004955 "shortValue"
	public explicit_return_type "short"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this <code>Long</code> as a
<code>short</code>."
      end

      operation 7005083 "intValue"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this <code>Long</code> as an
<code>int</code>."
      end

      operation 7005211 "longValue"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this <code>Long</code> as a
<code>long</code> value."
      end

      operation 7005339 "floatValue"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this <code>Long</code> as a
<code>float</code>."
      end

      operation 7005467 "doubleValue"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this <code>Long</code> as a
<code>double</code>."
      end

      operation 7005595 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>String</code> object representing this
<code>Long</code>'s value.  The value is converted to signed
decimal representation and returned as a string, exactly as if
the <code>long</code> value were given as an argument to the
{@link java.lang.Long#toString(long)} method.

@return  a string representation of the value of this object in
		base&nbsp;10."
      end

      operation 7005723 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hash code for this <code>Long</code>. The result is
the exclusive OR of the two halves of the primitive
<code>long</code> value held by this <code>Long</code>
object. That is, the hashcode is the value of the expression:
<blockquote><pre>
(int)(this.longValue()^(this.longValue()&gt;&gt;&gt;32))
</pre></blockquote>

@return  a hash code value for this object."
      end

      operation 7005851 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this object to the specified object.  The result is
<code>true</code> if and only if the argument is not
<code>null</code> and is a <code>Long</code> object that
contains the same <code>long</code> value as this object.

@param   obj   the object to compare with.
@return  <code>true</code> if the objects are the same;
         <code>false</code> otherwise."
      end

      operation 7005979 "getLong"
	class_operation public return_type class_ref 277915 // Long
	nparams 1
	  param in name "nm" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines the <code>long</code> value of the system property
with the specified name.
<p>
The first argument is treated as the name of a system property.
System properties are accessible through the {@link
java.lang.System#getProperty(java.lang.String)} method. The
string value of this property is then interpreted as a
<code>long</code> value and a <code>Long</code> object
representing this value is returned.  Details of possible
numeric formats can be found with the definition of
<code>getProperty</code>.
<p>
If there is no property with the specified name, if the
specified name is empty or <code>null</code>, or if the
property does not have the correct numeric format, then
<code>null</code> is returned.
<p>
In other words, this method returns a <code>Long</code> object equal to 
the value of:
<blockquote><code>
getLong(nm, null)
</code></blockquote>

@param   nm   property name.
@return  the <code>Long</code> value of the property.
@see     java.lang.System#getProperty(java.lang.String)
@see     java.lang.System#getProperty(java.lang.String, java.lang.String)"
      end

      operation 7006107 "getLong"
	class_operation public return_type class_ref 277915 // Long
	nparams 2
	  param in name "nm" explicit_type "String"
	  param in name "val" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines the <code>long</code> value of the system property
with the specified name.
<p>
The first argument is treated as the name of a system property.
System properties are accessible through the {@link
java.lang.System#getProperty(java.lang.String)} method. The
string value of this property is then interpreted as a
<code>long</code> value and a <code>Long</code> object
representing this value is returned.  Details of possible
numeric formats can be found with the definition of
<code>getProperty</code>.
<p>
The second argument is the default value. A <code>Long</code> object
that represents the value of the second argument is returned if there
is no property of the specified name, if the property does not have
the correct numeric format, or if the specified name is empty or null.
<p>
In other words, this method returns a <code>Long</code> object equal 
to the value of:
<blockquote><code>
getLong(nm, new Long(val))
</code></blockquote>
but in practice it may be implemented in a manner such as: 
<blockquote><pre>
Long result = getLong(nm, null);
return (result == null) ? new Long(val) : result;
</pre></blockquote>
to avoid the unnecessary allocation of a <code>Long</code> object when 
the default value is not needed. 

@param   nm    property name.
@param   val   default value.
@return  the <code>Long</code> value of the property.
@see     java.lang.System#getProperty(java.lang.String)
@see     java.lang.System#getProperty(java.lang.String, java.lang.String)"
      end

      operation 7006235 "getLong"
	class_operation public return_type class_ref 277915 // Long
	nparams 2
	  param in name "nm" explicit_type "String"
	  param inout name "val" type class_ref 277915 // Long
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>long</code> value of the system property with
the specified name.  The first argument is treated as the name
of a system property.  System properties are accessible through
the {@link java.lang.System#getProperty(java.lang.String)}
method. The string value of this property is then interpreted
as a <code>long</code> value, as per the
<code>Long.decode</code> method, and a <code>Long</code> object
representing this value is returned.
<p><ul>
<li>If the property value begins with the two ASCII characters
<code>0x</code> or the ASCII character <code>#</code>, not followed by 
a minus sign, then the rest of it is parsed as a hexadecimal integer
exactly as for the method {@link #valueOf(java.lang.String, int)} 
with radix 16. 
<li>If the property value begins with the ASCII character
<code>0</code> followed by another character, it is parsed as
an octal integer exactly as by the method {@link
#valueOf(java.lang.String, int)} with radix 8.
<li>Otherwise the property value is parsed as a decimal
integer exactly as by the method 
{@link #valueOf(java.lang.String, int)} with radix 10.
</ul>
<p>
Note that, in every case, neither <code>L</code>
(<code>'&#92;u004C'</code>) nor <code>l</code>
(<code>'&#92;u006C'</code>) is permitted to appear at the end
of the property value as a type indicator, as would be
permitted in Java programming language source code.
<p>
The second argument is the default value. The default value is
returned if there is no property of the specified name, if the
property does not have the correct numeric format, or if the
specified name is empty or <code>null</code>.

@param   nm   property name.
@param   val   default value.
@return  the <code>Long</code> value of the property.
@see     java.lang.System#getProperty(java.lang.String)
@see java.lang.System#getProperty(java.lang.String, java.lang.String)
@see java.lang.Long#decode"
      end

      operation 7006363 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "anotherLong" type class_ref 277915 // Long
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares two <code>Long</code> objects numerically.

@param   anotherLong   the <code>Long</code> to be compared.
@return	the value <code>0</code> if this <code>Long</code> is
		equal to the argument <code>Long</code>; a value less than
		<code>0</code> if this <code>Long</code> is numerically less
		than the argument <code>Long</code>; and a value greater 
		than <code>0</code> if this <code>Long</code> is numerically
		 greater than the argument <code>Long</code> (signed
		 comparison).
@since   1.2"
      end

      attribute 2732699 "SIZE"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  64"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Bit Twiddling

The number of bits used to represent a <tt>long</tt> value in two's
complement binary form.

@since 1.5
"
      end

      operation 7006491 "highestOneBit"
	class_operation public explicit_return_type "long"
	nparams 1
	  param in name "i" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <tt>long</tt> value with at most a single one-bit, in the
position of the highest-order (\"leftmost\") one-bit in the specified
<tt>long</tt> value.  Returns zero if the specified value has no
one-bits in its two's complement binary representation, that is, if it
is equal to zero.

@return an <tt>long</tt> value with a single one-bit, in the position
    of the highest-order one-bit in the specified value, or zero if
    the specified value is itself equal to zero.
@since 1.5"
      end

      operation 7006619 "lowestOneBit"
	class_operation public explicit_return_type "long"
	nparams 1
	  param in name "i" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <tt>long</tt> value with at most a single one-bit, in the
position of the lowest-order (\"rightmost\") one-bit in the specified
<tt>long</tt> value.  Returns zero if the specified value has no
one-bits in its two's complement binary representation, that is, if it
is equal to zero.

@return an <tt>long</tt> value with a single one-bit, in the position
    of the lowest-order one-bit in the specified value, or zero if
    the specified value is itself equal to zero.
@since 1.5"
      end

      operation 7006747 "numberOfLeadingZeros"
	class_operation public explicit_return_type "int"
	nparams 1
	  param in name "i" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of zero bits preceding the highest-order
(\"leftmost\") one-bit in the two's complement binary representation
of the specified <tt>long</tt> value.  Returns 64 if the
specified value has no one-bits in its two's complement representation,
in other words if it is equal to zero.

<p>Note that this method is closely related to the logarithm base 2.
For all positive <tt>long</tt> values x:
<ul>
<li>floor(log<sub>2</sub>(x)) = <tt>63 - numberOfLeadingZeros(x)</tt>
<li>ceil(log<sub>2</sub>(x)) = <tt>64 - numberOfLeadingZeros(x - 1)</tt>
</ul>

@return the number of zero bits preceding the highest-order
    (\"leftmost\") one-bit in the two's complement binary representation
    of the specified <tt>long</tt> value, or 64 if the value
    is equal to zero.
@since 1.5"
      end

      operation 7006875 "numberOfTrailingZeros"
	class_operation public explicit_return_type "int"
	nparams 1
	  param in name "i" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of zero bits following the lowest-order (\"rightmost\")
one-bit in the two's complement binary representation of the specified
<tt>long</tt> value.  Returns 64 if the specified value has no
one-bits in its two's complement representation, in other words if it is
equal to zero.

@return the number of zero bits following the lowest-order (\"rightmost\")
    one-bit in the two's complement binary representation of the
    specified <tt>long</tt> value, or 64 if the value is equal
    to zero.
@since 1.5"
      end

      operation 7007003 "bitCount"
	class_operation public explicit_return_type "int"
	nparams 1
	  param in name "i" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of one-bits in the two's complement binary
representation of the specified <tt>long</tt> value.  This function is
sometimes referred to as the <i>population count</i>.

@return the number of one-bits in the two's complement binary
    representation of the specified <tt>long</tt> value.
@since 1.5"
      end

      operation 7007131 "rotateLeft"
	class_operation public explicit_return_type "long"
	nparams 2
	  param in name "i" explicit_type "long"
	  param in name "distance" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value obtained by rotating the two's complement binary
representation of the specified <tt>long</tt> value left by the
specified number of bits.  (Bits shifted out of the left hand, or
high-order, side reenter on the right, or low-order.)

<p>Note that left rotation with a negative distance is equivalent to
right rotation: <tt>rotateLeft(val, -distance) == rotateRight(val,
distance)</tt>.  Note also that rotation by any multiple of 64 is a
no-op, so all but the last six bits of the rotation distance can be
ignored, even if the distance is negative: <tt>rotateLeft(val,
distance) == rotateLeft(val, distance & 0x3F)</tt>.

@return the value obtained by rotating the two's complement binary
    representation of the specified <tt>long</tt> value left by the
    specified number of bits.
@since 1.5"
      end

      operation 7007259 "rotateRight"
	class_operation public explicit_return_type "long"
	nparams 2
	  param in name "i" explicit_type "long"
	  param in name "distance" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value obtained by rotating the two's complement binary
representation of the specified <tt>long</tt> value right by the
specified number of bits.  (Bits shifted out of the right hand, or
low-order, side reenter on the left, or high-order.)

<p>Note that right rotation with a negative distance is equivalent to
left rotation: <tt>rotateRight(val, -distance) == rotateLeft(val,
distance)</tt>.  Note also that rotation by any multiple of 64 is a
no-op, so all but the last six bits of the rotation distance can be
ignored, even if the distance is negative: <tt>rotateRight(val,
distance) == rotateRight(val, distance & 0x3F)</tt>.

@return the value obtained by rotating the two's complement binary
    representation of the specified <tt>long</tt> value right by the
    specified number of bits.
@since 1.5"
      end

      operation 7007387 "reverse"
	class_operation public explicit_return_type "long"
	nparams 1
	  param in name "i" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value obtained by reversing the order of the bits in the
two's complement binary representation of the specified <tt>long</tt>
value.

@return the value obtained by reversing order of the bits in the
    specified <tt>long</tt> value.
@since 1.5"
      end

      operation 7007515 "signum"
	class_operation public explicit_return_type "int"
	nparams 1
	  param in name "i" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the signum function of the specified <tt>long</tt> value.  (The
return value is -1 if the specified value is negative; 0 if the
specified value is zero; and 1 if the specified value is positive.)

@return the signum function of the specified <tt>long</tt> value.
@since 1.5"
      end

      operation 7007643 "reverseBytes"
	class_operation public explicit_return_type "long"
	nparams 1
	  param in name "i" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value obtained by reversing the order of the bytes in the
two's complement representation of the specified <tt>long</tt> value.

@return the value obtained by reversing the bytes in the specified
    <tt>long</tt> value.
@since 1.5"
      end

      attribute 2732827 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  4290774380558885855L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " use serialVersionUID from JDK 1.0.2 for interoperability "
      end
    end

    class 282779 "IllegalStateException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Signals that a method has been invoked at an illegal or
inappropriate time.  In other words, the Java environment or
Java application is not in an appropriate state for the requested
operation.

@author  Jonni Kanerva
@version 1.15, 12/19/03
@since   JDK1.1"
      classrelation 1609755 // <generalisation>
	relation 1609755 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1609755 // <generalisation>
	  b parent class_ref 241051 // RuntimeException
      end

      operation 6288923 "IllegalStateException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an IllegalStateException with no detail message.
A detail message is a String that describes this particular exception."
      end

      operation 6289051 "IllegalStateException"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an IllegalStateException with the specified detail
message.  A detail message is a String that describes this particular
exception.

@param s the String that contains a detailed message"
      end

      operation 6289179 "IllegalStateException"
	public explicit_return_type ""
	nparams 2
	  param in name "message" explicit_type "String"
	  param inout name "cause" type class_ref 164251 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new exception with the specified detail message and
cause.

<p>Note that the detail message associated with <code>cause</code> is
<i>not</i> automatically incorporated in this exception's detail
message.

@param  message the detail message (which is saved for later retrieval
        by the {@link Throwable#getMessage()} method).
@param  cause the cause (which is saved for later retrieval by the
        {@link Throwable#getCause()} method).  (A <tt>null</tt> value
        is permitted, and indicates that the cause is nonexistent or
        unknown.)
@since 1.5"
      end

      operation 6289307 "IllegalStateException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 164251 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new exception with the specified cause and a detail
message of <tt>(cause==null ? null : cause.toString())</tt> (which
typically contains the class and detail message of <tt>cause</tt>).
This constructor is useful for exceptions that are little more than
wrappers for other throwables (for example, {@link
java.security.PrivilegedActionException}).

@param  cause the cause (which is saved for later retrieval by the
        {@link Throwable#getCause()} method).  (A <tt>null</tt> value is
        permitted, and indicates that the cause is nonexistent or
        unknown.)
@since  1.5"
      end

      attribute 2468891 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value "=  -1848914673093119416L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 306331 "IllegalAccessException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An IllegalAccessException is thrown when an application tries 
to reflectively create an instance (other than an array), 
set or get a field, or invoke a method, but the currently 
executing method does not have access to the definition of 
the specified class, field, method or constructor.

@author  unascribed
@version 1.14, 12/19/03
@see     Class#newInstance()
@see     java.lang.reflect.Field#set(Object, Object)
@see     java.lang.reflect.Field#setBoolean(Object, boolean)
@see     java.lang.reflect.Field#setByte(Object, byte)
@see     java.lang.reflect.Field#setShort(Object, short)
@see     java.lang.reflect.Field#setChar(Object, char)
@see     java.lang.reflect.Field#setInt(Object, int)
@see     java.lang.reflect.Field#setLong(Object, long)
@see     java.lang.reflect.Field#setFloat(Object, float)
@see     java.lang.reflect.Field#setDouble(Object, double)
@see     java.lang.reflect.Field#get(Object)
@see     java.lang.reflect.Field#getBoolean(Object)
@see     java.lang.reflect.Field#getByte(Object)
@see     java.lang.reflect.Field#getShort(Object)
@see     java.lang.reflect.Field#getChar(Object)
@see     java.lang.reflect.Field#getInt(Object)
@see     java.lang.reflect.Field#getLong(Object)
@see     java.lang.reflect.Field#getFloat(Object)
@see     java.lang.reflect.Field#getDouble(Object)
@see     java.lang.reflect.Method#invoke(Object, Object[])
@see     java.lang.reflect.Constructor#newInstance(Object[])
@since   JDK1.0"
      classrelation 1779227 // <generalisation>
	relation 1779227 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1779227 // <generalisation>
	  b parent class_ref 165403 // Exception
      end

      operation 6991131 "IllegalAccessException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>IllegalAccessException</code> without a 
detail message. "
      end

      operation 6991259 "IllegalAccessException"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>IllegalAccessException</code> with a detail message. 

@param   s   the detail message."
      end
    end

    class 339867 "Cloneable"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A class implements the <code>Cloneable</code> interface to 
indicate to the {@link java.lang.Object#clone()} method that it 
is legal for that method to make a 
field-for-field copy of instances of that class. 
<p>
Invoking Object's clone method on an instance that does not implement the 
<code>Cloneable</code> interface results in the exception 
<code>CloneNotSupportedException</code> being thrown.
<p>
By convention, classes that implement this interface should override 
<tt>Object.clone</tt> (which is protected) with a public method.
See {@link java.lang.Object#clone()} for details on overriding this
method.
<p>
Note that this interface does <i>not</i> contain the <tt>clone</tt> method.
Therefore, it is not possible to clone an object merely by virtue of the
fact that it implements this interface.  Even if the clone method is invoked
reflectively, there is no guarantee that it will succeed.

@author  unascribed
@version 1.16, 01/17/04
@see     java.lang.CloneNotSupportedException
@see     java.lang.Object#clone()
@since   JDK1.0"
    end

    class 360091 "StringBuilder"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A mutable sequence of characters.  This class provides an API compatible
with <code>StringBuffer</code>, but with no guarantee of synchronization.
This class is designed for use as a drop-in replacement for
<code>StringBuffer</code> in places where the string buffer was being
used by a single thread (as is generally the case).   Where possible,
it is recommended that this class be used in preference to
<code>StringBuffer</code> as it will be faster under most implementations.

<p>The principal operations on a <code>StringBuilder</code> are the 
<code>append</code> and <code>insert</code> methods, which are 
overloaded so as to accept data of any type. Each effectively 
converts a given datum to a string and then appends or inserts the 
characters of that string to the string builder. The 
<code>append</code> method always adds these characters at the end 
of the builder; the <code>insert</code> method adds the characters at 
a specified point. 
<p>
For example, if <code>z</code> refers to a string builder object 
whose current contents are \"<code>start</code>\", then 
the method call <code>z.append(\"le\")</code> would cause the string 
builder to contain \"<code>startle</code>\", whereas 
<code>z.insert(4, \"le\")</code> would alter the string builder to 
contain \"<code>starlet</code>\". 
<p>
In general, if sb refers to an instance of a <code>StringBuilder</code>, 
then <code>sb.append(x)</code> has the same effect as 
<code>sb.insert(sb.length(),&nbsp;x)</code>.

Every string builder has a capacity. As long as the length of the 
character sequence contained in the string builder does not exceed 
the capacity, it is not necessary to allocate a new internal 
buffer. If the internal buffer overflows, it is automatically made larger.

<p>Instances of <code>StringBuilder</code> are not safe for
use by multiple threads. If such synchronization is required then it is
recommended that {@link java.lang.StringBuffer} be used. 

@author	Michael McCloskey
@version 	1.9, 07/16/04
@see         java.lang.StringBuffer
@see         java.lang.String
@since	1.5"
      classrelation 1790363 // <generalisation>
	relation 1790363 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1790363 // <generalisation>
	  b parent class_ref 909211 // AbstractStringBuilder
      end

      classrelation 1790491 // <realization>
	relation 1790491 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1790491 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      classrelation 1790619 // <realization>
	relation 1790619 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1790619 // <realization>
	  b parent class_ref 393755 // CharSequence
      end

      attribute 2739739 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value "=  4383685877147921099L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " use serialVersionUID for interoperability "
      end

      operation 7069851 "StringBuilder"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a string builder with no characters in it and an 
initial capacity of 16 characters. "
      end

      operation 7069979 "StringBuilder"
	public explicit_return_type ""
	nparams 1
	  param in name "capacity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a string builder with no characters in it and an 
initial capacity specified by the <code>capacity</code> argument. 

@param      capacity  the initial capacity.
@throws     NegativeArraySizeException  if the <code>capacity</code>
              argument is less than <code>0</code>."
      end

      operation 7070107 "StringBuilder"
	public explicit_return_type ""
	nparams 1
	  param in name "str" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a string builder initialized to the contents of the 
specified string. The initial capacity of the string builder is 
<code>16</code> plus the length of the string argument.  

@param   str   the initial contents of the buffer.
@throws    NullPointerException if <code>str</code> is <code>null</code>"
      end

      operation 7070235 "StringBuilder"
	public explicit_return_type ""
	nparams 1
	  param inout name "seq" type class_ref 393755 // CharSequence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a string builder that contains the same characters
as the specified <code>CharSequence</code>. The initial capacity of
the string builder is <code>16</code> plus the length of the
<code>CharSequence</code> argument.

@param      seq   the sequence to copy.
@throws    NullPointerException if <code>seq</code> is <code>null</code>"
      end

      operation 7070363 "append"
	public return_type class_ref 360091 // StringBuilder
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@see     java.lang.String#valueOf(java.lang.Object)
@see     #append(java.lang.String)"
      end

      operation 7070491 "append"
	public return_type class_ref 360091 // StringBuilder
	nparams 1
	  param in name "str" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7070619 "append"
	private return_type class_ref 360091 // StringBuilder
	nparams 1
	  param inout name "sb" type class_ref 360091 // StringBuilder
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Appends the specified string builder to this sequence."
      end

      operation 7070747 "append"
	public return_type class_ref 360091 // StringBuilder
	nparams 1
	  param inout name "sb" type class_ref 198171 // StringBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the specified <tt>StringBuffer</tt> to this sequence.
<p>
The characters of the <tt>StringBuffer</tt> argument are appended, 
in order, to this sequence, increasing the 
length of this sequence by the length of the argument. 
If <tt>sb</tt> is <tt>null</tt>, then the four characters 
<tt>\"null\"</tt> are appended to this sequence.
<p>
Let <i>n</i> be the length of this character sequence just prior to 
execution of the <tt>append</tt> method. Then the character at index 
<i>k</i> in the new character sequence is equal to the character at 
index <i>k</i> in the old character sequence, if <i>k</i> is less than 
<i>n</i>; otherwise, it is equal to the character at index <i>k-n</i> 
in the argument <code>sb</code>.

@param   sb   the <tt>StringBuffer</tt> to append.
@return  a reference to this object."
      end

      operation 7070875 "append"
	public return_type class_ref 360091 // StringBuilder
	nparams 1
	  param inout name "s" type class_ref 393755 // CharSequence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws IndexOutOfBoundsException {@inheritDoc}"
      end

      operation 7071003 "append"
	public return_type class_ref 360091 // StringBuilder
	nparams 3
	  param inout name "s" type class_ref 393755 // CharSequence
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws     IndexOutOfBoundsException {@inheritDoc}"
      end

      operation 7071131 "append"
	public return_type class_ref 360091 // StringBuilder
	nparams 1
	  param in name "str" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7071259 "append"
	public return_type class_ref 360091 // StringBuilder
	nparams 3
	  param in name "str" explicit_type "char"
	  param in name "offset" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7071387 "append"
	public return_type class_ref 360091 // StringBuilder
	nparams 1
	  param inout name "b" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@see     java.lang.String#valueOf(boolean)
@see     #append(java.lang.String)"
      end

      operation 7071515 "append"
	public return_type class_ref 360091 // StringBuilder
	nparams 1
	  param in name "c" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7071643 "append"
	public return_type class_ref 360091 // StringBuilder
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@see     java.lang.String#valueOf(int)
@see     #append(java.lang.String)"
      end

      operation 7071771 "append"
	public return_type class_ref 360091 // StringBuilder
	nparams 1
	  param in name "lng" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@see     java.lang.String#valueOf(long)
@see     #append(java.lang.String)"
      end

      operation 7071899 "append"
	public return_type class_ref 360091 // StringBuilder
	nparams 1
	  param in name "f" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@see     java.lang.String#valueOf(float)
@see     #append(java.lang.String)"
      end

      operation 7072027 "append"
	public return_type class_ref 360091 // StringBuilder
	nparams 1
	  param in name "d" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@see     java.lang.String#valueOf(double)
@see     #append(java.lang.String)"
      end

      operation 7072155 "appendCodePoint"
	public return_type class_ref 360091 // StringBuilder
	nparams 1
	  param in name "codePoint" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@since 1.5"
      end

      operation 7072283 "delete"
	public return_type class_ref 360091 // StringBuilder
	nparams 2
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws StringIndexOutOfBoundsException {@inheritDoc}"
      end

      operation 7072411 "deleteCharAt"
	public return_type class_ref 360091 // StringBuilder
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws StringIndexOutOfBoundsException {@inheritDoc}"
      end

      operation 7072539 "replace"
	public return_type class_ref 360091 // StringBuilder
	nparams 3
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	  param in name "str" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws StringIndexOutOfBoundsException {@inheritDoc}"
      end

      operation 7072667 "insert"
	public return_type class_ref 360091 // StringBuilder
	nparams 4
	  param in name "index" explicit_type "int"
	  param in name "str" explicit_type "char"
	  param in name "offset" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws StringIndexOutOfBoundsException {@inheritDoc}"
      end

      operation 7072795 "insert"
	public return_type class_ref 360091 // StringBuilder
	nparams 2
	  param in name "offset" explicit_type "int"
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws StringIndexOutOfBoundsException {@inheritDoc}
@see        java.lang.String#valueOf(java.lang.Object)
@see        #insert(int, java.lang.String)
@see        #length()"
      end

      operation 7072923 "insert"
	public return_type class_ref 360091 // StringBuilder
	nparams 2
	  param in name "offset" explicit_type "int"
	  param in name "str" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws StringIndexOutOfBoundsException {@inheritDoc}
@see        #length()"
      end

      operation 7073051 "insert"
	public return_type class_ref 360091 // StringBuilder
	nparams 2
	  param in name "offset" explicit_type "int"
	  param in name "str" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws StringIndexOutOfBoundsException {@inheritDoc}"
      end

      operation 7073179 "insert"
	public return_type class_ref 360091 // StringBuilder
	nparams 2
	  param in name "dstOffset" explicit_type "int"
	  param inout name "s" type class_ref 393755 // CharSequence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws IndexOutOfBoundsException {@inheritDoc}"
      end

      operation 7073307 "insert"
	public return_type class_ref 360091 // StringBuilder
	nparams 4
	  param in name "dstOffset" explicit_type "int"
	  param inout name "s" type class_ref 393755 // CharSequence
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws IndexOutOfBoundsException {@inheritDoc}"
      end

      operation 7073435 "insert"
	public return_type class_ref 360091 // StringBuilder
	nparams 2
	  param in name "offset" explicit_type "int"
	  param inout name "b" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws StringIndexOutOfBoundsException {@inheritDoc}
@see        java.lang.String#valueOf(boolean)
@see        #insert(int, java.lang.String)
@see        #length()"
      end

      operation 7073563 "insert"
	public return_type class_ref 360091 // StringBuilder
	nparams 2
	  param in name "offset" explicit_type "int"
	  param in name "c" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws IndexOutOfBoundsException {@inheritDoc}
@see        #length()"
      end

      operation 7073691 "insert"
	public return_type class_ref 360091 // StringBuilder
	nparams 2
	  param in name "offset" explicit_type "int"
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws StringIndexOutOfBoundsException {@inheritDoc}
@see        java.lang.String#valueOf(int)
@see        #insert(int, java.lang.String)
@see        #length()"
      end

      operation 7073819 "insert"
	public return_type class_ref 360091 // StringBuilder
	nparams 2
	  param in name "offset" explicit_type "int"
	  param in name "l" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws StringIndexOutOfBoundsException {@inheritDoc}
@see        java.lang.String#valueOf(long)
@see        #insert(int, java.lang.String)
@see        #length()"
      end

      operation 7073947 "insert"
	public return_type class_ref 360091 // StringBuilder
	nparams 2
	  param in name "offset" explicit_type "int"
	  param in name "f" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws StringIndexOutOfBoundsException {@inheritDoc}
@see        java.lang.String#valueOf(float)
@see        #insert(int, java.lang.String)
@see        #length()"
      end

      operation 7074075 "insert"
	public return_type class_ref 360091 // StringBuilder
	nparams 2
	  param in name "offset" explicit_type "int"
	  param in name "d" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws StringIndexOutOfBoundsException {@inheritDoc}
@see        java.lang.String#valueOf(double)
@see        #insert(int, java.lang.String)
@see        #length()"
      end

      operation 7074203 "indexOf"
	public explicit_return_type "int"
	nparams 1
	  param in name "str" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NullPointerException {@inheritDoc}"
      end

      operation 7074331 "indexOf"
	public explicit_return_type "int"
	nparams 2
	  param in name "str" explicit_type "String"
	  param in name "fromIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NullPointerException {@inheritDoc}"
      end

      operation 7074459 "lastIndexOf"
	public explicit_return_type "int"
	nparams 1
	  param in name "str" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NullPointerException {@inheritDoc}"
      end

      operation 7074587 "lastIndexOf"
	public explicit_return_type "int"
	nparams 2
	  param in name "str" explicit_type "String"
	  param in name "fromIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NullPointerException {@inheritDoc}"
      end

      operation 7074715 "reverse"
	public return_type class_ref 360091 // StringBuilder
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7074843 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7074971 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 205339 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Save the state of the <tt>StringBuilder</tt> instance to a stream 
(that is, serialize it).

@serialData the number of characters currently stored in the string
            builder (<tt>int</tt>), followed by the characters in the
            string builder (<tt>char[]</tt>).   The length of the
            <tt>char</tt> array may be greater than the number of 
            characters currently stored in the string builder, in which
            case extra characters are ignored."
      end

      operation 7075099 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 201115 // ObjectInputStream
	nexceptions 2
	  exception class_ref 179355 // IOException
	  exception class_ref 201883 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "readObject is called to restore the state of the StringBuffer from
a stream."
      end
    end

    class 383643 "CloneNotSupportedException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Thrown to indicate that the <code>clone</code> method in class 
<code>Object</code> has been called to clone an object, but that 
the object's class does not implement the <code>Cloneable</code> 
interface. 
<p>
Applications that override the <code>clone</code> method can also 
throw this exception to indicate that an object could not or 
should not be cloned.

@author  unascribed
@version 1.11, 12/19/03
@see     java.lang.Cloneable
@see     java.lang.Object#clone()
@since   JDK1.0"
      classrelation 1777179 // <generalisation>
	relation 1777179 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1777179 // <generalisation>
	  b parent class_ref 165403 // Exception
      end

      operation 6978075 "CloneNotSupportedException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>CloneNotSupportedException</code> with no 
detail message. "
      end

      operation 6978203 "CloneNotSupportedException"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>CloneNotSupportedException</code> with the 
specified detail message. 

@param   s   the detail message."
      end
    end

    class 392091 "Boolean"
      visibility public 
      nactuals 3
      actual class class_ref 221467 // Comparable
        rank 0 value class_ref 392091 // Boolean
      actual class class_ref 221467 // Comparable
        rank 1 explicit_value ""
      actual class class_ref 221467 // Comparable
        rank 2 explicit_value ""
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The Boolean class wraps a value of the primitive type 
<code>boolean</code> in an object. An object of type 
<code>Boolean</code> contains a single field whose type is 
<code>boolean</code>. 
<p>
In addition, this class provides many methods for 
converting a <code>boolean</code> to a <code>String</code> and a 
<code>String</code> to a <code>boolean</code>, as well as other 
constants and methods useful when dealing with a 
<code>boolean</code>. 

@author  Arthur van Hoff
@version 1.51, 05/11/04
@since   JDK1.0"
      classrelation 1772443 // <realization>
	relation 1772443 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1772443 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      classrelation 1772571 // <realization>
	relation 1772571 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 1772571 // <realization>
	  b parent class_ref 221467 // Comparable
      end

      classrelation 1772699 // TRUE (<unidirectional association>)
	relation 1772699 --->
	  a role_name "TRUE" init_value "=  new Boolean(true)" class_relation const_relation public
	    comment " 
The <code>Boolean</code> object corresponding to the primitive 
value <code>true</code>. 

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1772699 // TRUE (<unidirectional association>)
	  b parent class_ref 392091 // Boolean
      end

      classrelation 1772827 // FALSE (<unidirectional association>)
	relation 1772827 --->
	  a role_name "FALSE" init_value "=  new Boolean(false)" class_relation const_relation public
	    comment " 
The <code>Boolean</code> object corresponding to the primitive 
value <code>false</code>. 

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1772827 // FALSE (<unidirectional association>)
	  b parent class_ref 392091 // Boolean
      end

      classrelation 1772955 // TYPE (<unidirectional association>)
	relation 1772955 --->
	  a role_name "TYPE" init_value "=  Class.getPrimitiveClass(\"boolean\")" class_relation const_relation public
	    comment "
The Class object representing the primitive type boolean.

@since   JDK1.1

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Boolean> ${name}${value};
"
	    classrelation_ref 1772955 // TYPE (<unidirectional association>)
	  b parent class_ref 164635 // Class
      end

      attribute 2720411 "value"
	const_attribute private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The value of the Boolean.

@serial
"
      end

      attribute 2720539 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -3665804199014368530L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " use serialVersionUID from JDK 1.0.2 for interoperability "
      end

      operation 6933659 "Boolean"
	public explicit_return_type ""
	nparams 1
	  param inout name "value" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allocates a <code>Boolean</code> object representing the 
<code>value</code> argument. 

<p><b>Note: It is rarely appropriate to use this constructor.
Unless a <i>new</i> instance is required, the static factory
{@link #valueOf(boolean)} is generally a better choice. It is
likely to yield significantly better space and time performance.</b>

@param   value   the value of the <code>Boolean</code>."
      end

      operation 6933787 "Boolean"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allocates a <code>Boolean</code> object representing the value 
<code>true</code> if the string argument is not <code>null</code> 
and is equal, ignoring case, to the string <code>\"true\"</code>. 
Otherwise, allocate a <code>Boolean</code> object representing the 
value <code>false</code>. Examples:<p>
<tt>new&nbsp;Boolean(\"True\")</tt> produces a <tt>Boolean</tt> object 
that represents <tt>true</tt>.<br>
<tt>new&nbsp;Boolean(\"yes\")</tt> produces a <tt>Boolean</tt> object 
that represents <tt>false</tt>.

@param   s   the string to be converted to a <code>Boolean</code>."
      end

      operation 6933915 "parseBoolean"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parses the string argument as a boolean.  The <code>boolean</code> 
returned represents the value <code>true</code> if the string argument 
is not <code>null</code> and is equal, ignoring case, to the string 
<code>\"true\"</code>.

@param      s   the <code>String</code> containing the boolean
                representation to be parsed
@return     the boolean represented by the string argument
@since 1.5"
      end

      operation 6934043 "booleanValue"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this <tt>Boolean</tt> object as a boolean 
primitive.

@return  the primitive <code>boolean</code> value of this object."
      end

      operation 6934171 "valueOf"
	class_operation public return_type class_ref 392091 // Boolean
	nparams 1
	  param inout name "b" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <tt>Boolean</tt> instance representing the specified
<tt>boolean</tt> value.  If the specified <tt>boolean</tt> value
is <tt>true</tt>, this method returns <tt>Boolean.TRUE</tt>;
if it is <tt>false</tt>, this method returns <tt>Boolean.FALSE</tt>.
If a new <tt>Boolean</tt> instance is not required, this method
should generally be used in preference to the constructor
{@link #Boolean(boolean)}, as this method is likely to yield
significantly better space and time performance.

@param  b a boolean value.
@return a <tt>Boolean</tt> instance representing <tt>b</tt>.
@since  1.4"
      end

      operation 6934299 "valueOf"
	class_operation public return_type class_ref 392091 // Boolean
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>Boolean</code> with a value represented by the
specified String.  The <code>Boolean</code> returned represents the
value <code>true</code> if the string argument is not <code>null</code>
and is equal, ignoring case, to the string <code>\"true\"</code>. <p>
Example: <tt>Boolean.valueOf(\"True\")</tt> returns <tt>true</tt>.<br>
Example: <tt>Boolean.valueOf(\"yes\")</tt> returns <tt>false</tt>.

@param   s   a string.
@return  the <code>Boolean</code> value represented by the string."
      end

      operation 6934427 "toString"
	class_operation public explicit_return_type "String"
	nparams 1
	  param inout name "b" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <tt>String</tt> object representing the specified
boolean.  If the specified boolean is <code>true</code>, then
the string <tt>\"true\"</tt> will be returned, otherwise the
string <tt>\"false\"</tt> will be returned.

@param b	the boolean to be converted
@return the string representation of the specified <code>boolean</code>
@since 1.4"
      end

      operation 6934555 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <tt>String</tt> object representing this Boolean's
value.  If this object represents the value <code>true</code>,
a string equal to <code>\"true\"</code> is returned. Otherwise, a
string equal to <code>\"false\"</code> is returned.

@return  a string representation of this object. "
      end

      operation 6934683 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hash code for this <tt>Boolean</tt> object.

@return  the integer <tt>1231</tt> if this object represents 
<tt>true</tt>; returns the integer <tt>1237</tt> if this 
object represents <tt>false</tt>. "
      end

      operation 6934811 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if and only if the argument is not 
<code>null</code> and is a <code>Boolean </code>object that 
represents the same <code>boolean</code> value as this object. 

@param   obj   the object to compare with.
@return  <code>true</code> if the Boolean objects represent the 
         same value; <code>false</code> otherwise."
      end

      operation 6934939 "getBoolean"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if and only if the system property 
named by the argument exists and is equal to the string 
<code>\"true\"</code>. (Beginning with version 1.0.2 of the 
Java<font size=\"-2\"><sup>TM</sup></font> platform, the test of 
this string is case insensitive.) A system property is accessible 
through <code>getProperty</code>, a method defined by the 
<code>System</code> class.
<p>
If there is no property with the specified name, or if the specified
name is empty or null, then <code>false</code> is returned.

@param   name   the system property name.
@return  the <code>boolean</code> value of the system property.
@see     java.lang.System#getProperty(java.lang.String)
@see     java.lang.System#getProperty(java.lang.String, java.lang.String)"
      end

      operation 6935067 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "b" type class_ref 392091 // Boolean
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this <tt>Boolean</tt> instance with another.

@param   b the <tt>Boolean</tt> instance to be compared
@return  zero if this object represents the same boolean value as the
         argument; a positive value if this object represents true
         and the argument represents false; and a negative value if
         this object represents false and the argument represents true
@throws  NullPointerException if the argument is <tt>null</tt>
@see     Comparable
@since  1.5"
      end

      operation 6935195 "toBoolean"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 393755 "CharSequence"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A <tt>CharSequence</tt> is a readable sequence of <code>char</code> values. This
interface provides uniform, read-only access to many different kinds of
<code>char</code> sequences.
A <code>char</code> value represents a character in the <i>Basic
Multilingual Plane (BMP)</i> or a surrogate. Refer to <a
href=\"Character.html#unicode\">Unicode Character Representation</a> for details.

<p> This interface does not refine the general contracts of the {@link
java.lang.Object#equals(java.lang.Object) equals} and {@link
java.lang.Object#hashCode() hashCode} methods.  The result of comparing two
objects that implement <tt>CharSequence</tt> is therefore, in general,
undefined.  Each object may be implemented by a different class, and there
is no guarantee that each class will be capable of testing its instances
for equality with those of the other.  It is therefore inappropriate to use
arbitrary <tt>CharSequence</tt> instances as elements in a set or as keys in
a map. </p>

@author Mike McCloskey
@version 1.8 03/12/19
@since 1.4
@spec JSR-51"
      operation 6923675 "length"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the length of this character sequence.  The length is the number
of 16-bit <code>char</code>s in the sequence.</p>

@return  the number of <code>char</code>s in this sequence"
      end

      operation 6923803 "charAt"
	public explicit_return_type "char"
	nparams 1
	  param in name "index" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>char</code> value at the specified index.  An index ranges from zero
to <tt>length() - 1</tt>.  The first <code>char</code> value of the sequence is at
index zero, the next at index one, and so on, as for array
indexing. </p>

<p>If the <code>char</code> value specified by the index is a
<a href=\"Character.html#unicode\">surrogate</a>, the surrogate
value is returned.

@param   index   the index of the <code>char</code> value to be returned

@return  the specified <code>char</code> value

@throws  IndexOutOfBoundsException
         if the <tt>index</tt> argument is negative or not less than
         <tt>length()</tt>"
      end

      operation 6923931 "subSequence"
	public return_type class_ref 393755 // CharSequence
	nparams 2
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new <code>CharSequence</code> that is a subsequence of this sequence.
The subsequence starts with the <code>char</code> value at the specified index and
ends with the <code>char</code> value at index <tt>end - 1</tt>.  The length
(in <code>char</code>s) of the
returned sequence is <tt>end - start</tt>, so if <tt>start == end</tt>
then an empty sequence is returned. </p>

@param   start   the start index, inclusive
@param   end     the end index, exclusive

@return  the specified subsequence

@throws  IndexOutOfBoundsException
         if <tt>start</tt> or <tt>end</tt> are negative,
         if <tt>end</tt> is greater than <tt>length()</tt>,
         or if <tt>start</tt> is greater than <tt>end</tt>"
      end

      operation 6924059 "toString"
	public explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string containing the characters in this sequence in the same
order as this sequence.  The length of the string will be the length of
this sequence. </p>

@return  a string consisting of exactly this sequence of characters"
      end
    end

    class 413979 "Number"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The abstract class <code>Number</code> is the superclass of classes
<code>BigDecimal</code>, <code>BigInteger</code>,
<code>Byte</code>, <code>Double</code>, <code>Float</code>,
<code>Integer</code>, <code>Long</code>, and <code>Short</code>.
<p>
Subclasses of <code>Number</code> must provide methods to convert 
the represented numeric value to <code>byte</code>, <code>double</code>,
<code>float</code>, <code>int</code>, <code>long</code>, and
<code>short</code>.

@author	Lee Boynton
@author	Arthur van Hoff
@version 1.29, 12/19/03
@see     java.lang.Byte
@see     java.lang.Double
@see     java.lang.Float
@see     java.lang.Integer
@see     java.lang.Long
@see     java.lang.Short
@since   JDK1.0"
      classrelation 1773083 // <realization>
	relation 1773083 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1773083 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      operation 6935323 "intValue"
	abstract public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the specified number as an <code>int</code>.
This may involve rounding or truncation.

@return  the numeric value represented by this object after conversion
         to type <code>int</code>."
      end

      operation 6935451 "longValue"
	abstract public explicit_return_type "long"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the specified number as a <code>long</code>.
This may involve rounding or truncation.

@return  the numeric value represented by this object after conversion
         to type <code>long</code>."
      end

      operation 6935579 "floatValue"
	abstract public explicit_return_type "float"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the specified number as a <code>float</code>.
This may involve rounding.

@return  the numeric value represented by this object after conversion
         to type <code>float</code>."
      end

      operation 6935707 "doubleValue"
	abstract public explicit_return_type "double"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the specified number as a <code>double</code>.
This may involve rounding.

@return  the numeric value represented by this object after conversion
         to type <code>double</code>."
      end

      operation 6935835 "byteValue"
	public explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the specified number as a <code>byte</code>.
This may involve rounding or truncation.

@return  the numeric value represented by this object after conversion
         to type <code>byte</code>.
@since   JDK1.1"
      end

      operation 6935963 "shortValue"
	public explicit_return_type "short"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the specified number as a <code>short</code>.
This may involve rounding or truncation.

@return  the numeric value represented by this object after conversion
         to type <code>short</code>.
@since   JDK1.1"
      end

      attribute 2720667 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -8742448824652078965L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " use serialVersionUID from JDK 1.0.2 for interoperability "
      end
    end

    class 528411 "ClassFormatError"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Thrown when the Java Virtual Machine attempts to read a class 
file and determines that the file is malformed or otherwise cannot 
be interpreted as a class file. 

@author  unascribed
@version 1.20, 12/19/03
@since   JDK1.0"
      classrelation 1776795 // <generalisation>
	relation 1776795 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1776795 // <generalisation>
	  b parent class_ref 689563 // LinkageError
      end

      operation 6977179 "ClassFormatError"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>ClassFormatError</code> with no detail message. "
      end

      operation 6977307 "ClassFormatError"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>ClassFormatError</code> with the specified 
detail message. 

@param   s   the detail message."
      end
    end

    class 528539 "Package"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<code>Package</code> objects contain version information
about the implementation and specification of a Java package.
This versioning information is retrieved and made available
by the {@link ClassLoader <code>ClassLoader</code>} instance that
loaded the class(es).  Typically, it is stored in the manifest that is
distributed with the classes.

<p>The set of classes that make up the package may implement a
particular specification and if so the specification title, version number,
and vendor strings identify that specification.
An application can ask if the package is
compatible with a particular version, see the {@link #isCompatibleWith
<code>isCompatibleWith</code>} method for details.

<p>Specification version numbers use a syntax that consists of positive
decimal integers separated by periods \".\", for example \"2.0\" or
\"1.2.3.4.5.6.7\".  This allows an extensible number to be used to represent
major, minor, micro, etc. versions.  The version specification is described
by the following formal grammar:
<blockquote>
<dl>
<dt><i>SpecificationVersion:
<dd>Digits RefinedVersion<sub>opt</sub></i>

<p><dt><i>RefinedVersion:</i>
<dd><code>.</code> <i>Digits</i>
<dd><code>.</code> <i>Digits RefinedVersion</i>

<p><dt><i>Digits:
<dd>Digit
<dd>Digits</i>

<p><dt><i>Digit:</i>
<dd>any character for which {@link Character#isDigit} returns <code>true</code>,
e.g. 0, 1, 2, ...
</dl>
</blockquote>

<p>The implementation title, version, and vendor strings identify an
implementation and are made available conveniently to enable accurate
reporting of the packages involved when a problem occurs. The contents
all three implementation strings are vendor specific. The
implementation version strings have no specified syntax and should
only be compared for equality with desired version identifiers.

<p>Within each <code>ClassLoader</code> instance all classes from the same
java package have the same Package object.  The static methods allow a package
to be found by name or the set of all packages known to the current class
loader to be found.

@see ClassLoader#definePackage"
      classrelation 1783067 // <realization>
	relation 1783067 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1783067 // <realization>
	  b parent class_ref 911131 // AnnotatedElement
      end

      operation 7016091 "getName"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the name of this package.

@return The name of this package using the Java language dot notation
		for the package. i.e  java.lang"
      end

      operation 7016219 "getSpecificationTitle"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the title of the specification that this package implements.
@return the specification title, null is returned if it is not known."
      end

      operation 7016347 "getSpecificationVersion"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the version number of the specification
that this package implements.
This version string must be a sequence of positive decimal
integers separated by \".\"'s and may have leading zeros.
When version strings are compared the most significant
numbers are compared.
@return the specification version, null is returned if it is not known."
      end

      operation 7016475 "getSpecificationVendor"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the name of the organization, vendor,
or company that owns and maintains the specification
of the classes that implement this package.
@return the specification vendor, null is returned if it is not known."
      end

      operation 7016603 "getImplementationTitle"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the title of this package.
@return the title of the implementation, null is returned if it is not known."
      end

      operation 7016731 "getImplementationVersion"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the version of this implementation. It consists of any string
assigned by the vendor of this implementation and does
not have any particular syntax specified or expected by the Java
runtime. It may be compared for equality with other
package version strings used for this implementation
by this vendor for this package.
@return the version of the implementation, null is returned if it is not known."
      end

      operation 7016859 "getImplementationVendor"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the organization,
vendor or company that provided this implementation.
@return the vendor that implemented this package.."
      end

      operation 7016987 "isSealed"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if this package is sealed.

@return true if the package is sealed, false otherwise"
      end

      operation 7017115 "isSealed"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "url" type class_ref 269467 // URL
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if this package is sealed with respect to the specified
code source url.

@param url the code source url
@return true if this package is sealed with respect to url"
      end

      operation 7017243 "isCompatibleWith"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "desired" explicit_type "String"
	nexceptions 1
	  exception class_ref 533659 // NumberFormatException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compare this package's specification version with a
desired version. It returns true if
this packages specification version number is greater than or equal
to the desired version number. <p>

Version numbers are compared by sequentially comparing corresponding
components of the desired and specification strings.
Each component is converted as a decimal integer and the values
compared.
If the specification value is greater than the desired
value true is returned. If the value is less false is returned.
If the values are equal the period is skipped and the next pair of
components is compared.

@param desired the version string of the desired version.
@return true if this package's version number is greater
		than or equal to the desired version number

@exception NumberFormatException if the desired or current version
		is not of the correct dotted form."
      end

      operation 7017371 "getPackage"
	class_operation public return_type class_ref 528539 // Package
	nparams 1
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Find a package by name in the callers <code>ClassLoader</code> instance.
The callers <code>ClassLoader</code> instance is used to find the package
instance corresponding to the named class. If the callers
<code>ClassLoader</code> instance is null then the set of packages loaded
by the system <code>ClassLoader</code> instance is searched to find the
named package. <p>

Packages have attributes for versions and specifications only if the class
loader created the package instance with the appropriate attributes. Typically,
those attributes are defined in the manifests that accompany the classes.

@param name a package name, for example, java.lang.
@return the package of the requested name. It may be null if no package
		information is available from the archive or codebase."
      end

      operation 7017499 "getPackages"
	class_operation public return_type class_ref 528539 // Package
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get all the packages currently known for the caller's <code>ClassLoader</code>
instance.  Those packages correspond to classes loaded via or accessible by
name to that <code>ClassLoader</code> instance.  If the caller's
<code>ClassLoader</code> instance is the bootstrap <code>ClassLoader</code>
instance, which may be represented by <code>null</code> in some implementations,
only packages corresponding to classes loaded by the bootstrap
<code>ClassLoader</code> instance will be returned.

@return a new array of packages known to the callers <code>ClassLoader</code>
instance.  An zero length array is returned if none are known."
      end

      operation 7017627 "getPackage"
	class_operation package return_type class_ref 528539 // Package
	nparams 1
	  param inout name "c" type class_ref 164635 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the package for the specified class.
The class's class loader is used to find the package instance
corresponding to the specified class. If the class loader
is the bootstrap class loader, which may be represented by
<code>null</code> in some implementations, then the set of packages
loaded by the bootstrap class loader is searched to find the package.
<p>
Packages have attributes for versions and specifications only
if the class loader created the package
instance with the appropriate attributes. Typically those
attributes are defined in the manifests that accompany
the classes.

@param class the class to get the package of.
@return the package of the class. It may be null if no package
		information is available from the archive or codebase.  "
      end

      operation 7017755 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the hash code computed from the package name.
@return the hash code computed from the package name."
      end

      operation 7017883 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the string representation of this Package.
Its value is the string \"package \" and the package name.
If the package title is defined it is appended.
If the package version is defined it is appended.
@return the string representation of the package."
      end

      operation 7018011 "getPackageInfo"
	private return_type class_ref 164635 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7018139 "getAnnotation"
	public explicit_return_type "A"
	nparams 1
	  param inout name "annotationClass" type class_ref 164635 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<A extends Annotation> ${type} ${name}${(}${t0}<A> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7018267 "isAnnotationPresent"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "annotationClass" type class_ref 164635 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends Annotation> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7018395 "getAnnotations"
	public return_type class_ref 911259 // Annotation
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7018523 "getDeclaredAnnotations"
	public return_type class_ref 911259 // Annotation
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7018651 "Package"
	package explicit_return_type ""
	nparams 9
	  param in name "name" explicit_type "String"
	  param in name "spectitle" explicit_type "String"
	  param in name "specversion" explicit_type "String"
	  param in name "specvendor" explicit_type "String"
	  param in name "impltitle" explicit_type "String"
	  param in name "implversion" explicit_type "String"
	  param in name "implvendor" explicit_type "String"
	  param inout name "sealbase" type class_ref 269467 // URL
	  param inout name "loader" type class_ref 163611 // ClassLoader
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a package instance with the specified version
information.
@param pkgName the name of the package
@param spectitle the title of the specification
@param specversion the version of the specification
@param specvendor the organization that maintains the specification
@param impltitle the title of the implementation
@param implversion the version of the implementation
@param implvendor the organization that maintains the implementation
@return a new package for containing the specified information."
      end

      operation 7018779 "Package"
	private explicit_return_type ""
	nparams 4
	  param in name "name" explicit_type "String"
	  param inout name "man" type class_ref 914587 // Manifest
	  param inout name "url" type class_ref 269467 // URL
	  param inout name "loader" type class_ref 163611 // ClassLoader
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a package using the attributes from the specified manifest.

@param name the package name
@param man the optional manifest for the package
@param url the optional code source url for the package"
      end

      operation 7018907 "getSystemPackage"
	class_operation package return_type class_ref 528539 // Package
	nparams 1
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the loaded system package for the specified name."
      end

      operation 7019035 "getSystemPackages"
	class_operation package return_type class_ref 528539 // Package
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return an array of loaded system packages."
      end

      operation 7019163 "defineSystemPackage"
	class_operation private return_type class_ref 528539 // Package
	nparams 2
	  param in name "iname" explicit_type "String"
	  param in name "fn" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, final ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7019291 "loadManifest"
	class_operation private return_type class_ref 914587 // Manifest
	nparams 1
	  param in name "fn" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Manifest for the specified JAR file name."
      end

      classrelation 1783195 // pkgs (<unidirectional association>)
	relation 1783195 --->
	  a role_name "pkgs" init_value "=  new HashMap(31)" class_relation private
	    comment " The map of loaded system packages
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1783195 // pkgs (<unidirectional association>)
	  b parent class_ref 136603 // Map
      end

      classrelation 1783323 // urls (<unidirectional association>)
	relation 1783323 --->
	  a role_name "urls" init_value "=  new HashMap(10)" class_relation private
	    comment " Maps each directory or zip file name to its corresponding url
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1783323 // urls (<unidirectional association>)
	  b parent class_ref 136603 // Map
      end

      classrelation 1783451 // mans (<unidirectional association>)
	relation 1783451 --->
	  a role_name "mans" init_value "=  new HashMap(10)" class_relation private
	    comment " Maps each code source url for a jar file to its manifest
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1783451 // mans (<unidirectional association>)
	  b parent class_ref 136603 // Map
      end

      operation 7019419 "getSystemPackage0"
	class_operation private explicit_return_type "String"
	nparams 1
	  param in name "name" explicit_type "String"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7019547 "getSystemPackages0"
	class_operation private explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 2733595 "pkgName"
	const_attribute private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Private storage for the package name and attributes.
"
      end

      attribute 2733723 "specTitle"
	const_attribute private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2733851 "specVersion"
	const_attribute private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2733979 "specVendor"
	const_attribute private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2734107 "implTitle"
	const_attribute private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2734235 "implVersion"
	const_attribute private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2734363 "implVendor"
	const_attribute private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1783579 // sealBase (<unidirectional association>)
	relation 1783579 --->
	  a role_name "sealBase" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1783579 // sealBase (<unidirectional association>)
	  b parent class_ref 269467 // URL
      end

      classrelation 1783707 // loader (<unidirectional association>)
	relation 1783707 --->
	  a role_name "loader" const_relation private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1783707 // loader (<unidirectional association>)
	  b parent class_ref 163611 // ClassLoader
      end

      classrelation 1783835 // packageInfo (<unidirectional association>)
	relation 1783835 --->
	  a role_name "packageInfo" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1783835 // packageInfo (<unidirectional association>)
	  b parent class_ref 164635 // Class
      end
    end

    class 528795 "AssertionStatusDirectives"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A collection of assertion status directives (such as \"enable assertions
in package p\" or \"disable assertions in class c\").  This class is used by
the JVM to communicate the assertion status directives implied by 
the <tt>java</tt> command line flags <tt>-enableassertions</tt>
(<tt>-ea</tt>) and <tt>-disableassertions</tt> (<tt>-da</tt>).

@since  1.4
@author Josh Bloch"
      attribute 2719771 "classes"
	package explicit_type "String"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The classes for which assertions are to be enabled or disabled.
The strings in this array are fully qualified class names (for
example,\"com.xyz.foo.Bar\").
"
      end

      attribute 2719899 "classEnabled"
	package explicit_type "boolean"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A parallel array to <tt>classes</tt>, indicating whether each class
is to have assertions enabled or disabled.  A value of <tt>true</tt>
for <tt>classEnabled[i]</tt> indicates that the class named by
<tt>classes[i]</tt> should have assertions enabled; a value of
<tt>false</tt> indicates that it should have classes disabled.
This array must have the same number of elements as <tt>classes</tt>.

<p>In the case of conflicting directives for the same class, the
last directive for a given class wins.  In other words, if a string
<tt>s</tt> appears multiple times in the <tt>classes</tt> array
and <tt>i</t> is the highest integer for which
<tt>classes[i].equals(s)</tt>, then <tt>classEnabled[i]</tt>
indicates whether assertions are to be enabled in class <tt>s</tt>.
"
      end

      attribute 2720027 "packages"
	package explicit_type "String"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The package-trees for which assertions are to be enabled or disabled.
The strings in this array are compete or partial package names
(for example, \"com.xyz\" or \"com.xyz.foo\").
"
      end

      attribute 2720155 "packageEnabled"
	package explicit_type "boolean"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A parallel array to <tt>packages</tt>, indicating whether each
package-tree is to have assertions enabled or disabled.  A value of
<tt>true</tt> for <tt>packageEnabled[i]</tt> indicates that the
package-tree named by <tt>packages[i]</tt> should have assertions
enabled; a value of <tt>false</tt> indicates that it should have
assertions disabled.  This array must have the same number of
elements as <tt>packages</tt>.

In the case of conflicting directives for the same package-tree, the
last directive for a given package-tree wins.  In other words, if a
string <tt>s</tt> appears multiple times in the <tt>packages</tt> array
and <tt>i</t> is the highest integer for which
<tt>packages[i].equals(s)</tt>, then <tt>packageEnabled[i]</tt>
indicates whether assertions are to be enabled in package-tree
<tt>s</tt>.
"
      end

      attribute 2720283 "deflt"
	package explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Whether or not assertions in non-system classes are to be enabled
by default.
"
      end
    end

    class 528923 "SystemClassLoaderAction"
      visibility package 
      nactuals 3
      actual class class_ref 529051 // PrivilegedExceptionAction
        rank 0 explicit_value ""
      actual class class_ref 529051 // PrivilegedExceptionAction
        rank 1 explicit_value ""
      actual class class_ref 529051 // PrivilegedExceptionAction
        rank 2 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 893723 // <realization>
	relation 893723 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 893723 // <realization>
	  b parent class_ref 529051 // PrivilegedExceptionAction
      end

      classrelation 893851 // parent (<unidirectional association>)
	relation 893851 --->
	  a role_name "parent" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 893851 // parent (<unidirectional association>)
	  b parent class_ref 163611 // ClassLoader
      end

      operation 3266459 "SystemClassLoaderAction"
	package explicit_return_type ""
	nparams 1
	  param inout name "parent" type class_ref 163611 // ClassLoader
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3266587 "run"
	public explicit_return_type "Object"
	nparams 0
	nexceptions 1
	  exception class_ref 165403 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 533403 "Byte"
      visibility public 
      nactuals 3
      actual class class_ref 221467 // Comparable
        rank 0 value class_ref 533403 // Byte
      actual class class_ref 221467 // Comparable
        rank 1 explicit_value ""
      actual class class_ref 221467 // Comparable
        rank 2 explicit_value ""
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "
The <code>Byte</code> class wraps a value of primitive type
<code>byte</code> in an object.  An object of type
<code>Byte</code> contains a single field whose type is
<code>byte</code>.

<p>

In addition, this class provides several methods for converting a
<code>byte</code> to a <code>String</code> and a <code>String</code>
to a <code>byte</code>, as well as other constants and methods
useful when dealing with a <code>byte</code>.

@author  Nakul Saraiya
@version 1.40, 05/11/04
@see     java.lang.Number
@since   JDK1.1"
      classrelation 1773211 // <generalisation>
	relation 1773211 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1773211 // <generalisation>
	  b parent class_ref 413979 // Number
      end

      classrelation 1773339 // <realization>
	relation 1773339 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 1773339 // <realization>
	  b parent class_ref 221467 // Comparable
      end

      attribute 2720795 "MIN_VALUE"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  -128"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A constant holding the minimum value a <code>byte</code> can
have, -2<sup>7</sup>.
"
      end

      attribute 2720923 "MAX_VALUE"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  127"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A constant holding the maximum value a <code>byte</code> can
have, 2<sup>7</sup>-1.
"
      end

      classrelation 1773467 // TYPE (<unidirectional association>)
	relation 1773467 --->
	  a role_name "TYPE" init_value "=  (Class<Byte>) Class.getPrimitiveClass(\"byte\")" class_relation const_relation public
	    comment "
The <code>Class</code> instance representing the primitive type
<code>byte</code>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Byte> ${name}${value};
"
	    classrelation_ref 1773467 // TYPE (<unidirectional association>)
	  b parent class_ref 164635 // Class
      end

      operation 6936091 "toString"
	class_operation public explicit_return_type "String"
	nparams 1
	  param in name "b" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new <code>String</code> object representing the
specified <code>byte</code>. The radix is assumed to be 10.

@param b	the <code>byte</code> to be converted
@return the string representation of the specified <code>byte</code>
@see java.lang.Integer#toString(int)"
      end

      class 909723 "ByteCache"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 6936219 "ByteCache"
	  private explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	classrelation 1773595 // cache (<unidirectional association>)
	  relation 1773595 --->
	    a role_name "cache" multiplicity "[]" init_value "=  new Byte[-(-128) + 127 + 1]" class_relation const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 1773595 // cache (<unidirectional association>)
	    b parent class_ref 533403 // Byte
	end

	extra_member 160667 "initialization"
	  
	  cpp "" ""
	  java "  static {
	    for(int i = 0; i < cache.length; i++)
		cache[i] = new Byte((byte)(i - 128));
	}"
	  php ""
	  python ""
	  idl ""
	end
      end

      operation 6936347 "valueOf"
	class_operation public return_type class_ref 533403 // Byte
	nparams 1
	  param in name "b" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <tt>Byte</tt> instance representing the specified
<tt>byte</tt> value.
If a new <tt>Byte</tt> instance is not required, this method
should generally be used in preference to the constructor
{@link #Byte(byte)}, as this method is likely to yield
significantly better space and time performance by caching
frequently requested values.

@param  b a byte value.
@return a <tt>Byte</tt> instance representing <tt>b</tt>.
@since  1.5"
      end

      operation 6936475 "parseByte"
	class_operation public explicit_return_type "byte"
	nparams 1
	  param in name "s" explicit_type "String"
	nexceptions 1
	  exception class_ref 533659 // NumberFormatException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parses the string argument as a signed decimal
<code>byte</code>. The characters in the string must all be
decimal digits, except that the first character may be an ASCII
minus sign <code>'-'</code> (<code>'&#92;u002D'</code>) to
indicate a negative value. The resulting <code>byte</code> value is
returned, exactly as if the argument and the radix 10 were
given as arguments to the {@link #parseByte(java.lang.String,
int)} method.

@param s		a <code>String</code> containing the 
                 <code>byte</code> representation to be parsed
@return 		the <code>byte</code> value represented by the 
                 argument in decimal
@exception	NumberFormatException if the string does not
			contain a parsable <code>byte</code>."
      end

      operation 6936603 "parseByte"
	class_operation public explicit_return_type "byte"
	nparams 2
	  param in name "s" explicit_type "String"
	  param in name "radix" explicit_type "int"
	nexceptions 1
	  exception class_ref 533659 // NumberFormatException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parses the string argument as a signed <code>byte</code> in the
radix specified by the second argument. The characters in the
string must all be digits, of the specified radix (as
determined by whether {@link java.lang.Character#digit(char,
int)} returns a nonnegative value) except that the first
character may be an ASCII minus sign <code>'-'</code>
(<code>'&#92;u002D'</code>) to indicate a negative value.  The
resulting <code>byte</code> value is returned.
<p>
An exception of type <code>NumberFormatException</code> is
thrown if any of the following situations occurs:
<ul>
<li> The first argument is <code>null</code> or is a string of
length zero.

<li> The radix is either smaller than {@link
java.lang.Character#MIN_RADIX} or larger than {@link
java.lang.Character#MAX_RADIX}.

<li> Any character of the string is not a digit of the specified
radix, except that the first character may be a minus sign
<code>'-'</code> (<code>'&#92;u002D'</code>) provided that the
string is longer than length 1.

<li> The value represented by the string is not a value of type
<code>byte</code>.
</ul>

@param s		the <code>String</code> containing the 
			<code>byte</code>
                 representation to be parsed
@param radix	the radix to be used while parsing <code>s</code>
@return 		the <code>byte</code> value represented by the string 
                  argument in the specified radix
@exception	NumberFormatException If the string does
                 not contain a parsable <code>byte</code>."
      end

      operation 6936731 "valueOf"
	class_operation public return_type class_ref 533403 // Byte
	nparams 2
	  param in name "s" explicit_type "String"
	  param in name "radix" explicit_type "int"
	nexceptions 1
	  exception class_ref 533659 // NumberFormatException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>Byte</code> object holding the value
extracted from the specified <code>String</code> when parsed
with the radix given by the second argument. The first argument
is interpreted as representing a signed <code>byte</code> in
the radix specified by the second argument, exactly as if the
argument were given to the {@link #parseByte(java.lang.String,
int)} method. The result is a <code>Byte</code> object that
represents the <code>byte</code> value specified by the string.
<p> In other words, this method returns a <code>Byte</code> object
equal to the value of:

<blockquote><code>
new Byte(Byte.parseByte(s, radix))
</code></blockquote>

@param s		the string to be parsed
@param radix 	the radix to be used in interpreting <code>s</code>
@return 		a <code>Byte</code> object holding the value 
			represented by the string argument in the 
			specified radix.
@exception	NumberFormatException If the <code>String</code> does 
			not contain a parsable <code>byte</code>."
      end

      operation 6936859 "valueOf"
	class_operation public return_type class_ref 533403 // Byte
	nparams 1
	  param in name "s" explicit_type "String"
	nexceptions 1
	  exception class_ref 533659 // NumberFormatException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>Byte</code> object holding the value
given by the specified <code>String</code>. The argument is
interpreted as representing a signed decimal <code>byte</code>,
exactly as if the argument were given to the {@link
#parseByte(java.lang.String)} method. The result is a
<code>Byte</code> object that represents the <code>byte</code>
value specified by the string.  <p> In other words, this method
returns a <code>Byte</code> object equal to the value of:

<blockquote><code>
new Byte(Byte.parseByte(s))
</code></blockquote>

@param s		the string to be parsed
@return 		a <code>Byte</code> object holding the value
			represented by the string argument
@exception	NumberFormatException If the <code>String</code> does
			not contain a parsable <code>byte</code>."
      end

      operation 6936987 "decode"
	class_operation public return_type class_ref 533403 // Byte
	nparams 1
	  param in name "nm" explicit_type "String"
	nexceptions 1
	  exception class_ref 533659 // NumberFormatException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Decodes a <code>String</code> into a <code>Byte</code>.
Accepts decimal, hexadecimal, and octal numbers given by
the following grammar:

<blockquote>
<dl>
<dt><i>DecodableString:</i>
<dd><i>Sign<sub>opt</sub> DecimalNumeral</i>
<dd><i>Sign<sub>opt</sub></i> <code>0x</code> <i>HexDigits</i>
<dd><i>Sign<sub>opt</sub></i> <code>0X</code> <i>HexDigits</i>
<dd><i>Sign<sub>opt</sub></i> <code>#</code> <i>HexDigits</i>
<dd><i>Sign<sub>opt</sub></i> <code>0</code> <i>OctalDigits</i>
<p>
<dt><i>Sign:</i>
<dd><code>-</code>
</dl>
</blockquote>

<i>DecimalNumeral</i>, <i>HexDigits</i>, and <i>OctalDigits</i>
are defined in <a href=\"http://java.sun.com/docs/books/jls/second_edition/html/lexical.doc.html#48282\">&sect;3.10.1</a> 
of the <a href=\"http://java.sun.com/docs/books/jls/html/\">Java 
Language Specification</a>.
<p>
The sequence of characters following an (optional) negative
sign and/or radix specifier (&quot;<code>0x</code>&quot;,
&quot;<code>0X</code>&quot;, &quot;<code>#</code>&quot;, or
leading zero) is parsed as by the <code>Byte.parseByte</code>
method with the indicated radix (10, 16, or 8).  This sequence
of characters must represent a positive value or a {@link
NumberFormatException} will be thrown.  The result is negated
if first character of the specified <code>String</code> is the
minus sign.  No whitespace characters are permitted in the
<code>String</code>.

@param     nm the <code>String</code> to decode.
@return 	 a <code>Byte</code> object holding the <code>byte</code>
		value represented by <code>nm</code>
@exception NumberFormatException  if the <code>String</code> does not
           contain a parsable <code>byte</code>.
@see java.lang.Byte#parseByte(java.lang.String, int)"
      end

      attribute 2721051 "value"
	const_attribute private explicit_type "byte"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The value of the <code>Byte</code>.

@serial
"
      end

      operation 6937115 "Byte"
	public explicit_return_type ""
	nparams 1
	  param in name "value" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a newly allocated <code>Byte</code> object that
represents the specified <code>byte</code> value.

@param value	the value to be represented by the 
			<code>Byte</code>."
      end

      operation 6937243 "Byte"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	nexceptions 1
	  exception class_ref 533659 // NumberFormatException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a newly allocated <code>Byte</code> object that
represents the <code>byte</code> value indicated by the
<code>String</code> parameter. The string is converted to a
<code>byte</code> value in exactly the manner used by the
<code>parseByte</code> method for radix 10.

@param s		the <code>String</code> to be converted to a 
			<code>Byte</code>
@exception	NumberFormatException If the <code>String</code> 
			does not contain a parsable <code>byte</code>.
@see        java.lang.Byte#parseByte(java.lang.String, int)"
      end

      operation 6937371 "byteValue"
	public explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this <code>Byte</code> as a
<code>byte</code>."
      end

      operation 6937499 "shortValue"
	public explicit_return_type "short"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this <code>Byte</code> as a
<code>short</code>."
      end

      operation 6937627 "intValue"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this <code>Byte</code> as an
<code>int</code>."
      end

      operation 6937755 "longValue"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this <code>Byte</code> as a
<code>long</code>."
      end

      operation 6937883 "floatValue"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this <code>Byte</code> as a
<code>float</code>."
      end

      operation 6938011 "doubleValue"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this <code>Byte</code> as a
<code>double</code>."
      end

      operation 6938139 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>String</code> object representing this
<code>Byte</code>'s value.  The value is converted to signed
decimal representation and returned as a string, exactly as if
the <code>byte</code> value were given as an argument to the
{@link java.lang.Byte#toString(byte)} method.

@return  a string representation of the value of this object in
         base&nbsp;10."
      end

      operation 6938267 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hash code for this <code>Byte</code>."
      end

      operation 6938395 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this object to the specified object.  The result is
<code>true</code> if and only if the argument is not
<code>null</code> and is a <code>Byte</code> object that
contains the same <code>byte</code> value as this object.

@param obj	the object to compare with
@return 		<code>true</code> if the objects are the same;
			<code>false</code> otherwise."
      end

      operation 6938523 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "anotherByte" type class_ref 533403 // Byte
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares two <code>Byte</code> objects numerically.

@param   anotherByte   the <code>Byte</code> to be compared.
@return	the value <code>0</code> if this <code>Byte</code> is
		equal to the argument <code>Byte</code>; a value less than
		<code>0</code> if this <code>Byte</code> is numerically less
		than the argument <code>Byte</code>; and a value greater than
		 <code>0</code> if this <code>Byte</code> is numerically
		 greater than the argument <code>Byte</code> (signed
		 comparison).
@since   1.2"
      end

      attribute 2721179 "SIZE"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The number of bits used to represent a <tt>byte</tt> value in two's
complement binary form.

@since 1.5
"
      end

      attribute 2721307 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -7183698231559129828L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " use serialVersionUID from JDK 1.1. for interoperability "
      end
    end

    class 533659 "NumberFormatException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Thrown to indicate that the application has attempted to convert 
a string to one of the numeric types, but that the string does not 
have the appropriate format. 

@author  unascribed
@version 1.20, 12/19/03
@see     java.lang.Integer#toString()
@since   JDK1.0"
      classrelation 1782811 // <generalisation>
	relation 1782811 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1782811 // <generalisation>
	  b parent class_ref 216859 // IllegalArgumentException
      end

      attribute 2733467 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value "=  -2848938806368998894L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7015451 "NumberFormatException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>NumberFormatException</code> with no detail message."
      end

      operation 7015579 "NumberFormatException"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>NumberFormatException</code> with the 
specified detail message. 

@param   s   the detail message."
      end

      operation 7015707 "forInputString"
	class_operation package return_type class_ref 533659 // NumberFormatException
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Factory method for making a <code>NumberFormatException</code>
given the specified input which caused the error.

@param   s   the input causing the error"
      end
    end

    class 538779 "NullPointerException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Thrown when an application attempts to use <code>null</code> in a 
case where an object is required. These include: 
<ul>
<li>Calling the instance method of a <code>null</code> object. 
<li>Accessing or modifying the field of a <code>null</code> object. 
<li>Taking the length of <code>null</code> as if it were an array. 
<li>Accessing or modifying the slots of <code>null</code> as if it 
    were an array. 
<li>Throwing <code>null</code> as if it were a <code>Throwable</code> 
    value. 
</ul>
<p>
Applications should throw instances of this class to indicate 
other illegal uses of the <code>null</code> object. 

@author  unascribed
@version 1.19, 12/19/03
@since   JDK1.0"
      classrelation 1782683 // <generalisation>
	relation 1782683 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1782683 // <generalisation>
	  b parent class_ref 241051 // RuntimeException
      end

      operation 7015195 "NullPointerException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>NullPointerException</code> with no detail message."
      end

      operation 7015323 "NullPointerException"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>NullPointerException</code> with the specified 
detail message. 

@param   s   the detail message."
      end
    end

    class 567451 "InternalError"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Thrown to indicate some unexpected internal error has occurred in 
the Java Virtual Machine. 

@author  unascribed
@version 1.21, 12/19/03
@since   JDK1.0"
      classrelation 1781019 // <generalisation>
	relation 1781019 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1781019 // <generalisation>
	  b parent class_ref 913307 // VirtualMachineError
      end

      operation 7002011 "InternalError"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>InternalError</code> with no detail message. "
      end

      operation 7002139 "InternalError"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>InternalError</code> with the specified 
detail message. 

@param   s   the detail message."
      end
    end

    class 573339 "Readable"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A <tt>Readable</tt> is a source of characters. Characters from
a <tt>Readable</tt> are made available to callers of the read
method via a {@link java.nio.CharBuffer CharBuffer}.

@version 1.3 03/12/19
@since 1.5"
      operation 3673627 "read"
	public explicit_return_type "int"
	nparams 1
	  param inout name "cb" type class_ref 573467 // CharBuffer
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to read characters into the specified character buffer.
The buffer is used as a repository of characters as-is: the only
changes made are the results of a put operation. No flipping or
rewinding of the buffer is performed.

@param cb the buffer to read characters into
@return @return The number of <tt>char</tt> values added to the buffer,
                or -1 if this source of characters is at its end
@throws IOException if an I/O error occurs
@throws NullPointerException if cb is null
@throws ReadOnlyBufferException if cb is a read only buffer"
      end
    end

    class 573851 "Appendable"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An object to which <tt>char</tt> sequences and values can be appended.  The
<tt>Appendable</tt> interface must be implemented by any class whose
instances are intended to receive formatted output from a {@link
java.util.Formatter}.

<p> The characters to be appended should be valid Unicode characters as
described in <a href=\"Character.html#unicode\">Unicode Character
Representation</a>.  Note that supplementary characters may be composed of
multiple 16-bit <tt>char</tt> values.

<p> Appendables are not necessarily safe for multithreaded access.  Thread
safety is the responsibility of classes that extend and implement this
interface.

<p> Since this interface may be implemented by existing classes
with different styles of error handling there is no guarantee that
errors will be propagated to the invoker.

@version 	1.3, 07/16/04
@since 1.5"
      operation 3676827 "append"
	public return_type class_ref 573851 // Appendable
	nparams 1
	  param inout name "csq" type class_ref 393755 // CharSequence
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the specified character sequence to this <tt>Appendable</tt>.

<p> Depending on which class implements the character sequence
<tt>csq</tt>, the entire sequence may not be appended.  For
instance, if <tt>csq</tt> is a {@link java.nio.CharBuffer} then
the subsequence to append is defined by the buffer's position and limit.

@param  csq
        The character sequence to append.  If <tt>csq</tt> is
        <tt>null</tt>, then the four characters <tt>\"null\"</tt> are
        appended to this Appendable.

@return  A reference to this <tt>Appendable</tt>

@throws  IOException
         If an I/O error occurs"
      end

      operation 3676955 "append"
	public return_type class_ref 573851 // Appendable
	nparams 3
	  param inout name "csq" type class_ref 393755 // CharSequence
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends a subsequence of the specified character sequence to this
<tt>Appendable</tt>.

<p> An invocation of this method of the form <tt>out.append(csq, start,
end)</tt> when <tt>csq</tt> is not <tt>null</tt>, behaves in
exactly the same way as the invocation

<pre>
    out.append(csq.subSequence(start, end)) </pre>

@param  csq
        The character sequence from which a subsequence will be
        appended.  If <tt>csq</tt> is <tt>null</tt>, then characters
        will be appended as if <tt>csq</tt> contained the four
        characters <tt>\"null\"</tt>.

@param  start
        The index of the first character in the subsequence

@param  end
        The index of the character following the last character in the
        subsequence

@return  A reference to this <tt>Appendable</tt>

@throws  IndexOutOfBoundsException
         If <tt>start</tt> or <tt>end</tt> are negative, <tt>start</tt>
         is greater than <tt>end</tt>, or <tt>end</tt> is greater than
         <tt>csq.length()</tt>

@throws  IOException
         If an I/O error occurs"
      end

      operation 3677083 "append"
	public return_type class_ref 573851 // Appendable
	nparams 1
	  param in name "c" explicit_type "char"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the specified character to this <tt>Appendable</tt>.

@param  c
        The character to append

@return  A reference to this <tt>Appendable</tt>

@throws  IOException
         If an I/O error occurs"
      end
    end

    class 577691 "StringIndexOutOfBoundsException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Thrown by <code>String</code> methods to indicate that an index
is either negative or greater than the size of the string.  For
some methods such as the charAt method, this exception also is
thrown when the index is equal to the size of the string.

@author  unascribed
@version 1.22, 12/19/03
@see     java.lang.String#charAt(int)
@since   JDK1.0"
      classrelation 1792027 // <generalisation>
	relation 1792027 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1792027 // <generalisation>
	  b parent class_ref 870555 // IndexOutOfBoundsException
      end

      operation 7079323 "StringIndexOutOfBoundsException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>StringIndexOutOfBoundsException</code> with no 
detail message. 

@since   JDK1.0."
      end

      operation 7079451 "StringIndexOutOfBoundsException"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>StringIndexOutOfBoundsException</code> with 
the specified detail message. 

@param   s   the detail message."
      end

      operation 7079579 "StringIndexOutOfBoundsException"
	public explicit_return_type ""
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new <code>StringIndexOutOfBoundsException</code> 
class with an argument indicating the illegal index. 

@param   index   the illegal index."
      end
    end

    class 602011 "Character"
      visibility public 
      nactuals 3
      actual class class_ref 221467 // Comparable
        rank 0 value class_ref 602011 // Character
      actual class class_ref 221467 // Comparable
        rank 1 explicit_value ""
      actual class class_ref 221467 // Comparable
        rank 2 explicit_value ""
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The <code>Character</code> class wraps a value of the primitive
type <code>char</code> in an object. An object of type
<code>Character</code> contains a single field whose type is
<code>char</code>.
<p>
In addition, this class provides several methods for determining
a character's category (lowercase letter, digit, etc.) and for converting
characters from uppercase to lowercase and vice versa.
<p>
Character information is based on the Unicode Standard, version 4.0.
<p>
The methods and data of class <code>Character</code> are defined by
the information in the <i>UnicodeData</i> file that is part of the
Unicode Character Database maintained by the Unicode
Consortium. This file specifies various properties including name
and general category for every defined Unicode code point or
character range.
<p>
The file and its description are available from the Unicode Consortium at:
<ul>
<li><a href=\"http://www.unicode.org\">http://www.unicode.org</a>
</ul>

<h4><a name=\"unicode\">Unicode Character Representations</a></h4>

<p>The <code>char</code> data type (and therefore the value that a
<code>Character</code> object encapsulates) are based on the
original Unicode specification, which defined characters as
fixed-width 16-bit entities. The Unicode standard has since been
changed to allow for characters whose representation requires more
than 16 bits.  The range of legal <em>code point</em>s is now
U+0000 to U+10FFFF, known as <em>Unicode scalar value</em>.
(Refer to the <a
href=\"http://www.unicode.org/reports/tr27/#notation\"><i>
definition</i></a> of the U+<i>n</i> notation in the Unicode
standard.)

<p>The set of characters from U+0000 to U+FFFF is sometimes
referred to as the <em>Basic Multilingual Plane (BMP)</em>. <a
name=\"supplementary\">Characters</a> whose code points are greater
than U+FFFF are called <em>supplementary character</em>s.  The Java
2 platform uses the UTF-16 representation in <code>char</code>
arrays and in the <code>String</code> and <code>StringBuffer</code>
classes. In this representation, supplementary characters are
represented as a pair of <code>char</code> values, the first from
the <em>high-surrogates</em> range, (&#92;uD800-&#92;uDBFF), the
second from the <em>low-surrogates</em> range
(&#92;uDC00-&#92;uDFFF).

<p>A <code>char</code> value, therefore, represents Basic
Multilingual Plane (BMP) code points, including the surrogate
code points, or code units of the UTF-16 encoding. An
<code>int</code> value represents all Unicode code points,
including supplementary code points. The lower (least significant)
21 bits of <code>int</code> are used to represent Unicode code
points and the upper (most significant) 11 bits must be zero.
Unless otherwise specified, the behavior with respect to
supplementary characters and surrogate <code>char</code> values is
as follows:

<ul>
<li>The methods that only accept a <code>char</code> value cannot support
supplementary characters. They treat <code>char</code> values from the
surrogate ranges as undefined characters. For example,
<code>Character.isLetter('&#92;uD840')</code> returns <code>false</code>, even though
this specific value if followed by any low-surrogate value in a string
would represent a letter.

<li>The methods that accept an <code>int</code> value support all
Unicode characters, including supplementary characters. For
example, <code>Character.isLetter(0x2F81A)</code> returns
<code>true</code> because the code point value represents a letter
(a CJK ideograph).
</ul>

<p>In the J2SE API documentation, <em>Unicode code point</em> is
used for character values in the range between U+0000 and U+10FFFF,
and <em>Unicode code unit</em> is used for 16-bit
<code>char</code> values that are code units of the <em>UTF-16</em>
encoding. For more information on Unicode terminology, refer to the
<a href=\"http://www.unicode.org/glossary/\">Unicode Glossary</a>.

@author  Lee Boynton
@author  Guy Steele
@author  Akira Tanaka
@since   1.0"
      class 881947 "Subset"
	visibility public 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 2650139 "name"
	  private explicit_type "String"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 6577819 "Subset"
	  protected explicit_return_type ""
	  nparams 1
	    param in name "name" explicit_type "String"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs a new <code>Subset</code> instance.

@exception NullPointerException if name is <code>null</code>
@param  name  The name of this subset"
	end

	operation 6577947 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "obj" explicit_type "Object"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Compares two <code>Subset</code> objects for equality.
This method returns <code>true</code> if and only if
<code>this</code> and the argument refer to the same
object; since this method is <code>final</code>, this
guarantee holds for all subclasses."
	end

	operation 6578075 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the standard hash code as defined by the
<code>{@link Object#hashCode}</code> method.  This method
is <code>final</code> in order to ensure that the
<code>equals</code> and <code>hashCode</code> methods will
be consistent in all subclasses."
	end

	operation 6578203 "toString"
	  public explicit_return_type "String"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the name of this subset."
	end
      end

      classrelation 1693467 // <generalisation>
	relation 1693467 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1693467 // <generalisation>
	  b parent class_ref 168347 // Object
      end

      classrelation 1693595 // <realization>
	relation 1693595 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1693595 // <realization>
	  b parent class_ref 137883 // Serializable
      end

      classrelation 1693723 // <realization>
	relation 1693723 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 1693723 // <realization>
	  b parent class_ref 221467 // Comparable
      end

      attribute 2641947 "MIN_RADIX"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The minimum radix available for conversion to and from strings.
The constant value of this field is the smallest value permitted
for the radix argument in radix-conversion methods such as the
<code>digit</code> method, the <code>forDigit</code>
method, and the <code>toString</code> method of class
<code>Integer</code>.

@see     java.lang.Character#digit(char, int)
@see     java.lang.Character#forDigit(int, int)
@see     java.lang.Integer#toString(int, int)
@see     java.lang.Integer#valueOf(java.lang.String)
"
      end

      attribute 2642075 "MAX_RADIX"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  36"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The maximum radix available for conversion to and from strings.
The constant value of this field is the largest value permitted
for the radix argument in radix-conversion methods such as the
<code>digit</code> method, the <code>forDigit</code>
method, and the <code>toString</code> method of class
<code>Integer</code>.

@see     java.lang.Character#digit(char, int)
@see     java.lang.Character#forDigit(int, int)
@see     java.lang.Integer#toString(int, int)
@see     java.lang.Integer#valueOf(java.lang.String)
"
      end

      attribute 2642203 "MIN_VALUE"
	class_attribute const_attribute public explicit_type "char"
	init_value "=  '\\u0000'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The constant value of this field is the smallest value of type
<code>char</code>, <code>'&#92;u0000'</code>.

@since   1.0.2
"
      end

      attribute 2642331 "MAX_VALUE"
	class_attribute const_attribute public explicit_type "char"
	init_value "=  '\\uffff'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The constant value of this field is the largest value of type
<code>char</code>, <code>'&#92;uFFFF'</code>.

@since   1.0.2
"
      end

      classrelation 1693851 // TYPE (<unidirectional association>)
	relation 1693851 --->
	  a role_name "TYPE" init_value "=  Class.getPrimitiveClass(\"char\")" class_relation const_relation public
	    comment "
The <code>Class</code> instance representing the primitive type
<code>char</code>.

@since   1.1

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Character> ${name}${value};
"
	    classrelation_ref 1693851 // TYPE (<unidirectional association>)
	  b parent class_ref 164635 // Class
      end

      attribute 2642459 "UNASSIGNED"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Normative general types


General character types


General category \"Cn\" in the Unicode specification.
@since   1.1
"
      end

      attribute 2642587 "UPPERCASE_LETTER"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "General category \"Lu\" in the Unicode specification.
@since   1.1
"
      end

      attribute 2642715 "LOWERCASE_LETTER"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "General category \"Ll\" in the Unicode specification.
@since   1.1
"
      end

      attribute 2642843 "TITLECASE_LETTER"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "General category \"Lt\" in the Unicode specification.
@since   1.1
"
      end

      attribute 2642971 "MODIFIER_LETTER"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "General category \"Lm\" in the Unicode specification.
@since   1.1
"
      end

      attribute 2643099 "OTHER_LETTER"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "General category \"Lo\" in the Unicode specification.
@since   1.1
"
      end

      attribute 2643227 "NON_SPACING_MARK"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  6"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "General category \"Mn\" in the Unicode specification.
@since   1.1
"
      end

      attribute 2643355 "ENCLOSING_MARK"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  7"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "General category \"Me\" in the Unicode specification.
@since   1.1
"
      end

      attribute 2643483 "COMBINING_SPACING_MARK"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "General category \"Mc\" in the Unicode specification.
@since   1.1
"
      end

      attribute 2643611 "DECIMAL_DIGIT_NUMBER"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  9"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "General category \"Nd\" in the Unicode specification.
@since   1.1
"
      end

      attribute 2643739 "LETTER_NUMBER"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  10"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "General category \"Nl\" in the Unicode specification.
@since   1.1
"
      end

      attribute 2643867 "OTHER_NUMBER"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  11"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "General category \"No\" in the Unicode specification.
@since   1.1
"
      end

      attribute 2643995 "SPACE_SEPARATOR"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  12"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "General category \"Zs\" in the Unicode specification.
@since   1.1
"
      end

      attribute 2644123 "LINE_SEPARATOR"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  13"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "General category \"Zl\" in the Unicode specification.
@since   1.1
"
      end

      attribute 2644251 "PARAGRAPH_SEPARATOR"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  14"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "General category \"Zp\" in the Unicode specification.
@since   1.1
"
      end

      attribute 2644379 "CONTROL"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  15"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "General category \"Cc\" in the Unicode specification.
@since   1.1
"
      end

      attribute 2644507 "FORMAT"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  16"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "General category \"Cf\" in the Unicode specification.
@since   1.1
"
      end

      attribute 2644635 "PRIVATE_USE"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  18"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "General category \"Co\" in the Unicode specification.
@since   1.1
"
      end

      attribute 2644763 "SURROGATE"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  19"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "General category \"Cs\" in the Unicode specification.
@since   1.1
"
      end

      attribute 2644891 "DASH_PUNCTUATION"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  20"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "General category \"Pd\" in the Unicode specification.
@since   1.1
"
      end

      attribute 2645019 "START_PUNCTUATION"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  21"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "General category \"Ps\" in the Unicode specification.
@since   1.1
"
      end

      attribute 2645147 "END_PUNCTUATION"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  22"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "General category \"Pe\" in the Unicode specification.
@since   1.1
"
      end

      attribute 2645275 "CONNECTOR_PUNCTUATION"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  23"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "General category \"Pc\" in the Unicode specification.
@since   1.1
"
      end

      attribute 2645403 "OTHER_PUNCTUATION"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  24"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "General category \"Po\" in the Unicode specification.
@since   1.1
"
      end

      attribute 2645531 "MATH_SYMBOL"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  25"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "General category \"Sm\" in the Unicode specification.
@since   1.1
"
      end

      attribute 2645659 "CURRENCY_SYMBOL"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  26"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "General category \"Sc\" in the Unicode specification.
@since   1.1
"
      end

      attribute 2645787 "MODIFIER_SYMBOL"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  27"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "General category \"Sk\" in the Unicode specification.
@since   1.1
"
      end

      attribute 2645915 "OTHER_SYMBOL"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  28"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "General category \"So\" in the Unicode specification.
@since   1.1
"
      end

      attribute 2646043 "INITIAL_QUOTE_PUNCTUATION"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  29"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "General category \"Pi\" in the Unicode specification.
@since   1.4
"
      end

      attribute 2646171 "FINAL_QUOTE_PUNCTUATION"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  30"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "General category \"Pf\" in the Unicode specification.
@since   1.4
"
      end

      attribute 2646299 "ERROR"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  0xFFFFFFFF"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Error flag. Use int (code point) to avoid confusion with U+FFFF.
"
      end

      attribute 2646427 "DIRECTIONALITY_UNDEFINED"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Undefined bidirectional character type. Undefined <code>char</code>
values have undefined directionality in the Unicode specification.
@since 1.4
"
      end

      attribute 2646555 "DIRECTIONALITY_LEFT_TO_RIGHT"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Strong bidirectional character type \"L\" in the Unicode specification.
@since 1.4
"
      end

      attribute 2646683 "DIRECTIONALITY_RIGHT_TO_LEFT"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Strong bidirectional character type \"R\" in the Unicode specification.
@since 1.4
"
      end

      attribute 2646811 "DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Strong bidirectional character type \"AL\" in the Unicode specification.
@since 1.4
"
      end

      attribute 2646939 "DIRECTIONALITY_EUROPEAN_NUMBER"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Weak bidirectional character type \"EN\" in the Unicode specification.
@since 1.4
"
      end

      attribute 2647067 "DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Weak bidirectional character type \"ES\" in the Unicode specification.
@since 1.4
"
      end

      attribute 2647195 "DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Weak bidirectional character type \"ET\" in the Unicode specification.
@since 1.4
"
      end

      attribute 2647323 "DIRECTIONALITY_ARABIC_NUMBER"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  6"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Weak bidirectional character type \"AN\" in the Unicode specification.
@since 1.4
"
      end

      attribute 2647451 "DIRECTIONALITY_COMMON_NUMBER_SEPARATOR"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  7"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Weak bidirectional character type \"CS\" in the Unicode specification.
@since 1.4
"
      end

      attribute 2647579 "DIRECTIONALITY_NONSPACING_MARK"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Weak bidirectional character type \"NSM\" in the Unicode specification.
@since 1.4
"
      end

      attribute 2647707 "DIRECTIONALITY_BOUNDARY_NEUTRAL"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  9"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Weak bidirectional character type \"BN\" in the Unicode specification.
@since 1.4
"
      end

      attribute 2647835 "DIRECTIONALITY_PARAGRAPH_SEPARATOR"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  10"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Neutral bidirectional character type \"B\" in the Unicode specification.
@since 1.4
"
      end

      attribute 2647963 "DIRECTIONALITY_SEGMENT_SEPARATOR"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  11"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Neutral bidirectional character type \"S\" in the Unicode specification.
@since 1.4
"
      end

      attribute 2648091 "DIRECTIONALITY_WHITESPACE"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  12"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Neutral bidirectional character type \"WS\" in the Unicode specification.
@since 1.4
"
      end

      attribute 2648219 "DIRECTIONALITY_OTHER_NEUTRALS"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  13"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Neutral bidirectional character type \"ON\" in the Unicode specification.
@since 1.4
"
      end

      attribute 2648347 "DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  14"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Strong bidirectional character type \"LRE\" in the Unicode specification.
@since 1.4
"
      end

      attribute 2648475 "DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  15"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Strong bidirectional character type \"LRO\" in the Unicode specification.
@since 1.4
"
      end

      attribute 2648603 "DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  16"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Strong bidirectional character type \"RLE\" in the Unicode specification.
@since 1.4
"
      end

      attribute 2648731 "DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  17"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Strong bidirectional character type \"RLO\" in the Unicode specification.
@since 1.4
"
      end

      attribute 2648859 "DIRECTIONALITY_POP_DIRECTIONAL_FORMAT"
	class_attribute const_attribute public explicit_type "byte"
	init_value "=  18"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Weak bidirectional character type \"PDF\" in the Unicode specification.
@since 1.4
"
      end

      attribute 2648987 "MIN_HIGH_SURROGATE"
	class_attribute const_attribute public explicit_type "char"
	init_value "=  '\\uD800'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The minimum value of a Unicode high-surrogate code unit in the
UTF-16 encoding. A high-surrogate is also known as a
<i>leading-surrogate</i>.

@since 1.5
"
      end

      attribute 2649115 "MAX_HIGH_SURROGATE"
	class_attribute const_attribute public explicit_type "char"
	init_value "=  '\\uDBFF'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The maximum value of a Unicode high-surrogate code unit in the
UTF-16 encoding. A high-surrogate is also known as a
<i>leading-surrogate</i>.

@since 1.5
"
      end

      attribute 2649243 "MIN_LOW_SURROGATE"
	class_attribute const_attribute public explicit_type "char"
	init_value "=  '\\uDC00'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The minimum value of a Unicode low-surrogate code unit in the
UTF-16 encoding. A low-surrogate is also known as a
<i>trailing-surrogate</i>.

@since 1.5
"
      end

      attribute 2649371 "MAX_LOW_SURROGATE"
	class_attribute const_attribute public explicit_type "char"
	init_value "=  '\\uDFFF'"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The maximum value of a Unicode low-surrogate code unit in the
UTF-16 encoding. A low-surrogate is also known as a
<i>trailing-surrogate</i>.

@since 1.5
"
      end

      attribute 2649499 "MIN_SURROGATE"
	class_attribute const_attribute public explicit_type "char"
	init_value "=  MIN_HIGH_SURROGATE"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The minimum value of a Unicode surrogate code unit in the UTF-16 encoding.

@since 1.5
"
      end

      attribute 2649627 "MAX_SURROGATE"
	class_attribute const_attribute public explicit_type "char"
	init_value "=  MAX_LOW_SURROGATE"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The maximum value of a Unicode surrogate code unit in the UTF-16 encoding.

@since 1.5
"
      end

      attribute 2649755 "MIN_SUPPLEMENTARY_CODE_POINT"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0x010000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The minimum value of a supplementary code point.

@since 1.5
"
      end

      attribute 2649883 "MIN_CODE_POINT"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0x000000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The minimum value of a Unicode code point.

@since 1.5
"
      end

      attribute 2650011 "MAX_CODE_POINT"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  0x10ffff"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The maximum value of a Unicode code point.

@since 1.5
"
      end

      class 882203 "UnicodeBlock"
	visibility public 
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1693979 // <generalisation>
	  relation 1693979 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1693979 // <generalisation>
	    b parent class_ref 881947 // Subset
	end

	classrelation 1694107 // map (<unidirectional association>)
	  relation 1694107 --->
	    a role_name "map" init_value "=  new HashMap()" class_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1694107 // map (<unidirectional association>)
	    b parent class_ref 136603 // Map
	end

	operation 6578331 "UnicodeBlock"
	  private explicit_return_type ""
	  nparams 1
	    param in name "idName" explicit_type "String"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Create a UnicodeBlock with the given identifier name. 
This name must be the same as the block identifier."
	end

	operation 6578459 "UnicodeBlock"
	  private explicit_return_type ""
	  nparams 2
	    param in name "idName" explicit_type "String"
	    param in name "alias" explicit_type "String"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Create a UnicodeBlock with the given identifier name and
alias name."
	end

	operation 6578587 "UnicodeBlock"
	  private explicit_return_type ""
	  nparams 2
	    param in name "idName" explicit_type "String"
	    param in name "aliasName" explicit_type "String"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Create a UnicodeBlock with the given identifier name and 
alias names."
	end

	classrelation 1694235 // BASIC_LATIN (<unidirectional association>)
	  relation 1694235 --->
	    a role_name "BASIC_LATIN" init_value "=  
            new UnicodeBlock(\"BASIC_LATIN\", new String[] {\"Basic Latin\", \"BasicLatin\" })" class_relation const_relation public
	      comment "
Constant for the \"Basic Latin\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1694235 // BASIC_LATIN (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1694363 // LATIN_1_SUPPLEMENT (<unidirectional association>)
	  relation 1694363 --->
	    a role_name "LATIN_1_SUPPLEMENT" init_value "= 
            new UnicodeBlock(\"LATIN_1_SUPPLEMENT\", new String[]{ \"Latin-1 Supplement\", \"Latin-1Supplement\"})" class_relation const_relation public
	      comment "
Constant for the \"Latin-1 Supplement\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1694363 // LATIN_1_SUPPLEMENT (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1694491 // LATIN_EXTENDED_A (<unidirectional association>)
	  relation 1694491 --->
	    a role_name "LATIN_EXTENDED_A" init_value "=  
            new UnicodeBlock(\"LATIN_EXTENDED_A\", new String[]{ \"Latin Extended-A\", \"LatinExtended-A\"})" class_relation const_relation public
	      comment "
Constant for the \"Latin Extended-A\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1694491 // LATIN_EXTENDED_A (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1694619 // LATIN_EXTENDED_B (<unidirectional association>)
	  relation 1694619 --->
	    a role_name "LATIN_EXTENDED_B" init_value "=  
            new UnicodeBlock(\"LATIN_EXTENDED_B\", new String[] {\"Latin Extended-B\", \"LatinExtended-B\"})" class_relation const_relation public
	      comment "
Constant for the \"Latin Extended-B\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1694619 // LATIN_EXTENDED_B (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1694747 // IPA_EXTENSIONS (<unidirectional association>)
	  relation 1694747 --->
	    a role_name "IPA_EXTENSIONS" init_value "=  
            new UnicodeBlock(\"IPA_EXTENSIONS\", new String[] {\"IPA Extensions\", \"IPAExtensions\"})" class_relation const_relation public
	      comment "
Constant for the \"IPA Extensions\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1694747 // IPA_EXTENSIONS (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1694875 // SPACING_MODIFIER_LETTERS (<unidirectional association>)
	  relation 1694875 --->
	    a role_name "SPACING_MODIFIER_LETTERS" init_value "=  
            new UnicodeBlock(\"SPACING_MODIFIER_LETTERS\", new String[] { \"Spacing Modifier Letters\",
                                                                        \"SpacingModifierLetters\"})" class_relation const_relation public
	      comment "
Constant for the \"Spacing Modifier Letters\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1694875 // SPACING_MODIFIER_LETTERS (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1695003 // COMBINING_DIACRITICAL_MARKS (<unidirectional association>)
	  relation 1695003 --->
	    a role_name "COMBINING_DIACRITICAL_MARKS" init_value "=  
            new UnicodeBlock(\"COMBINING_DIACRITICAL_MARKS\", new String[] {\"Combining Diacritical Marks\",
                                                                          \"CombiningDiacriticalMarks\" })" class_relation const_relation public
	      comment "
Constant for the \"Combining Diacritical Marks\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1695003 // COMBINING_DIACRITICAL_MARKS (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1695131 // GREEK (<unidirectional association>)
	  relation 1695131 --->
	    a role_name "GREEK" init_value "=  new UnicodeBlock(\"GREEK\", new String[] {\"Greek and Coptic\", \"GreekandCoptic\"})" class_relation const_relation public
	      comment "
Constant for the \"Greek and Coptic\" Unicode character block.
<p>
This block was previously known as the \"Greek\" block.

@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1695131 // GREEK (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1695259 // CYRILLIC (<unidirectional association>)
	  relation 1695259 --->
	    a role_name "CYRILLIC" init_value "=  
            new UnicodeBlock(\"CYRILLIC\")" class_relation const_relation public
	      comment "
Constant for the \"Cyrillic\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1695259 // CYRILLIC (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1695387 // ARMENIAN (<unidirectional association>)
	  relation 1695387 --->
	    a role_name "ARMENIAN" init_value "=  
            new UnicodeBlock(\"ARMENIAN\")" class_relation const_relation public
	      comment "
Constant for the \"Armenian\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1695387 // ARMENIAN (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1695515 // HEBREW (<unidirectional association>)
	  relation 1695515 --->
	    a role_name "HEBREW" init_value "=  
            new UnicodeBlock(\"HEBREW\")" class_relation const_relation public
	      comment "
Constant for the \"Hebrew\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1695515 // HEBREW (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1695643 // ARABIC (<unidirectional association>)
	  relation 1695643 --->
	    a role_name "ARABIC" init_value "=  
            new UnicodeBlock(\"ARABIC\")" class_relation const_relation public
	      comment "
Constant for the \"Arabic\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1695643 // ARABIC (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1695771 // DEVANAGARI (<unidirectional association>)
	  relation 1695771 --->
	    a role_name "DEVANAGARI" init_value "=  
            new UnicodeBlock(\"DEVANAGARI\")" class_relation const_relation public
	      comment "
Constant for the \"Devanagari\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1695771 // DEVANAGARI (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1695899 // BENGALI (<unidirectional association>)
	  relation 1695899 --->
	    a role_name "BENGALI" init_value "= 
            new UnicodeBlock(\"BENGALI\")" class_relation const_relation public
	      comment "
Constant for the \"Bengali\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1695899 // BENGALI (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1696027 // GURMUKHI (<unidirectional association>)
	  relation 1696027 --->
	    a role_name "GURMUKHI" init_value "=  
            new UnicodeBlock(\"GURMUKHI\")" class_relation const_relation public
	      comment "
Constant for the \"Gurmukhi\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1696027 // GURMUKHI (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1696155 // GUJARATI (<unidirectional association>)
	  relation 1696155 --->
	    a role_name "GUJARATI" init_value "=  
            new UnicodeBlock(\"GUJARATI\")" class_relation const_relation public
	      comment "
Constant for the \"Gujarati\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1696155 // GUJARATI (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1696283 // ORIYA (<unidirectional association>)
	  relation 1696283 --->
	    a role_name "ORIYA" init_value "=  
            new UnicodeBlock(\"ORIYA\")" class_relation const_relation public
	      comment "
Constant for the \"Oriya\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1696283 // ORIYA (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1696411 // TAMIL (<unidirectional association>)
	  relation 1696411 --->
	    a role_name "TAMIL" init_value "=  
            new UnicodeBlock(\"TAMIL\")" class_relation const_relation public
	      comment "
Constant for the \"Tamil\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1696411 // TAMIL (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1696539 // TELUGU (<unidirectional association>)
	  relation 1696539 --->
	    a role_name "TELUGU" init_value "=  
            new UnicodeBlock(\"TELUGU\")" class_relation const_relation public
	      comment "
Constant for the \"Telugu\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1696539 // TELUGU (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1696667 // KANNADA (<unidirectional association>)
	  relation 1696667 --->
	    a role_name "KANNADA" init_value "=  
            new UnicodeBlock(\"KANNADA\")" class_relation const_relation public
	      comment "
Constant for the \"Kannada\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1696667 // KANNADA (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1696795 // MALAYALAM (<unidirectional association>)
	  relation 1696795 --->
	    a role_name "MALAYALAM" init_value "= 
            new UnicodeBlock(\"MALAYALAM\")" class_relation const_relation public
	      comment "
Constant for the \"Malayalam\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1696795 // MALAYALAM (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1696923 // THAI (<unidirectional association>)
	  relation 1696923 --->
	    a role_name "THAI" init_value "=  
            new UnicodeBlock(\"THAI\")" class_relation const_relation public
	      comment "
Constant for the \"Thai\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1696923 // THAI (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1697051 // LAO (<unidirectional association>)
	  relation 1697051 --->
	    a role_name "LAO" init_value "=  
            new UnicodeBlock(\"LAO\")" class_relation const_relation public
	      comment "
Constant for the \"Lao\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1697051 // LAO (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1697179 // TIBETAN (<unidirectional association>)
	  relation 1697179 --->
	    a role_name "TIBETAN" init_value "=  
            new UnicodeBlock(\"TIBETAN\")" class_relation const_relation public
	      comment "
Constant for the \"Tibetan\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1697179 // TIBETAN (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1697307 // GEORGIAN (<unidirectional association>)
	  relation 1697307 --->
	    a role_name "GEORGIAN" init_value "= 
            new UnicodeBlock(\"GEORGIAN\")" class_relation const_relation public
	      comment "
Constant for the \"Georgian\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1697307 // GEORGIAN (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1697435 // HANGUL_JAMO (<unidirectional association>)
	  relation 1697435 --->
	    a role_name "HANGUL_JAMO" init_value "=  
            new UnicodeBlock(\"HANGUL_JAMO\", new String[] {\"Hangul Jamo\", \"HangulJamo\"})" class_relation const_relation public
	      comment "
Constant for the \"Hangul Jamo\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1697435 // HANGUL_JAMO (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1697563 // LATIN_EXTENDED_ADDITIONAL (<unidirectional association>)
	  relation 1697563 --->
	    a role_name "LATIN_EXTENDED_ADDITIONAL" init_value "=  
            new UnicodeBlock(\"LATIN_EXTENDED_ADDITIONAL\", new String[] {\"Latin Extended Additional\",
                                                                        \"LatinExtendedAdditional\"})" class_relation const_relation public
	      comment "
Constant for the \"Latin Extended Additional\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1697563 // LATIN_EXTENDED_ADDITIONAL (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1697691 // GREEK_EXTENDED (<unidirectional association>)
	  relation 1697691 --->
	    a role_name "GREEK_EXTENDED" init_value "=  
            new UnicodeBlock(\"GREEK_EXTENDED\", new String[] {\"Greek Extended\", \"GreekExtended\"})" class_relation const_relation public
	      comment "
Constant for the \"Greek Extended\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1697691 // GREEK_EXTENDED (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1697819 // GENERAL_PUNCTUATION (<unidirectional association>)
	  relation 1697819 --->
	    a role_name "GENERAL_PUNCTUATION" init_value "=  
            new UnicodeBlock(\"GENERAL_PUNCTUATION\", new String[] {\"General Punctuation\", \"GeneralPunctuation\"})" class_relation const_relation public
	      comment "
Constant for the \"General Punctuation\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1697819 // GENERAL_PUNCTUATION (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1697947 // SUPERSCRIPTS_AND_SUBSCRIPTS (<unidirectional association>)
	  relation 1697947 --->
	    a role_name "SUPERSCRIPTS_AND_SUBSCRIPTS" init_value "=  
            new UnicodeBlock(\"SUPERSCRIPTS_AND_SUBSCRIPTS\", new String[] {\"Superscripts and Subscripts\",
                                                                          \"SuperscriptsandSubscripts\" })" class_relation const_relation public
	      comment "
Constant for the \"Superscripts and Subscripts\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1697947 // SUPERSCRIPTS_AND_SUBSCRIPTS (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1698075 // CURRENCY_SYMBOLS (<unidirectional association>)
	  relation 1698075 --->
	    a role_name "CURRENCY_SYMBOLS" init_value "=  
            new UnicodeBlock(\"CURRENCY_SYMBOLS\", new String[] { \"Currency Symbols\", \"CurrencySymbols\"})" class_relation const_relation public
	      comment "
Constant for the \"Currency Symbols\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1698075 // CURRENCY_SYMBOLS (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1698203 // COMBINING_MARKS_FOR_SYMBOLS (<unidirectional association>)
	  relation 1698203 --->
	    a role_name "COMBINING_MARKS_FOR_SYMBOLS" init_value "=  
            new UnicodeBlock(\"COMBINING_MARKS_FOR_SYMBOLS\", new String[] {\"Combining Diacritical Marks for Symbols\",
                                                                                                                                                  \"CombiningDiacriticalMarksforSymbols\",
                                                                          \"Combining Marks for Symbols\",
                                                                          \"CombiningMarksforSymbols\" })" class_relation const_relation public
	      comment "
Constant for the \"Combining Diacritical Marks for Symbols\" Unicode character block.
<p>
This block was previously known as \"Combining Marks for Symbols\".
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1698203 // COMBINING_MARKS_FOR_SYMBOLS (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1698331 // LETTERLIKE_SYMBOLS (<unidirectional association>)
	  relation 1698331 --->
	    a role_name "LETTERLIKE_SYMBOLS" init_value "=  
            new UnicodeBlock(\"LETTERLIKE_SYMBOLS\", new String[] { \"Letterlike Symbols\", \"LetterlikeSymbols\"})" class_relation const_relation public
	      comment "
Constant for the \"Letterlike Symbols\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1698331 // LETTERLIKE_SYMBOLS (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1698459 // NUMBER_FORMS (<unidirectional association>)
	  relation 1698459 --->
	    a role_name "NUMBER_FORMS" init_value "=  
            new UnicodeBlock(\"NUMBER_FORMS\", new String[] {\"Number Forms\", \"NumberForms\"})" class_relation const_relation public
	      comment "
Constant for the \"Number Forms\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1698459 // NUMBER_FORMS (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1698587 // ARROWS (<unidirectional association>)
	  relation 1698587 --->
	    a role_name "ARROWS" init_value "=  
            new UnicodeBlock(\"ARROWS\")" class_relation const_relation public
	      comment "
Constant for the \"Arrows\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1698587 // ARROWS (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1698715 // MATHEMATICAL_OPERATORS (<unidirectional association>)
	  relation 1698715 --->
	    a role_name "MATHEMATICAL_OPERATORS" init_value "=  
            new UnicodeBlock(\"MATHEMATICAL_OPERATORS\", new String[] {\"Mathematical Operators\",
                                                                     \"MathematicalOperators\"})" class_relation const_relation public
	      comment "
Constant for the \"Mathematical Operators\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1698715 // MATHEMATICAL_OPERATORS (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1698843 // MISCELLANEOUS_TECHNICAL (<unidirectional association>)
	  relation 1698843 --->
	    a role_name "MISCELLANEOUS_TECHNICAL" init_value "=  
            new UnicodeBlock(\"MISCELLANEOUS_TECHNICAL\", new String[] {\"Miscellaneous Technical\",
                                                                      \"MiscellaneousTechnical\"})" class_relation const_relation public
	      comment "
Constant for the \"Miscellaneous Technical\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1698843 // MISCELLANEOUS_TECHNICAL (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1698971 // CONTROL_PICTURES (<unidirectional association>)
	  relation 1698971 --->
	    a role_name "CONTROL_PICTURES" init_value "=  
            new UnicodeBlock(\"CONTROL_PICTURES\", new String[] {\"Control Pictures\", \"ControlPictures\"})" class_relation const_relation public
	      comment "
Constant for the \"Control Pictures\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1698971 // CONTROL_PICTURES (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1699099 // OPTICAL_CHARACTER_RECOGNITION (<unidirectional association>)
	  relation 1699099 --->
	    a role_name "OPTICAL_CHARACTER_RECOGNITION" init_value "=  
            new UnicodeBlock(\"OPTICAL_CHARACTER_RECOGNITION\", new String[] {\"Optical Character Recognition\", 
                                                                            \"OpticalCharacterRecognition\"})" class_relation const_relation public
	      comment "
Constant for the \"Optical Character Recognition\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1699099 // OPTICAL_CHARACTER_RECOGNITION (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1699227 // ENCLOSED_ALPHANUMERICS (<unidirectional association>)
	  relation 1699227 --->
	    a role_name "ENCLOSED_ALPHANUMERICS" init_value "=  
            new UnicodeBlock(\"ENCLOSED_ALPHANUMERICS\", new String[] {\"Enclosed Alphanumerics\", 
                                                                     \"EnclosedAlphanumerics\"})" class_relation const_relation public
	      comment "
Constant for the \"Enclosed Alphanumerics\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1699227 // ENCLOSED_ALPHANUMERICS (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1699355 // BOX_DRAWING (<unidirectional association>)
	  relation 1699355 --->
	    a role_name "BOX_DRAWING" init_value "=  
            new UnicodeBlock(\"BOX_DRAWING\", new String[] {\"Box Drawing\", \"BoxDrawing\"})" class_relation const_relation public
	      comment "
Constant for the \"Box Drawing\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1699355 // BOX_DRAWING (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1699483 // BLOCK_ELEMENTS (<unidirectional association>)
	  relation 1699483 --->
	    a role_name "BLOCK_ELEMENTS" init_value "=  
            new UnicodeBlock(\"BLOCK_ELEMENTS\", new String[] {\"Block Elements\", \"BlockElements\"})" class_relation const_relation public
	      comment "
Constant for the \"Block Elements\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1699483 // BLOCK_ELEMENTS (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1699611 // GEOMETRIC_SHAPES (<unidirectional association>)
	  relation 1699611 --->
	    a role_name "GEOMETRIC_SHAPES" init_value "=  
            new UnicodeBlock(\"GEOMETRIC_SHAPES\", new String[] {\"Geometric Shapes\", \"GeometricShapes\"})" class_relation const_relation public
	      comment "
Constant for the \"Geometric Shapes\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1699611 // GEOMETRIC_SHAPES (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1699739 // MISCELLANEOUS_SYMBOLS (<unidirectional association>)
	  relation 1699739 --->
	    a role_name "MISCELLANEOUS_SYMBOLS" init_value "=  
            new UnicodeBlock(\"MISCELLANEOUS_SYMBOLS\", new String[] {\"Miscellaneous Symbols\", 
                                                                    \"MiscellaneousSymbols\"})" class_relation const_relation public
	      comment "
Constant for the \"Miscellaneous Symbols\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1699739 // MISCELLANEOUS_SYMBOLS (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1699867 // DINGBATS (<unidirectional association>)
	  relation 1699867 --->
	    a role_name "DINGBATS" init_value "=  
            new UnicodeBlock(\"DINGBATS\")" class_relation const_relation public
	      comment "
Constant for the \"Dingbats\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1699867 // DINGBATS (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1699995 // CJK_SYMBOLS_AND_PUNCTUATION (<unidirectional association>)
	  relation 1699995 --->
	    a role_name "CJK_SYMBOLS_AND_PUNCTUATION" init_value "=  
            new UnicodeBlock(\"CJK_SYMBOLS_AND_PUNCTUATION\", new String[] {\"CJK Symbols and Punctuation\",
                                                                          \"CJKSymbolsandPunctuation\"})" class_relation const_relation public
	      comment "
Constant for the \"CJK Symbols and Punctuation\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1699995 // CJK_SYMBOLS_AND_PUNCTUATION (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1700123 // HIRAGANA (<unidirectional association>)
	  relation 1700123 --->
	    a role_name "HIRAGANA" init_value "=  
            new UnicodeBlock(\"HIRAGANA\")" class_relation const_relation public
	      comment "
Constant for the \"Hiragana\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1700123 // HIRAGANA (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1700251 // KATAKANA (<unidirectional association>)
	  relation 1700251 --->
	    a role_name "KATAKANA" init_value "=  
            new UnicodeBlock(\"KATAKANA\")" class_relation const_relation public
	      comment "
Constant for the \"Katakana\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1700251 // KATAKANA (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1700379 // BOPOMOFO (<unidirectional association>)
	  relation 1700379 --->
	    a role_name "BOPOMOFO" init_value "=  
            new UnicodeBlock(\"BOPOMOFO\")" class_relation const_relation public
	      comment "
Constant for the \"Bopomofo\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1700379 // BOPOMOFO (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1700507 // HANGUL_COMPATIBILITY_JAMO (<unidirectional association>)
	  relation 1700507 --->
	    a role_name "HANGUL_COMPATIBILITY_JAMO" init_value "=  
            new UnicodeBlock(\"HANGUL_COMPATIBILITY_JAMO\", new String[] {\"Hangul Compatibility Jamo\",
                                                                        \"HangulCompatibilityJamo\"})" class_relation const_relation public
	      comment "
Constant for the \"Hangul Compatibility Jamo\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1700507 // HANGUL_COMPATIBILITY_JAMO (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1700635 // KANBUN (<unidirectional association>)
	  relation 1700635 --->
	    a role_name "KANBUN" init_value "=  
            new UnicodeBlock(\"KANBUN\")" class_relation const_relation public
	      comment "
Constant for the \"Kanbun\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1700635 // KANBUN (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1700763 // ENCLOSED_CJK_LETTERS_AND_MONTHS (<unidirectional association>)
	  relation 1700763 --->
	    a role_name "ENCLOSED_CJK_LETTERS_AND_MONTHS" init_value "=  
            new UnicodeBlock(\"ENCLOSED_CJK_LETTERS_AND_MONTHS\", new String[] {\"Enclosed CJK Letters and Months\",
                                                                              \"EnclosedCJKLettersandMonths\"})" class_relation const_relation public
	      comment "
Constant for the \"Enclosed CJK Letters and Months\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1700763 // ENCLOSED_CJK_LETTERS_AND_MONTHS (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1700891 // CJK_COMPATIBILITY (<unidirectional association>)
	  relation 1700891 --->
	    a role_name "CJK_COMPATIBILITY" init_value "=  
            new UnicodeBlock(\"CJK_COMPATIBILITY\", new String[] {\"CJK Compatibility\", \"CJKCompatibility\"})" class_relation const_relation public
	      comment "
Constant for the \"CJK Compatibility\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1700891 // CJK_COMPATIBILITY (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1701019 // CJK_UNIFIED_IDEOGRAPHS (<unidirectional association>)
	  relation 1701019 --->
	    a role_name "CJK_UNIFIED_IDEOGRAPHS" init_value "=  
            new UnicodeBlock(\"CJK_UNIFIED_IDEOGRAPHS\", new String[] {\"CJK Unified Ideographs\", 
                                                                     \"CJKUnifiedIdeographs\"})" class_relation const_relation public
	      comment "
Constant for the \"CJK Unified Ideographs\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1701019 // CJK_UNIFIED_IDEOGRAPHS (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1701147 // HANGUL_SYLLABLES (<unidirectional association>)
	  relation 1701147 --->
	    a role_name "HANGUL_SYLLABLES" init_value "=  
            new UnicodeBlock(\"HANGUL_SYLLABLES\", new String[] {\"Hangul Syllables\", \"HangulSyllables\"})" class_relation const_relation public
	      comment "
Constant for the \"Hangul Syllables\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1701147 // HANGUL_SYLLABLES (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1701275 // PRIVATE_USE_AREA (<unidirectional association>)
	  relation 1701275 --->
	    a role_name "PRIVATE_USE_AREA" init_value "=  
            new UnicodeBlock(\"PRIVATE_USE_AREA\", new String[] {\"Private Use Area\", \"PrivateUseArea\"})" class_relation const_relation public
	      comment "
Constant for the \"Private Use Area\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1701275 // PRIVATE_USE_AREA (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1701403 // CJK_COMPATIBILITY_IDEOGRAPHS (<unidirectional association>)
	  relation 1701403 --->
	    a role_name "CJK_COMPATIBILITY_IDEOGRAPHS" init_value "=  
            new UnicodeBlock(\"CJK_COMPATIBILITY_IDEOGRAPHS\", 
                             new String[] {\"CJK Compatibility Ideographs\",
                                           \"CJKCompatibilityIdeographs\"})" class_relation const_relation public
	      comment "
Constant for the \"CJK Compatibility Ideographs\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1701403 // CJK_COMPATIBILITY_IDEOGRAPHS (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1701531 // ALPHABETIC_PRESENTATION_FORMS (<unidirectional association>)
	  relation 1701531 --->
	    a role_name "ALPHABETIC_PRESENTATION_FORMS" init_value "=  
            new UnicodeBlock(\"ALPHABETIC_PRESENTATION_FORMS\", new String[] {\"Alphabetic Presentation Forms\",
                                                                            \"AlphabeticPresentationForms\"})" class_relation const_relation public
	      comment "
Constant for the \"Alphabetic Presentation Forms\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1701531 // ALPHABETIC_PRESENTATION_FORMS (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1701659 // ARABIC_PRESENTATION_FORMS_A (<unidirectional association>)
	  relation 1701659 --->
	    a role_name "ARABIC_PRESENTATION_FORMS_A" init_value "=  
            new UnicodeBlock(\"ARABIC_PRESENTATION_FORMS_A\", new String[] {\"Arabic Presentation Forms-A\",
                                                                          \"ArabicPresentationForms-A\"})" class_relation const_relation public
	      comment "
Constant for the \"Arabic Presentation Forms-A\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1701659 // ARABIC_PRESENTATION_FORMS_A (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1701787 // COMBINING_HALF_MARKS (<unidirectional association>)
	  relation 1701787 --->
	    a role_name "COMBINING_HALF_MARKS" init_value "=  
            new UnicodeBlock(\"COMBINING_HALF_MARKS\", new String[] {\"Combining Half Marks\",
                                                                   \"CombiningHalfMarks\"})" class_relation const_relation public
	      comment "
Constant for the \"Combining Half Marks\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1701787 // COMBINING_HALF_MARKS (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1701915 // CJK_COMPATIBILITY_FORMS (<unidirectional association>)
	  relation 1701915 --->
	    a role_name "CJK_COMPATIBILITY_FORMS" init_value "=  
            new UnicodeBlock(\"CJK_COMPATIBILITY_FORMS\", new String[] {\"CJK Compatibility Forms\",
                                                                      \"CJKCompatibilityForms\"})" class_relation const_relation public
	      comment "
Constant for the \"CJK Compatibility Forms\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1701915 // CJK_COMPATIBILITY_FORMS (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1702043 // SMALL_FORM_VARIANTS (<unidirectional association>)
	  relation 1702043 --->
	    a role_name "SMALL_FORM_VARIANTS" init_value "=  
            new UnicodeBlock(\"SMALL_FORM_VARIANTS\", new String[] {\"Small Form Variants\", 
                                                                  \"SmallFormVariants\"})" class_relation const_relation public
	      comment "
Constant for the \"Small Form Variants\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1702043 // SMALL_FORM_VARIANTS (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1702171 // ARABIC_PRESENTATION_FORMS_B (<unidirectional association>)
	  relation 1702171 --->
	    a role_name "ARABIC_PRESENTATION_FORMS_B" init_value "=  
            new UnicodeBlock(\"ARABIC_PRESENTATION_FORMS_B\", new String[] {\"Arabic Presentation Forms-B\",
                                                                          \"ArabicPresentationForms-B\"})" class_relation const_relation public
	      comment "
Constant for the \"Arabic Presentation Forms-B\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1702171 // ARABIC_PRESENTATION_FORMS_B (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1702299 // HALFWIDTH_AND_FULLWIDTH_FORMS (<unidirectional association>)
	  relation 1702299 --->
	    a role_name "HALFWIDTH_AND_FULLWIDTH_FORMS" init_value "=  
            new UnicodeBlock(\"HALFWIDTH_AND_FULLWIDTH_FORMS\", 
                             new String[] {\"Halfwidth and Fullwidth Forms\",
                                           \"HalfwidthandFullwidthForms\"})" class_relation const_relation public
	      comment "
Constant for the \"Halfwidth and Fullwidth Forms\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1702299 // HALFWIDTH_AND_FULLWIDTH_FORMS (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1702427 // SPECIALS (<unidirectional association>)
	  relation 1702427 --->
	    a role_name "SPECIALS" init_value "=  
            new UnicodeBlock(\"SPECIALS\")" class_relation const_relation public
	      comment "
Constant for the \"Specials\" Unicode character block.
@since 1.2

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1702427 // SPECIALS (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1702555 // SURROGATES_AREA (<unidirectional association>)
	  relation 1702555 --->
	    a role_name "SURROGATES_AREA" init_value "=  
            new UnicodeBlock(\"SURROGATES_AREA\")" class_relation const_relation public
	      comment "
@deprecated As of J2SE 5, use {@link #HIGH_SURROGATES},
            {@link #HIGH_PRIVATE_USE_SURROGATES}, and
            {@link #LOW_SURROGATES}. These new constants match 
            the block definitions of the Unicode Standard.
            The {@link #of(char)} and {@link #of(int)} methods
            return the new constants, not SURROGATES_AREA.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      java_annotation "@Deprecated
"
	      classrelation_ref 1702555 // SURROGATES_AREA (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1702683 // SYRIAC (<unidirectional association>)
	  relation 1702683 --->
	    a role_name "SYRIAC" init_value "=  
            new UnicodeBlock(\"SYRIAC\")" class_relation const_relation public
	      comment "
Constant for the \"Syriac\" Unicode character block.
@since 1.4

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1702683 // SYRIAC (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1702811 // THAANA (<unidirectional association>)
	  relation 1702811 --->
	    a role_name "THAANA" init_value "=  
            new UnicodeBlock(\"THAANA\")" class_relation const_relation public
	      comment "
Constant for the \"Thaana\" Unicode character block.
@since 1.4

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1702811 // THAANA (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1702939 // SINHALA (<unidirectional association>)
	  relation 1702939 --->
	    a role_name "SINHALA" init_value "=  
            new UnicodeBlock(\"SINHALA\")" class_relation const_relation public
	      comment " 
Constant for the \"Sinhala\" Unicode character block.
@since 1.4

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1702939 // SINHALA (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1703067 // MYANMAR (<unidirectional association>)
	  relation 1703067 --->
	    a role_name "MYANMAR" init_value "=  
            new UnicodeBlock(\"MYANMAR\")" class_relation const_relation public
	      comment "
Constant for the \"Myanmar\" Unicode character block.
@since 1.4

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1703067 // MYANMAR (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1703195 // ETHIOPIC (<unidirectional association>)
	  relation 1703195 --->
	    a role_name "ETHIOPIC" init_value "=  
            new UnicodeBlock(\"ETHIOPIC\")" class_relation const_relation public
	      comment "
Constant for the \"Ethiopic\" Unicode character block.
@since 1.4

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1703195 // ETHIOPIC (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1703323 // CHEROKEE (<unidirectional association>)
	  relation 1703323 --->
	    a role_name "CHEROKEE" init_value "=  
            new UnicodeBlock(\"CHEROKEE\")" class_relation const_relation public
	      comment "
Constant for the \"Cherokee\" Unicode character block.
@since 1.4

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1703323 // CHEROKEE (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1703451 // UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS (<unidirectional association>)
	  relation 1703451 --->
	    a role_name "UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS" init_value "=  
            new UnicodeBlock(\"UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS\",
                             new String[] {\"Unified Canadian Aboriginal Syllabics\",
                                           \"UnifiedCanadianAboriginalSyllabics\"})" class_relation const_relation public
	      comment "
Constant for the \"Unified Canadian Aboriginal Syllabics\" Unicode character block.
@since 1.4

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1703451 // UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1703579 // OGHAM (<unidirectional association>)
	  relation 1703579 --->
	    a role_name "OGHAM" init_value "=  
                             new UnicodeBlock(\"OGHAM\")" class_relation const_relation public
	      comment "
Constant for the \"Ogham\" Unicode character block.
@since 1.4

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1703579 // OGHAM (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1703707 // RUNIC (<unidirectional association>)
	  relation 1703707 --->
	    a role_name "RUNIC" init_value "=  
                             new UnicodeBlock(\"RUNIC\")" class_relation const_relation public
	      comment "
Constant for the \"Runic\" Unicode character block.
@since 1.4

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1703707 // RUNIC (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1703835 // KHMER (<unidirectional association>)
	  relation 1703835 --->
	    a role_name "KHMER" init_value "=  
                             new UnicodeBlock(\"KHMER\")" class_relation const_relation public
	      comment "
Constant for the \"Khmer\" Unicode character block.
@since 1.4

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1703835 // KHMER (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1703963 // MONGOLIAN (<unidirectional association>)
	  relation 1703963 --->
	    a role_name "MONGOLIAN" init_value "=  
                             new UnicodeBlock(\"MONGOLIAN\")" class_relation const_relation public
	      comment "
Constant for the \"Mongolian\" Unicode character block.
@since 1.4

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1703963 // MONGOLIAN (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1704091 // BRAILLE_PATTERNS (<unidirectional association>)
	  relation 1704091 --->
	    a role_name "BRAILLE_PATTERNS" init_value "=  
            new UnicodeBlock(\"BRAILLE_PATTERNS\", new String[] {\"Braille Patterns\",
                                                               \"BraillePatterns\"})" class_relation const_relation public
	      comment "
Constant for the \"Braille Patterns\" Unicode character block.
@since 1.4

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1704091 // BRAILLE_PATTERNS (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1704219 // CJK_RADICALS_SUPPLEMENT (<unidirectional association>)
	  relation 1704219 --->
	    a role_name "CJK_RADICALS_SUPPLEMENT" init_value "=  
             new UnicodeBlock(\"CJK_RADICALS_SUPPLEMENT\", new String[] {\"CJK Radicals Supplement\",
                                                                       \"CJKRadicalsSupplement\"})" class_relation const_relation public
	      comment "
Constant for the \"CJK Radicals Supplement\" Unicode character block.
@since 1.4

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1704219 // CJK_RADICALS_SUPPLEMENT (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1704347 // KANGXI_RADICALS (<unidirectional association>)
	  relation 1704347 --->
	    a role_name "KANGXI_RADICALS" init_value "=  
            new UnicodeBlock(\"KANGXI_RADICALS\", new String[] {\"Kangxi Radicals\", \"KangxiRadicals\"})" class_relation const_relation public
	      comment "
Constant for the \"Kangxi Radicals\" Unicode character block.
@since 1.4

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1704347 // KANGXI_RADICALS (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1704475 // IDEOGRAPHIC_DESCRIPTION_CHARACTERS (<unidirectional association>)
	  relation 1704475 --->
	    a role_name "IDEOGRAPHIC_DESCRIPTION_CHARACTERS" init_value "= 
            new UnicodeBlock(\"IDEOGRAPHIC_DESCRIPTION_CHARACTERS\", new String[] {\"Ideographic Description Characters\",
                                                                                 \"IdeographicDescriptionCharacters\"})" class_relation const_relation public
	      comment "
Constant for the \"Ideographic Description Characters\" Unicode character block.
@since 1.4

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1704475 // IDEOGRAPHIC_DESCRIPTION_CHARACTERS (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1704603 // BOPOMOFO_EXTENDED (<unidirectional association>)
	  relation 1704603 --->
	    a role_name "BOPOMOFO_EXTENDED" init_value "=  
            new UnicodeBlock(\"BOPOMOFO_EXTENDED\", new String[] {\"Bopomofo Extended\", 
                                                                \"BopomofoExtended\"})" class_relation const_relation public
	      comment "
Constant for the \"Bopomofo Extended\" Unicode character block.
@since 1.4

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1704603 // BOPOMOFO_EXTENDED (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1704731 // CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A (<unidirectional association>)
	  relation 1704731 --->
	    a role_name "CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A" init_value "=  
            new UnicodeBlock(\"CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A\", new String[] {\"CJK Unified Ideographs Extension A\",
                                                                                 \"CJKUnifiedIdeographsExtensionA\"})" class_relation const_relation public
	      comment "
Constant for the \"CJK Unified Ideographs Extension A\" Unicode character block.
@since 1.4

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1704731 // CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1704859 // YI_SYLLABLES (<unidirectional association>)
	  relation 1704859 --->
	    a role_name "YI_SYLLABLES" init_value "=  
            new UnicodeBlock(\"YI_SYLLABLES\", new String[] {\"Yi Syllables\", \"YiSyllables\"})" class_relation const_relation public
	      comment "
Constant for the \"Yi Syllables\" Unicode character block.
@since 1.4

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1704859 // YI_SYLLABLES (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1704987 // YI_RADICALS (<unidirectional association>)
	  relation 1704987 --->
	    a role_name "YI_RADICALS" init_value "= 
            new UnicodeBlock(\"YI_RADICALS\", new String[] {\"Yi Radicals\", \"YiRadicals\"})" class_relation const_relation public
	      comment "
Constant for the \"Yi Radicals\" Unicode character block.
@since 1.4

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1704987 // YI_RADICALS (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1705115 // CYRILLIC_SUPPLEMENTARY (<unidirectional association>)
	  relation 1705115 --->
	    a role_name "CYRILLIC_SUPPLEMENTARY" init_value "=  
            new UnicodeBlock(\"CYRILLIC_SUPPLEMENTARY\", new String[] {\"Cyrillic Supplementary\",
                                                                     \"CyrillicSupplementary\"})" class_relation const_relation public
	      comment "
Constant for the \"Cyrillic Supplementary\" Unicode character block.
@since 1.5

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1705115 // CYRILLIC_SUPPLEMENTARY (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1705243 // TAGALOG (<unidirectional association>)
	  relation 1705243 --->
	    a role_name "TAGALOG" init_value "=  
            new UnicodeBlock(\"TAGALOG\")" class_relation const_relation public
	      comment "
Constant for the \"Tagalog\" Unicode character block.
@since 1.5

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1705243 // TAGALOG (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1705371 // HANUNOO (<unidirectional association>)
	  relation 1705371 --->
	    a role_name "HANUNOO" init_value "=  
            new UnicodeBlock(\"HANUNOO\")" class_relation const_relation public
	      comment "
Constant for the \"Hanunoo\" Unicode character block.
@since 1.5

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1705371 // HANUNOO (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1705499 // BUHID (<unidirectional association>)
	  relation 1705499 --->
	    a role_name "BUHID" init_value "=  
            new UnicodeBlock(\"BUHID\")" class_relation const_relation public
	      comment "
Constant for the \"Buhid\" Unicode character block.
@since 1.5

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1705499 // BUHID (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1705627 // TAGBANWA (<unidirectional association>)
	  relation 1705627 --->
	    a role_name "TAGBANWA" init_value "=  
            new UnicodeBlock(\"TAGBANWA\")" class_relation const_relation public
	      comment "
Constant for the \"Tagbanwa\" Unicode character block.
@since 1.5

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1705627 // TAGBANWA (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1705755 // LIMBU (<unidirectional association>)
	  relation 1705755 --->
	    a role_name "LIMBU" init_value "=  
            new UnicodeBlock(\"LIMBU\")" class_relation const_relation public
	      comment "
Constant for the \"Limbu\" Unicode character block.
@since 1.5

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1705755 // LIMBU (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1705883 // TAI_LE (<unidirectional association>)
	  relation 1705883 --->
	    a role_name "TAI_LE" init_value "=  
            new UnicodeBlock(\"TAI_LE\", new String[] {\"Tai Le\", \"TaiLe\"})" class_relation const_relation public
	      comment "
Constant for the \"Tai Le\" Unicode character block.
@since 1.5

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1705883 // TAI_LE (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1706011 // KHMER_SYMBOLS (<unidirectional association>)
	  relation 1706011 --->
	    a role_name "KHMER_SYMBOLS" init_value "=  
            new UnicodeBlock(\"KHMER_SYMBOLS\", new String[] {\"Khmer Symbols\", \"KhmerSymbols\"})" class_relation const_relation public
	      comment "
Constant for the \"Khmer Symbols\" Unicode character block.
@since 1.5

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1706011 // KHMER_SYMBOLS (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1706139 // PHONETIC_EXTENSIONS (<unidirectional association>)
	  relation 1706139 --->
	    a role_name "PHONETIC_EXTENSIONS" init_value "=  
            new UnicodeBlock(\"PHONETIC_EXTENSIONS\", new String[] {\"Phonetic Extensions\", \"PhoneticExtensions\"})" class_relation const_relation public
	      comment "
Constant for the \"Phonetic Extensions\" Unicode character block.
@since 1.5

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1706139 // PHONETIC_EXTENSIONS (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1706267 // MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A (<unidirectional association>)
	  relation 1706267 --->
	    a role_name "MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A" init_value "=  
            new UnicodeBlock(\"MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A\", 
                             new String[]{\"Miscellaneous Mathematical Symbols-A\",
                                          \"MiscellaneousMathematicalSymbols-A\"})" class_relation const_relation public
	      comment "
Constant for the \"Miscellaneous Mathematical Symbols-A\" Unicode character block.
@since 1.5

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1706267 // MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1706395 // SUPPLEMENTAL_ARROWS_A (<unidirectional association>)
	  relation 1706395 --->
	    a role_name "SUPPLEMENTAL_ARROWS_A" init_value "=  
            new UnicodeBlock(\"SUPPLEMENTAL_ARROWS_A\", new String[] {\"Supplemental Arrows-A\",
                                                                    \"SupplementalArrows-A\"})" class_relation const_relation public
	      comment "
Constant for the \"Supplemental Arrows-A\" Unicode character block.
@since 1.5

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1706395 // SUPPLEMENTAL_ARROWS_A (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1706523 // SUPPLEMENTAL_ARROWS_B (<unidirectional association>)
	  relation 1706523 --->
	    a role_name "SUPPLEMENTAL_ARROWS_B" init_value "=  
            new UnicodeBlock(\"SUPPLEMENTAL_ARROWS_B\", new String[] {\"Supplemental Arrows-B\",
                                                                    \"SupplementalArrows-B\"})" class_relation const_relation public
	      comment "
Constant for the \"Supplemental Arrows-B\" Unicode character block.
@since 1.5

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1706523 // SUPPLEMENTAL_ARROWS_B (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1706651 // MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B (<unidirectional association>)
	  relation 1706651 --->
	    a role_name "MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B" init_value "=  new UnicodeBlock(\"MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B\", 
                                   new String[] {\"Miscellaneous Mathematical Symbols-B\",
                                                 \"MiscellaneousMathematicalSymbols-B\"})" class_relation const_relation public
	      comment "
Constant for the \"Miscellaneous Mathematical Symbols-B\" Unicode character block.
@since 1.5

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1706651 // MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1706779 // SUPPLEMENTAL_MATHEMATICAL_OPERATORS (<unidirectional association>)
	  relation 1706779 --->
	    a role_name "SUPPLEMENTAL_MATHEMATICAL_OPERATORS" init_value "=  
            new UnicodeBlock(\"SUPPLEMENTAL_MATHEMATICAL_OPERATORS\", 
                             new String[]{\"Supplemental Mathematical Operators\",
                                          \"SupplementalMathematicalOperators\"} )" class_relation const_relation public
	      comment "
Constant for the \"Supplemental Mathematical Operators\" Unicode character block.
@since 1.5

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1706779 // SUPPLEMENTAL_MATHEMATICAL_OPERATORS (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1706907 // MISCELLANEOUS_SYMBOLS_AND_ARROWS (<unidirectional association>)
	  relation 1706907 --->
	    a role_name "MISCELLANEOUS_SYMBOLS_AND_ARROWS" init_value "=  
            new UnicodeBlock(\"MISCELLANEOUS_SYMBOLS_AND_ARROWS\", new String[] {\"Miscellaneous Symbols and Arrows\",
                                                                               \"MiscellaneousSymbolsandArrows\"})" class_relation const_relation public
	      comment "
Constant for the \"Miscellaneous Symbols and Arrows\" Unicode character block.
@since 1.5

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1706907 // MISCELLANEOUS_SYMBOLS_AND_ARROWS (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1707035 // KATAKANA_PHONETIC_EXTENSIONS (<unidirectional association>)
	  relation 1707035 --->
	    a role_name "KATAKANA_PHONETIC_EXTENSIONS" init_value "=  
            new UnicodeBlock(\"KATAKANA_PHONETIC_EXTENSIONS\", new String[] {\"Katakana Phonetic Extensions\",
                                                                           \"KatakanaPhoneticExtensions\"})" class_relation const_relation public
	      comment "
Constant for the \"Katakana Phonetic Extensions\" Unicode character block.
@since 1.5

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1707035 // KATAKANA_PHONETIC_EXTENSIONS (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1707163 // YIJING_HEXAGRAM_SYMBOLS (<unidirectional association>)
	  relation 1707163 --->
	    a role_name "YIJING_HEXAGRAM_SYMBOLS" init_value "=  
            new UnicodeBlock(\"YIJING_HEXAGRAM_SYMBOLS\", new String[] {\"Yijing Hexagram Symbols\",
                                                                      \"YijingHexagramSymbols\"})" class_relation const_relation public
	      comment "
Constant for the \"Yijing Hexagram Symbols\" Unicode character block.
@since 1.5

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1707163 // YIJING_HEXAGRAM_SYMBOLS (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1707291 // VARIATION_SELECTORS (<unidirectional association>)
	  relation 1707291 --->
	    a role_name "VARIATION_SELECTORS" init_value "=  
            new UnicodeBlock(\"VARIATION_SELECTORS\", new String[] {\"Variation Selectors\", \"VariationSelectors\"})" class_relation const_relation public
	      comment "
Constant for the \"Variation Selectors\" Unicode character block.
@since 1.5

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1707291 // VARIATION_SELECTORS (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1707419 // LINEAR_B_SYLLABARY (<unidirectional association>)
	  relation 1707419 --->
	    a role_name "LINEAR_B_SYLLABARY" init_value "=  
            new UnicodeBlock(\"LINEAR_B_SYLLABARY\", new String[] {\"Linear B Syllabary\", \"LinearBSyllabary\"})" class_relation const_relation public
	      comment "
Constant for the \"Linear B Syllabary\" Unicode character block.
@since 1.5

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1707419 // LINEAR_B_SYLLABARY (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1707547 // LINEAR_B_IDEOGRAMS (<unidirectional association>)
	  relation 1707547 --->
	    a role_name "LINEAR_B_IDEOGRAMS" init_value "=  
            new UnicodeBlock(\"LINEAR_B_IDEOGRAMS\", new String[] {\"Linear B Ideograms\", \"LinearBIdeograms\"})" class_relation const_relation public
	      comment "
Constant for the \"Linear B Ideograms\" Unicode character block.
@since 1.5

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1707547 // LINEAR_B_IDEOGRAMS (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1707675 // AEGEAN_NUMBERS (<unidirectional association>)
	  relation 1707675 --->
	    a role_name "AEGEAN_NUMBERS" init_value "=  
            new UnicodeBlock(\"AEGEAN_NUMBERS\", new String[] {\"Aegean Numbers\", \"AegeanNumbers\"})" class_relation const_relation public
	      comment "
Constant for the \"Aegean Numbers\" Unicode character block.
@since 1.5

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1707675 // AEGEAN_NUMBERS (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1707803 // OLD_ITALIC (<unidirectional association>)
	  relation 1707803 --->
	    a role_name "OLD_ITALIC" init_value "=  
            new UnicodeBlock(\"OLD_ITALIC\", new String[] {\"Old Italic\", \"OldItalic\"})" class_relation const_relation public
	      comment "
Constant for the \"Old Italic\" Unicode character block.
@since 1.5

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1707803 // OLD_ITALIC (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1707931 // GOTHIC (<unidirectional association>)
	  relation 1707931 --->
	    a role_name "GOTHIC" init_value "=  new UnicodeBlock(\"GOTHIC\")" class_relation const_relation public
	      comment "
Constant for the \"Gothic\" Unicode character block.
@since 1.5

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1707931 // GOTHIC (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1708059 // UGARITIC (<unidirectional association>)
	  relation 1708059 --->
	    a role_name "UGARITIC" init_value "=  new UnicodeBlock(\"UGARITIC\")" class_relation const_relation public
	      comment "
Constant for the \"Ugaritic\" Unicode character block.
@since 1.5

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1708059 // UGARITIC (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1708187 // DESERET (<unidirectional association>)
	  relation 1708187 --->
	    a role_name "DESERET" init_value "=  new UnicodeBlock(\"DESERET\")" class_relation const_relation public
	      comment "
Constant for the \"Deseret\" Unicode character block.
@since 1.5

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1708187 // DESERET (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1708315 // SHAVIAN (<unidirectional association>)
	  relation 1708315 --->
	    a role_name "SHAVIAN" init_value "=  new UnicodeBlock(\"SHAVIAN\")" class_relation const_relation public
	      comment "
Constant for the \"Shavian\" Unicode character block.
@since 1.5

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1708315 // SHAVIAN (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1708443 // OSMANYA (<unidirectional association>)
	  relation 1708443 --->
	    a role_name "OSMANYA" init_value "=  new UnicodeBlock(\"OSMANYA\")" class_relation const_relation public
	      comment "
Constant for the \"Osmanya\" Unicode character block.
@since 1.5

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1708443 // OSMANYA (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1708571 // CYPRIOT_SYLLABARY (<unidirectional association>)
	  relation 1708571 --->
	    a role_name "CYPRIOT_SYLLABARY" init_value "=  
            new UnicodeBlock(\"CYPRIOT_SYLLABARY\", new String[] {\"Cypriot Syllabary\", \"CypriotSyllabary\"})" class_relation const_relation public
	      comment "
Constant for the \"Cypriot Syllabary\" Unicode character block.
@since 1.5

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1708571 // CYPRIOT_SYLLABARY (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1708699 // BYZANTINE_MUSICAL_SYMBOLS (<unidirectional association>)
	  relation 1708699 --->
	    a role_name "BYZANTINE_MUSICAL_SYMBOLS" init_value "=  
            new UnicodeBlock(\"BYZANTINE_MUSICAL_SYMBOLS\", new String[] {\"Byzantine Musical Symbols\",
                                                                        \"ByzantineMusicalSymbols\"})" class_relation const_relation public
	      comment "
Constant for the \"Byzantine Musical Symbols\" Unicode character block.
@since 1.5

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1708699 // BYZANTINE_MUSICAL_SYMBOLS (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1708827 // MUSICAL_SYMBOLS (<unidirectional association>)
	  relation 1708827 --->
	    a role_name "MUSICAL_SYMBOLS" init_value "=  
            new UnicodeBlock(\"MUSICAL_SYMBOLS\", new String[] {\"Musical Symbols\", \"MusicalSymbols\"})" class_relation const_relation public
	      comment "
Constant for the \"Musical Symbols\" Unicode character block.
@since 1.5

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1708827 // MUSICAL_SYMBOLS (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1708955 // TAI_XUAN_JING_SYMBOLS (<unidirectional association>)
	  relation 1708955 --->
	    a role_name "TAI_XUAN_JING_SYMBOLS" init_value "=  
            new UnicodeBlock(\"TAI_XUAN_JING_SYMBOLS\", new String[] {\"Tai Xuan Jing Symbols\",
                                                                     \"TaiXuanJingSymbols\"})" class_relation const_relation public
	      comment "
Constant for the \"Tai Xuan Jing Symbols\" Unicode character block.
@since 1.5

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1708955 // TAI_XUAN_JING_SYMBOLS (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1709083 // MATHEMATICAL_ALPHANUMERIC_SYMBOLS (<unidirectional association>)
	  relation 1709083 --->
	    a role_name "MATHEMATICAL_ALPHANUMERIC_SYMBOLS" init_value "=  
            new UnicodeBlock(\"MATHEMATICAL_ALPHANUMERIC_SYMBOLS\", 
                             new String[] {\"Mathematical Alphanumeric Symbols\", \"MathematicalAlphanumericSymbols\"})" class_relation const_relation public
	      comment "
Constant for the \"Mathematical Alphanumeric Symbols\" Unicode character block.
@since 1.5

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1709083 // MATHEMATICAL_ALPHANUMERIC_SYMBOLS (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1709211 // CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B (<unidirectional association>)
	  relation 1709211 --->
	    a role_name "CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B" init_value "=  
            new UnicodeBlock(\"CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B\", 
                             new String[] {\"CJK Unified Ideographs Extension B\", \"CJKUnifiedIdeographsExtensionB\"})" class_relation const_relation public
	      comment "
Constant for the \"CJK Unified Ideographs Extension B\" Unicode character block.
@since 1.5

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1709211 // CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1709339 // CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT (<unidirectional association>)
	  relation 1709339 --->
	    a role_name "CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT" init_value "=  
            new UnicodeBlock(\"CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT\",
                             new String[]{\"CJK Compatibility Ideographs Supplement\",
                                          \"CJKCompatibilityIdeographsSupplement\"})" class_relation const_relation public
	      comment "
Constant for the \"CJK Compatibility Ideographs Supplement\" Unicode character block.
@since 1.5

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1709339 // CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1709467 // TAGS (<unidirectional association>)
	  relation 1709467 --->
	    a role_name "TAGS" init_value "=  new UnicodeBlock(\"TAGS\")" class_relation const_relation public
	      comment "
Constant for the \"Tags\" Unicode character block.
@since 1.5

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1709467 // TAGS (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1709595 // VARIATION_SELECTORS_SUPPLEMENT (<unidirectional association>)
	  relation 1709595 --->
	    a role_name "VARIATION_SELECTORS_SUPPLEMENT" init_value "=  
            new UnicodeBlock(\"VARIATION_SELECTORS_SUPPLEMENT\", new String[] {\"Variation Selectors Supplement\",
                                                                             \"VariationSelectorsSupplement\"})" class_relation const_relation public
	      comment "
Constant for the \"Variation Selectors Supplement\" Unicode character block.
@since 1.5

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1709595 // VARIATION_SELECTORS_SUPPLEMENT (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1709723 // SUPPLEMENTARY_PRIVATE_USE_AREA_A (<unidirectional association>)
	  relation 1709723 --->
	    a role_name "SUPPLEMENTARY_PRIVATE_USE_AREA_A" init_value "=  
            new UnicodeBlock(\"SUPPLEMENTARY_PRIVATE_USE_AREA_A\", 
                             new String[] {\"Supplementary Private Use Area-A\", 
                                           \"SupplementaryPrivateUseArea-A\"})" class_relation const_relation public
	      comment "
Constant for the \"Supplementary Private Use Area-A\" Unicode character block.
@since 1.5

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1709723 // SUPPLEMENTARY_PRIVATE_USE_AREA_A (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1709851 // SUPPLEMENTARY_PRIVATE_USE_AREA_B (<unidirectional association>)
	  relation 1709851 --->
	    a role_name "SUPPLEMENTARY_PRIVATE_USE_AREA_B" init_value "=  
            new UnicodeBlock(\"SUPPLEMENTARY_PRIVATE_USE_AREA_B\",
                             new String[] {\"Supplementary Private Use Area-B\",
                                           \"SupplementaryPrivateUseArea-B\"})" class_relation const_relation public
	      comment "
Constant for the \"Supplementary Private Use Area-B\" Unicode character block.
@since 1.5

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1709851 // SUPPLEMENTARY_PRIVATE_USE_AREA_B (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1709979 // HIGH_SURROGATES (<unidirectional association>)
	  relation 1709979 --->
	    a role_name "HIGH_SURROGATES" init_value "=  
            new UnicodeBlock(\"HIGH_SURROGATES\", new String[] {\"High Surrogates\", \"HighSurrogates\"})" class_relation const_relation public
	      comment "
Constant for the \"High Surrogates\" Unicode character block.
This block represents codepoint values in the high surrogate
range: 0xD800 through 0xDB7F

@since 1.5

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1709979 // HIGH_SURROGATES (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1710107 // HIGH_PRIVATE_USE_SURROGATES (<unidirectional association>)
	  relation 1710107 --->
	    a role_name "HIGH_PRIVATE_USE_SURROGATES" init_value "=  
            new UnicodeBlock(\"HIGH_PRIVATE_USE_SURROGATES\", new String[] { \"High Private Use Surrogates\",
                                                                           \"HighPrivateUseSurrogates\"})" class_relation const_relation public
	      comment "
Constant for the \"High Private Use Surrogates\" Unicode character block.
This block represents codepoint values in the high surrogate
range: 0xDB80 through 0xDBFF

@since 1.5

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1710107 // HIGH_PRIVATE_USE_SURROGATES (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	classrelation 1710235 // LOW_SURROGATES (<unidirectional association>)
	  relation 1710235 --->
	    a role_name "LOW_SURROGATES" init_value "=  
            new UnicodeBlock(\"LOW_SURROGATES\", new String[] {\"Low Surrogates\", \"LowSurrogates\"})" class_relation const_relation public
	      comment "
Constant for the \"Low Surrogates\" Unicode character block.
This block represents codepoint values in the high surrogate
range: 0xDC00 through 0xDFFF

@since 1.5

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1710235 // LOW_SURROGATES (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	attribute 2650267 "blockStarts"
	  class_attribute const_attribute private explicit_type "int"
	  multiplicity "[]"
	  init_value "=  {
            0x0000, // Basic Latin
            0x0080, // Latin-1 Supplement
            0x0100, // Latin Extended-A
            0x0180, // Latin Extended-B
            0x0250, // IPA Extensions
            0x02B0, // Spacing Modifier Letters
            0x0300, // Combining Diacritical Marks
            0x0370, // Greek and Coptic
            0x0400, // Cyrillic
            0x0500, // Cyrillic Supplementary
            0x0530, // Armenian
            0x0590, // Hebrew
            0x0600, // Arabic
            0x0700, // Syriac
            0x0750, // unassigned
            0x0780, // Thaana
            0x07C0, // unassigned
            0x0900, // Devanagari
            0x0980, // Bengali
            0x0A00, // Gurmukhi
            0x0A80, // Gujarati
            0x0B00, // Oriya
            0x0B80, // Tamil
            0x0C00, // Telugu
            0x0C80, // Kannada
            0x0D00, // Malayalam
            0x0D80, // Sinhala
            0x0E00, // Thai
            0x0E80, // Lao
            0x0F00, // Tibetan
            0x1000, // Myanmar
            0x10A0, // Georgian
            0x1100, // Hangul Jamo
            0x1200, // Ethiopic
            0x1380, // unassigned
            0x13A0, // Cherokee
            0x1400, // Unified Canadian Aboriginal Syllabics
            0x1680, // Ogham
            0x16A0, // Runic
            0x1700, // Tagalog
            0x1720, // Hanunoo
            0x1740, // Buhid
            0x1760, // Tagbanwa
            0x1780, // Khmer
            0x1800, // Mongolian
            0x18B0, // unassigned
            0x1900, // Limbu
            0x1950, // Tai Le
            0x1980, // unassigned
            0x19E0, // Khmer Symbols
            0x1A00, // unassigned
            0x1D00, // Phonetic Extensions
            0x1D80, // unassigned
            0x1E00, // Latin Extended Additional
            0x1F00, // Greek Extended
            0x2000, // General Punctuation
            0x2070, // Superscripts and Subscripts
            0x20A0, // Currency Symbols
            0x20D0, // Combining Diacritical Marks for Symbols
            0x2100, // Letterlike Symbols
            0x2150, // Number Forms
            0x2190, // Arrows
            0x2200, // Mathematical Operators
            0x2300, // Miscellaneous Technical
            0x2400, // Control Pictures
            0x2440, // Optical Character Recognition
            0x2460, // Enclosed Alphanumerics
            0x2500, // Box Drawing
            0x2580, // Block Elements
            0x25A0, // Geometric Shapes
            0x2600, // Miscellaneous Symbols
            0x2700, // Dingbats
            0x27C0, // Miscellaneous Mathematical Symbols-A
            0x27F0, // Supplemental Arrows-A
            0x2800, // Braille Patterns
            0x2900, // Supplemental Arrows-B
            0x2980, // Miscellaneous Mathematical Symbols-B
            0x2A00, // Supplemental Mathematical Operators
            0x2B00, // Miscellaneous Symbols and Arrows
            0x2C00, // unassigned
            0x2E80, // CJK Radicals Supplement
            0x2F00, // Kangxi Radicals
            0x2FE0, // unassigned
            0x2FF0, // Ideographic Description Characters
            0x3000, // CJK Symbols and Punctuation
            0x3040, // Hiragana
            0x30A0, // Katakana
            0x3100, // Bopomofo
            0x3130, // Hangul Compatibility Jamo
            0x3190, // Kanbun
            0x31A0, // Bopomofo Extended
            0x31C0, // unassigned
            0x31F0, // Katakana Phonetic Extensions
            0x3200, // Enclosed CJK Letters and Months
            0x3300, // CJK Compatibility
            0x3400, // CJK Unified Ideographs Extension A
            0x4DC0, // Yijing Hexagram Symbols
            0x4E00, // CJK Unified Ideographs
            0xA000, // Yi Syllables
            0xA490, // Yi Radicals
            0xA4D0, // unassigned
            0xAC00, // Hangul Syllables
            0xD7B0, // unassigned
            0xD800, // High Surrogates
            0xDB80, // High Private Use Surrogates
            0xDC00, // Low Surrogates
            0xE000, // Private Use
            0xF900, // CJK Compatibility Ideographs
            0xFB00, // Alphabetic Presentation Forms
            0xFB50, // Arabic Presentation Forms-A
            0xFE00, // Variation Selectors
            0xFE10, // unassigned
            0xFE20, // Combining Half Marks
            0xFE30, // CJK Compatibility Forms
            0xFE50, // Small Form Variants
            0xFE70, // Arabic Presentation Forms-B
            0xFF00, // Halfwidth and Fullwidth Forms
            0xFFF0, // Specials
            0x10000, // Linear B Syllabary
            0x10080, // Linear B Ideograms
            0x10100, // Aegean Numbers
            0x10140, // unassigned
            0x10300, // Old Italic
            0x10330, // Gothic
            0x10350, // unassigned
            0x10380, // Ugaritic
            0x103A0, // unassigned
            0x10400, // Deseret
            0x10450, // Shavian
            0x10480, // Osmanya
            0x104B0, // unassigned
            0x10800, // Cypriot Syllabary
            0x10840, // unassigned
            0x1D000, // Byzantine Musical Symbols
            0x1D100, // Musical Symbols
            0x1D200, // unassigned
            0x1D300, // Tai Xuan Jing Symbols
            0x1D360, // unassigned
            0x1D400, // Mathematical Alphanumeric Symbols
            0x1D800, // unassigned
            0x20000, // CJK Unified Ideographs Extension B
            0x2A6E0, // unassigned
            0x2F800, // CJK Compatibility Ideographs Supplement
            0x2FA20, // unassigned
            0xE0000, // Tags
            0xE0080, // unassigned
            0xE0100, // Variation Selectors Supplement
            0xE01F0, // unassigned
            0xF0000, // Supplementary Private Use Area-A
            0x100000, // Supplementary Private Use Area-B
        }"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 1710363 // blocks (<unidirectional association>)
	  relation 1710363 --->
	    a role_name "blocks" multiplicity "[]" init_value "=  {
            BASIC_LATIN,
            LATIN_1_SUPPLEMENT,
            LATIN_EXTENDED_A,
            LATIN_EXTENDED_B,
            IPA_EXTENSIONS,
            SPACING_MODIFIER_LETTERS,
            COMBINING_DIACRITICAL_MARKS,
            GREEK,
            CYRILLIC,
            CYRILLIC_SUPPLEMENTARY,
            ARMENIAN,
            HEBREW,
            ARABIC,
            SYRIAC,
            null,
            THAANA,
            null,
            DEVANAGARI,
            BENGALI,
            GURMUKHI,
            GUJARATI,
            ORIYA,
            TAMIL,
            TELUGU,
            KANNADA,
            MALAYALAM,
            SINHALA,
            THAI,
            LAO,
            TIBETAN,
            MYANMAR,
            GEORGIAN,
            HANGUL_JAMO,
            ETHIOPIC,
            null,
            CHEROKEE,
            UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS,
            OGHAM,
            RUNIC,
            TAGALOG,
            HANUNOO,
            BUHID,
            TAGBANWA,
            KHMER,
            MONGOLIAN,
            null,
            LIMBU,
            TAI_LE,
            null,
            KHMER_SYMBOLS,
            null,
            PHONETIC_EXTENSIONS,
            null,
            LATIN_EXTENDED_ADDITIONAL,
            GREEK_EXTENDED,
            GENERAL_PUNCTUATION,
            SUPERSCRIPTS_AND_SUBSCRIPTS,
            CURRENCY_SYMBOLS,
            COMBINING_MARKS_FOR_SYMBOLS,
            LETTERLIKE_SYMBOLS,
            NUMBER_FORMS,
            ARROWS,
            MATHEMATICAL_OPERATORS,
            MISCELLANEOUS_TECHNICAL,
            CONTROL_PICTURES,
            OPTICAL_CHARACTER_RECOGNITION,
            ENCLOSED_ALPHANUMERICS,
            BOX_DRAWING,
            BLOCK_ELEMENTS,
            GEOMETRIC_SHAPES,
            MISCELLANEOUS_SYMBOLS,
            DINGBATS,
            MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A,
            SUPPLEMENTAL_ARROWS_A,
            BRAILLE_PATTERNS,
            SUPPLEMENTAL_ARROWS_B,
            MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B,
            SUPPLEMENTAL_MATHEMATICAL_OPERATORS,
            MISCELLANEOUS_SYMBOLS_AND_ARROWS,
            null,
            CJK_RADICALS_SUPPLEMENT,
            KANGXI_RADICALS,
            null,
            IDEOGRAPHIC_DESCRIPTION_CHARACTERS,
            CJK_SYMBOLS_AND_PUNCTUATION,
            HIRAGANA,
            KATAKANA,
            BOPOMOFO,
            HANGUL_COMPATIBILITY_JAMO,
            KANBUN,
            BOPOMOFO_EXTENDED,
            null,
            KATAKANA_PHONETIC_EXTENSIONS,
            ENCLOSED_CJK_LETTERS_AND_MONTHS,
            CJK_COMPATIBILITY,
            CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A,
            YIJING_HEXAGRAM_SYMBOLS,
            CJK_UNIFIED_IDEOGRAPHS,
            YI_SYLLABLES,
            YI_RADICALS,
            null,
            HANGUL_SYLLABLES,
            null,
            HIGH_SURROGATES,
            HIGH_PRIVATE_USE_SURROGATES,
            LOW_SURROGATES,
            PRIVATE_USE_AREA,
            CJK_COMPATIBILITY_IDEOGRAPHS,
            ALPHABETIC_PRESENTATION_FORMS,
            ARABIC_PRESENTATION_FORMS_A,
            VARIATION_SELECTORS,
            null,
            COMBINING_HALF_MARKS,
            CJK_COMPATIBILITY_FORMS,
            SMALL_FORM_VARIANTS,
            ARABIC_PRESENTATION_FORMS_B,
            HALFWIDTH_AND_FULLWIDTH_FORMS,
            SPECIALS,
            LINEAR_B_SYLLABARY,
            LINEAR_B_IDEOGRAMS,
            AEGEAN_NUMBERS,
            null,
            OLD_ITALIC,
            GOTHIC,
            null,
            UGARITIC,
            null,
            DESERET,
            SHAVIAN,
            OSMANYA,
            null,
            CYPRIOT_SYLLABARY,
            null,
            BYZANTINE_MUSICAL_SYMBOLS,
            MUSICAL_SYMBOLS,
            null,
            TAI_XUAN_JING_SYMBOLS,
            null,
            MATHEMATICAL_ALPHANUMERIC_SYMBOLS,
            null,
            CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B,
            null,
            CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT,
            null,
            TAGS,
            null,
            VARIATION_SELECTORS_SUPPLEMENT,
            null,
            SUPPLEMENTARY_PRIVATE_USE_AREA_A,
            SUPPLEMENTARY_PRIVATE_USE_AREA_B
        }" class_relation const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 1710363 // blocks (<unidirectional association>)
	    b parent class_ref 882203 // UnicodeBlock
	end

	operation 6578715 "of"
	  class_operation public return_type class_ref 882203 // UnicodeBlock
	  nparams 1
	    param in name "c" explicit_type "char"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the object representing the Unicode block containing the
given character, or <code>null</code> if the character is not a
member of a defined block.

<p><b>Note:</b> This method cannot handle <a
href=\"Character.html#supplementary\"> supplementary
characters</a>. To support all Unicode characters,
including supplementary characters, use the {@link
#of(int)} method.

@param   c  The character in question
@return  The <code>UnicodeBlock</code> instance representing the
         Unicode block of which this character is a member, or
         <code>null</code> if the character is not a member of any
         Unicode block"
	end

	operation 6578843 "of"
	  class_operation public return_type class_ref 882203 // UnicodeBlock
	  nparams 1
	    param in name "codePoint" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the object representing the Unicode block
containing the given character (Unicode code point), or
<code>null</code> if the character is not a member of a
defined block.

@param   codePoint the character (Unicode code point) in question.
@return  The <code>UnicodeBlock</code> instance representing the
         Unicode block of which this character is a member, or
         <code>null</code> if the character is not a member of any
         Unicode block
@exception IllegalArgumentException if the specified
<code>codePoint</code> is an invalid Unicode code point.
@see Character#isValidCodePoint(int)
@since   1.5"
	end

	operation 6578971 "forName"
	  class_operation public return_type class_ref 882203 // UnicodeBlock
	  nparams 1
	    param in name "blockName" explicit_type "String"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the UnicodeBlock with the given name. Block
names are determined by The Unicode Standard. The file
Blocks-&lt;version&gt;.txt defines blocks for a particular
version of the standard. The {@link Character} class specifies
the version of the standard that it supports.
<p>
This method accepts block names in the following forms:
<ol>
<li> Canonical block names as defined by the Unicode Standard.
For example, the standard defines a \"Basic Latin\" block. Therefore, this
method accepts \"Basic Latin\" as a valid block name. The documentation of 
each UnicodeBlock provides the canonical name.
<li>Canonical block names with all spaces removed. For example, \"BasicLatin\"
is a valid block name for the \"Basic Latin\" block.
<li>The text representation of each constant UnicodeBlock identifier.
For example, this method will return the {@link #BASIC_LATIN} block if
provided with the \"BASIC_LATIN\" name. This form replaces all spaces and
 hyphens in the canonical name with underscores.
</ol>
Finally, character case is ignored for all of the valid block name forms.
For example, \"BASIC_LATIN\" and \"basic_latin\" are both valid block names.
The en_US locale's case mapping rules are used to provide case-insensitive
string comparisons for block name validation.
<p>
If the Unicode Standard changes block names, both the previous and
current names will be accepted.

@param blockName A <code>UnicodeBlock</code> name.
@return The <code>UnicodeBlock</code> instance identified
        by <code>blockName</code>
@throws IllegalArgumentException if <code>blockName</code> is an
        invalid name
@throws NullPointerException if <code>blockName</code> is null
@since 1.5"
	end
      end

      attribute 2650395 "value"
	const_attribute private explicit_type "char"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The value of the <code>Character</code>.

@serial
"
      end

      attribute 2650523 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  3786198910865385080L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " use serialVersionUID from JDK 1.0.2 for interoperability "
      end

      operation 6579099 "Character"
	public explicit_return_type ""
	nparams 1
	  param in name "value" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a newly allocated <code>Character</code> object that
represents the specified <code>char</code> value.

@param  value   the value to be represented by the 
                 <code>Character</code> object."
      end

      class 882331 "CharacterCache"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 6579227 "CharacterCache"
	  private explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	classrelation 1710491 // cache (<unidirectional association>)
	  relation 1710491 --->
	    a role_name "cache" multiplicity "[]" init_value "=  new Character[127 + 1]" class_relation const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 1710491 // cache (<unidirectional association>)
	    b parent class_ref 602011 // Character
	end

	extra_member 158107 "initialization"
	  
	  cpp "" ""
	  java "  static {
	    for(int i = 0; i < cache.length; i++)
		cache[i] = new Character((char)i);
	}"
	  php ""
	  python ""
	  idl ""
	end
      end

      operation 6579355 "valueOf"
	class_operation public return_type class_ref 602011 // Character
	nparams 1
	  param in name "c" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <tt>Character</tt> instance representing the specified
<tt>char</tt> value.
If a new <tt>Character</tt> instance is not required, this method
should generally be used in preference to the constructor
{@link #Character(char)}, as this method is likely to yield
significantly better space and time performance by caching
frequently requested values.

@param  c a char value.
@return a <tt>Character</tt> instance representing <tt>c</tt>.
@since  1.5"
      end

      operation 6579483 "charValue"
	public explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this <code>Character</code> object.
@return  the primitive <code>char</code> value represented by
         this object."
      end

      operation 6579611 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hash code for this <code>Character</code>.
@return  a hash code value for this object."
      end

      operation 6579739 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this object against the specified object.
The result is <code>true</code> if and only if the argument is not
<code>null</code> and is a <code>Character</code> object that
represents the same <code>char</code> value as this object.

@param   obj   the object to compare with.
@return  <code>true</code> if the objects are the same;
         <code>false</code> otherwise."
      end

      operation 6579867 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>String</code> object representing this
<code>Character</code>'s value.  The result is a string of
length 1 whose sole component is the primitive
<code>char</code> value represented by this
<code>Character</code> object.

@return  a string representation of this object."
      end

      operation 6579995 "toString"
	class_operation public explicit_return_type "String"
	nparams 1
	  param in name "c" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>String</code> object representing the
specified <code>char</code>.  The result is a string of length
1 consisting solely of the specified <code>char</code>.

@param c the <code>char</code> to be converted
@return the string representation of the specified <code>char</code>
@since 1.4"
      end

      attribute 2650651 "FAST_PATH_MAX"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  255"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Maximum character handled by internal fast-path code which
 avoids initializing large tables.
 Note: performance of this \"fast-path\" code may be sub-optimal
 in negative cases for some accessors due to complicated ranges.
 Should revisit after optimization of table initialization."
      end

      operation 6580123 "getPlane"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Provide the character plane to which this codepoint belongs.

@param ch the codepoint
@return the plane of the codepoint argument
@since 1.5"
      end

      operation 6580251 "isValidCodePoint"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "codePoint" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether the specified code point is a valid Unicode
code point value in the range of <code>0x0000</code> to
<code>0x10FFFF</code> inclusive. This method is equivalent to
the expression:

<blockquote><pre>
codePoint >= 0x0000 && codePoint <= 0x10FFFF
</pre></blockquote>

@param  codePoint the Unicode code point to be tested
@return <code>true</code> if the specified code point value
is a valid code point value;
<code>false</code> otherwise.
@since  1.5"
      end

      operation 6580379 "isSupplementaryCodePoint"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "codePoint" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether the specified character (Unicode code point)
is in the supplementary character range. The method call is
equivalent to the expression:
<blockquote><pre>
codePoint >= 0x10000 && codePoint <= 0x10ffff
</pre></blockquote>

@param  codePoint the character (Unicode code point) to be tested
@return <code>true</code> if the specified character is in the Unicode
        supplementary character range; <code>false</code> otherwise.
@since  1.5"
      end

      operation 6580507 "isHighSurrogate"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if the given <code>char</code> value is a
high-surrogate code unit (also known as <i>leading-surrogate
code unit</i>). Such values do not represent characters by
themselves, but are used in the representation of <a
href=\"#supplementary\">supplementary characters</a> in the
UTF-16 encoding.

<p>This method returns <code>true</code> if and only if
<blockquote><pre>ch >= '&#92;uD800' && ch <= '&#92;uDBFF'
</pre></blockquote>
is <code>true</code>.

@param   ch   the <code>char</code> value to be tested.
@return  <code>true</code> if the <code>char</code> value
         is between '&#92;uD800' and '&#92;uDBFF' inclusive;
         <code>false</code> otherwise.
@see     java.lang.Character#isLowSurrogate(char)
@see     Character.UnicodeBlock#of(int)
@since   1.5"
      end

      operation 6580635 "isLowSurrogate"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if the given <code>char</code> value is a
low-surrogate code unit (also known as <i>trailing-surrogate code
unit</i>). Such values do not represent characters by themselves,
but are used in the representation of <a
href=\"#supplementary\">supplementary characters</a> in the UTF-16 encoding.

<p> This method returns <code>true</code> if and only if
<blockquote><pre>ch >= '&#92;uDC00' && ch <= '&#92;uDFFF'
</pre></blockquote> is <code>true</code>.

@param   ch   the <code>char</code> value to be tested.
@return  <code>true</code> if the <code>char</code> value
         is between '&#92;uDC00' and '&#92;uDFFF' inclusive;
         <code>false</code> otherwise.
@see java.lang.Character#isHighSurrogate(char)
@since   1.5"
      end

      operation 6580763 "isSurrogatePair"
	class_operation public explicit_return_type "boolean"
	nparams 2
	  param in name "high" explicit_type "char"
	  param in name "low" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether the specified pair of <code>char</code>
values is a valid surrogate pair. This method is equivalent to
the expression:
<blockquote><pre>
isHighSurrogate(high) && isLowSurrogate(low)
</pre></blockquote>

@param  high the high-surrogate code value to be tested
@param  low the low-surrogate code value to be tested
@return <code>true</code> if the specified high and
low-surrogate code values represent a valid surrogate pair;
<code>false</code> otherwise.
@since  1.5"
      end

      operation 6580891 "charCount"
	class_operation public explicit_return_type "int"
	nparams 1
	  param in name "codePoint" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines the number of <code>char</code> values needed to
represent the specified character (Unicode code point). If the
specified character is equal to or greater than 0x10000, then
the method returns 2. Otherwise, the method returns 1.

<p>This method doesn't validate the specified character to be a
valid Unicode code point. The caller must validate the
character value using {@link #isValidCodePoint(int) isValidCodePoint}
if necessary.

@param   codePoint the character (Unicode code point) to be tested.
@return  2 if the character is a valid supplementary character; 1 otherwise.
@see     #isSupplementaryCodePoint(int)
@since   1.5"
      end

      operation 6581019 "toCodePoint"
	class_operation public explicit_return_type "int"
	nparams 2
	  param in name "high" explicit_type "char"
	  param in name "low" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts the specified surrogate pair to its supplementary code
point value. This method does not validate the specified
surrogate pair. The caller must validate it using {@link
#isSurrogatePair(char, char) isSurrogatePair} if necessary.

@param  high the high-surrogate code unit
@param  low the low-surrogate code unit
@return the supplementary code point composed from the
        specified surrogate pair.
@since  1.5"
      end

      operation 6581147 "codePointAt"
	class_operation public explicit_return_type "int"
	nparams 2
	  param inout name "seq" type class_ref 393755 // CharSequence
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the code point at the given index of the
<code>CharSequence</code>. If the <code>char</code> value at
the given index in the <code>CharSequence</code> is in the
high-surrogate range, the following index is less than the
length of the <code>CharSequence</code>, and the
<code>char</code> value at the following index is in the
low-surrogate range, then the supplementary code point
corresponding to this surrogate pair is returned. Otherwise,
the <code>char</code> value at the given index is returned.

@param seq a sequence of <code>char</code> values (Unicode code
units)
@param index the index to the <code>char</code> values (Unicode
code units) in <code>seq</code> to be converted
@return the Unicode code point at the given index
@exception NullPointerException if <code>seq</code> is null.
@exception IndexOutOfBoundsException if the value
<code>index</code> is negative or not less than
{@link CharSequence#length() seq.length()}.
@since  1.5"
      end

      operation 6581275 "codePointAt"
	class_operation public explicit_return_type "int"
	nparams 2
	  param in name "a" explicit_type "char"
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the code point at the given index of the
<code>char</code> array. If the <code>char</code> value at
the given index in the <code>char</code> array is in the
high-surrogate range, the following index is less than the
length of the <code>char</code> array, and the
<code>char</code> value at the following index is in the
low-surrogate range, then the supplementary code point
corresponding to this surrogate pair is returned. Otherwise,
the <code>char</code> value at the given index is returned.

@param a the <code>char</code> array
@param index the index to the <code>char</code> values (Unicode
code units) in the <code>char</code> array to be converted
@return the Unicode code point at the given index
@exception NullPointerException if <code>a</code> is null.
@exception IndexOutOfBoundsException if the value
<code>index</code> is negative or not less than
the length of the <code>char</code> array.
@since  1.5"
      end

      operation 6581403 "codePointAt"
	class_operation public explicit_return_type "int"
	nparams 3
	  param in name "a" explicit_type "char"
	  param in name "index" explicit_type "int"
	  param in name "limit" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the code point at the given index of the
<code>char</code> array, where only array elements with
<code>index</code> less than <code>limit</code> can be used. If
the <code>char</code> value at the given index in the
<code>char</code> array is in the high-surrogate range, the
following index is less than the <code>limit</code>, and the
<code>char</code> value at the following index is in the
low-surrogate range, then the supplementary code point
corresponding to this surrogate pair is returned. Otherwise,
the <code>char</code> value at the given index is returned.

@param a the <code>char</code> array
@param index the index to the <code>char</code> values (Unicode
code units) in the <code>char</code> array to be converted
@param limit the index after the last array element that can be used in the
<code>char</code> array
@return the Unicode code point at the given index
@exception NullPointerException if <code>a</code> is null.
@exception IndexOutOfBoundsException if the <code>index</code>
argument is negative or not less than the <code>limit</code>
argument, or if the <code>limit</code> argument is negative or
greater than the length of the <code>char</code> array.
@since  1.5"
      end

      operation 6581531 "codePointAtImpl"
	class_operation package explicit_return_type "int"
	nparams 3
	  param in name "a" explicit_type "char"
	  param in name "index" explicit_type "int"
	  param in name "limit" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6581659 "codePointBefore"
	class_operation public explicit_return_type "int"
	nparams 2
	  param inout name "seq" type class_ref 393755 // CharSequence
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the code point preceding the given index of the
<code>CharSequence</code>. If the <code>char</code> value at
<code>(index - 1)</code> in the <code>CharSequence</code> is in
the low-surrogate range, <code>(index - 2)</code> is not
negative, and the <code>char</code> value at <code>(index -
2)</code> in the <code>CharSequence</code> is in the
high-surrogate range, then the supplementary code point
corresponding to this surrogate pair is returned. Otherwise,
the <code>char</code> value at <code>(index - 1)</code> is
returned.

@param seq the <code>CharSequence</code> instance
@param index the index following the code point that should be returned
@return the Unicode code point value before the given index.
@exception NullPointerException if <code>seq</code> is null.
@exception IndexOutOfBoundsException if the <code>index</code>
argument is less than 1 or greater than {@link
CharSequence#length() seq.length()}.
@since  1.5"
      end

      operation 6581787 "codePointBefore"
	class_operation public explicit_return_type "int"
	nparams 2
	  param in name "a" explicit_type "char"
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the code point preceding the given index of the
<code>char</code> array. If the <code>char</code> value at
<code>(index - 1)</code> in the <code>char</code> array is in
the low-surrogate range, <code>(index - 2)</code> is not
negative, and the <code>char</code> value at <code>(index -
2)</code> in the <code>char</code> array is in the
high-surrogate range, then the supplementary code point
corresponding to this surrogate pair is returned. Otherwise,
the <code>char</code> value at <code>(index - 1)</code> is
returned.

@param a the <code>char</code> array
@param index the index following the code point that should be returned
@return the Unicode code point value before the given index.
@exception NullPointerException if <code>a</code> is null.
@exception IndexOutOfBoundsException if the <code>index</code>
argument is less than 1 or greater than the length of the
<code>char</code> array
@since  1.5"
      end

      operation 6581915 "codePointBefore"
	class_operation public explicit_return_type "int"
	nparams 3
	  param in name "a" explicit_type "char"
	  param in name "index" explicit_type "int"
	  param in name "start" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the code point preceding the given index of the
<code>char</code> array, where only array elements with
<code>index</code> greater than or equal to <code>start</code>
can be used. If the <code>char</code> value at <code>(index -
1)</code> in the <code>char</code> array is in the
low-surrogate range, <code>(index - 2)</code> is not less than
<code>start</code>, and the <code>char</code> value at
<code>(index - 2)</code> in the <code>char</code> array is in
the high-surrogate range, then the supplementary code point
corresponding to this surrogate pair is returned. Otherwise,
the <code>char</code> value at <code>(index - 1)</code> is
returned.

@param a the <code>char</code> array
@param index the index following the code point that should be returned
@param start the index of the first array element in the
<code>char</code> array
@return the Unicode code point value before the given index.
@exception NullPointerException if <code>a</code> is null.
@exception IndexOutOfBoundsException if the <code>index</code>
argument is not greater than the <code>start</code> argument or
is greater than the length of the <code>char</code> array, or
if the <code>start</code> argument is negative or not less than
the length of the <code>char</code> array.
@since  1.5"
      end

      operation 6582043 "codePointBeforeImpl"
	class_operation package explicit_return_type "int"
	nparams 3
	  param in name "a" explicit_type "char"
	  param in name "index" explicit_type "int"
	  param in name "start" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6582171 "toChars"
	class_operation public explicit_return_type "int"
	nparams 3
	  param in name "codePoint" explicit_type "int"
	  param in name "dst" explicit_type "char"
	  param in name "dstIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts the specified character (Unicode code point) to its
UTF-16 representation. If the specified code point is a BMP
(Basic Multilingual Plane or Plane 0) value, the same value is
stored in <code>dst[dstIndex]</code>, and 1 is returned. If the
specified code point is a supplementary character, its
surrogate values are stored in <code>dst[dstIndex]</code>
(high-surrogate) and <code>dst[dstIndex+1]</code>
(low-surrogate), and 2 is returned.

@param  codePoint the character (Unicode code point) to be converted.
@param  dst an array of <code>char</code> in which the
<code>codePoint</code>'s UTF-16 value is stored.
@param dstIndex the start index into the <code>dst</code>
array where the converted value is stored.
@return 1 if the code point is a BMP code point, 2 if the
code point is a supplementary code point.
@exception IllegalArgumentException if the specified
<code>codePoint</code> is not a valid Unicode code point.
@exception NullPointerException if the specified <code>dst</code> is null.
@exception IndexOutOfBoundsException if <code>dstIndex</code>
is negative or not less than <code>dst.length</code>, or if
<code>dst</code> at <code>dstIndex</code> doesn't have enough
array element(s) to store the resulting <code>char</code>
value(s). (If <code>dstIndex</code> is equal to
<code>dst.length-1</code> and the specified
<code>codePoint</code> is a supplementary character, the
high-surrogate value is not stored in
<code>dst[dstIndex]</code>.)
@since  1.5"
      end

      operation 6582299 "toChars"
	class_operation public explicit_return_type "char"
	nparams 1
	  param in name "codePoint" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts the specified character (Unicode code point) to its
UTF-16 representation stored in a <code>char</code> array. If
the specified code point is a BMP (Basic Multilingual Plane or
Plane 0) value, the resulting <code>char</code> array has
the same value as <code>codePoint</code>. If the specified code
point is a supplementary code point, the resulting
<code>char</code> array has the corresponding surrogate pair.

@param  codePoint a Unicode code point
@return a <code>char</code> array having
        <code>codePoint</code>'s UTF-16 representation.
@exception IllegalArgumentException if the specified
<code>codePoint</code> is not a valid Unicode code point.
@since  1.5"
      end

      operation 6582427 "toSurrogates"
	class_operation package explicit_return_type "void"
	nparams 3
	  param in name "codePoint" explicit_type "int"
	  param in name "dst" explicit_type "char"
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6582555 "codePointCount"
	class_operation public explicit_return_type "int"
	nparams 3
	  param inout name "seq" type class_ref 393755 // CharSequence
	  param in name "beginIndex" explicit_type "int"
	  param in name "endIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of Unicode code points in the text range of
the specified char sequence. The text range begins at the
specified <code>beginIndex</code> and extends to the
<code>char</code> at index <code>endIndex - 1</code>. Thus the
length (in <code>char</code>s) of the text range is
<code>endIndex-beginIndex</code>. Unpaired surrogates within
the text range count as one code point each.

@param seq the char sequence
@param beginIndex the index to the first <code>char</code> of
the text range.
@param endIndex the index after the last <code>char</code> of
the text range.
@return the number of Unicode code points in the specified text
range
@exception NullPointerException if <code>seq</code> is null.
@exception IndexOutOfBoundsException if the
<code>beginIndex</code> is negative, or <code>endIndex</code>
is larger than the length of the given sequence, or
<code>beginIndex</code> is larger than <code>endIndex</code>.
@since  1.5"
      end

      operation 6582683 "codePointCount"
	class_operation public explicit_return_type "int"
	nparams 3
	  param in name "a" explicit_type "char"
	  param in name "offset" explicit_type "int"
	  param in name "count" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of Unicode code points in a subarray of the
<code>char</code> array argument. The <code>offset</code>
argument is the index of the first <code>char</code> of the
subarray and the <code>count</code> argument specifies the
length of the subarray in <code>char</code>s. Unpaired
surrogates within the subarray count as one code point each.

@param a the <code>char</code> array
@param offset the index of the first <code>char</code> in the
given <code>char</code> array
@param count the length of the subarray in <code>char</code>s
@return the number of Unicode code points in the specified subarray
@exception NullPointerException if <code>a</code> is null.
@exception IndexOutOfBoundsException if <code>offset</code> or
<code>count</code> is negative, or if <code>offset +
count</code> is larger than the length of the given array.
@since  1.5"
      end

      operation 6582811 "codePointCountImpl"
	class_operation package explicit_return_type "int"
	nparams 3
	  param in name "a" explicit_type "char"
	  param in name "offset" explicit_type "int"
	  param in name "count" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6582939 "offsetByCodePoints"
	class_operation public explicit_return_type "int"
	nparams 3
	  param inout name "seq" type class_ref 393755 // CharSequence
	  param in name "index" explicit_type "int"
	  param in name "codePointOffset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index within the given char sequence that is offset
from the given <code>index</code> by <code>codePointOffset</code>
code points. Unpaired surrogates within the text range given by
<code>index</code> and <code>codePointOffset</code> count as
one code point each.

@param seq the char sequence
@param index the index to be offset
@param codePointOffset the offset in code points
@return the index within the char sequence
@exception NullPointerException if <code>seq</code> is null.
@exception IndexOutOfBoundsException if <code>index</code>
  is negative or larger then the length of the char sequence,
  or if <code>codePointOffset</code> is positive and the
  subsequence starting with <code>index</code> has fewer than
  <code>codePointOffset</code> code points, or if
  <code>codePointOffset</code> is negative and the subsequence
  before <code>index</code> has fewer than the absolute value
  of <code>codePointOffset</code> code points.
@since 1.5"
      end

      operation 6583067 "offsetByCodePoints"
	class_operation public explicit_return_type "int"
	nparams 5
	  param in name "a" explicit_type "char"
	  param in name "start" explicit_type "int"
	  param in name "count" explicit_type "int"
	  param in name "index" explicit_type "int"
	  param in name "codePointOffset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index within the given <code>char</code> subarray
that is offset from the given <code>index</code> by
<code>codePointOffset</code> code points. The
<code>start</code> and <code>count</code> arguments specify a
subarray of the <code>char</code> array. Unpaired surrogates
within the text range given by <code>index</code> and
<code>codePointOffset</code> count as one code point each.

@param a the <code>char</code> array
@param start the index of the first <code>char</code> of the
subarray
@param count the length of the subarray in <code>char</code>s
@param index the index to be offset
@param codePointOffset the offset in code points
@return the index within the subarray
@exception NullPointerException if <code>a</code> is null.
@exception IndexOutOfBoundsException 
  if <code>start</code> or <code>count</code> is negative,
  or if <code>start + count</code> is larger than the length of
  the given array,
  or if <code>index</code> is less than <code>start</code> or
  larger then <code>start + count</code>,
  or if <code>codePointOffset</code> is positive and the text range
  starting with <code>index</code> and ending with <code>start
  + count - 1</code> has fewer than <code>codePointOffset</code> code
  points,
  or if <code>codePointOffset</code> is negative and the text range
  starting with <code>start</code> and ending with <code>index
  - 1</code> has fewer than the absolute value of
  <code>codePointOffset</code> code points.
@since 1.5"
      end

      operation 6583195 "offsetByCodePointsImpl"
	class_operation package explicit_return_type "int"
	nparams 5
	  param in name "a" explicit_type "char"
	  param in name "start" explicit_type "int"
	  param in name "count" explicit_type "int"
	  param in name "index" explicit_type "int"
	  param in name "codePointOffset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6583323 "isLowerCase"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if the specified character is a lowercase character.
<p>
A character is lowercase if its general category type, provided
by <code>Character.getType(ch)</code>, is
<code>LOWERCASE_LETTER</code>.
<p>
The following are examples of lowercase characters:
<p><blockquote><pre>
a b c d e f g h i j k l m n o p q r s t u v w x y z
'&#92;u00DF' '&#92;u00E0' '&#92;u00E1' '&#92;u00E2' '&#92;u00E3' '&#92;u00E4' '&#92;u00E5' '&#92;u00E6' 
'&#92;u00E7' '&#92;u00E8' '&#92;u00E9' '&#92;u00EA' '&#92;u00EB' '&#92;u00EC' '&#92;u00ED' '&#92;u00EE'
'&#92;u00EF' '&#92;u00F0' '&#92;u00F1' '&#92;u00F2' '&#92;u00F3' '&#92;u00F4' '&#92;u00F5' '&#92;u00F6'
'&#92;u00F8' '&#92;u00F9' '&#92;u00FA' '&#92;u00FB' '&#92;u00FC' '&#92;u00FD' '&#92;u00FE' '&#92;u00FF'
</pre></blockquote>
<p> Many other Unicode characters are lowercase too.

<p><b>Note:</b> This method cannot handle <a
href=\"#supplementary\"> supplementary characters</a>. To support
all Unicode characters, including supplementary characters, use
the {@link #isLowerCase(int)} method.

@param   ch   the character to be tested.
@return  <code>true</code> if the character is lowercase;
         <code>false</code> otherwise.
@see     java.lang.Character#isLowerCase(char)
@see     java.lang.Character#isTitleCase(char)
@see     java.lang.Character#toLowerCase(char)
@see     java.lang.Character#getType(char)"
      end

      operation 6583451 "isLowerCase"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "codePoint" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if the specified character (Unicode code point) is a
lowercase character.
<p>
A character is lowercase if its general category type, provided
by {@link Character#getType getType(codePoint)}, is
<code>LOWERCASE_LETTER</code>.
<p>
The following are examples of lowercase characters:
<p><blockquote><pre>
a b c d e f g h i j k l m n o p q r s t u v w x y z
'&#92;u00DF' '&#92;u00E0' '&#92;u00E1' '&#92;u00E2' '&#92;u00E3' '&#92;u00E4' '&#92;u00E5' '&#92;u00E6' 
'&#92;u00E7' '&#92;u00E8' '&#92;u00E9' '&#92;u00EA' '&#92;u00EB' '&#92;u00EC' '&#92;u00ED' '&#92;u00EE'
'&#92;u00EF' '&#92;u00F0' '&#92;u00F1' '&#92;u00F2' '&#92;u00F3' '&#92;u00F4' '&#92;u00F5' '&#92;u00F6'
'&#92;u00F8' '&#92;u00F9' '&#92;u00FA' '&#92;u00FB' '&#92;u00FC' '&#92;u00FD' '&#92;u00FE' '&#92;u00FF'
</pre></blockquote>
<p> Many other Unicode characters are lowercase too.

@param   codePoint the character (Unicode code point) to be tested.
@return  <code>true</code> if the character is lowercase;
         <code>false</code> otherwise.
@see     java.lang.Character#isLowerCase(int)
@see     java.lang.Character#isTitleCase(int)
@see     java.lang.Character#toLowerCase(int)
@see     java.lang.Character#getType(int)
@since   1.5"
      end

      operation 6583579 "isUpperCase"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if the specified character is an uppercase character.
<p>
A character is uppercase if its general category type, provided by
<code>Character.getType(ch)</code>, is <code>UPPERCASE_LETTER</code>.
<p>
The following are examples of uppercase characters:
<p><blockquote><pre>
A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
'&#92;u00C0' '&#92;u00C1' '&#92;u00C2' '&#92;u00C3' '&#92;u00C4' '&#92;u00C5' '&#92;u00C6' '&#92;u00C7'
'&#92;u00C8' '&#92;u00C9' '&#92;u00CA' '&#92;u00CB' '&#92;u00CC' '&#92;u00CD' '&#92;u00CE' '&#92;u00CF'
'&#92;u00D0' '&#92;u00D1' '&#92;u00D2' '&#92;u00D3' '&#92;u00D4' '&#92;u00D5' '&#92;u00D6' '&#92;u00D8'
'&#92;u00D9' '&#92;u00DA' '&#92;u00DB' '&#92;u00DC' '&#92;u00DD' '&#92;u00DE'
</pre></blockquote>
<p> Many other Unicode characters are uppercase too.<p>

<p><b>Note:</b> This method cannot handle <a
href=\"#supplementary\"> supplementary characters</a>. To support
all Unicode characters, including supplementary characters, use
the {@link #isUpperCase(int)} method.

@param   ch   the character to be tested.
@return  <code>true</code> if the character is uppercase;
         <code>false</code> otherwise.
@see     java.lang.Character#isLowerCase(char)
@see     java.lang.Character#isTitleCase(char)
@see     java.lang.Character#toUpperCase(char)
@see     java.lang.Character#getType(char)
@since   1.0"
      end

      operation 6583707 "isUpperCase"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "codePoint" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if the specified character (Unicode code point) is an uppercase character.
<p>
A character is uppercase if its general category type, provided by
{@link Character#getType(int) getType(codePoint)}, is <code>UPPERCASE_LETTER</code>.
<p>
The following are examples of uppercase characters:
<p><blockquote><pre>
A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
'&#92;u00C0' '&#92;u00C1' '&#92;u00C2' '&#92;u00C3' '&#92;u00C4' '&#92;u00C5' '&#92;u00C6' '&#92;u00C7'
'&#92;u00C8' '&#92;u00C9' '&#92;u00CA' '&#92;u00CB' '&#92;u00CC' '&#92;u00CD' '&#92;u00CE' '&#92;u00CF'
'&#92;u00D0' '&#92;u00D1' '&#92;u00D2' '&#92;u00D3' '&#92;u00D4' '&#92;u00D5' '&#92;u00D6' '&#92;u00D8'
'&#92;u00D9' '&#92;u00DA' '&#92;u00DB' '&#92;u00DC' '&#92;u00DD' '&#92;u00DE'
</pre></blockquote>
<p> Many other Unicode characters are uppercase too.<p>

@param   codePoint the character (Unicode code point) to be tested.
@return  <code>true</code> if the character is uppercase;
         <code>false</code> otherwise.
@see     java.lang.Character#isLowerCase(int)
@see     java.lang.Character#isTitleCase(int)
@see     java.lang.Character#toUpperCase(int)
@see     java.lang.Character#getType(int)
@since   1.5"
      end

      operation 6583835 "isTitleCase"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if the specified character is a titlecase character.
<p> 
A character is a titlecase character if its general
category type, provided by <code>Character.getType(ch)</code>,
is <code>TITLECASE_LETTER</code>.
<p>
Some characters look like pairs of Latin letters. For example, there
is an uppercase letter that looks like \"LJ\" and has a corresponding
lowercase letter that looks like \"lj\". A third form, which looks like \"Lj\",
is the appropriate form to use when rendering a word in lowercase
with initial capitals, as for a book title.
<p>
These are some of the Unicode characters for which this method returns
<code>true</code>:
<ul>
<li><code>LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON</code>
<li><code>LATIN CAPITAL LETTER L WITH SMALL LETTER J</code>
<li><code>LATIN CAPITAL LETTER N WITH SMALL LETTER J</code>
<li><code>LATIN CAPITAL LETTER D WITH SMALL LETTER Z</code>
</ul>
<p> Many other Unicode characters are titlecase too.<p>

<p><b>Note:</b> This method cannot handle <a
href=\"#supplementary\"> supplementary characters</a>. To support
all Unicode characters, including supplementary characters, use
the {@link #isTitleCase(int)} method.

@param   ch   the character to be tested.
@return  <code>true</code> if the character is titlecase;
         <code>false</code> otherwise.
@see     java.lang.Character#isLowerCase(char)
@see     java.lang.Character#isUpperCase(char)
@see     java.lang.Character#toTitleCase(char)
@see     java.lang.Character#getType(char)
@since   1.0.2"
      end

      operation 6583963 "isTitleCase"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "codePoint" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if the specified character (Unicode code point) is a titlecase character.
<p> 
A character is a titlecase character if its general
category type, provided by {@link Character#getType(int) getType(codePoint)},
is <code>TITLECASE_LETTER</code>.
<p>
Some characters look like pairs of Latin letters. For example, there
is an uppercase letter that looks like \"LJ\" and has a corresponding
lowercase letter that looks like \"lj\". A third form, which looks like \"Lj\",
is the appropriate form to use when rendering a word in lowercase
with initial capitals, as for a book title.
<p>
These are some of the Unicode characters for which this method returns
<code>true</code>:
<ul>
<li><code>LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON</code>
<li><code>LATIN CAPITAL LETTER L WITH SMALL LETTER J</code>
<li><code>LATIN CAPITAL LETTER N WITH SMALL LETTER J</code>
<li><code>LATIN CAPITAL LETTER D WITH SMALL LETTER Z</code>
</ul>
<p> Many other Unicode characters are titlecase too.<p>

@param   codePoint the character (Unicode code point) to be tested.
@return  <code>true</code> if the character is titlecase;
         <code>false</code> otherwise.
@see     java.lang.Character#isLowerCase(int)
@see     java.lang.Character#isUpperCase(int)
@see     java.lang.Character#toTitleCase(int)
@see     java.lang.Character#getType(int)
@since   1.5"
      end

      operation 6584091 "isDigit"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if the specified character is a digit.
<p>
A character is a digit if its general category type, provided
by <code>Character.getType(ch)</code>, is
<code>DECIMAL_DIGIT_NUMBER</code>.
<p>
Some Unicode character ranges that contain digits:
<ul>
<li><code>'&#92;u0030'</code> through <code>'&#92;u0039'</code>, 
    ISO-LATIN-1 digits (<code>'0'</code> through <code>'9'</code>)
<li><code>'&#92;u0660'</code> through <code>'&#92;u0669'</code>,
    Arabic-Indic digits
<li><code>'&#92;u06F0'</code> through <code>'&#92;u06F9'</code>,
    Extended Arabic-Indic digits
<li><code>'&#92;u0966'</code> through <code>'&#92;u096F'</code>,
    Devanagari digits
<li><code>'&#92;uFF10'</code> through <code>'&#92;uFF19'</code>,
    Fullwidth digits
</ul>

Many other character ranges contain digits as well.

<p><b>Note:</b> This method cannot handle <a
href=\"#supplementary\"> supplementary characters</a>. To support
all Unicode characters, including supplementary characters, use
the {@link #isDigit(int)} method.

@param   ch   the character to be tested.
@return  <code>true</code> if the character is a digit;
         <code>false</code> otherwise.
@see     java.lang.Character#digit(char, int)
@see     java.lang.Character#forDigit(int, int)
@see     java.lang.Character#getType(char)"
      end

      operation 6584219 "isDigit"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "codePoint" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if the specified character (Unicode code point) is a digit.
<p>
A character is a digit if its general category type, provided
by {@link Character#getType(int) getType(codePoint)}, is
<code>DECIMAL_DIGIT_NUMBER</code>.
<p>
Some Unicode character ranges that contain digits:
<ul>
<li><code>'&#92;u0030'</code> through <code>'&#92;u0039'</code>, 
    ISO-LATIN-1 digits (<code>'0'</code> through <code>'9'</code>)
<li><code>'&#92;u0660'</code> through <code>'&#92;u0669'</code>,
    Arabic-Indic digits
<li><code>'&#92;u06F0'</code> through <code>'&#92;u06F9'</code>,
    Extended Arabic-Indic digits
<li><code>'&#92;u0966'</code> through <code>'&#92;u096F'</code>,
    Devanagari digits
<li><code>'&#92;uFF10'</code> through <code>'&#92;uFF19'</code>,
    Fullwidth digits
</ul>

Many other character ranges contain digits as well.

@param   codePoint the character (Unicode code point) to be tested.
@return  <code>true</code> if the character is a digit;
         <code>false</code> otherwise.
@see     java.lang.Character#forDigit(int, int)
@see     java.lang.Character#getType(int)
@since   1.5"
      end

      operation 6584347 "isDefined"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if a character is defined in Unicode.
<p>
A character is defined if at least one of the following is true:
<ul>
<li>It has an entry in the UnicodeData file.
<li>It has a value in a range defined by the UnicodeData file.
</ul>

<p><b>Note:</b> This method cannot handle <a
href=\"#supplementary\"> supplementary characters</a>. To support
all Unicode characters, including supplementary characters, use
the {@link #isDefined(int)} method.

@param   ch   the character to be tested
@return  <code>true</code> if the character has a defined meaning
         in Unicode; <code>false</code> otherwise.
@see     java.lang.Character#isDigit(char)
@see     java.lang.Character#isLetter(char)
@see     java.lang.Character#isLetterOrDigit(char)
@see     java.lang.Character#isLowerCase(char)
@see     java.lang.Character#isTitleCase(char)
@see     java.lang.Character#isUpperCase(char)
@since   1.0.2"
      end

      operation 6584475 "isDefined"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "codePoint" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if a character (Unicode code point) is defined in Unicode.
<p>
A character is defined if at least one of the following is true:
<ul>
<li>It has an entry in the UnicodeData file.
<li>It has a value in a range defined by the UnicodeData file.
</ul>

@param   codePoint the character (Unicode code point) to be tested.
@return  <code>true</code> if the character has a defined meaning
         in Unicode; <code>false</code> otherwise.
@see     java.lang.Character#isDigit(int)
@see     java.lang.Character#isLetter(int)
@see     java.lang.Character#isLetterOrDigit(int)
@see     java.lang.Character#isLowerCase(int)
@see     java.lang.Character#isTitleCase(int)
@see     java.lang.Character#isUpperCase(int)
@since   1.5"
      end

      operation 6584603 "isLetter"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if the specified character is a letter.
<p>
A character is considered to be a letter if its general
category type, provided by <code>Character.getType(ch)</code>,
is any of the following:
<ul>
<li> <code>UPPERCASE_LETTER</code>
<li> <code>LOWERCASE_LETTER</code>
<li> <code>TITLECASE_LETTER</code>
<li> <code>MODIFIER_LETTER</code>
<li> <code>OTHER_LETTER</code>
</ul>

Not all letters have case. Many characters are
letters but are neither uppercase nor lowercase nor titlecase.

<p><b>Note:</b> This method cannot handle <a
href=\"#supplementary\"> supplementary characters</a>. To support
all Unicode characters, including supplementary characters, use
the {@link #isLetter(int)} method.

@param   ch   the character to be tested.
@return  <code>true</code> if the character is a letter;
         <code>false</code> otherwise.
@see     java.lang.Character#isDigit(char)
@see     java.lang.Character#isJavaIdentifierStart(char)
@see     java.lang.Character#isJavaLetter(char)
@see     java.lang.Character#isJavaLetterOrDigit(char)
@see     java.lang.Character#isLetterOrDigit(char)
@see     java.lang.Character#isLowerCase(char)
@see     java.lang.Character#isTitleCase(char)
@see     java.lang.Character#isUnicodeIdentifierStart(char)
@see     java.lang.Character#isUpperCase(char)"
      end

      operation 6584731 "isLetter"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "codePoint" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if the specified character (Unicode code point) is a letter.
<p>
A character is considered to be a letter if its general
category type, provided by {@link Character#getType(int) getType(codePoint)},
is any of the following:
<ul>
<li> <code>UPPERCASE_LETTER</code>
<li> <code>LOWERCASE_LETTER</code>
<li> <code>TITLECASE_LETTER</code>
<li> <code>MODIFIER_LETTER</code>
<li> <code>OTHER_LETTER</code>
</ul>

Not all letters have case. Many characters are
letters but are neither uppercase nor lowercase nor titlecase.

@param   codePoint the character (Unicode code point) to be tested.
@return  <code>true</code> if the character is a letter;
         <code>false</code> otherwise.
@see     java.lang.Character#isDigit(int)
@see     java.lang.Character#isJavaIdentifierStart(int)
@see     java.lang.Character#isLetterOrDigit(int)
@see     java.lang.Character#isLowerCase(int)
@see     java.lang.Character#isTitleCase(int)
@see     java.lang.Character#isUnicodeIdentifierStart(int)
@see     java.lang.Character#isUpperCase(int)
@since   1.5"
      end

      operation 6584859 "isLetterOrDigit"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if the specified character is a letter or digit.
<p>
A character is considered to be a letter or digit if either
<code>Character.isLetter(char ch)</code> or
<code>Character.isDigit(char ch)</code> returns
<code>true</code> for the character.

<p><b>Note:</b> This method cannot handle <a
href=\"#supplementary\"> supplementary characters</a>. To support
all Unicode characters, including supplementary characters, use
the {@link #isLetterOrDigit(int)} method.

@param   ch   the character to be tested.
@return  <code>true</code> if the character is a letter or digit;
         <code>false</code> otherwise.
@see     java.lang.Character#isDigit(char)
@see     java.lang.Character#isJavaIdentifierPart(char)
@see     java.lang.Character#isJavaLetter(char)
@see     java.lang.Character#isJavaLetterOrDigit(char)
@see     java.lang.Character#isLetter(char)
@see     java.lang.Character#isUnicodeIdentifierPart(char)
@since   1.0.2"
      end

      operation 6584987 "isLetterOrDigit"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "codePoint" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if the specified character (Unicode code point) is a letter or digit.
<p>
A character is considered to be a letter or digit if either
{@link #isLetter(int) isLetter(codePoint)} or
{@link #isDigit(int) isDigit(codePoint)} returns
<code>true</code> for the character.

@param   codePoint the character (Unicode code point) to be tested.
@return  <code>true</code> if the character is a letter or digit;
         <code>false</code> otherwise.
@see     java.lang.Character#isDigit(int)
@see     java.lang.Character#isJavaIdentifierPart(int)
@see     java.lang.Character#isLetter(int)
@see     java.lang.Character#isUnicodeIdentifierPart(int)
@since   1.5"
      end

      operation 6585115 "isJavaLetter"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Determines if the specified character is permissible as the first
character in a Java identifier.
<p>
A character may start a Java identifier if and only if
one of the following is true:
<ul>
<li> {@link #isLetter(char) isLetter(ch)} returns <code>true</code>
<li> {@link #getType(char) getType(ch)} returns <code>LETTER_NUMBER</code>
<li> ch is a currency symbol (such as \"$\")
<li> ch is a connecting punctuation character (such as \"_\").
</ul>

@param   ch the character to be tested.
@return  <code>true</code> if the character may start a Java
         identifier; <code>false</code> otherwise.
@see     java.lang.Character#isJavaLetterOrDigit(char)
@see     java.lang.Character#isJavaIdentifierStart(char)
@see     java.lang.Character#isJavaIdentifierPart(char)
@see     java.lang.Character#isLetter(char)
@see     java.lang.Character#isLetterOrDigit(char)
@see     java.lang.Character#isUnicodeIdentifierStart(char)
@since   1.02
@deprecated Replaced by isJavaIdentifierStart(char)."
      end

      operation 6585243 "isJavaLetterOrDigit"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Determines if the specified character may be part of a Java
identifier as other than the first character.
<p>
A character may be part of a Java identifier if and only if any
of the following are true:
<ul>
<li>  it is a letter
<li>  it is a currency symbol (such as <code>'$'</code>)
<li>  it is a connecting punctuation character (such as <code>'_'</code>)
<li>  it is a digit
<li>  it is a numeric letter (such as a Roman numeral character)
<li>  it is a combining mark
<li>  it is a non-spacing mark
<li> <code>isIdentifierIgnorable</code> returns
<code>true</code> for the character.
</ul>

@param   ch the character to be tested.
@return  <code>true</code> if the character may be part of a
         Java identifier; <code>false</code> otherwise.
@see     java.lang.Character#isJavaLetter(char)
@see     java.lang.Character#isJavaIdentifierStart(char)
@see     java.lang.Character#isJavaIdentifierPart(char)
@see     java.lang.Character#isLetter(char)
@see     java.lang.Character#isLetterOrDigit(char)
@see     java.lang.Character#isUnicodeIdentifierPart(char)
@see     java.lang.Character#isIdentifierIgnorable(char)
@since   1.02
@deprecated Replaced by isJavaIdentifierPart(char)."
      end

      operation 6585371 "isJavaIdentifierStart"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if the specified character is
permissible as the first character in a Java identifier.
<p>
A character may start a Java identifier if and only if
one of the following conditions is true:
<ul>
<li> {@link #isLetter(char) isLetter(ch)} returns <code>true</code>
<li> {@link #getType(char) getType(ch)} returns <code>LETTER_NUMBER</code>
<li> ch is a currency symbol (such as \"$\")
<li> ch is a connecting punctuation character (such as \"_\").
</ul>

<p><b>Note:</b> This method cannot handle <a
href=\"#supplementary\"> supplementary characters</a>. To support
all Unicode characters, including supplementary characters, use
the {@link #isJavaIdentifierStart(int)} method.

@param   ch the character to be tested.
@return  <code>true</code> if the character may start a Java identifier;
         <code>false</code> otherwise.
@see     java.lang.Character#isJavaIdentifierPart(char)
@see     java.lang.Character#isLetter(char)
@see     java.lang.Character#isUnicodeIdentifierStart(char)
@since   1.1"
      end

      operation 6585499 "isJavaIdentifierStart"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "codePoint" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if the character (Unicode code point) is
permissible as the first character in a Java identifier.
<p>
A character may start a Java identifier if and only if
one of the following conditions is true:
<ul>
<li> {@link #isLetter(int) isLetter(codePoint)}
     returns <code>true</code>
<li> {@link #getType(int) getType(codePoint)}
     returns <code>LETTER_NUMBER</code>
<li> the referenced character is a currency symbol (such as \"$\")
<li> the referenced character is a connecting punctuation character
     (such as \"_\").
</ul>

@param   codePoint the character (Unicode code point) to be tested.
@return  <code>true</code> if the character may start a Java identifier;
         <code>false</code> otherwise.
@see     java.lang.Character#isJavaIdentifierPart(int)
@see     java.lang.Character#isLetter(int)
@see     java.lang.Character#isUnicodeIdentifierStart(int)
@since   1.5"
      end

      operation 6585627 "isJavaIdentifierPart"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if the specified character may be part of a Java
identifier as other than the first character.
<p>
A character may be part of a Java identifier if any of the following
are true:
<ul>
<li>  it is a letter
<li>  it is a currency symbol (such as <code>'$'</code>)
<li>  it is a connecting punctuation character (such as <code>'_'</code>)
<li>  it is a digit
<li>  it is a numeric letter (such as a Roman numeral character)
<li>  it is a combining mark
<li>  it is a non-spacing mark
<li> <code>isIdentifierIgnorable</code> returns
<code>true</code> for the character
</ul>

<p><b>Note:</b> This method cannot handle <a
href=\"#supplementary\"> supplementary characters</a>. To support
all Unicode characters, including supplementary characters, use
the {@link #isJavaIdentifierPart(int)} method.

@param   ch      the character to be tested.
@return <code>true</code> if the character may be part of a
         Java identifier; <code>false</code> otherwise.
@see     java.lang.Character#isIdentifierIgnorable(char)
@see     java.lang.Character#isJavaIdentifierStart(char)
@see     java.lang.Character#isLetterOrDigit(char)
@see     java.lang.Character#isUnicodeIdentifierPart(char)
@since   1.1"
      end

      operation 6585755 "isJavaIdentifierPart"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "codePoint" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if the character (Unicode code point) may be part of a Java
identifier as other than the first character.
<p>
A character may be part of a Java identifier if any of the following
are true:
<ul>
<li>  it is a letter
<li>  it is a currency symbol (such as <code>'$'</code>)
<li>  it is a connecting punctuation character (such as <code>'_'</code>)
<li>  it is a digit
<li>  it is a numeric letter (such as a Roman numeral character)
<li>  it is a combining mark
<li>  it is a non-spacing mark
<li> {@link #isIdentifierIgnorable(int)
isIdentifierIgnorable(codePoint)} returns <code>true</code> for
the character
</ul>

@param   codePoint the character (Unicode code point) to be tested.
@return <code>true</code> if the character may be part of a
         Java identifier; <code>false</code> otherwise.
@see     java.lang.Character#isIdentifierIgnorable(int)
@see     java.lang.Character#isJavaIdentifierStart(int)
@see     java.lang.Character#isLetterOrDigit(int)
@see     java.lang.Character#isUnicodeIdentifierPart(int)
@since   1.5"
      end

      operation 6585883 "isUnicodeIdentifierStart"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if the specified character is permissible as the
first character in a Unicode identifier.
<p>
A character may start a Unicode identifier if and only if
one of the following conditions is true:
<ul>
<li> {@link #isLetter(char) isLetter(ch)} returns <code>true</code>
<li> {@link #getType(char) getType(ch)} returns 
     <code>LETTER_NUMBER</code>.
</ul>

<p><b>Note:</b> This method cannot handle <a
href=\"#supplementary\"> supplementary characters</a>. To support
all Unicode characters, including supplementary characters, use
the {@link #isUnicodeIdentifierStart(int)} method.

@param   ch      the character to be tested.
@return  <code>true</code> if the character may start a Unicode 
         identifier; <code>false</code> otherwise.
@see     java.lang.Character#isJavaIdentifierStart(char)
@see     java.lang.Character#isLetter(char)
@see     java.lang.Character#isUnicodeIdentifierPart(char)
@since   1.1"
      end

      operation 6586011 "isUnicodeIdentifierStart"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "codePoint" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if the specified character (Unicode code point) is permissible as the
first character in a Unicode identifier.
<p>
A character may start a Unicode identifier if and only if
one of the following conditions is true:
<ul>
<li> {@link #isLetter(int) isLetter(codePoint)}
     returns <code>true</code>
<li> {@link #getType(int) getType(codePoint)}
     returns <code>LETTER_NUMBER</code>.
</ul>
@param   codePoint the character (Unicode code point) to be tested.
@return  <code>true</code> if the character may start a Unicode 
         identifier; <code>false</code> otherwise.
@see     java.lang.Character#isJavaIdentifierStart(int)
@see     java.lang.Character#isLetter(int)
@see     java.lang.Character#isUnicodeIdentifierPart(int)
@since   1.5"
      end

      operation 6586139 "isUnicodeIdentifierPart"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if the specified character may be part of a Unicode
identifier as other than the first character.
<p>
A character may be part of a Unicode identifier if and only if
one of the following statements is true:
<ul>
<li>  it is a letter
<li>  it is a connecting punctuation character (such as <code>'_'</code>)
<li>  it is a digit
<li>  it is a numeric letter (such as a Roman numeral character)
<li>  it is a combining mark
<li>  it is a non-spacing mark
<li> <code>isIdentifierIgnorable</code> returns
<code>true</code> for this character.
</ul>

<p><b>Note:</b> This method cannot handle <a
href=\"#supplementary\"> supplementary characters</a>. To support
all Unicode characters, including supplementary characters, use
the {@link #isUnicodeIdentifierPart(int)} method.

@param   ch      the character to be tested.
@return  <code>true</code> if the character may be part of a 
         Unicode identifier; <code>false</code> otherwise.
@see     java.lang.Character#isIdentifierIgnorable(char)
@see     java.lang.Character#isJavaIdentifierPart(char)
@see     java.lang.Character#isLetterOrDigit(char)
@see     java.lang.Character#isUnicodeIdentifierStart(char)
@since   1.1"
      end

      operation 6586267 "isUnicodeIdentifierPart"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "codePoint" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if the specified character (Unicode code point) may be part of a Unicode
identifier as other than the first character.
<p>
A character may be part of a Unicode identifier if and only if
one of the following statements is true:
<ul>
<li>  it is a letter
<li>  it is a connecting punctuation character (such as <code>'_'</code>)
<li>  it is a digit
<li>  it is a numeric letter (such as a Roman numeral character)
<li>  it is a combining mark
<li>  it is a non-spacing mark
<li> <code>isIdentifierIgnorable</code> returns
<code>true</code> for this character.
</ul>
@param   codePoint the character (Unicode code point) to be tested.
@return  <code>true</code> if the character may be part of a 
         Unicode identifier; <code>false</code> otherwise.
@see     java.lang.Character#isIdentifierIgnorable(int)
@see     java.lang.Character#isJavaIdentifierPart(int)
@see     java.lang.Character#isLetterOrDigit(int)
@see     java.lang.Character#isUnicodeIdentifierStart(int)
@since   1.5"
      end

      operation 6586395 "isIdentifierIgnorable"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if the specified character should be regarded as
an ignorable character in a Java identifier or a Unicode identifier.
<p>
The following Unicode characters are ignorable in a Java identifier
or a Unicode identifier:
<ul>
<li>ISO control characters that are not whitespace
<ul>
<li><code>'&#92;u0000'</code> through <code>'&#92;u0008'</code>
<li><code>'&#92;u000E'</code> through <code>'&#92;u001B'</code>
<li><code>'&#92;u007F'</code> through <code>'&#92;u009F'</code>
</ul>

<li>all characters that have the <code>FORMAT</code> general
category value
</ul>

<p><b>Note:</b> This method cannot handle <a
href=\"#supplementary\"> supplementary characters</a>. To support
all Unicode characters, including supplementary characters, use
the {@link #isIdentifierIgnorable(int)} method.

@param   ch      the character to be tested.
@return  <code>true</code> if the character is an ignorable control 
         character that may be part of a Java or Unicode identifier;
          <code>false</code> otherwise.
@see     java.lang.Character#isJavaIdentifierPart(char)
@see     java.lang.Character#isUnicodeIdentifierPart(char)
@since   1.1"
      end

      operation 6586523 "isIdentifierIgnorable"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "codePoint" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if the specified character (Unicode code point) should be regarded as
an ignorable character in a Java identifier or a Unicode identifier.
<p>
The following Unicode characters are ignorable in a Java identifier
or a Unicode identifier:
<ul>
<li>ISO control characters that are not whitespace
<ul>
<li><code>'&#92;u0000'</code> through <code>'&#92;u0008'</code>
<li><code>'&#92;u000E'</code> through <code>'&#92;u001B'</code>
<li><code>'&#92;u007F'</code> through <code>'&#92;u009F'</code>
</ul>

<li>all characters that have the <code>FORMAT</code> general
category value
</ul>

@param   codePoint the character (Unicode code point) to be tested.
@return  <code>true</code> if the character is an ignorable control 
         character that may be part of a Java or Unicode identifier;
         <code>false</code> otherwise.
@see     java.lang.Character#isJavaIdentifierPart(int)
@see     java.lang.Character#isUnicodeIdentifierPart(int)
@since   1.5"
      end

      operation 6586651 "toLowerCase"
	class_operation public explicit_return_type "char"
	nparams 1
	  param in name "ch" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts the character argument to lowercase using case
mapping information from the UnicodeData file.
<p>
Note that
<code>Character.isLowerCase(Character.toLowerCase(ch))</code>
does not always return <code>true</code> for some ranges of
characters, particularly those that are symbols or ideographs.

<p>In general, {@link java.lang.String#toLowerCase()} should be used to map
characters to lowercase. <code>String</code> case mapping methods
have several benefits over <code>Character</code> case mapping methods.
<code>String</code> case mapping methods can perform locale-sensitive
mappings, context-sensitive mappings, and 1:M character mappings, whereas
the <code>Character</code> case mapping methods cannot.

<p><b>Note:</b> This method cannot handle <a
href=\"#supplementary\"> supplementary characters</a>. To support
all Unicode characters, including supplementary characters, use
the {@link #toLowerCase(int)} method.

@param   ch   the character to be converted.
@return  the lowercase equivalent of the character, if any;
         otherwise, the character itself.
@see     java.lang.Character#isLowerCase(char)
@see     java.lang.String#toLowerCase()"
      end

      operation 6586779 "toLowerCase"
	class_operation public explicit_return_type "int"
	nparams 1
	  param in name "codePoint" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts the character (Unicode code point) argument to
lowercase using case mapping information from the UnicodeData
file.

<p> Note that
<code>Character.isLowerCase(Character.toLowerCase(codePoint))</code>
does not always return <code>true</code> for some ranges of
characters, particularly those that are symbols or ideographs.

<p>In general, {@link java.lang.String#toLowerCase()} should be used to map
characters to lowercase. <code>String</code> case mapping methods
have several benefits over <code>Character</code> case mapping methods.
<code>String</code> case mapping methods can perform locale-sensitive
mappings, context-sensitive mappings, and 1:M character mappings, whereas
the <code>Character</code> case mapping methods cannot.

@param   codePoint   the character (Unicode code point) to be converted.
@return  the lowercase equivalent of the character (Unicode code
         point), if any; otherwise, the character itself.
@see     java.lang.Character#isLowerCase(int)
@see     java.lang.String#toLowerCase()

@since   1.5"
      end

      operation 6586907 "toUpperCase"
	class_operation public explicit_return_type "char"
	nparams 1
	  param in name "ch" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts the character argument to uppercase using case mapping
information from the UnicodeData file.
<p>
Note that
<code>Character.isUpperCase(Character.toUpperCase(ch))</code>
does not always return <code>true</code> for some ranges of
characters, particularly those that are symbols or ideographs.

<p>In general, {@link java.lang.String#toUpperCase()} should be used to map
characters to uppercase. <code>String</code> case mapping methods
have several benefits over <code>Character</code> case mapping methods.
<code>String</code> case mapping methods can perform locale-sensitive
mappings, context-sensitive mappings, and 1:M character mappings, whereas
the <code>Character</code> case mapping methods cannot.

<p><b>Note:</b> This method cannot handle <a
href=\"#supplementary\"> supplementary characters</a>. To support
all Unicode characters, including supplementary characters, use
the {@link #toUpperCase(int)} method.

@param   ch   the character to be converted.
@return  the uppercase equivalent of the character, if any;
         otherwise, the character itself.
@see     java.lang.Character#isUpperCase(char)
@see     java.lang.String#toUpperCase()"
      end

      operation 6587035 "toUpperCase"
	class_operation public explicit_return_type "int"
	nparams 1
	  param in name "codePoint" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts the character (Unicode code point) argument to
uppercase using case mapping information from the UnicodeData
file.

<p>Note that
<code>Character.isUpperCase(Character.toUpperCase(codePoint))</code>
does not always return <code>true</code> for some ranges of
characters, particularly those that are symbols or ideographs.

<p>In general, {@link java.lang.String#toUpperCase()} should be used to map
characters to uppercase. <code>String</code> case mapping methods
have several benefits over <code>Character</code> case mapping methods.
<code>String</code> case mapping methods can perform locale-sensitive
mappings, context-sensitive mappings, and 1:M character mappings, whereas
the <code>Character</code> case mapping methods cannot.

@param   codePoint   the character (Unicode code point) to be converted.
@return  the uppercase equivalent of the character, if any;
         otherwise, the character itself.
@see     java.lang.Character#isUpperCase(int)
@see     java.lang.String#toUpperCase()

@since   1.5"
      end

      operation 6587163 "toTitleCase"
	class_operation public explicit_return_type "char"
	nparams 1
	  param in name "ch" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts the character argument to titlecase using case mapping
information from the UnicodeData file. If a character has no
explicit titlecase mapping and is not itself a titlecase char
according to UnicodeData, then the uppercase mapping is
returned as an equivalent titlecase mapping. If the
<code>char</code> argument is already a titlecase
<code>char</code>, the same <code>char</code> value will be
returned.
<p>
Note that
<code>Character.isTitleCase(Character.toTitleCase(ch))</code>
does not always return <code>true</code> for some ranges of
characters.

<p><b>Note:</b> This method cannot handle <a
href=\"#supplementary\"> supplementary characters</a>. To support
all Unicode characters, including supplementary characters, use
the {@link #toTitleCase(int)} method.

@param   ch   the character to be converted.
@return  the titlecase equivalent of the character, if any;
         otherwise, the character itself.
@see     java.lang.Character#isTitleCase(char)
@see     java.lang.Character#toLowerCase(char)
@see     java.lang.Character#toUpperCase(char)
@since   1.0.2"
      end

      operation 6587291 "toTitleCase"
	class_operation public explicit_return_type "int"
	nparams 1
	  param in name "codePoint" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts the character (Unicode code point) argument to titlecase using case mapping
information from the UnicodeData file. If a character has no
explicit titlecase mapping and is not itself a titlecase char
according to UnicodeData, then the uppercase mapping is
returned as an equivalent titlecase mapping. If the
character argument is already a titlecase
character, the same character value will be
returned.

<p>Note that
<code>Character.isTitleCase(Character.toTitleCase(codePoint))</code>
does not always return <code>true</code> for some ranges of
characters.

@param   codePoint   the character (Unicode code point) to be converted.
@return  the titlecase equivalent of the character, if any;
         otherwise, the character itself.
@see     java.lang.Character#isTitleCase(int)
@see     java.lang.Character#toLowerCase(int)
@see     java.lang.Character#toUpperCase(int)
@since   1.5"
      end

      operation 6587419 "digit"
	class_operation public explicit_return_type "int"
	nparams 2
	  param in name "ch" explicit_type "char"
	  param in name "radix" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the numeric value of the character <code>ch</code> in the
specified radix.
<p>
If the radix is not in the range <code>MIN_RADIX</code>&nbsp;&lt;=
<code>radix</code>&nbsp;&lt;= <code>MAX_RADIX</code> or if the
value of <code>ch</code> is not a valid digit in the specified
radix, <code>-1</code> is returned. A character is a valid digit
if at least one of the following is true:
<ul>
<li>The method <code>isDigit</code> is <code>true</code> of the character
    and the Unicode decimal digit value of the character (or its
    single-character decomposition) is less than the specified radix.
    In this case the decimal digit value is returned.
<li>The character is one of the uppercase Latin letters
    <code>'A'</code> through <code>'Z'</code> and its code is less than
    <code>radix&nbsp;+ 'A'&nbsp;-&nbsp;10</code>.
    In this case, <code>ch&nbsp;- 'A'&nbsp;+&nbsp;10</code>
    is returned.
<li>The character is one of the lowercase Latin letters
    <code>'a'</code> through <code>'z'</code> and its code is less than
    <code>radix&nbsp;+ 'a'&nbsp;-&nbsp;10</code>.
    In this case, <code>ch&nbsp;- 'a'&nbsp;+&nbsp;10</code>
    is returned.
</ul>

<p><b>Note:</b> This method cannot handle <a
href=\"#supplementary\"> supplementary characters</a>. To support
all Unicode characters, including supplementary characters, use
the {@link #digit(int, int)} method.

@param   ch      the character to be converted.
@param   radix   the radix.
@return  the numeric value represented by the character in the
         specified radix.
@see     java.lang.Character#forDigit(int, int)
@see     java.lang.Character#isDigit(char)"
      end

      operation 6587547 "digit"
	class_operation public explicit_return_type "int"
	nparams 2
	  param in name "codePoint" explicit_type "int"
	  param in name "radix" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the numeric value of the specified character (Unicode
code point) in the specified radix.

<p>If the radix is not in the range <code>MIN_RADIX</code>&nbsp;&lt;=
<code>radix</code>&nbsp;&lt;= <code>MAX_RADIX</code> or if the
character is not a valid digit in the specified
radix, <code>-1</code> is returned. A character is a valid digit
if at least one of the following is true:
<ul>
<li>The method {@link #isDigit(int) isDigit(codePoint)} is <code>true</code> of the character
    and the Unicode decimal digit value of the character (or its
    single-character decomposition) is less than the specified radix.
    In this case the decimal digit value is returned.
<li>The character is one of the uppercase Latin letters
    <code>'A'</code> through <code>'Z'</code> and its code is less than
    <code>radix&nbsp;+ 'A'&nbsp;-&nbsp;10</code>.
    In this case, <code>ch&nbsp;- 'A'&nbsp;+&nbsp;10</code>
    is returned.
<li>The character is one of the lowercase Latin letters
    <code>'a'</code> through <code>'z'</code> and its code is less than
    <code>radix&nbsp;+ 'a'&nbsp;-&nbsp;10</code>.
    In this case, <code>ch&nbsp;- 'a'&nbsp;+&nbsp;10</code>
    is returned.
</ul>

@param   codePoint the character (Unicode code point) to be converted.
@param   radix   the radix.
@return  the numeric value represented by the character in the
         specified radix.
@see     java.lang.Character#forDigit(int, int)
@see     java.lang.Character#isDigit(int)
@since   1.5"
      end

      operation 6587675 "getNumericValue"
	class_operation public explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>int</code> value that the specified Unicode
character represents. For example, the character
<code>'&#92;u216C'</code> (the roman numeral fifty) will return
an int with a value of 50.
<p>
The letters A-Z in their uppercase (<code>'&#92;u0041'</code> through
<code>'&#92;u005A'</code>), lowercase
(<code>'&#92;u0061'</code> through <code>'&#92;u007A'</code>), and
full width variant (<code>'&#92;uFF21'</code> through
<code>'&#92;uFF3A'</code> and <code>'&#92;uFF41'</code> through
<code>'&#92;uFF5A'</code>) forms have numeric values from 10
through 35. This is independent of the Unicode specification,
which does not assign numeric values to these <code>char</code>
values.
<p>
If the character does not have a numeric value, then -1 is returned.
If the character has a numeric value that cannot be represented as a
nonnegative integer (for example, a fractional value), then -2
is returned.

<p><b>Note:</b> This method cannot handle <a
href=\"#supplementary\"> supplementary characters</a>. To support
all Unicode characters, including supplementary characters, use
the {@link #getNumericValue(int)} method.

@param   ch      the character to be converted.
@return  the numeric value of the character, as a nonnegative <code>int</code>
          value; -2 if the character has a numeric value that is not a
         nonnegative integer; -1 if the character has no numeric value.
@see     java.lang.Character#forDigit(int, int)
@see     java.lang.Character#isDigit(char)
@since   1.1"
      end

      operation 6587803 "getNumericValue"
	class_operation public explicit_return_type "int"
	nparams 1
	  param in name "codePoint" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>int</code> value that the specified 
character (Unicode code point) represents. For example, the character
<code>'&#92;u216C'</code> (the Roman numeral fifty) will return
an <code>int</code> with a value of 50.
<p>
The letters A-Z in their uppercase (<code>'&#92;u0041'</code> through
<code>'&#92;u005A'</code>), lowercase
(<code>'&#92;u0061'</code> through <code>'&#92;u007A'</code>), and
full width variant (<code>'&#92;uFF21'</code> through
<code>'&#92;uFF3A'</code> and <code>'&#92;uFF41'</code> through
<code>'&#92;uFF5A'</code>) forms have numeric values from 10
through 35. This is independent of the Unicode specification,
which does not assign numeric values to these <code>char</code>
values.
<p>
If the character does not have a numeric value, then -1 is returned.
If the character has a numeric value that cannot be represented as a
nonnegative integer (for example, a fractional value), then -2
is returned.

@param   codePoint the character (Unicode code point) to be converted.
@return  the numeric value of the character, as a nonnegative <code>int</code>
         value; -2 if the character has a numeric value that is not a
         nonnegative integer; -1 if the character has no numeric value.
@see     java.lang.Character#forDigit(int, int)
@see     java.lang.Character#isDigit(int)
@since   1.5"
      end

      operation 6587931 "isSpace"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Determines if the specified character is ISO-LATIN-1 white space.
This method returns <code>true</code> for the following five
characters only:
<table>
<tr><td><code>'\\t'</code></td>            <td><code>'&#92;u0009'</code></td>
    <td><code>HORIZONTAL TABULATION</code></td></tr>
<tr><td><code>'\\n'</code></td>            <td><code>'&#92;u000A'</code></td>
    <td><code>NEW LINE</code></td></tr>
<tr><td><code>'\\f'</code></td>            <td><code>'&#92;u000C'</code></td>
    <td><code>FORM FEED</code></td></tr>
<tr><td><code>'\\r'</code></td>            <td><code>'&#92;u000D'</code></td>
    <td><code>CARRIAGE RETURN</code></td></tr>
<tr><td><code>'&nbsp;'</code></td>  <td><code>'&#92;u0020'</code></td>
    <td><code>SPACE</code></td></tr>
</table>

@param      ch   the character to be tested.
@return     <code>true</code> if the character is ISO-LATIN-1 white
            space; <code>false</code> otherwise.
@see        java.lang.Character#isSpaceChar(char)
@see        java.lang.Character#isWhitespace(char)
@deprecated Replaced by isWhitespace(char)."
      end

      operation 6588059 "isSpaceChar"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if the specified character is a Unicode space character.
A character is considered to be a space character if and only if
it is specified to be a space character by the Unicode standard. This
method returns true if the character's general category type is any of
the following:
<ul>
<li> <code>SPACE_SEPARATOR</code>
<li> <code>LINE_SEPARATOR</code>
<li> <code>PARAGRAPH_SEPARATOR</code>
</ul>

<p><b>Note:</b> This method cannot handle <a
href=\"#supplementary\"> supplementary characters</a>. To support
all Unicode characters, including supplementary characters, use
the {@link #isSpaceChar(int)} method.

@param   ch      the character to be tested.
@return  <code>true</code> if the character is a space character; 
         <code>false</code> otherwise.
@see     java.lang.Character#isWhitespace(char)
@since   1.1"
      end

      operation 6588187 "isSpaceChar"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "codePoint" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if the specified character (Unicode code point) is a
Unicode space character.  A character is considered to be a
space character if and only if it is specified to be a space
character by the Unicode standard. This method returns true if
the character's general category type is any of the following:

<ul>
<li> {@link #SPACE_SEPARATOR}
<li> {@link #LINE_SEPARATOR}
<li> {@link #PARAGRAPH_SEPARATOR}
</ul>

@param   codePoint the character (Unicode code point) to be tested.
@return  <code>true</code> if the character is a space character; 
         <code>false</code> otherwise.
@see     java.lang.Character#isWhitespace(int)
@since   1.5"
      end

      operation 6588315 "isWhitespace"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if the specified character is white space according to Java.
A character is a Java whitespace character if and only if it satisfies
one of the following criteria:
<ul>
<li> It is a Unicode space character (<code>SPACE_SEPARATOR</code>,
     <code>LINE_SEPARATOR</code>, or <code>PARAGRAPH_SEPARATOR</code>) 
     but is not also a non-breaking space (<code>'&#92;u00A0'</code>,
     <code>'&#92;u2007'</code>, <code>'&#92;u202F'</code>).
<li> It is <code>'&#92;u0009'</code>, HORIZONTAL TABULATION.
<li> It is <code>'&#92;u000A'</code>, LINE FEED.
<li> It is <code>'&#92;u000B'</code>, VERTICAL TABULATION.
<li> It is <code>'&#92;u000C'</code>, FORM FEED.
<li> It is <code>'&#92;u000D'</code>, CARRIAGE RETURN.
<li> It is <code>'&#92;u001C'</code>, FILE SEPARATOR.
<li> It is <code>'&#92;u001D'</code>, GROUP SEPARATOR.
<li> It is <code>'&#92;u001E'</code>, RECORD SEPARATOR.
<li> It is <code>'&#92;u001F'</code>, UNIT SEPARATOR.
</ul>

<p><b>Note:</b> This method cannot handle <a
href=\"#supplementary\"> supplementary characters</a>. To support
all Unicode characters, including supplementary characters, use
the {@link #isWhitespace(int)} method.

@param   ch the character to be tested.
@return  <code>true</code> if the character is a Java whitespace
         character; <code>false</code> otherwise.
@see     java.lang.Character#isSpaceChar(char)
@since   1.1"
      end

      operation 6588443 "isWhitespace"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "codePoint" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if the specified character (Unicode code point) is
white space according to Java.  A character is a Java
whitespace character if and only if it satisfies one of the
following criteria:
<ul>
<li> It is a Unicode space character ({@link #SPACE_SEPARATOR},
     {@link #LINE_SEPARATOR}, or {@link #PARAGRAPH_SEPARATOR}) 
     but is not also a non-breaking space (<code>'&#92;u00A0'</code>,
     <code>'&#92;u2007'</code>, <code>'&#92;u202F'</code>).
<li> It is <code>'&#92;u0009'</code>, HORIZONTAL TABULATION.
<li> It is <code>'&#92;u000A'</code>, LINE FEED.
<li> It is <code>'&#92;u000B'</code>, VERTICAL TABULATION.
<li> It is <code>'&#92;u000C'</code>, FORM FEED.
<li> It is <code>'&#92;u000D'</code>, CARRIAGE RETURN.
<li> It is <code>'&#92;u001C'</code>, FILE SEPARATOR.
<li> It is <code>'&#92;u001D'</code>, GROUP SEPARATOR.
<li> It is <code>'&#92;u001E'</code>, RECORD SEPARATOR.
<li> It is <code>'&#92;u001F'</code>, UNIT SEPARATOR.
</ul>
<p>

@param   codePoint the character (Unicode code point) to be tested.
@return  <code>true</code> if the character is a Java whitespace
         character; <code>false</code> otherwise.
@see     java.lang.Character#isSpaceChar(int)
@since   1.5"
      end

      operation 6588571 "isISOControl"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if the specified character is an ISO control
character.  A character is considered to be an ISO control
character if its code is in the range <code>'&#92;u0000'</code>
through <code>'&#92;u001F'</code> or in the range
<code>'&#92;u007F'</code> through <code>'&#92;u009F'</code>.

<p><b>Note:</b> This method cannot handle <a
href=\"#supplementary\"> supplementary characters</a>. To support
all Unicode characters, including supplementary characters, use
the {@link #isISOControl(int)} method.

@param   ch      the character to be tested.
@return  <code>true</code> if the character is an ISO control character;
         <code>false</code> otherwise.

@see     java.lang.Character#isSpaceChar(char)
@see     java.lang.Character#isWhitespace(char)
@since   1.1"
      end

      operation 6588699 "isISOControl"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "codePoint" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if the referenced character (Unicode code point) is an ISO control
character.  A character is considered to be an ISO control
character if its code is in the range <code>'&#92;u0000'</code>
through <code>'&#92;u001F'</code> or in the range
<code>'&#92;u007F'</code> through <code>'&#92;u009F'</code>.

@param   codePoint the character (Unicode code point) to be tested.
@return  <code>true</code> if the character is an ISO control character;
         <code>false</code> otherwise.
@see     java.lang.Character#isSpaceChar(int)
@see     java.lang.Character#isWhitespace(int)
@since   1.5"
      end

      operation 6588827 "getType"
	class_operation public explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a value indicating a character's general category.

<p><b>Note:</b> This method cannot handle <a
href=\"#supplementary\"> supplementary characters</a>. To support
all Unicode characters, including supplementary characters, use
the {@link #getType(int)} method.

@param   ch      the character to be tested.
@return  a value of type <code>int</code> representing the 
         character's general category.
@see     java.lang.Character#COMBINING_SPACING_MARK
@see     java.lang.Character#CONNECTOR_PUNCTUATION
@see     java.lang.Character#CONTROL
@see     java.lang.Character#CURRENCY_SYMBOL
@see     java.lang.Character#DASH_PUNCTUATION
@see     java.lang.Character#DECIMAL_DIGIT_NUMBER
@see     java.lang.Character#ENCLOSING_MARK
@see     java.lang.Character#END_PUNCTUATION
@see     java.lang.Character#FINAL_QUOTE_PUNCTUATION
@see     java.lang.Character#FORMAT
@see     java.lang.Character#INITIAL_QUOTE_PUNCTUATION
@see     java.lang.Character#LETTER_NUMBER
@see     java.lang.Character#LINE_SEPARATOR
@see     java.lang.Character#LOWERCASE_LETTER
@see     java.lang.Character#MATH_SYMBOL
@see     java.lang.Character#MODIFIER_LETTER
@see     java.lang.Character#MODIFIER_SYMBOL
@see     java.lang.Character#NON_SPACING_MARK
@see     java.lang.Character#OTHER_LETTER
@see     java.lang.Character#OTHER_NUMBER
@see     java.lang.Character#OTHER_PUNCTUATION
@see     java.lang.Character#OTHER_SYMBOL
@see     java.lang.Character#PARAGRAPH_SEPARATOR
@see     java.lang.Character#PRIVATE_USE
@see     java.lang.Character#SPACE_SEPARATOR
@see     java.lang.Character#START_PUNCTUATION
@see     java.lang.Character#SURROGATE
@see     java.lang.Character#TITLECASE_LETTER
@see     java.lang.Character#UNASSIGNED
@see     java.lang.Character#UPPERCASE_LETTER
@since   1.1"
      end

      operation 6588955 "getType"
	class_operation public explicit_return_type "int"
	nparams 1
	  param in name "codePoint" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a value indicating a character's general category.

@param   codePoint the character (Unicode code point) to be tested.
@return  a value of type <code>int</code> representing the 
         character's general category.
@see     Character#COMBINING_SPACING_MARK COMBINING_SPACING_MARK
@see     Character#CONNECTOR_PUNCTUATION CONNECTOR_PUNCTUATION
@see     Character#CONTROL CONTROL
@see     Character#CURRENCY_SYMBOL CURRENCY_SYMBOL
@see     Character#DASH_PUNCTUATION DASH_PUNCTUATION
@see     Character#DECIMAL_DIGIT_NUMBER DECIMAL_DIGIT_NUMBER
@see     Character#ENCLOSING_MARK ENCLOSING_MARK
@see     Character#END_PUNCTUATION END_PUNCTUATION
@see     Character#FINAL_QUOTE_PUNCTUATION FINAL_QUOTE_PUNCTUATION
@see     Character#FORMAT FORMAT
@see     Character#INITIAL_QUOTE_PUNCTUATION INITIAL_QUOTE_PUNCTUATION
@see     Character#LETTER_NUMBER LETTER_NUMBER
@see     Character#LINE_SEPARATOR LINE_SEPARATOR
@see     Character#LOWERCASE_LETTER LOWERCASE_LETTER
@see     Character#MATH_SYMBOL MATH_SYMBOL
@see     Character#MODIFIER_LETTER MODIFIER_LETTER
@see     Character#MODIFIER_SYMBOL MODIFIER_SYMBOL
@see     Character#NON_SPACING_MARK NON_SPACING_MARK
@see     Character#OTHER_LETTER OTHER_LETTER
@see     Character#OTHER_NUMBER OTHER_NUMBER
@see     Character#OTHER_PUNCTUATION OTHER_PUNCTUATION
@see     Character#OTHER_SYMBOL OTHER_SYMBOL
@see     Character#PARAGRAPH_SEPARATOR PARAGRAPH_SEPARATOR
@see     Character#PRIVATE_USE PRIVATE_USE
@see     Character#SPACE_SEPARATOR SPACE_SEPARATOR
@see     Character#START_PUNCTUATION START_PUNCTUATION
@see     Character#SURROGATE SURROGATE
@see     Character#TITLECASE_LETTER TITLECASE_LETTER
@see     Character#UNASSIGNED UNASSIGNED
@see     Character#UPPERCASE_LETTER UPPERCASE_LETTER
@since   1.5"
      end

      operation 6589083 "forDigit"
	class_operation public explicit_return_type "char"
	nparams 2
	  param in name "digit" explicit_type "int"
	  param in name "radix" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines the character representation for a specific digit in
the specified radix. If the value of <code>radix</code> is not a
valid radix, or the value of <code>digit</code> is not a valid
digit in the specified radix, the null character
(<code>'&#92;u0000'</code>) is returned.
<p>
The <code>radix</code> argument is valid if it is greater than or
equal to <code>MIN_RADIX</code> and less than or equal to
<code>MAX_RADIX</code>. The <code>digit</code> argument is valid if
<code>0&nbsp;&lt;=digit&nbsp;&lt;&nbsp;radix</code>.
<p>
If the digit is less than 10, then
<code>'0'&nbsp;+ digit</code> is returned. Otherwise, the value
<code>'a'&nbsp;+ digit&nbsp;-&nbsp;10</code> is returned.

@param   digit   the number to convert to a character.
@param   radix   the radix.
@return  the <code>char</code> representation of the specified digit
         in the specified radix.
@see     java.lang.Character#MIN_RADIX
@see     java.lang.Character#MAX_RADIX
@see     java.lang.Character#digit(char, int)"
      end

      operation 6589211 "getDirectionality"
	class_operation public explicit_return_type "byte"
	nparams 1
	  param in name "ch" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Unicode directionality property for the given
character.  Character directionality is used to calculate the
visual ordering of text. The directionality value of undefined
<code>char</code> values is <code>DIRECTIONALITY_UNDEFINED</code>.

<p><b>Note:</b> This method cannot handle <a
href=\"#supplementary\"> supplementary characters</a>. To support
all Unicode characters, including supplementary characters, use
the {@link #getDirectionality(int)} method.

@param  ch <code>char</code> for which the directionality property 
           is requested.
@return the directionality property of the <code>char</code> value.

@see Character#DIRECTIONALITY_UNDEFINED
@see Character#DIRECTIONALITY_LEFT_TO_RIGHT
@see Character#DIRECTIONALITY_RIGHT_TO_LEFT
@see Character#DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC
@see Character#DIRECTIONALITY_EUROPEAN_NUMBER
@see Character#DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR
@see Character#DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR
@see Character#DIRECTIONALITY_ARABIC_NUMBER
@see Character#DIRECTIONALITY_COMMON_NUMBER_SEPARATOR
@see Character#DIRECTIONALITY_NONSPACING_MARK
@see Character#DIRECTIONALITY_BOUNDARY_NEUTRAL
@see Character#DIRECTIONALITY_PARAGRAPH_SEPARATOR
@see Character#DIRECTIONALITY_SEGMENT_SEPARATOR
@see Character#DIRECTIONALITY_WHITESPACE
@see Character#DIRECTIONALITY_OTHER_NEUTRALS
@see Character#DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING
@see Character#DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE
@see Character#DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING
@see Character#DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE
@see Character#DIRECTIONALITY_POP_DIRECTIONAL_FORMAT
@since 1.4"
      end

      operation 6589339 "getDirectionality"
	class_operation public explicit_return_type "byte"
	nparams 1
	  param in name "codePoint" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Unicode directionality property for the given
character (Unicode code point).  Character directionality is
used to calculate the visual ordering of text. The
directionality value of undefined character is {@link
#DIRECTIONALITY_UNDEFINED}.

@param   codePoint the character (Unicode code point) for which
         the directionality property * is requested.
@return the directionality property of the character.

@see Character#DIRECTIONALITY_UNDEFINED DIRECTIONALITY_UNDEFINED
@see Character#DIRECTIONALITY_LEFT_TO_RIGHT DIRECTIONALITY_LEFT_TO_RIGHT
@see Character#DIRECTIONALITY_RIGHT_TO_LEFT DIRECTIONALITY_RIGHT_TO_LEFT
@see Character#DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC
@see Character#DIRECTIONALITY_EUROPEAN_NUMBER DIRECTIONALITY_EUROPEAN_NUMBER
@see Character#DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR
@see Character#DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR
@see Character#DIRECTIONALITY_ARABIC_NUMBER DIRECTIONALITY_ARABIC_NUMBER
@see Character#DIRECTIONALITY_COMMON_NUMBER_SEPARATOR DIRECTIONALITY_COMMON_NUMBER_SEPARATOR
@see Character#DIRECTIONALITY_NONSPACING_MARK DIRECTIONALITY_NONSPACING_MARK
@see Character#DIRECTIONALITY_BOUNDARY_NEUTRAL DIRECTIONALITY_BOUNDARY_NEUTRAL
@see Character#DIRECTIONALITY_PARAGRAPH_SEPARATOR DIRECTIONALITY_PARAGRAPH_SEPARATOR
@see Character#DIRECTIONALITY_SEGMENT_SEPARATOR DIRECTIONALITY_SEGMENT_SEPARATOR
@see Character#DIRECTIONALITY_WHITESPACE DIRECTIONALITY_WHITESPACE
@see Character#DIRECTIONALITY_OTHER_NEUTRALS DIRECTIONALITY_OTHER_NEUTRALS
@see Character#DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING
@see Character#DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE
@see Character#DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING
@see Character#DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE
@see Character#DIRECTIONALITY_POP_DIRECTIONAL_FORMAT DIRECTIONALITY_POP_DIRECTIONAL_FORMAT
@since    1.5"
      end

      operation 6589467 "isMirrored"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether the character is mirrored according to the
Unicode specification.  Mirrored characters should have their
glyphs horizontally mirrored when displayed in text that is
right-to-left.  For example, <code>'&#92;u0028'</code> LEFT
PARENTHESIS is semantically defined to be an <i>opening
parenthesis</i>.  This will appear as a \"(\" in text that is
left-to-right but as a \")\" in text that is right-to-left.

<p><b>Note:</b> This method cannot handle <a
href=\"#supplementary\"> supplementary characters</a>. To support
all Unicode characters, including supplementary characters, use
the {@link #isMirrored(int)} method.

@param  ch <code>char</code> for which the mirrored property is requested
@return <code>true</code> if the char is mirrored, <code>false</code>
        if the <code>char</code> is not mirrored or is not defined.
@since 1.4"
      end

      operation 6589595 "isMirrored"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "codePoint" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether the specified character (Unicode code point)
is mirrored according to the Unicode specification.  Mirrored
characters should have their glyphs horizontally mirrored when
displayed in text that is right-to-left.  For example,
<code>'&#92;u0028'</code> LEFT PARENTHESIS is semantically
defined to be an <i>opening parenthesis</i>.  This will appear
as a \"(\" in text that is left-to-right but as a \")\" in text
that is right-to-left.

@param   codePoint the character (Unicode code point) to be tested.
@return  <code>true</code> if the character is mirrored, <code>false</code>
         if the character is not mirrored or is not defined.
@since   1.5"
      end

      operation 6589723 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "anotherCharacter" type class_ref 602011 // Character
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares two <code>Character</code> objects numerically.

@param   anotherCharacter   the <code>Character</code> to be compared.

@return  the value <code>0</code> if the argument <code>Character</code> 
         is equal to this <code>Character</code>; a value less than 
         <code>0</code> if this <code>Character</code> is numerically less 
         than the <code>Character</code> argument; and a value greater than 
         <code>0</code> if this <code>Character</code> is numerically greater 
         than the <code>Character</code> argument (unsigned comparison).  
         Note that this is strictly a numerical comparison; it is not 
         locale-dependent.
@since   1.2"
      end

      operation 6589851 "toUpperCaseEx"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "codePoint" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts the character (Unicode code point) argument to uppercase using
information from the UnicodeData file.
<p>

@param   codePoint   the character (Unicode code point) to be converted.
@return  either the uppercase equivalent of the character, if 
         any, or an error flag (<code>Character.ERROR</code>) 
         that indicates that a 1:M <code>char</code> mapping exists.
@see     java.lang.Character#isLowerCase(char)
@see     java.lang.Character#isUpperCase(char)
@see     java.lang.Character#toLowerCase(char)
@see     java.lang.Character#toTitleCase(char)
@since 1.4"
      end

      operation 6589979 "toUpperCaseCharArray"
	class_operation package explicit_return_type "char"
	nparams 1
	  param in name "codePoint" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts the character (Unicode code point) argument to uppercase using case
mapping information from the SpecialCasing file in the Unicode
specification. If a character has no explicit uppercase
mapping, then the <code>char</code> itself is returned in the
<code>char[]</code>.

@param   codePoint   the character (Unicode code point) to be converted.
@return a <code>char[]</code> with the uppercased character.
@since 1.4"
      end

      attribute 2650779 "SIZE"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  16"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The number of bits used to represent a <tt>char</tt> value in unsigned
binary form.

@since 1.5
"
      end

      operation 6590107 "reverseBytes"
	class_operation public explicit_return_type "char"
	nparams 1
	  param in name "ch" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value obtained by reversing the order of the bytes in the
specified <tt>char</tt> value.

@return the value obtained by reversing (or, equivalently, swapping)
    the bytes in the specified <tt>char</tt> value.
@since 1.5"
      end
    end

    class 689179 "Double"
      visibility public 
      nactuals 3
      actual class class_ref 221467 // Comparable
        rank 0 value class_ref 689179 // Double
      actual class class_ref 221467 // Comparable
        rank 1 explicit_value ""
      actual class class_ref 221467 // Comparable
        rank 2 explicit_value ""
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The <code>Double</code> class wraps a value of the primitive type
<code>double</code> in an object. An object of type
<code>Double</code> contains a single field whose type is
<code>double</code>.
<p>
In addition, this class provides several methods for converting a
<code>double</code> to a <code>String</code> and a
<code>String</code> to a <code>double</code>, as well as other
constants and methods useful when dealing with a
<code>double</code>.

@author  Lee Boynton
@author  Arthur van Hoff
@author  Joseph D. Darcy
@version 1.94, 05/11/04
@since JDK1.0"
      classrelation 1777563 // <generalisation>
	relation 1777563 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1777563 // <generalisation>
	  b parent class_ref 413979 // Number
      end

      classrelation 1777691 // <realization>
	relation 1777691 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 1777691 // <realization>
	  b parent class_ref 221467 // Comparable
      end

      attribute 2727579 "POSITIVE_INFINITY"
	class_attribute const_attribute public explicit_type "double"
	init_value "=  1.0 / 0.0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A constant holding the positive infinity of type
<code>double</code>. It is equal to the value returned by
<code>Double.longBitsToDouble(0x7ff0000000000000L)</code>.
"
      end

      attribute 2727707 "NEGATIVE_INFINITY"
	class_attribute const_attribute public explicit_type "double"
	init_value "=  -1.0 / 0.0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A constant holding the negative infinity of type
<code>double</code>. It is equal to the value returned by
<code>Double.longBitsToDouble(0xfff0000000000000L)</code>.
"
      end

      attribute 2727835 "NaN"
	class_attribute const_attribute public explicit_type "double"
	init_value "=  0.0d / 0.0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A constant holding a Not-a-Number (NaN) value of type
<code>double</code>. It is equivalent to the value returned by
<code>Double.longBitsToDouble(0x7ff8000000000000L)</code>.
"
      end

      attribute 2727963 "MAX_VALUE"
	class_attribute const_attribute public explicit_type "double"
	init_value "=  1.7976931348623157e+308"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A constant holding the largest positive finite value of type
<code>double</code>,
(2-2<sup>-52</sup>)&middot;2<sup>1023</sup>.  It is equal to
the hexadecimal floating-point literal
<code>0x1.fffffffffffffP+1023</code> and also equal to
<code>Double.longBitsToDouble(0x7fefffffffffffffL)</code>.

 0x1.fffffffffffffP+1023"
      end

      attribute 2728091 "MIN_VALUE"
	class_attribute const_attribute public explicit_type "double"
	init_value "=  4.9e-324"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A constant holding the smallest positive nonzero value of type
<code>double</code>, 2<sup>-1074</sup>. It is equal to the
hexadecimal floating-point literal
<code>0x0.0000000000001P-1022</code> and also equal to
<code>Double.longBitsToDouble(0x1L)</code>.

 0x0.0000000000001P-1022"
      end

      attribute 2728219 "SIZE"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  64"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The number of bits used to represent a <tt>double</tt> value.

@since 1.5
"
      end

      classrelation 1777819 // TYPE (<unidirectional association>)
	relation 1777819 --->
	  a role_name "TYPE" init_value "=  (Class<Double>) Class.getPrimitiveClass(\"double\")" class_relation const_relation public
	    comment "
The <code>Class</code> instance representing the primitive type
<code>double</code>.

@since JDK1.1 

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Double> ${name}${value};
"
	    classrelation_ref 1777819 // TYPE (<unidirectional association>)
	  b parent class_ref 164635 // Class
      end

      operation 6981787 "toString"
	class_operation public explicit_return_type "String"
	nparams 1
	  param in name "d" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of the <code>double</code> 
argument. All characters mentioned below are ASCII characters.
<ul>
<li>If the argument is NaN, the result is the string
    &quot;<code>NaN</code>&quot;.
<li>Otherwise, the result is a string that represents the sign and 
magnitude (absolute value) of the argument. If the sign is negative, 
the first character of the result is '<code>-</code>' 
(<code>'&#92;u002D'</code>); if the sign is positive, no sign character 
appears in the result. As for the magnitude <i>m</i>:
<ul>
<li>If <i>m</i> is infinity, it is represented by the characters 
<code>\"Infinity\"</code>; thus, positive infinity produces the result 
<code>\"Infinity\"</code> and negative infinity produces the result 
<code>\"-Infinity\"</code>.

<li>If <i>m</i> is zero, it is represented by the characters 
<code>\"0.0\"</code>; thus, negative zero produces the result 
<code>\"-0.0\"</code> and positive zero produces the result 
<code>\"0.0\"</code>. 

<li>If <i>m</i> is greater than or equal to 10<sup>-3</sup> but less 
than 10<sup>7</sup>, then it is represented as the integer part of 
<i>m</i>, in decimal form with no leading zeroes, followed by 
'<code>.</code>' (<code>'&#92;u002E'</code>), followed by one or 
more decimal digits representing the fractional part of <i>m</i>. 

<li>If <i>m</i> is less than 10<sup>-3</sup> or greater than or
equal to 10<sup>7</sup>, then it is represented in so-called
\"computerized scientific notation.\" Let <i>n</i> be the unique
integer such that 10<sup><i>n</i></sup> &lt;= <i>m</i> &lt;
10<sup><i>n</i>+1</sup>; then let <i>a</i> be the
mathematically exact quotient of <i>m</i> and
10<sup><i>n</i></sup> so that 1 &lt;= <i>a</i> &lt; 10. The
magnitude is then represented as the integer part of <i>a</i>,
as a single decimal digit, followed by '<code>.</code>'
(<code>'&#92;u002E'</code>), followed by decimal digits
representing the fractional part of <i>a</i>, followed by the
letter '<code>E</code>' (<code>'&#92;u0045'</code>), followed
by a representation of <i>n</i> as a decimal integer, as
produced by the method {@link Integer#toString(int)}.
</ul>
</ul>
How many digits must be printed for the fractional part of 
<i>m</i> or <i>a</i>? There must be at least one digit to represent 
the fractional part, and beyond that as many, but only as many, more 
digits as are needed to uniquely distinguish the argument value from
adjacent values of type <code>double</code>. That is, suppose that 
<i>x</i> is the exact mathematical value represented by the decimal 
representation produced by this method for a finite nonzero argument 
<i>d</i>. Then <i>d</i> must be the <code>double</code> value nearest 
to <i>x</i>; or if two <code>double</code> values are equally close 
to <i>x</i>, then <i>d</i> must be one of them and the least
significant bit of the significand of <i>d</i> must be <code>0</code>.
<p>
To create localized string representations of a floating-point
value, use subclasses of {@link java.text.NumberFormat}.

@param   d   the <code>double</code> to be converted.
@return a string representation of the argument."
      end

      operation 6981915 "toHexString"
	class_operation public explicit_return_type "String"
	nparams 1
	  param in name "d" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hexadecimal string representation of the
<code>double</code> argument. All characters mentioned below
are ASCII characters.

<ul>
<li>If the argument is NaN, the result is the string
    &quot;<code>NaN</code>&quot;.
<li>Otherwise, the result is a string that represents the sign
and magnitude of the argument. If the sign is negative, the
first character of the result is '<code>-</code>'
(<code>'&#92;u002D'</code>); if the sign is positive, no sign
character appears in the result. As for the magnitude <i>m</i>:

<ul> 
<li>If <i>m</i> is infinity, it is represented by the string
<code>\"Infinity\"</code>; thus, positive infinity produces the
result <code>\"Infinity\"</code> and negative infinity produces
the result <code>\"-Infinity\"</code>.

<li>If <i>m</i> is zero, it is represented by the string
<code>\"0x0.0p0\"</code>; thus, negative zero produces the result
<code>\"-0x0.0p0\"</code> and positive zero produces the result
<code>\"0x0.0p0\"</code>.

<li>If <i>m</i> is a <code>double</code> value with a
normalized representation, substrings are used to represent the
significand and exponent fields.  The significand is
represented by the characters <code>&quot;0x1.&quot;</code>
followed by a lowercase hexadecimal representation of the rest
of the significand as a fraction.  Trailing zeros in the
hexadecimal representation are removed unless all the digits
are zero, in which case a single zero is used. Next, the
exponent is represented by <code>&quot;p&quot;</code> followed
by a decimal string of the unbiased exponent as if produced by
a call to {@link Integer#toString(int) Integer.toString} on the
exponent value.

<li>If <i>m</i> is a <code>double</code> value with a subnormal
representation, the significand is represented by the
characters <code>&quot;0x0.&quot;</code> followed by a
hexadecimal representation of the rest of the significand as a
fraction.  Trailing zeros in the hexadecimal representation are
removed. Next, the exponent is represented by
<code>&quot;p-1022&quot;</code>.  Note that there must be at
least one nonzero digit in a subnormal significand.

</ul>

</ul>

<table border>
<caption><h3>Examples</h3></caption>
<tr><th>Floating-point Value</th><th>Hexadecimal String</th>
<tr><td><code>1.0</code></td>	<td><code>0x1.0p0</code></td>
<tr><td><code>-1.0</code></td>	<td><code>-0x1.0p0</code></td>
<tr><td><code>2.0</code></td>	<td><code>0x1.0p1</code></td>
<tr><td><code>3.0</code></td>	<td><code>0x1.8p1</code></td>
<tr><td><code>0.5</code></td>	<td><code>0x1.0p-1</code></td>
<tr><td><code>0.25</code></td>	<td><code>0x1.0p-2</code></td>
<tr><td><code>Double.MAX_VALUE</code></td>
    <td><code>0x1.fffffffffffffp1023</code></td>
<tr><td><code>Minimum Normal Value</code></td>
    <td><code>0x1.0p-1022</code></td>
<tr><td><code>Maximum Subnormal Value</code></td>
    <td><code>0x0.fffffffffffffp-1022</code></td>
<tr><td><code>Double.MIN_VALUE</code></td>
    <td><code>0x0.0000000000001p-1022</code></td>
</table>
@param   d   the <code>double</code> to be converted.
@return a hex string representation of the argument.
@since 1.5
@author Joseph D. Darcy"
      end

      operation 6982043 "valueOf"
	class_operation public return_type class_ref 689179 // Double
	nparams 1
	  param in name "s" explicit_type "String"
	nexceptions 1
	  exception class_ref 533659 // NumberFormatException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>Double</code> object holding the
<code>double</code> value represented by the argument string
<code>s</code>.

<p>If <code>s</code> is <code>null</code>, then a 
<code>NullPointerException</code> is thrown.

<p>Leading and trailing whitespace characters in <code>s</code>
are ignored.  Whitespace is removed as if by the {@link
String#trim} method; that is, both ASCII space and control
characters are removed. The rest of <code>s</code> should
constitute a <i>FloatValue</i> as described by the lexical
syntax rules:

<blockquote>
<dl>
<dt><i>FloatValue:</i>
<dd><i>Sign<sub>opt</sub></i> <code>NaN</code>
<dd><i>Sign<sub>opt</sub></i> <code>Infinity</code>
<dd><i>Sign<sub>opt</sub> FloatingPointLiteral</i>
<dd><i>Sign<sub>opt</sub> HexFloatingPointLiteral</i>
<dd><i>SignedInteger</i>
</dl>

<p>

<dl>
<dt><i>HexFloatingPointLiteral</i>:
<dd> <i>HexSignificand BinaryExponent FloatTypeSuffix<sub>opt</sub></i>
</dl>

<p>

<dl>
<dt><i>HexSignificand:</i>
<dd><i>HexNumeral</i>
<dd><i>HexNumeral</i> <code>.</code>
<dd><code>0x</code> <i>HexDigits<sub>opt</sub> 
    </i><code>.</code><i> HexDigits</i>
<dd><code>0X</code><i> HexDigits<sub>opt</sub> 
    </i><code>.</code> <i>HexDigits</i>
</dl>

<p>

<dl>
<dt><i>BinaryExponent:</i>
<dd><i>BinaryExponentIndicator SignedInteger</i>
</dl>

<p>

<dl>
<dt><i>BinaryExponentIndicator:</i>
<dd><code>p</code>
<dd><code>P</code>
</dl>

</blockquote>

where <i>Sign</i>, <i>FloatingPointLiteral</i>,
<i>HexNumeral</i>, <i>HexDigits</i>, <i>SignedInteger</i> and
<i>FloatTypeSuffix</i> are as defined in the lexical structure
sections of the of the <a
href=\"http://java.sun.com/docs/books/jls/html/\">Java Language
Specification</a>. If <code>s</code> does not have the form of
a <i>FloatValue</i>, then a <code>NumberFormatException</code>
is thrown. Otherwise, <code>s</code> is regarded as
representing an exact decimal value in the usual
&quot;computerized scientific notation&quot; or as an exact
hexadecimal value; this exact numerical value is then
conceptually converted to an &quot;infinitely precise&quot;
binary value that is then rounded to type <code>double</code>
by the usual round-to-nearest rule of IEEE 754 floating-point
arithmetic, which includes preserving the sign of a zero
value. Finally, a <code>Double</code> object representing this
<code>double</code> value is returned.

<p> To interpret localized string representations of a
floating-point value, use subclasses of {@link
java.text.NumberFormat}.

<p>Note that trailing format specifiers, specifiers that
determine the type of a floating-point literal
(<code>1.0f</code> is a <code>float</code> value;
<code>1.0d</code> is a <code>double</code> value), do
<em>not</em> influence the results of this method.  In other
words, the numerical value of the input string is converted
directly to the target floating-point type.  The two-step
sequence of conversions, string to <code>float</code> followed
by <code>float</code> to <code>double</code>, is <em>not</em>
equivalent to converting a string directly to
<code>double</code>. For example, the <code>float</code>
literal <code>0.1f</code> is equal to the <code>double</code>
value <code>0.10000000149011612</code>; the <code>float</code>
literal <code>0.1f</code> represents a different numerical
value than the <code>double</code> literal
<code>0.1</code>. (The numerical value 0.1 cannot be exactly
represented in a binary floating-point number.)

<p>To avoid calling this method on a invalid string and having
a <code>NumberFormatException</code> be thrown, the regular
expression below can be used to screen the input string:

<code>
<pre>
	final String Digits	= \"(\\\\p{Digit}+)\";
 final String HexDigits  = \"(\\\\p{XDigit}+)\";
	// an exponent is 'e' or 'E' followed by an optionally 
	// signed decimal integer.
	final String Exp	= \"[eE][+-]?\"+Digits;
	final String fpRegex	=
	    (\"[\\\\x00-\\\\x20]*\"+	// Optional leading &quot;whitespace&quot;
	     \"[+-]?(\" +	// Optional sign character
	     \"NaN|\" +		// \"NaN\" string
	     \"Infinity|\" +	// \"Infinity\" string

	     // A decimal floating-point string representing a finite positive
	     // number without a leading sign has at most five basic pieces:
	     // Digits . Digits ExponentPart FloatTypeSuffix
	     // 
	     // Since this method allows integer-only strings as input
	     // in addition to strings of floating-point literals, the
	     // two sub-patterns below are simplifications of the grammar
	     // productions from the Java Language Specification, 2nd 
	     // edition, section 3.10.2.

	     // Digits ._opt Digits_opt ExponentPart_opt FloatTypeSuffix_opt
	     \"(((\"+Digits+\"(\\\\.)?(\"+Digits+\"?)(\"+Exp+\")?)|\"+

	     // . Digits ExponentPart_opt FloatTypeSuffix_opt
	     \"(\\\\.(\"+Digits+\")(\"+Exp+\")?)|\"+

      // Hexadecimal strings
      \"((\" +
       // 0[xX] HexDigits ._opt BinaryExponent FloatTypeSuffix_opt
       \"(0[xX]\" + HexDigits + \"(\\\\.)?)|\" +

       // 0[xX] HexDigits_opt . HexDigits BinaryExponent FloatTypeSuffix_opt
       \"(0[xX]\" + HexDigits + \"?(\\\\.)\" + HexDigits + \")\" +

       \")[pP][+-]?\" + Digits + \"))\" +
	     \"[fFdD]?))\" +
	     \"[\\\\x00-\\\\x20]*\");// Optional trailing &quot;whitespace&quot;
	    
 if (Pattern.matches(fpRegex, myString))
	    Double.valueOf(myString); // Will not throw NumberFormatException
	else {
	    // Perform suitable alternative action
	}
</pre>
</code>

@param      s   the string to be parsed.
@return     a <code>Double</code> object holding the value
            represented by the <code>String</code> argument.
@exception  NumberFormatException  if the string does not contain a
              parsable number."
      end

      operation 6982171 "valueOf"
	class_operation public return_type class_ref 689179 // Double
	nparams 1
	  param in name "d" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <tt>Double</tt> instance representing the specified
<tt>double</tt> value.
If a new <tt>Double</tt> instance is not required, this method
should generally be used in preference to the constructor
{@link #Double(double)}, as this method is likely to yield
significantly better space and time performance by caching
frequently requested values.

@param  d a double value.
@return a <tt>Double</tt> instance representing <tt>d</tt>.
@since  1.5"
      end

      operation 6982299 "parseDouble"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "s" explicit_type "String"
	nexceptions 1
	  exception class_ref 533659 // NumberFormatException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new <code>double</code> initialized to the value
represented by the specified <code>String</code>, as performed
by the <code>valueOf</code> method of class
<code>Double</code>.

@param      s   the string to be parsed.
@return the <code>double</code> value represented by the string
        argument.
@exception NumberFormatException if the string does not contain
           a parsable <code>double</code>.
@see        java.lang.Double#valueOf(String)
@since 1.2"
      end

      operation 6982427 "isNaN"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "v" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if the specified number is a
Not-a-Number (NaN) value, <code>false</code> otherwise.

@param   v   the value to be tested.
@return  <code>true</code> if the value of the argument is NaN;
         <code>false</code> otherwise."
      end

      operation 6982555 "isInfinite"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "v" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if the specified number is infinitely
large in magnitude, <code>false</code> otherwise.

@param   v   the value to be tested.
@return  <code>true</code> if the value of the argument is positive
         infinity or negative infinity; <code>false</code> otherwise."
      end

      attribute 2728347 "value"
	const_attribute private explicit_type "double"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The value of the Double.

@serial
"
      end

      operation 6982683 "Double"
	public explicit_return_type ""
	nparams 1
	  param in name "value" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a newly allocated <code>Double</code> object that
represents the primitive <code>double</code> argument.

@param   value   the value to be represented by the <code>Double</code>."
      end

      operation 6982811 "Double"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	nexceptions 1
	  exception class_ref 533659 // NumberFormatException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a newly allocated <code>Double</code> object that
represents the floating-point value of type <code>double</code>
represented by the string. The string is converted to a
<code>double</code> value as if by the <code>valueOf</code> method.

@param      s   a string to be converted to a <code>Double</code>.
@exception  NumberFormatException  if the string does not contain a
              parsable number.
@see        java.lang.Double#valueOf(java.lang.String)"
      end

      operation 6982939 "isNaN"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if this <code>Double</code> value is
a Not-a-Number (NaN), <code>false</code> otherwise.

@return  <code>true</code> if the value represented by this object is
         NaN; <code>false</code> otherwise."
      end

      operation 6983067 "isInfinite"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if this <code>Double</code> value is
infinitely large in magnitude, <code>false</code> otherwise.

@return  <code>true</code> if the value represented by this object is
         positive infinity or negative infinity;
         <code>false</code> otherwise."
      end

      operation 6983195 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of this <code>Double</code> object.
The primitive <code>double</code> value represented by this
object is converted to a string exactly as if by the method
<code>toString</code> of one argument.

@return  a <code>String</code> representation of this object.
@see java.lang.Double#toString(double)"
      end

      operation 6983323 "byteValue"
	public explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this <code>Double</code> as a <code>byte</code> (by
casting to a <code>byte</code>).

@return  the <code>double</code> value represented by this object
         converted to type <code>byte</code>
@since JDK1.1 "
      end

      operation 6983451 "shortValue"
	public explicit_return_type "short"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this <code>Double</code> as a
<code>short</code> (by casting to a <code>short</code>).

@return  the <code>double</code> value represented by this object
         converted to type <code>short</code>
@since JDK1.1 "
      end

      operation 6983579 "intValue"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this <code>Double</code> as an
<code>int</code> (by casting to type <code>int</code>).

@return  the <code>double</code> value represented by this object
         converted to type <code>int</code>"
      end

      operation 6983707 "longValue"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this <code>Double</code> as a
<code>long</code> (by casting to type <code>long</code>).

@return  the <code>double</code> value represented by this object
         converted to type <code>long</code>"
      end

      operation 6983835 "floatValue"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>float</code> value of this
<code>Double</code> object.

@return  the <code>double</code> value represented by this object
         converted to type <code>float</code>
@since JDK1.0 "
      end

      operation 6983963 "doubleValue"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>double</code> value of this
<code>Double</code> object.

@return the <code>double</code> value represented by this object"
      end

      operation 6984091 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hash code for this <code>Double</code> object. The
result is the exclusive OR of the two halves of the
<code>long</code> integer bit representation, exactly as
produced by the method {@link #doubleToLongBits(double)}, of
the primitive <code>double</code> value represented by this
<code>Double</code> object. That is, the hash code is the value
of the expression:
<blockquote><pre>
(int)(v^(v&gt;&gt;&gt;32))
</pre></blockquote>
where <code>v</code> is defined by: 
<blockquote><pre>
long v = Double.doubleToLongBits(this.doubleValue());
</pre></blockquote>

@return  a <code>hash code</code> value for this object."
      end

      operation 6984219 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this object against the specified object.  The result
is <code>true</code> if and only if the argument is not
<code>null</code> and is a <code>Double</code> object that
represents a <code>double</code> that has the same value as the
<code>double</code> represented by this object. For this
purpose, two <code>double</code> values are considered to be
the same if and only if the method {@link
#doubleToLongBits(double)} returns the identical
<code>long</code> value when applied to each.
<p>
Note that in most cases, for two instances of class
<code>Double</code>, <code>d1</code> and <code>d2</code>, the
value of <code>d1.equals(d2)</code> is <code>true</code> if and
only if
<blockquote><pre>
  d1.doubleValue()&nbsp;== d2.doubleValue()
</pre></blockquote>
<p>
also has the value <code>true</code>. However, there are two
exceptions:
<ul>
<li>If <code>d1</code> and <code>d2</code> both represent
    <code>Double.NaN</code>, then the <code>equals</code> method
    returns <code>true</code>, even though
    <code>Double.NaN==Double.NaN</code> has the value
    <code>false</code>.
<li>If <code>d1</code> represents <code>+0.0</code> while
    <code>d2</code> represents <code>-0.0</code>, or vice versa,
    the <code>equal</code> test has the value <code>false</code>,
    even though <code>+0.0==-0.0</code> has the value <code>true</code>.
</ul>
This definition allows hash tables to operate properly.
@param   obj   the object to compare with.
@return  <code>true</code> if the objects are the same;
         <code>false</code> otherwise.
@see java.lang.Double#doubleToLongBits(double)"
      end

      operation 6984347 "doubleToLongBits"
	class_operation public explicit_return_type "long"
	nparams 1
	  param in name "value" explicit_type "double"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a representation of the specified floating-point value
according to the IEEE 754 floating-point \"double
format\" bit layout.
<p>
Bit 63 (the bit that is selected by the mask 
<code>0x8000000000000000L</code>) represents the sign of the 
floating-point number. Bits 
62-52 (the bits that are selected by the mask 
<code>0x7ff0000000000000L</code>) represent the exponent. Bits 51-0 
(the bits that are selected by the mask 
<code>0x000fffffffffffffL</code>) represent the significand 
(sometimes called the mantissa) of the floating-point number. 
<p>
If the argument is positive infinity, the result is
<code>0x7ff0000000000000L</code>.
<p>
If the argument is negative infinity, the result is
<code>0xfff0000000000000L</code>.
<p>
If the argument is NaN, the result is 
<code>0x7ff8000000000000L</code>. 
<p>
In all cases, the result is a <code>long</code> integer that, when 
given to the {@link #longBitsToDouble(long)} method, will produce a 
floating-point value the same as the argument to 
<code>doubleToLongBits</code> (except all NaN values are
collapsed to a single &quot;canonical&quot; NaN value).

@param   value   a <code>double</code> precision floating-point number.
@return the bits that represent the floating-point number.  "
      end

      operation 6984475 "doubleToRawLongBits"
	class_operation public explicit_return_type "long"
	nparams 1
	  param in name "value" explicit_type "double"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a representation of the specified floating-point value
according to the IEEE 754 floating-point \"double
format\" bit layout, preserving Not-a-Number (NaN) values.
<p>
Bit 63 (the bit that is selected by the mask 
<code>0x8000000000000000L</code>) represents the sign of the 
floating-point number. Bits 
62-52 (the bits that are selected by the mask 
<code>0x7ff0000000000000L</code>) represent the exponent. Bits 51-0 
(the bits that are selected by the mask 
<code>0x000fffffffffffffL</code>) represent the significand 
(sometimes called the mantissa) of the floating-point number. 
<p>
If the argument is positive infinity, the result is
<code>0x7ff0000000000000L</code>.
<p>
If the argument is negative infinity, the result is
<code>0xfff0000000000000L</code>.
<p>
If the argument is NaN, the result is the <code>long</code>
integer representing the actual NaN value.  Unlike the
<code>doubleToLongBits</code> method,
<code>doubleToRawLongBits</code> does not collapse all the bit
patterns encoding a NaN to a single &quot;canonical&quot; NaN
value.
<p>
In all cases, the result is a <code>long</code> integer that,
when given to the {@link #longBitsToDouble(long)} method, will
produce a floating-point value the same as the argument to
<code>doubleToRawLongBits</code>.

@param   value   a <code>double</code> precision floating-point number.
@return the bits that represent the floating-point number."
      end

      operation 6984603 "longBitsToDouble"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "bits" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>double</code> value corresponding to a given
bit representation.
The argument is considered to be a representation of a
floating-point value according to the IEEE 754 floating-point
\"double format\" bit layout.
<p>
If the argument is <code>0x7ff0000000000000L</code>, the result 
is positive infinity. 
<p>
If the argument is <code>0xfff0000000000000L</code>, the result 
is negative infinity. 
<p>
If the argument is any value in the range
<code>0x7ff0000000000001L</code> through
<code>0x7fffffffffffffffL</code> or in the range
<code>0xfff0000000000001L</code> through
<code>0xffffffffffffffffL</code>, the result is a NaN.  No IEEE
754 floating-point operation provided by Java can distinguish
between two NaN values of the same type with different bit
patterns.  Distinct values of NaN are only distinguishable by
use of the <code>Double.doubleToRawLongBits</code> method.
<p>
In all other cases, let <i>s</i>, <i>e</i>, and <i>m</i> be three 
values that can be computed from the argument: 
<blockquote><pre>
int s = ((bits &gt;&gt; 63) == 0) ? 1 : -1;
int e = (int)((bits &gt;&gt; 52) & 0x7ffL);
long m = (e == 0) ?
                (bits & 0xfffffffffffffL) &lt;&lt; 1 :
                (bits & 0xfffffffffffffL) | 0x10000000000000L;
</pre></blockquote>
Then the floating-point result equals the value of the mathematical 
expression <i>s</i>&middot;<i>m</i>&middot;2<sup><i>e</i>-1075</sup>.
<p>
Note that this method may not be able to return a
<code>double</code> NaN with exactly same bit pattern as the
<code>long</code> argument.  IEEE 754 distinguishes between two
kinds of NaNs, quiet NaNs and <i>signaling NaNs</i>.  The
differences between the two kinds of NaN are generally not
visible in Java.  Arithmetic operations on signaling NaNs turn
them into quiet NaNs with a different, but often similar, bit
pattern.  However, on some processors merely copying a
signaling NaN also performs that conversion.  In particular,
copying a signaling NaN to return it to the calling method
may perform this conversion.  So <code>longBitsToDouble</code>
may not be able to return a <code>double</code> with a
signaling NaN bit pattern.  Consequently, for some
<code>long</code> values,
<code>doubleToRawLongBits(longBitsToDouble(start))</code> may
<i>not</i> equal <code>start</code>.  Moreover, which
particular bit patterns represent signaling NaNs is platform
dependent; although all NaN bit patterns, quiet or signaling,
must be in the NaN range identified above.

@param   bits   any <code>long</code> integer.
@return  the <code>double</code> floating-point value with the same
         bit pattern."
      end

      operation 6984731 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "anotherDouble" type class_ref 689179 // Double
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares two <code>Double</code> objects numerically.  There
are two ways in which comparisons performed by this method
differ from those performed by the Java language numerical
comparison operators (<code>&lt;, &lt;=, ==, &gt;= &gt;</code>)
when applied to primitive <code>double</code> values:
<ul><li>
		<code>Double.NaN</code> is considered by this method
		to be equal to itself and greater than all other
		<code>double</code> values (including
		<code>Double.POSITIVE_INFINITY</code>).
<li>
		<code>0.0d</code> is considered by this method to be greater
		than <code>-0.0d</code>.
</ul>
This ensures that the <i>natural ordering</i> of
<tt>Double</tt> objects imposed by this method is <i>consistent
with equals</i>.

@param   anotherDouble   the <code>Double</code> to be compared.
@return  the value <code>0</code> if <code>anotherDouble</code> is
		numerically equal to this <code>Double</code>; a value
		less than <code>0</code> if this <code>Double</code>
		is numerically less than <code>anotherDouble</code>;
		and a value greater than <code>0</code> if this
		<code>Double</code> is numerically greater than
		<code>anotherDouble</code>.
		
@since   1.2"
      end

      operation 6984859 "compare"
	class_operation public explicit_return_type "int"
	nparams 2
	  param in name "d1" explicit_type "double"
	  param in name "d2" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares the two specified <code>double</code> values. The sign
of the integer value returned is the same as that of the
integer that would be returned by the call:
<pre>
   new Double(d1).compareTo(new Double(d2))
</pre>

@param   d1        the first <code>double</code> to compare
@param   d2        the second <code>double</code> to compare
@return  the value <code>0</code> if <code>d1</code> is
		numerically equal to <code>d2</code>; a value less than
         <code>0</code> if <code>d1</code> is numerically less than
		<code>d2</code>; and a value greater than <code>0</code>
		if <code>d1</code> is numerically greater than
		<code>d2</code>.
@since 1.4"
      end

      attribute 2728475 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -9172774392245257468L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " use serialVersionUID from JDK 1.0.2 for interoperability "
      end
    end

    class 689435 "ExceptionInInitializerError"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Signals that an unexpected exception has occurred in a static initializer. 
An <code>ExceptionInInitializerError</code> is thrown to indicate that an 
exception occurred during evaluation of a static initializer or the
initializer for a static variable.

<p>As of release 1.4, this exception has been retrofitted to conform to
the general purpose exception-chaining mechanism.  The \"saved throwable
object\" that may be provided at construction time and accessed via
the {@link #getException()} method is now known as the <i>cause</i>,
and may be accessed via the {@link Throwable#getCause()} method, as well
as the aforementioned \"legacy method.\"

@author  Frank Yellin
@version 1.17, 12/19/03
@since   JDK1.1"
      classrelation 1778459 // <generalisation>
	relation 1778459 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1778459 // <generalisation>
	  b parent class_ref 689563 // LinkageError
      end

      attribute 2728987 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  1521711792217232256L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Use serialVersionUID from JDK 1.1.X for interoperability
"
      end

      classrelation 1778587 // exception (<unidirectional association>)
	relation 1778587 --->
	  a role_name "exception" private
	    comment "
This field holds the exception if the 
ExceptionInInitializerError(Throwable thrown) constructor was
used to instantiate the object

@serial 


"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1778587 // exception (<unidirectional association>)
	  b parent class_ref 164251 // Throwable
      end

      operation 6986907 "ExceptionInInitializerError"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>ExceptionInInitializerError</code> with 
<code>null</code> as its detail message string and with no saved
throwable object.
A detail message is a String that describes this particular exception."
      end

      operation 6987035 "ExceptionInInitializerError"
	public explicit_return_type ""
	nparams 1
	  param inout name "thrown" type class_ref 164251 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new <code>ExceptionInInitializerError</code> class by 
saving a reference to the <code>Throwable</code> object thrown for 
later retrieval by the {@link #getException()} method. The detail 
message string is set to <code>null</code>.

@param thrown The exception thrown"
      end

      operation 6987163 "ExceptionInInitializerError"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an ExceptionInInitializerError with the specified detail 
message string.  A detail message is a String that describes this 
particular exception. The detail message string is saved for later 
retrieval by the {@link Throwable#getMessage()} method. There is no 
saved throwable object. 


@param s the detail message"
      end

      operation 6987291 "getException"
	public return_type class_ref 164251 // Throwable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the exception that occurred during a static initialization that
caused this error to be created.

<p>This method predates the general-purpose exception chaining facility.
The {@link Throwable#getCause()} method is now the preferred means of
obtaining this information.

@return the saved throwable object of this 
        <code>ExceptionInInitializerError</code>, or <code>null</code> 
        if this <code>ExceptionInInitializerError</code> has no saved 
        throwable object. "
      end

      operation 6987419 "getCause"
	public return_type class_ref 164251 // Throwable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the cause of this error (the exception that occurred
during a static initialization that caused this error to be created).

@return  the cause of this error or <code>null</code> if the
         cause is nonexistent or unknown.
@since   1.4"
      end
    end

    class 689563 "LinkageError"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Subclasses of <code>LinkageError</code> indicate that a class has 
some dependency on another class; however, the latter class has 
incompatibly changed after the compilation of the former class. 


@author  Frank Yellin
@version 1.13, 12/19/03
@since   JDK1.0"
      classrelation 1771163 // <generalisation>
	relation 1771163 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1771163 // <generalisation>
	  b parent class_ref 221851 // Error
      end

      operation 6922907 "LinkageError"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>LinkageError</code> with no detail message. "
      end

      operation 6923035 "LinkageError"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>LinkageError</code> with the specified detail 
message. 

@param   s   the detail message."
      end
    end

    class 791195 "ArrayIndexOutOfBoundsException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Thrown to indicate that an array has been accessed with an 
illegal index. The index is either negative or greater than or 
equal to the size of the array. 

@author  unascribed
@version 1.21, 12/19/03
@since   JDK1.0"
      classrelation 1772059 // <generalisation>
	relation 1772059 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1772059 // <generalisation>
	  b parent class_ref 870555 // IndexOutOfBoundsException
      end

      operation 6931867 "ArrayIndexOutOfBoundsException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>ArrayIndexOutOfBoundsException</code> with no 
detail message. "
      end

      operation 6931995 "ArrayIndexOutOfBoundsException"
	public explicit_return_type ""
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new <code>ArrayIndexOutOfBoundsException</code> 
class with an argument indicating the illegal index. 

@param   index   the illegal index."
      end

      operation 6932123 "ArrayIndexOutOfBoundsException"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>ArrayIndexOutOfBoundsException</code> class 
with the specified detail message. 

@param   s   the detail message."
      end
    end

    class 791451 "NoSuchMethodException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Thrown when a particular method cannot be found.

@author     unascribed
@version    1.13, 12/19/03
@since      JDK1.0"
      classrelation 1782555 // <generalisation>
	relation 1782555 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1782555 // <generalisation>
	  b parent class_ref 165403 // Exception
      end

      operation 7014939 "NoSuchMethodException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>NoSuchMethodException</code> without a detail message."
      end

      operation 7015067 "NoSuchMethodException"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>NoSuchMethodException</code> with a detail message. 

@param      s   the detail message."
      end
    end

    class 870555 "IndexOutOfBoundsException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Thrown to indicate that an index of some sort (such as to an array, to a
string, or to a vector) is out of range. 
<p>
Applications can subclass this class to indicate similar exceptions. 

@author  Frank Yellin
@version 1.11, 12/19/03
@since   JDK1.0"
      classrelation 1771931 // <generalisation>
	relation 1771931 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1771931 // <generalisation>
	  b parent class_ref 241051 // RuntimeException
      end

      operation 6931611 "IndexOutOfBoundsException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>IndexOutOfBoundsException</code> with no 
detail message. "
      end

      operation 6931739 "IndexOutOfBoundsException"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>IndexOutOfBoundsException</code> with the 
specified detail message. 

@param   s   the detail message."
      end
    end

    class 876955 "Float"
      visibility public 
      nactuals 3
      actual class class_ref 221467 // Comparable
        rank 0 value class_ref 876955 // Float
      actual class class_ref 221467 // Comparable
        rank 1 explicit_value ""
      actual class class_ref 221467 // Comparable
        rank 2 explicit_value ""
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The <code>Float</code> class wraps a value of primitive type
<code>float</code> in an object. An object of type
<code>Float</code> contains a single field whose type is
<code>float</code>.
<p>
In addition, this class provides several methods for converting a
<code>float</code> to a <code>String</code> and a
<code>String</code> to a <code>float</code>, as well as other
constants and methods useful when dealing with a
<code>float</code>.

@author  Lee Boynton
@author  Arthur van Hoff
@author  Joseph D. Darcy
@version 1.94, 05/11/04
@since JDK1.0 "
      classrelation 1778715 // <generalisation>
	relation 1778715 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1778715 // <generalisation>
	  b parent class_ref 413979 // Number
      end

      classrelation 1778843 // <realization>
	relation 1778843 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 1778843 // <realization>
	  b parent class_ref 221467 // Comparable
      end

      attribute 2729115 "POSITIVE_INFINITY"
	class_attribute const_attribute public explicit_type "float"
	init_value "=  1.0f / 0.0f"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A constant holding the positive infinity of type
<code>float</code>. It is equal to the value returned by
<code>Float.intBitsToFloat(0x7f800000)</code>.
"
      end

      attribute 2729243 "NEGATIVE_INFINITY"
	class_attribute const_attribute public explicit_type "float"
	init_value "=  -1.0f / 0.0f"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A constant holding the negative infinity of type
<code>float</code>. It is equal to the value returned by
<code>Float.intBitsToFloat(0xff800000)</code>.
"
      end

      attribute 2729371 "NaN"
	class_attribute const_attribute public explicit_type "float"
	init_value "=  0.0f / 0.0f"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A constant holding a Not-a-Number (NaN) value of type
<code>float</code>.  It is equivalent to the value returned by
<code>Float.intBitsToFloat(0x7fc00000)</code>.
"
      end

      attribute 2729499 "MAX_VALUE"
	class_attribute const_attribute public explicit_type "float"
	init_value "=  3.4028235e+38f"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A constant holding the largest positive finite value of type
<code>float</code>, (2-2<sup>-23</sup>)&middot;2<sup>127</sup>.
It is equal to the hexadecimal floating-point literal
<code>0x1.fffffeP+127f</code> and also equal to
<code>Float.intBitsToFloat(0x7f7fffff)</code>.

 0x1.fffffeP+127f"
      end

      attribute 2729627 "MIN_VALUE"
	class_attribute const_attribute public explicit_type "float"
	init_value "=  1.4e-45f"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A constant holding the smallest positive nonzero value of type
<code>float</code>, 2<sup>-149</sup>. It is equal to the
hexadecimal floating-point literal <code>0x0.000002P-126f</code>
and also equal to <code>Float.intBitsToFloat(0x1)</code>.

 0x0.000002P-126f"
      end

      attribute 2729755 "SIZE"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  32"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The number of bits used to represent a <tt>float</tt> value.

@since 1.5
"
      end

      classrelation 1778971 // TYPE (<unidirectional association>)
	relation 1778971 --->
	  a role_name "TYPE" init_value "=  Class.getPrimitiveClass(\"float\")" class_relation const_relation public
	    comment "
The <code>Class</code> instance representing the primitive type
<code>float</code>.

@since JDK1.1 

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Float> ${name}${value};
"
	    classrelation_ref 1778971 // TYPE (<unidirectional association>)
	  b parent class_ref 164635 // Class
      end

      operation 6987547 "toString"
	class_operation public explicit_return_type "String"
	nparams 1
	  param in name "f" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of the <code>float</code>
argument. All characters mentioned below are ASCII characters.
<ul>
<li>If the argument is NaN, the result is the string
&quot;<code>NaN</code>&quot;.
<li>Otherwise, the result is a string that represents the sign and 
    magnitude (absolute value) of the argument. If the sign is
    negative, the first character of the result is
    '<code>-</code>' (<code>'&#92;u002D'</code>); if the sign is
    positive, no sign character appears in the result. As for
    the magnitude <i>m</i>:
<ul>
<li>If <i>m</i> is infinity, it is represented by the characters 
    <code>\"Infinity\"</code>; thus, positive infinity produces
    the result <code>\"Infinity\"</code> and negative infinity
    produces the result <code>\"-Infinity\"</code>.
<li>If <i>m</i> is zero, it is represented by the characters 
    <code>\"0.0\"</code>; thus, negative zero produces the result
    <code>\"-0.0\"</code> and positive zero produces the result
    <code>\"0.0\"</code>.
<li> If <i>m</i> is greater than or equal to 10<sup>-3</sup> but 
     less than 10<sup>7</sup>, then it is represented as the
     integer part of <i>m</i>, in decimal form with no leading
     zeroes, followed by '<code>.</code>'
     (<code>'&#92;u002E'</code>), followed by one or more
     decimal digits representing the fractional part of
     <i>m</i>.
<li> If <i>m</i> is less than 10<sup>-3</sup> or greater than or
     equal to 10<sup>7</sup>, then it is represented in
     so-called \"computerized scientific notation.\" Let <i>n</i>
     be the unique integer such that 10<sup><i>n</i> </sup>&lt;= 
     <i>m</i> &lt; 10<sup><i>n</i>+1</sup>; then let <i>a</i> 
     be the mathematically exact quotient of <i>m</i> and 
     10<sup><i>n</i></sup> so that 1 &lt;= <i>a</i> &lt; 10.
     The magnitude is then represented as the integer part of
     <i>a</i>, as a single decimal digit, followed by
     '<code>.</code>' (<code>'&#92;u002E'</code>), followed by
     decimal digits representing the fractional part of
     <i>a</i>, followed by the letter '<code>E</code>'
     (<code>'&#92;u0045'</code>), followed by a representation
     of <i>n</i> as a decimal integer, as produced by the
     method <code>{@link
     java.lang.Integer#toString(int)}</code>.
</ul>
</ul>
How many digits must be printed for the fractional part of
<i>m</i> or <i>a</i>? There must be at least one digit
to represent the fractional part, and beyond that as many, but
only as many, more digits as are needed to uniquely distinguish
the argument value from adjacent values of type
<code>float</code>. That is, suppose that <i>x</i> is the
exact mathematical value represented by the decimal
representation produced by this method for a finite nonzero
argument <i>f</i>. Then <i>f</i> must be the <code>float</code>
value nearest to <i>x</i>; or, if two <code>float</code> values are
equally close to <i>x</i>, then <i>f</i> must be one of
them and the least significant bit of the significand of
<i>f</i> must be <code>0</code>.
<p>
To create localized string representations of a floating-point
value, use subclasses of {@link java.text.NumberFormat}.

@param   f   the float to be converted.
@return a string representation of the argument."
      end

      operation 6987675 "toHexString"
	class_operation public explicit_return_type "String"
	nparams 1
	  param in name "f" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hexadecimal string representation of the
<code>float</code> argument. All characters mentioned below are
ASCII characters.

<ul>
<li>If the argument is NaN, the result is the string
    &quot;<code>NaN</code>&quot;.
<li>Otherwise, the result is a string that represents the sign and 
magnitude (absolute value) of the argument. If the sign is negative, 
the first character of the result is '<code>-</code>' 
(<code>'&#92;u002D'</code>); if the sign is positive, no sign character 
appears in the result. As for the magnitude <i>m</i>:

<ul> 
<li>If <i>m</i> is infinity, it is represented by the string
<code>\"Infinity\"</code>; thus, positive infinity produces the
result <code>\"Infinity\"</code> and negative infinity produces
the result <code>\"-Infinity\"</code>.

<li>If <i>m</i> is zero, it is represented by the string
<code>\"0x0.0p0\"</code>; thus, negative zero produces the result
<code>\"-0x0.0p0\"</code> and positive zero produces the result
<code>\"0x0.0p0\"</code>.

<li>If <i>m</i> is a <code>float</code> value with a
normalized representation, substrings are used to represent the
significand and exponent fields.  The significand is
represented by the characters <code>&quot;0x1.&quot;</code>
followed by a lowercase hexadecimal representation of the rest
of the significand as a fraction.  Trailing zeros in the
hexadecimal representation are removed unless all the digits
are zero, in which case a single zero is used. Next, the
exponent is represented by <code>&quot;p&quot;</code> followed
by a decimal string of the unbiased exponent as if produced by
a call to {@link Integer#toString(int) Integer.toString} on the
exponent value.

<li>If <i>m</i> is a <code>float</code> value with a subnormal
representation, the significand is represented by the
characters <code>&quot;0x0.&quot;</code> followed by a
hexadecimal representation of the rest of the significand as a
fraction.  Trailing zeros in the hexadecimal representation are
removed. Next, the exponent is represented by
<code>&quot;p-126&quot;</code>.  Note that there must be at
least one nonzero digit in a subnormal significand.

</ul>

</ul>

<table border>
<caption><h3>Examples</h3></caption>
<tr><th>Floating-point Value</th><th>Hexadecimal String</th>
<tr><td><code>1.0</code></td>	<td><code>0x1.0p0</code></td>
<tr><td><code>-1.0</code></td>	<td><code>-0x1.0p0</code></td>
<tr><td><code>2.0</code></td>	<td><code>0x1.0p1</code></td>
<tr><td><code>3.0</code></td>	<td><code>0x1.8p1</code></td>
<tr><td><code>0.5</code></td>	<td><code>0x1.0p-1</code></td>
<tr><td><code>0.25</code></td>	<td><code>0x1.0p-2</code></td>
<tr><td><code>Float.MAX_VALUE</code></td>
    <td><code>0x1.fffffep127</code></td>
<tr><td><code>Minimum Normal Value</code></td>
    <td><code>0x1.0p-126</code></td>
<tr><td><code>Maximum Subnormal Value</code></td>
    <td><code>0x0.fffffep-126</code></td>
<tr><td><code>Float.MIN_VALUE</code></td>
    <td><code>0x0.000002p-126</code></td>
</table>
@param   f   the <code>float</code> to be converted.
@return a hex string representation of the argument.
@since 1.5
@author Joseph D. Darcy"
      end

      operation 6987803 "valueOf"
	class_operation public return_type class_ref 876955 // Float
	nparams 1
	  param in name "s" explicit_type "String"
	nexceptions 1
	  exception class_ref 533659 // NumberFormatException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>Float</code> object holding the
<code>float</code> value represented by the argument string
<code>s</code>.

<p>If <code>s</code> is <code>null</code>, then a
<code>NullPointerException</code> is thrown.

<p>Leading and trailing whitespace characters in <code>s</code>
are ignored.  Whitespace is removed as if by the {@link
String#trim} method; that is, both ASCII space and control
characters are removed. The rest of <code>s</code> should
constitute a <i>FloatValue</i> as described by the lexical
syntax rules:

<blockquote>
<dl>
<dt><i>FloatValue:</i>
<dd><i>Sign<sub>opt</sub></i> <code>NaN</code>
<dd><i>Sign<sub>opt</sub></i> <code>Infinity</code>
<dd><i>Sign<sub>opt</sub> FloatingPointLiteral</i>
<dd><i>Sign<sub>opt</sub> HexFloatingPointLiteral</i>
<dd><i>SignedInteger</i>
</dl>

<p>

<dl>
<dt><i>HexFloatingPointLiteral</i>:
<dd> <i>HexSignificand BinaryExponent FloatTypeSuffix<sub>opt</sub></i>
</dl>

<p>

<dl>
<dt><i>HexSignificand:</i>
<dd><i>HexNumeral</i>
<dd><i>HexNumeral</i> <code>.</code>
<dd><code>0x</code> <i>HexDigits<sub>opt</sub> 
    </i><code>.</code><i> HexDigits</i>
<dd><code>0X</code><i> HexDigits<sub>opt</sub> 
    </i><code>.</code> <i>HexDigits</i>
</dl>

<p>

<dl>
<dt><i>BinaryExponent:</i>
<dd><i>BinaryExponentIndicator SignedInteger</i>
</dl>

<p>

<dl>
<dt><i>BinaryExponentIndicator:</i>
<dd><code>p</code>
<dd><code>P</code>
</dl>

</blockquote>

where <i>Sign</i>, <i>FloatingPointLiteral</i>,
<i>HexNumeral</i>, <i>HexDigits</i>, <i>SignedInteger</i> and
<i>FloatTypeSuffix</i> are as defined in the lexical structure
sections of the of the <a
href=\"http://java.sun.com/docs/books/jls/html/\">Java Language
Specification</a>. If <code>s</code> does not have the form of
a <i>FloatValue</i>, then a <code>NumberFormatException</code>
is thrown. Otherwise, <code>s</code> is regarded as
representing an exact decimal value in the usual
&quot;computerized scientific notation&quot; or as an exact
hexadecimal value; this exact numerical value is then
conceptually converted to an &quot;infinitely precise&quot;
binary value that is then rounded to type <code>float</code>
by the usual round-to-nearest rule of IEEE 754 floating-point
arithmetic, which includes preserving the sign of a zero
value. Finally, a <code>Float</code> object representing this
<code>float</code> value is returned.

<p>To interpret localized string representations of a
floating-point value, use subclasses of {@link
java.text.NumberFormat}.

<p>Note that trailing format specifiers, specifiers that
determine the type of a floating-point literal
(<code>1.0f</code> is a <code>float</code> value;
<code>1.0d</code> is a <code>double</code> value), do
<em>not</em> influence the results of this method.  In other
words, the numerical value of the input string is converted
directly to the target floating-point type.  In general, the
two-step sequence of conversions, string to <code>double</code>
followed by <code>double</code> to <code>float</code>, is
<em>not</em> equivalent to converting a string directly to
<code>float</code>.  For example, if first converted to an
intermediate <code>double</code> and then to
<code>float</code>, the string<br>
<code>\"1.00000017881393421514957253748434595763683319091796875001d\"</code><br>
results in the <code>float</code> value
<code>1.0000002f</code>; if the string is converted directly to
<code>float</code>, <code>1.000000<b>1</b>f</code> results.

<p>To avoid calling this method on a invalid string and having
a <code>NumberFormatException</code> be thrown, the documentation
for {@link Double#valueOf Double.valueOf} lists a regular
expression which can be used to screen the input.

@param      s   the string to be parsed.
@return     a <code>Float</code> object holding the value
            represented by the <code>String</code> argument.
@exception  NumberFormatException  if the string does not contain a
              parsable number.  "
      end

      operation 6987931 "valueOf"
	class_operation public return_type class_ref 876955 // Float
	nparams 1
	  param in name "f" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <tt>Float</tt> instance representing the specified
<tt>float</tt> value.
If a new <tt>Float</tt> instance is not required, this method
should generally be used in preference to the constructor
{@link #Float(float)}, as this method is likely to yield
significantly better space and time performance by caching
frequently requested values.

@param  f a float value.
@return a <tt>Float</tt> instance representing <tt>f</tt>.
@since  1.5"
      end

      operation 6988059 "parseFloat"
	class_operation public explicit_return_type "float"
	nparams 1
	  param in name "s" explicit_type "String"
	nexceptions 1
	  exception class_ref 533659 // NumberFormatException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new <code>float</code> initialized to the value
represented by the specified <code>String</code>, as performed
by the <code>valueOf</code> method of class <code>Float</code>.

@param      s   the string to be parsed.
@return the <code>float</code> value represented by the string
        argument.
@exception  NumberFormatException  if the string does not contain a
              parsable <code>float</code>.
@see        java.lang.Float#valueOf(String)
@since 1.2"
      end

      operation 6988187 "isNaN"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "v" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if the specified number is a
Not-a-Number (NaN) value, <code>false</code> otherwise.

@param   v   the value to be tested.
@return  <code>true</code> if the argument is NaN;
         <code>false</code> otherwise."
      end

      operation 6988315 "isInfinite"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "v" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if the specified number is infinitely
large in magnitude, <code>false</code> otherwise.

@param   v   the value to be tested.
@return  <code>true</code> if the argument is positive infinity or
         negative infinity; <code>false</code> otherwise."
      end

      attribute 2729883 "value"
	const_attribute private explicit_type "float"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The value of the Float.

@serial
"
      end

      operation 6988443 "Float"
	public explicit_return_type ""
	nparams 1
	  param in name "value" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a newly allocated <code>Float</code> object that
represents the primitive <code>float</code> argument.

@param   value   the value to be represented by the <code>Float</code>."
      end

      operation 6988571 "Float"
	public explicit_return_type ""
	nparams 1
	  param in name "value" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a newly allocated <code>Float</code> object that
represents the argument converted to type <code>float</code>.

@param   value   the value to be represented by the <code>Float</code>."
      end

      operation 6988699 "Float"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	nexceptions 1
	  exception class_ref 533659 // NumberFormatException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a newly allocated <code>Float</code> object that 
represents the floating-point value of type <code>float</code> 
represented by the string. The string is converted to a 
<code>float</code> value as if by the <code>valueOf</code> method. 

@param      s   a string to be converted to a <code>Float</code>.
@exception  NumberFormatException  if the string does not contain a
              parsable number.
@see        java.lang.Float#valueOf(java.lang.String)"
      end

      operation 6988827 "isNaN"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if this <code>Float</code> value is a
Not-a-Number (NaN), <code>false</code> otherwise.

@return  <code>true</code> if the value represented by this object is
         NaN; <code>false</code> otherwise."
      end

      operation 6988955 "isInfinite"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if this <code>Float</code> value is
infinitely large in magnitude, <code>false</code> otherwise.

@return  <code>true</code> if the value represented by this object is
         positive infinity or negative infinity;
         <code>false</code> otherwise."
      end

      operation 6989083 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of this <code>Float</code> object.
The primitive <code>float</code> value represented by this object
is converted to a <code>String</code> exactly as if by the method
<code>toString</code> of one argument.

@return  a <code>String</code> representation of this object.
@see java.lang.Float#toString(float)"
      end

      operation 6989211 "byteValue"
	public explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this <code>Float</code> as a
<code>byte</code> (by casting to a <code>byte</code>).

@return  the <code>float</code> value represented by this object
         converted to type <code>byte</code>"
      end

      operation 6989339 "shortValue"
	public explicit_return_type "short"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this <code>Float</code> as a
<code>short</code> (by casting to a <code>short</code>).

@return  the <code>float</code> value represented by this object
         converted to type <code>short</code>
@since JDK1.1"
      end

      operation 6989467 "intValue"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this <code>Float</code> as an
<code>int</code> (by casting to type <code>int</code>).

@return  the <code>float</code> value represented by this object
         converted to type <code>int</code>"
      end

      operation 6989595 "longValue"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns value of this <code>Float</code> as a <code>long</code>
(by casting to type <code>long</code>).

@return  the <code>float</code> value represented by this object
         converted to type <code>long</code>"
      end

      operation 6989723 "floatValue"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>float</code> value of this <code>Float</code>
object.

@return the <code>float</code> value represented by this object "
      end

      operation 6989851 "doubleValue"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>double</code> value of this
<code>Float</code> object.

@return the <code>float</code> value represented by this 
        object is converted to type <code>double</code> and the 
        result of the conversion is returned.  "
      end

      operation 6989979 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hash code for this <code>Float</code> object. The
result is the integer bit representation, exactly as produced
by the method {@link #floatToIntBits(float)}, of the primitive
<code>float</code> value represented by this <code>Float</code>
object.

@return a hash code value for this object.  "
      end

      operation 6990107 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
Compares this object against the specified object.  The result
is <code>true</code> if and only if the argument is not
<code>null</code> and is a <code>Float</code> object that
represents a <code>float</code> with the same value as the
<code>float</code> represented by this object. For this
purpose, two <code>float</code> values are considered to be the
same if and only if the method {@link #floatToIntBits(float)}
returns the identical <code>int</code> value when applied to
each.
<p>
Note that in most cases, for two instances of class
<code>Float</code>, <code>f1</code> and <code>f2</code>, the value
of <code>f1.equals(f2)</code> is <code>true</code> if and only if
<blockquote><pre>
  f1.floatValue() == f2.floatValue()
</pre></blockquote>
<p>
also has the value <code>true</code>. However, there are two exceptions:
<ul>
<li>If <code>f1</code> and <code>f2</code> both represent
    <code>Float.NaN</code>, then the <code>equals</code> method returns
    <code>true</code>, even though <code>Float.NaN==Float.NaN</code>
    has the value <code>false</code>.
<li>If <code>f1</code> represents <code>+0.0f</code> while
    <code>f2</code> represents <code>-0.0f</code>, or vice
    versa, the <code>equal</code> test has the value
    <code>false</code>, even though <code>0.0f==-0.0f</code>
    has the value <code>true</code>.
</ul>
This definition allows hash tables to operate properly.

@param obj the object to be compared
@return  <code>true</code> if the objects are the same;
         <code>false</code> otherwise.
@see java.lang.Float#floatToIntBits(float)"
      end

      operation 6990235 "floatToIntBits"
	class_operation public explicit_return_type "int"
	nparams 1
	  param in name "value" explicit_type "float"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a representation of the specified floating-point value
according to the IEEE 754 floating-point \"single format\" bit
layout.
<p>
Bit 31 (the bit that is selected by the mask 
<code>0x80000000</code>) represents the sign of the floating-point 
number. 
Bits 30-23 (the bits that are selected by the mask 
<code>0x7f800000</code>) represent the exponent. 
Bits 22-0 (the bits that are selected by the mask 
<code>0x007fffff</code>) represent the significand (sometimes called 
the mantissa) of the floating-point number. 
<p>If the argument is positive infinity, the result is 
<code>0x7f800000</code>. 
<p>If the argument is negative infinity, the result is 
<code>0xff800000</code>. 
<p>If the argument is NaN, the result is <code>0x7fc00000</code>. 
<p>
In all cases, the result is an integer that, when given to the 
{@link #intBitsToFloat(int)} method, will produce a floating-point 
value the same as the argument to <code>floatToIntBits</code>
(except all NaN values are collapsed to a single
&quot;canonical&quot; NaN value).

@param   value   a floating-point number.
@return the bits that represent the floating-point number.  "
      end

      operation 6990363 "floatToRawIntBits"
	class_operation public explicit_return_type "int"
	nparams 1
	  param in name "value" explicit_type "float"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a representation of the specified floating-point value
according to the IEEE 754 floating-point \"single format\" bit
layout, preserving Not-a-Number (NaN) values.
<p>
Bit 31 (the bit that is selected by the mask 
<code>0x80000000</code>) represents the sign of the floating-point 
number. 
Bits 30-23 (the bits that are selected by the mask 
<code>0x7f800000</code>) represent the exponent. 
Bits 22-0 (the bits that are selected by the mask 
<code>0x007fffff</code>) represent the significand (sometimes called 
the mantissa) of the floating-point number. 
<p>If the argument is positive infinity, the result is 
<code>0x7f800000</code>. 
<p>If the argument is negative infinity, the result is 
<code>0xff800000</code>.
<p>
If the argument is NaN, the result is the integer representing
the actual NaN value.  Unlike the <code>floatToIntBits</code>
method, <code>intToRawIntBits</code> does not collapse all the
bit patterns encoding a NaN to a single &quot;canonical&quot;
NaN value.
<p>
In all cases, the result is an integer that, when given to the
{@link #intBitsToFloat(int)} method, will produce a
floating-point value the same as the argument to
<code>floatToRawIntBits</code>.
@param   value   a floating-point number.
@return the bits that represent the floating-point number."
      end

      operation 6990491 "intBitsToFloat"
	class_operation public explicit_return_type "float"
	nparams 1
	  param in name "bits" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>float</code> value corresponding to a given
bit representation.
The argument is considered to be a representation of a
floating-point value according to the IEEE 754 floating-point
\"single format\" bit layout.
<p>
If the argument is <code>0x7f800000</code>, the result is positive
infinity.
<p>
If the argument is <code>0xff800000</code>, the result is negative
infinity.
<p>
If the argument is any value in the range
<code>0x7f800001</code> through <code>0x7fffffff</code> or in
the range <code>0xff800001</code> through
<code>0xffffffff</code>, the result is a NaN.  No IEEE 754
floating-point operation provided by Java can distinguish
between two NaN values of the same type with different bit
patterns.  Distinct values of NaN are only distinguishable by
use of the <code>Float.floatToRawIntBits</code> method.
<p>
In all other cases, let <i>s</i>, <i>e</i>, and <i>m</i> be three 
values that can be computed from the argument: 
<blockquote><pre>
int s = ((bits &gt;&gt; 31) == 0) ? 1 : -1;
int e = ((bits &gt;&gt; 23) & 0xff);
int m = (e == 0) ?
                (bits & 0x7fffff) &lt;&lt; 1 :
                (bits & 0x7fffff) | 0x800000;
</pre></blockquote>
Then the floating-point result equals the value of the mathematical 
expression <i>s</i>&middot;<i>m</i>&middot;2<sup><i>e</i>-150</sup>.
<p>
Note that this method may not be able to return a
<code>float</code> NaN with exactly same bit pattern as the
<code>int</code> argument.  IEEE 754 distinguishes between two
kinds of NaNs, quiet NaNs and <i>signaling NaNs</i>.  The
differences between the two kinds of NaN are generally not
visible in Java.  Arithmetic operations on signaling NaNs turn
them into quiet NaNs with a different, but often similar, bit
pattern.  However, on some processors merely copying a
signaling NaN also performs that conversion.  In particular,
copying a signaling NaN to return it to the calling method may
perform this conversion.  So <code>intBitsToFloat</code> may
not be able to return a <code>float</code> with a signaling NaN
bit pattern.  Consequently, for some <code>int</code> values,
<code>floatToRawIntBits(intBitsToFloat(start))</code> may
<i>not</i> equal <code>start</code>.  Moreover, which
particular bit patterns represent signaling NaNs is platform
dependent; although all NaN bit patterns, quiet or signaling,
must be in the NaN range identified above.

@param   bits   an integer.
@return  the <code>float</code> floating-point value with the same bit
         pattern."
      end

      operation 6990619 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "anotherFloat" type class_ref 876955 // Float
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares two <code>Float</code> objects numerically.  There are
two ways in which comparisons performed by this method differ
from those performed by the Java language numerical comparison
operators (<code>&lt;, &lt;=, ==, &gt;= &gt;</code>) when
applied to primitive <code>float</code> values:
<ul><li>
		<code>Float.NaN</code> is considered by this method to
		be equal to itself and greater than all other
		<code>float</code> values
		(including <code>Float.POSITIVE_INFINITY</code>).
<li>
		<code>0.0f</code> is considered by this method to be greater
		than <code>-0.0f</code>.
</ul>
This ensures that the <i>natural ordering</i> of <tt>Float</tt>
objects imposed by this method is <i>consistent with equals</i>.

@param   anotherFloat   the <code>Float</code> to be compared.
@return  the value <code>0</code> if <code>anotherFloat</code> is
		numerically equal to this <code>Float</code>; a value
		less than <code>0</code> if this <code>Float</code>
		is numerically less than <code>anotherFloat</code>;
		and a value greater than <code>0</code> if this
		<code>Float</code> is numerically greater than
		<code>anotherFloat</code>.
		
@since   1.2
@see Comparable#compareTo(Object)"
      end

      operation 6990747 "compare"
	class_operation public explicit_return_type "int"
	nparams 2
	  param in name "f1" explicit_type "float"
	  param in name "f2" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares the two specified <code>float</code> values. The sign
of the integer value returned is the same as that of the
integer that would be returned by the call:
<pre>
   new Float(f1).compareTo(new Float(f2))
</pre>

@param   f1        the first <code>float</code> to compare.
@param   f2        the second <code>float</code> to compare.
@return  the value <code>0</code> if <code>f1</code> is
		numerically equal to <code>f2</code>; a value less than
         <code>0</code> if <code>f1</code> is numerically less than
		<code>f2</code>; and a value greater than <code>0</code>
		if <code>f1</code> is numerically greater than
		<code>f2</code>.
@since 1.4 "
      end

      attribute 2730011 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  -2671257302660747028L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " use serialVersionUID from JDK 1.0.2 for interoperability "
      end
    end

    class 904347 "SecurityManager"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The security manager is a class that allows 
applications to implement a security policy. It allows an 
application to determine, before performing a possibly unsafe or 
sensitive operation, what the operation is and whether 
it is being attempted in a security context that allows the
operation to be performed. The 
application can allow or disallow the operation. 
<p>
The <code>SecurityManager</code> class contains many methods with 
names that begin with the word <code>check</code>. These methods 
are called by various methods in the Java libraries before those 
methods perform certain potentially sensitive operations. The 
invocation of such a <code>check</code> method typically looks like this: 
<p><blockquote><pre>
    SecurityManager security = System.getSecurityManager();
    if (security != null) {
        security.check<i>XXX</i>(argument, &nbsp;.&nbsp;.&nbsp;.&nbsp;);
    }
</pre></blockquote>
<p>
The security manager is thereby given an opportunity to prevent 
completion of the operation by throwing an exception. A security 
manager routine simply returns if the operation is permitted, but 
throws a <code>SecurityException</code> if the operation is not 
permitted. The only exception to this convention is 
<code>checkTopLevelWindow</code>, which returns a 
<code>boolean</code> value. 
<p>
The current security manager is set by the 
<code>setSecurityManager</code> method in class 
<code>System</code>. The current security manager is obtained 
by the <code>getSecurityManager</code> method. 
<p> 
The special method 
{@link SecurityManager#checkPermission(java.security.Permission)}
determines whether an access request indicated by a specified
permission should be granted or denied. The 
default implementation calls

<pre>
  AccessController.checkPermission(perm);
</pre>

<p> 
If a requested access is allowed, 
<code>checkPermission</code> returns quietly. If denied, a 
<code>SecurityException</code> is thrown. 
<p>
As of Java 2 SDK v1.2, the default implementation of each of the other
<code>check</code> methods in <code>SecurityManager</code> is to 
call the <code>SecurityManager checkPermission</code> method
to determine if the calling thread has permission to perform the requested
operation.
<p> 
Note that the <code>checkPermission</code> method with
just a single permission argument always performs security checks
within the context of the currently executing thread.
Sometimes a security check that should be made within a given context
will actually need to be done from within a
<i>different</i> context (for example, from within a worker thread).
The {@link SecurityManager#getSecurityContext getSecurityContext} method 
and the {@link SecurityManager#checkPermission(java.security.Permission, 
java.lang.Object) checkPermission}
method that includes a context argument are provided 
for this situation. The 
<code>getSecurityContext</code> method returns a \"snapshot\"
of the current calling context. (The default implementation 
returns an AccessControlContext object.) A sample call is
the following:

<pre>
  Object context = null;
  SecurityManager sm = System.getSecurityManager();
  if (sm != null) context = sm.getSecurityContext(); 
</pre>

<p>
The <code>checkPermission</code> method
that takes a context object in addition to a permission 
makes access decisions based on that context,
rather than on that of the current execution thread.
Code within a different context can thus call that method,
passing the permission and the
previously-saved context object. A sample call, using the
SecurityManager <code>sm</code> obtained as in the previous example, 
is the following:

<pre>
  if (sm != null) sm.checkPermission(permission, context);
</pre> 

<p>Permissions fall into these categories: File, Socket, Net, 
Security, Runtime, Property, AWT, Reflect, and Serializable. 
The classes managing these various
permission categories are <code>java.io.FilePermission</code>,
<code>java.net.SocketPermission</code>, 
<code>java.net.NetPermission</code>, 
<code>java.security.SecurityPermission</code>,
<code>java.lang.RuntimePermission</code>, 
<code>java.util.PropertyPermission</code>, 
<code>java.awt.AWTPermission</code>,
<code>java.lang.reflect.ReflectPermission</code>, and
<code>java.io.SerializablePermission</code>. 

<p>All but the first two (FilePermission and SocketPermission) are 
subclasses of <code>java.security.BasicPermission</code>, which itself 
is an abstract subclass of the
top-level class for permissions, which is 
<code>java.security.Permission</code>. BasicPermission defines the 
functionality needed for all permissions that contain a name 
that follows the hierarchical property naming convention 
(for example, \"exitVM\", \"setFactory\", \"queuePrintJob\", etc). 
An asterisk 
may appear at the end of the name, following a \".\", or by itself, to 
signify a wildcard match. For example: \"a.*\" or \"*\" is valid, 
\"*a\" or \"a*b\" is not valid.

<p>FilePermission and SocketPermission are subclasses of the
top-level class for permissions 
(<code>java.security.Permission</code>). Classes like these
that have a more complicated name syntax than that used by
BasicPermission subclass directly from Permission rather than from
BasicPermission. For example, 
for a <code>java.io.FilePermission</code> object, the permission name is
the path name of a file (or directory).

<p>Some of the permission classes have an \"actions\" list that tells 
the actions that are permitted for the object.  For example, 
for a <code>java.io.FilePermission</code> object, the actions list
(such as \"read, write\") specifies which actions are granted for the
specified file (or for files in the specified directory).

<p>Other permission classes are for \"named\" permissions - 
ones that contain a name but no actions list; you either have the
named permission or you don't.

<p>Note: There is also a <code>java.security.AllPermission</code>
permission that implies all permissions. It exists to simplify the work
of system administrators who might need to perform multiple
tasks that require all (or numerous) permissions.
<p>
See <a href =\"../../../guide/security/permissions.html\">
Permissions in the JDK</a> for permission-related information.
This document includes, for example, a table listing the various SecurityManager
<code>check</code> methods and the permission(s) the default 
implementation of each such method requires. 
It also contains a table of all the version 1.2 methods
that require permissions, and for each such method tells 
which permission it requires.
<p>
For more information about <code>SecurityManager</code> changes made in 
the JDK and advice regarding porting of 1.1-style security managers,
see the <a href=\"../../../guide/security/index.html\">security documentation</a>.

@author  Arthur van Hoff
@author  Roland Schemers

@version 1.136, 06/28/04
@see     java.lang.ClassLoader
@see     java.lang.SecurityException
@see     java.lang.SecurityManager#checkTopLevelWindow(java.lang.Object)
 checkTopLevelWindow
@see     java.lang.System#getSecurityManager() getSecurityManager
@see     java.lang.System#setSecurityManager(java.lang.SecurityManager)
 setSecurityManager
@see     java.security.AccessController AccessController
@see     java.security.AccessControlContext AccessControlContext
@see     java.security.AccessControlException AccessControlException
@see     java.security.Permission 
@see     java.security.BasicPermission
@see     java.io.FilePermission
@see     java.net.SocketPermission
@see     java.util.PropertyPermission
@see     java.lang.RuntimePermission
@see     java.awt.AWTPermission
@see     java.security.Policy Policy
@see     java.security.SecurityPermission SecurityPermission
@see     java.security.ProtectionDomain

@since   JDK1.0"
      attribute 2735131 "inCheck"
	protected explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@Deprecated
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "This field is <code>true</code> if there is a security check in 
progress; <code>false</code> otherwise.

@deprecated This type of security checking is not recommended.
 It is recommended that the <code>checkPermission</code>
 call be used instead.
"
      end

      attribute 2735259 "initialized"
	private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Have we been initialized. Effective against finalizer attacks.
"
      end

      operation 7034267 "hasAllPermission"
	private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "returns true if the current context has been granted AllPermission"
      end

      operation 7034395 "getInCheck"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Tests if there is a security check in progress.

@return the value of the <code>inCheck</code> field. This field 
         should contain <code>true</code> if a security check is
         in progress,
         <code>false</code> otherwise.
@see     java.lang.SecurityManager#inCheck
@deprecated This type of security checking is not recommended.
 It is recommended that the <code>checkPermission</code>
 call be used instead."
      end

      operation 7034523 "SecurityManager"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new <code>SecurityManager</code>.

<p> If there is a security manager already installed, this method first
calls the security manager's <code>checkPermission</code> method
with the <code>RuntimePermission(\"createSecurityManager\")</code>
permission to ensure the calling thread has permission to create a new 
security manager.
This may result in throwing a <code>SecurityException</code>.

@exception  java.lang.SecurityException if a security manager already 
            exists and its <code>checkPermission</code> method 
            doesn't allow creation of a new security manager.
@see        java.lang.System#getSecurityManager()
@see        #checkPermission(java.security.Permission) checkPermission
@see java.lang.RuntimePermission"
      end

      operation 7034651 "getClassContext"
	protected return_type class_ref 164635 // Class
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current execution stack as an array of classes. 
<p>
The length of the array is the number of methods on the execution 
stack. The element at index <code>0</code> is the class of the 
currently executing method, the element at index <code>1</code> is 
the class of that method's caller, and so on. 

@return  the execution stack."
      end

      operation 7034779 "currentClassLoader"
	protected return_type class_ref 163611 // ClassLoader
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Returns the class loader of the most recently executing method from
a class defined using a non-system class loader. A non-system 
class loader is defined as being a class loader that is not equal to
the system class loader (as returned 
by {@link ClassLoader#getSystemClassLoader}) or one of its ancestors.
<p>
This method will return
<code>null</code> in the following three cases:<p>
<ol>
  <li>All methods on the execution stack are from classes
  defined using the system class loader or one of its ancestors.

  <li>All methods on the execution stack up to the first
  \"privileged\" caller 
  (see {@link java.security.AccessController#doPrivileged})
  are from classes
  defined using the system class loader or one of its ancestors.

  <li> A call to <code>checkPermission</code> with 
  <code>java.security.AllPermission</code> does not 
  result in a SecurityException. 

</ol>

@return  the class loader of the most recent occurrence on the stack
         of a method from a class defined using a non-system class 
         loader.

@deprecated This type of security checking is not recommended.
 It is recommended that the <code>checkPermission</code>
 call be used instead.

@see  java.lang.ClassLoader#getSystemClassLoader() getSystemClassLoader
@see  #checkPermission(java.security.Permission) checkPermission"
      end

      operation 7034907 "currentClassLoader0"
	private return_type class_ref 163611 // ClassLoader
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7035035 "currentLoadedClass"
	protected return_type class_ref 164635 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Returns the class of the most recently executing method from
a class defined using a non-system class loader. A non-system 
class loader is defined as being a class loader that is not equal to
the system class loader (as returned 
by {@link ClassLoader#getSystemClassLoader}) or one of its ancestors.
<p>
This method will return
<code>null</code> in the following three cases:<p>
<ol>
  <li>All methods on the execution stack are from classes
  defined using the system class loader or one of its ancestors.

  <li>All methods on the execution stack up to the first
  \"privileged\" caller
  (see {@link java.security.AccessController#doPrivileged})
  are from classes
  defined using the system class loader or one of its ancestors.

  <li> A call to <code>checkPermission</code> with 
  <code>java.security.AllPermission</code> does not 
  result in a SecurityException. 

</ol>

@return  the class  of the most recent occurrence on the stack
         of a method from a class defined using a non-system class 
         loader.

@deprecated This type of security checking is not recommended.
 It is recommended that the <code>checkPermission</code>
 call be used instead.

@see  java.lang.ClassLoader#getSystemClassLoader() getSystemClassLoader
@see  #checkPermission(java.security.Permission) checkPermission"
      end

      operation 7035163 "classDepth"
	protected explicit_return_type "int"
	nparams 1
	  param in name "name" explicit_type "String"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Returns the stack depth of the specified class. 

@param   name   the fully qualified name of the class to search for.
@return  the depth on the stack frame of the first occurrence of a
         method from a class with the specified name;
         <code>-1</code> if such a frame cannot be found.
@deprecated This type of security checking is not recommended.
 It is recommended that the <code>checkPermission</code>
 call be used instead.
"
      end

      operation 7035291 "classLoaderDepth"
	protected explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Returns the stack depth of the most recently executing method 
from a class defined using a non-system class loader.  A non-system 
class loader is defined as being a class loader that is not equal to
the system class loader (as returned 
by {@link ClassLoader#getSystemClassLoader}) or one of its ancestors.
<p>
This method will return
-1 in the following three cases:<p>
<ol>
  <li>All methods on the execution stack are from classes
  defined using the system class loader or one of its ancestors.

  <li>All methods on the execution stack up to the first
  \"privileged\" caller
  (see {@link java.security.AccessController#doPrivileged})
  are from classes
  defined using the system class loader or one of its ancestors.

  <li> A call to <code>checkPermission</code> with 
  <code>java.security.AllPermission</code> does not 
  result in a SecurityException. 

</ol>

@return the depth on the stack frame of the most recent occurrence of
         a method from a class defined using a non-system class loader.

@deprecated This type of security checking is not recommended.
 It is recommended that the <code>checkPermission</code>
 call be used instead.

@see   java.lang.ClassLoader#getSystemClassLoader() getSystemClassLoader
@see   #checkPermission(java.security.Permission) checkPermission"
      end

      operation 7035419 "classLoaderDepth0"
	private explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7035547 "inClass"
	protected explicit_return_type "boolean"
	nparams 1
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Tests if a method from a class with the specified
        name is on the execution stack. 

@param  name   the fully qualified name of the class.
@return <code>true</code> if a method from a class with the specified
        name is on the execution stack; <code>false</code> otherwise.
@deprecated This type of security checking is not recommended.
 It is recommended that the <code>checkPermission</code>
 call be used instead."
      end

      operation 7035675 "inClassLoader"
	protected explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Basically, tests if a method from a class defined using a
         class loader is on the execution stack.

@return  <code>true</code> if a call to <code>currentClassLoader</code>
         has a non-null return value.

@deprecated This type of security checking is not recommended.
 It is recommended that the <code>checkPermission</code>
 call be used instead.
@see        #currentClassLoader() currentClassLoader "
      end

      operation 7035803 "getSecurityContext"
	public explicit_return_type "Object"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an object that encapsulates the current execution 
environment. The result of this method is used, for example, by the 
three-argument <code>checkConnect</code> method and by the 
two-argument <code>checkRead</code> method. 
These methods are needed because a trusted method may be called 
on to read a file or open a socket on behalf of another method. 
The trusted method needs to determine if the other (possibly 
untrusted) method would be allowed to perform the operation on its 
own. 
<p> The default implementation of this method is to return 
an <code>AccessControlContext</code> object.

@return  an implementation-dependent object that encapsulates
         sufficient information about the current execution environment
         to perform some security checks later.
@see     java.lang.SecurityManager#checkConnect(java.lang.String, int, 
  java.lang.Object) checkConnect
@see     java.lang.SecurityManager#checkRead(java.lang.String, 
  java.lang.Object) checkRead
@see     java.security.AccessControlContext AccessControlContext"
      end

      operation 7035931 "checkPermission"
	public explicit_return_type "void"
	nparams 1
	  param inout name "perm" type class_ref 285211 // Permission
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws a <code>SecurityException</code> if the requested
access, specified by the given permission, is not permitted based
on the security policy currently in effect.
<p>
This method calls <code>AccessController.checkPermission</code> 
with the given permission.

@param     perm   the requested permission.
@exception SecurityException if access is not permitted based on
		  the current security policy.
@exception NullPointerException if the permission argument is
           <code>null</code>.
@since     1.2"
      end

      operation 7036059 "checkPermission"
	public explicit_return_type "void"
	nparams 2
	  param inout name "perm" type class_ref 285211 // Permission
	  param inout name "context" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws a <code>SecurityException</code> if the
specified security context is denied access to the resource
specified by the given permission.
The context must be a security 
context returned by a previous call to 
<code>getSecurityContext</code> and the access control
decision is based upon the configured security policy for
that security context.
<p>
If <code>context</code> is an instance of 
<code>AccessControlContext</code> then the
<code>AccessControlContext.checkPermission</code> method is
invoked with the specified permission.
<p>
If <code>context</code> is not an instance of 
<code>AccessControlContext</code> then a
<code>SecurityException</code> is thrown. 

@param      perm      the specified permission
@param      context   a system-dependent security context.
@exception  SecurityException  if the specified security context
            is not an instance of <code>AccessControlContext</code>
            (e.g., is <code>null</code>), or is denied access to the
            resource specified by the given permission.
@exception  NullPointerException if the permission argument is
            <code>null</code>.
@see        java.lang.SecurityManager#getSecurityContext()
@see java.security.AccessControlContext#checkPermission(java.security.Permission) 
@since      1.2"
      end

      operation 7036187 "checkCreateClassLoader"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws a <code>SecurityException</code> if the 
calling thread is not allowed to create a new class loader. 
<p>
This method calls <code>checkPermission</code> with the
<code>RuntimePermission(\"createClassLoader\")</code>
permission.
<p>
If you override this method, then you should make a call to 
<code>super.checkCreateClassLoader</code>
at the point the overridden method would normally throw an
exception.

@exception SecurityException if the calling thread does not 
            have permission
            to create a new class loader.
@see        java.lang.ClassLoader#ClassLoader()
@see        #checkPermission(java.security.Permission) checkPermission"
      end

      classrelation 1787675 // rootGroup (<unidirectional association>)
	relation 1787675 --->
	  a role_name "rootGroup" init_value "=  getRootGroup()" class_relation private
	    comment " 
reference to the root thread group, used for the checkAccess
methods.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1787675 // rootGroup (<unidirectional association>)
	  b parent class_ref 163483 // ThreadGroup
      end

      operation 7036315 "getRootGroup"
	class_operation private return_type class_ref 163483 // ThreadGroup
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7036443 "checkAccess"
	public explicit_return_type "void"
	nparams 1
	  param inout name "t" type class_ref 163227 // Thread
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws a <code>SecurityException</code> if the 
calling thread is not allowed to modify the thread argument. 
<p>
This method is invoked for the current security manager by the 
<code>stop</code>, <code>suspend</code>, <code>resume</code>, 
<code>setPriority</code>, <code>setName</code>, and 
<code>setDaemon</code> methods of class <code>Thread</code>. 
<p>
If the thread argument is a system thread (belongs to
the thread group with a <code>null</code> parent) then 
this method calls <code>checkPermission</code> with the
<code>RuntimePermission(\"modifyThread\")</code> permission.
If the thread argument is <i>not</i> a system thread,
this method just returns silently.
<p>
Applications that want a stricter policy should override this
method. If this method is overridden, the method that overrides
it should additionally check to see if the calling thread has the
<code>RuntimePermission(\"modifyThread\")</code> permission, and
if so, return silently. This is to ensure that code granted
that permission (such as the JDK itself) is allowed to
manipulate any thread.
<p>
If this method is overridden, then 
<code>super.checkAccess</code> should
be called by the first statement in the overridden method, or the 
equivalent security check should be placed in the overridden method.

@param      t   the thread to be checked.
@exception  SecurityException  if the calling thread does not have 
            permission to modify the thread.
@exception  NullPointerException if the thread argument is
            <code>null</code>.
@see        java.lang.Thread#resume() resume
@see        java.lang.Thread#setDaemon(boolean) setDaemon
@see        java.lang.Thread#setName(java.lang.String) setName
@see        java.lang.Thread#setPriority(int) setPriority
@see        java.lang.Thread#stop() stop
@see        java.lang.Thread#suspend() suspend
@see        #checkPermission(java.security.Permission) checkPermission"
      end

      operation 7036571 "checkAccess"
	public explicit_return_type "void"
	nparams 1
	  param inout name "g" type class_ref 163483 // ThreadGroup
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws a <code>SecurityException</code> if the 
calling thread is not allowed to modify the thread group argument. 
<p>
This method is invoked for the current security manager when a 
new child thread or child thread group is created, and by the 
<code>setDaemon</code>, <code>setMaxPriority</code>, 
<code>stop</code>, <code>suspend</code>, <code>resume</code>, and 
<code>destroy</code> methods of class <code>ThreadGroup</code>. 
<p>
If the thread group argument is the system thread group (
has a <code>null</code> parent) then 
this method calls <code>checkPermission</code> with the
<code>RuntimePermission(\"modifyThreadGroup\")</code> permission.
If the thread group argument is <i>not</i> the system thread group,
this method just returns silently.
<p>
Applications that want a stricter policy should override this
method. If this method is overridden, the method that overrides
it should additionally check to see if the calling thread has the
<code>RuntimePermission(\"modifyThreadGroup\")</code> permission, and
if so, return silently. This is to ensure that code granted
that permission (such as the JDK itself) is allowed to
manipulate any thread.
<p>
If this method is overridden, then 
<code>super.checkAccess</code> should
be called by the first statement in the overridden method, or the 
equivalent security check should be placed in the overridden method.

@param      g   the thread group to be checked.
@exception  SecurityException  if the calling thread does not have
            permission to modify the thread group.
@exception  NullPointerException if the thread group argument is
            <code>null</code>.
@see        java.lang.ThreadGroup#destroy() destroy
@see        java.lang.ThreadGroup#resume() resume
@see        java.lang.ThreadGroup#setDaemon(boolean) setDaemon
@see        java.lang.ThreadGroup#setMaxPriority(int) setMaxPriority
@see        java.lang.ThreadGroup#stop() stop
@see        java.lang.ThreadGroup#suspend() suspend
@see        #checkPermission(java.security.Permission) checkPermission"
      end

      operation 7036699 "checkExit"
	public explicit_return_type "void"
	nparams 1
	  param in name "status" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws a <code>SecurityException</code> if the 
calling thread is not allowed to cause the Java Virtual Machine to 
halt with the specified status code. 
<p>
This method is invoked for the current security manager by the 
<code>exit</code> method of class <code>Runtime</code>. A status 
of <code>0</code> indicates success; other values indicate various 
errors. 
<p>
This method calls <code>checkPermission</code> with the
<code>RuntimePermission(\"exitVM\")</code> permission.
<p>
If you override this method, then you should make a call to 
<code>super.checkExit</code>
at the point the overridden method would normally throw an
exception.

@param      status   the exit status.
@exception SecurityException if the calling thread does not have 
             permission to halt the Java Virtual Machine with 
             the specified status.
@see        java.lang.Runtime#exit(int) exit
@see        #checkPermission(java.security.Permission) checkPermission"
      end

      operation 7036827 "checkExec"
	public explicit_return_type "void"
	nparams 1
	  param in name "cmd" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws a <code>SecurityException</code> if the 
calling thread is not allowed to create a subprocess. 
<p>
This method is invoked for the current security manager by the 
<code>exec</code> methods of class <code>Runtime</code>.
<p>
This method calls <code>checkPermission</code> with the
<code>FilePermission(cmd,\"execute\")</code> permission
if cmd is an absolute path, otherwise it calls 
<code>checkPermission</code> with 
<code>FilePermission(\"&lt;&lt;ALL FILES&gt;&gt;\",\"execute\")</code>.
<p>
If you override this method, then you should make a call to 
<code>super.checkExec</code>
at the point the overridden method would normally throw an
exception.

@param      cmd   the specified system command.
@exception  SecurityException if the calling thread does not have 
            permission to create a subprocess.
@exception  NullPointerException if the <code>cmd</code> argument is
            <code>null</code>.
@see     java.lang.Runtime#exec(java.lang.String)
@see     java.lang.Runtime#exec(java.lang.String, java.lang.String[])
@see     java.lang.Runtime#exec(java.lang.String[])
@see     java.lang.Runtime#exec(java.lang.String[], java.lang.String[])
@see     #checkPermission(java.security.Permission) checkPermission"
      end

      operation 7036955 "checkLink"
	public explicit_return_type "void"
	nparams 1
	  param in name "lib" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws a <code>SecurityException</code> if the 
calling thread is not allowed to dynamic link the library code 
specified by the string argument file. The argument is either a 
simple library name or a complete filename. 
<p>
This method is invoked for the current security manager by 
methods <code>load</code> and <code>loadLibrary</code> of class 
<code>Runtime</code>. 
<p>
This method calls <code>checkPermission</code> with the
<code>RuntimePermission(\"loadLibrary.\"+lib)</code> permission.
<p>
If you override this method, then you should make a call to 
<code>super.checkLink</code>
at the point the overridden method would normally throw an
exception.

@param      lib   the name of the library.
@exception  SecurityException if the calling thread does not have
            permission to dynamically link the library.
@exception  NullPointerException if the <code>lib</code> argument is
            <code>null</code>.
@see        java.lang.Runtime#load(java.lang.String)
@see        java.lang.Runtime#loadLibrary(java.lang.String)
@see        #checkPermission(java.security.Permission) checkPermission"
      end

      operation 7037083 "checkRead"
	public explicit_return_type "void"
	nparams 1
	  param inout name "fd" type class_ref 904475 // FileDescriptor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws a <code>SecurityException</code> if the 
calling thread is not allowed to read from the specified file 
descriptor. 
<p>
This method calls <code>checkPermission</code> with the
<code>RuntimePermission(\"readFileDescriptor\")</code>
permission.
<p>
If you override this method, then you should make a call to 
<code>super.checkRead</code>
at the point the overridden method would normally throw an
exception.

@param      fd   the system-dependent file descriptor.
@exception  SecurityException  if the calling thread does not have
            permission to access the specified file descriptor.
@exception  NullPointerException if the file descriptor argument is
            <code>null</code>.
@see        java.io.FileDescriptor
@see        #checkPermission(java.security.Permission) checkPermission"
      end

      operation 7037211 "checkRead"
	public explicit_return_type "void"
	nparams 1
	  param in name "file" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws a <code>SecurityException</code> if the 
calling thread is not allowed to read the file specified by the 
string argument. 
<p>
This method calls <code>checkPermission</code> with the
<code>FilePermission(file,\"read\")</code> permission.
<p>
If you override this method, then you should make a call to 
<code>super.checkRead</code>
at the point the overridden method would normally throw an
exception. 

@param      file   the system-dependent file name.
@exception  SecurityException if the calling thread does not have 
            permission to access the specified file.
@exception  NullPointerException if the <code>file</code> argument is
            <code>null</code>.
@see        #checkPermission(java.security.Permission) checkPermission"
      end

      operation 7037339 "checkRead"
	public explicit_return_type "void"
	nparams 2
	  param in name "file" explicit_type "String"
	  param inout name "context" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws a <code>SecurityException</code> if the 
specified security context is not allowed to read the file 
specified by the string argument. The context must be a security 
context returned by a previous call to 
<code>getSecurityContext</code>. 
<p> If <code>context</code> is an instance of 
<code>AccessControlContext</code> then the
<code>AccessControlContext.checkPermission</code> method will
be invoked with the <code>FilePermission(file,\"read\")</code> permission.
<p> If <code>context</code> is not an instance of 
<code>AccessControlContext</code> then a
<code>SecurityException</code> is thrown. 
<p>
If you override this method, then you should make a call to 
<code>super.checkRead</code>
at the point the overridden method would normally throw an
exception. 

@param      file      the system-dependent filename.
@param      context   a system-dependent security context.
@exception  SecurityException  if the specified security context
            is not an instance of <code>AccessControlContext</code>
            (e.g., is <code>null</code>), or does not have permission
            to read the specified file.
@exception  NullPointerException if the <code>file</code> argument is
            <code>null</code>.
@see        java.lang.SecurityManager#getSecurityContext()
@see        java.security.AccessControlContext#checkPermission(java.security.Permission)"
      end

      operation 7037467 "checkWrite"
	public explicit_return_type "void"
	nparams 1
	  param inout name "fd" type class_ref 904475 // FileDescriptor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws a <code>SecurityException</code> if the 
calling thread is not allowed to write to the specified file 
descriptor. 
<p>
This method calls <code>checkPermission</code> with the
<code>RuntimePermission(\"writeFileDescriptor\")</code>
permission.
<p>
If you override this method, then you should make a call to 
<code>super.checkWrite</code>
at the point the overridden method would normally throw an
exception.

@param      fd   the system-dependent file descriptor.
@exception SecurityException  if the calling thread does not have
            permission to access the specified file descriptor.
@exception  NullPointerException if the file descriptor argument is
            <code>null</code>.
@see        java.io.FileDescriptor
@see        #checkPermission(java.security.Permission) checkPermission"
      end

      operation 7037595 "checkWrite"
	public explicit_return_type "void"
	nparams 1
	  param in name "file" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws a <code>SecurityException</code> if the 
calling thread is not allowed to write to the file specified by 
the string argument. 
<p>
This method calls <code>checkPermission</code> with the
<code>FilePermission(file,\"write\")</code> permission.
<p>
If you override this method, then you should make a call to 
<code>super.checkWrite</code>
at the point the overridden method would normally throw an
exception.

@param      file   the system-dependent filename.
@exception  SecurityException  if the calling thread does not 
            have permission to access the specified file.
@exception  NullPointerException if the <code>file</code> argument is
            <code>null</code>.
@see        #checkPermission(java.security.Permission) checkPermission"
      end

      operation 7037723 "checkDelete"
	public explicit_return_type "void"
	nparams 1
	  param in name "file" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws a <code>SecurityException</code> if the 
calling thread is not allowed to delete the specified file. 
<p>
This method is invoked for the current security manager by the 
<code>delete</code> method of class <code>File</code>.
<p>
This method calls <code>checkPermission</code> with the
<code>FilePermission(file,\"delete\")</code> permission.
<p>
If you override this method, then you should make a call to 
<code>super.checkDelete</code>
at the point the overridden method would normally throw an
exception.

@param      file   the system-dependent filename.
@exception  SecurityException if the calling thread does not 
            have permission to delete the file.
@exception  NullPointerException if the <code>file</code> argument is
            <code>null</code>.
@see        java.io.File#delete()
@see        #checkPermission(java.security.Permission) checkPermission"
      end

      operation 7037851 "checkConnect"
	public explicit_return_type "void"
	nparams 2
	  param in name "host" explicit_type "String"
	  param in name "port" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws a <code>SecurityException</code> if the 
calling thread is not allowed to open a socket connection to the 
specified host and port number. 
<p>
A port number of <code>-1</code> indicates that the calling 
method is attempting to determine the IP address of the specified 
host name. 
<p>
This method calls <code>checkPermission</code> with the
<code>SocketPermission(host+\":\"+port,\"connect\")</code> permission if
the port is not equal to -1. If the port is equal to -1, then
it calls <code>checkPermission</code> with the
<code>SocketPermission(host,\"resolve\")</code> permission.
<p>
If you override this method, then you should make a call to 
<code>super.checkConnect</code>
at the point the overridden method would normally throw an
exception.

@param      host   the host name port to connect to.
@param      port   the protocol port to connect to.
@exception  SecurityException  if the calling thread does not have
            permission to open a socket connection to the specified
              <code>host</code> and <code>port</code>.
@exception  NullPointerException if the <code>host</code> argument is
            <code>null</code>.
@see        #checkPermission(java.security.Permission) checkPermission"
      end

      operation 7037979 "checkConnect"
	public explicit_return_type "void"
	nparams 3
	  param in name "host" explicit_type "String"
	  param in name "port" explicit_type "int"
	  param inout name "context" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws a <code>SecurityException</code> if the 
specified security context is not allowed to open a socket 
connection to the specified host and port number. 
<p>
A port number of <code>-1</code> indicates that the calling 
method is attempting to determine the IP address of the specified 
host name. 
<p> If <code>context</code> is not an instance of 
<code>AccessControlContext</code> then a
<code>SecurityException</code> is thrown.
<p>
Otherwise, the port number is checked. If it is not equal
to -1, the <code>context</code>'s <code>checkPermission</code>
method is called with a 
<code>SocketPermission(host+\":\"+port,\"connect\")</code> permission.
If the port is equal to -1, then
the <code>context</code>'s <code>checkPermission</code> method 
is called with a
<code>SocketPermission(host,\"resolve\")</code> permission.
<p>
If you override this method, then you should make a call to 
<code>super.checkConnect</code>
at the point the overridden method would normally throw an
exception.

@param      host      the host name port to connect to.
@param      port      the protocol port to connect to.
@param      context   a system-dependent security context.
@exception  SecurityException if the specified security context
            is not an instance of <code>AccessControlContext</code>
            (e.g., is <code>null</code>), or does not have permission
            to open a socket connection to the specified
            <code>host</code> and <code>port</code>.
@exception  NullPointerException if the <code>host</code> argument is
            <code>null</code>.
@see        java.lang.SecurityManager#getSecurityContext()
@see        java.security.AccessControlContext#checkPermission(java.security.Permission)"
      end

      operation 7038107 "checkListen"
	public explicit_return_type "void"
	nparams 1
	  param in name "port" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws a <code>SecurityException</code> if the 
calling thread is not allowed to wait for a connection request on 
the specified local port number. 
<p>
If port is not 0, this method calls
<code>checkPermission</code> with the
<code>SocketPermission(\"localhost:\"+port,\"listen\")</code>.
If port is zero, this method calls <code>checkPermission</code>
with <code>SocketPermission(\"localhost:1024-\",\"listen\").</code>
<p>
If you override this method, then you should make a call to 
<code>super.checkListen</code>
at the point the overridden method would normally throw an
exception.

@param      port   the local port.
@exception  SecurityException  if the calling thread does not have 
            permission to listen on the specified port.
@see        #checkPermission(java.security.Permission) checkPermission"
      end

      operation 7038235 "checkAccept"
	public explicit_return_type "void"
	nparams 2
	  param in name "host" explicit_type "String"
	  param in name "port" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws a <code>SecurityException</code> if the 
calling thread is not permitted to accept a socket connection from 
the specified host and port number. 
<p>
This method is invoked for the current security manager by the 
<code>accept</code> method of class <code>ServerSocket</code>. 
<p>
This method calls <code>checkPermission</code> with the
<code>SocketPermission(host+\":\"+port,\"accept\")</code> permission.
<p>
If you override this method, then you should make a call to 
<code>super.checkAccept</code>
at the point the overridden method would normally throw an
exception.

@param      host   the host name of the socket connection.
@param      port   the port number of the socket connection.
@exception  SecurityException  if the calling thread does not have 
            permission to accept the connection.
@exception  NullPointerException if the <code>host</code> argument is
            <code>null</code>.
@see        java.net.ServerSocket#accept()
@see        #checkPermission(java.security.Permission) checkPermission"
      end

      operation 7038363 "checkMulticast"
	public explicit_return_type "void"
	nparams 1
	  param inout name "maddr" type class_ref 530715 // InetAddress
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws a <code>SecurityException</code> if the 
calling thread is not allowed to use
(join/leave/send/receive) IP multicast.
<p>
This method calls <code>checkPermission</code> with the
<code>java.net.SocketPermission(maddr.getHostAddress(), 
\"accept,connect\")</code> permission.
<p>
If you override this method, then you should make a call to 
<code>super.checkMulticast</code>
at the point the overridden method would normally throw an
exception.

@param      maddr  Internet group address to be used.
@exception  SecurityException  if the calling thread is not allowed to 
 use (join/leave/send/receive) IP multicast.
@exception  NullPointerException if the address argument is
            <code>null</code>.
@since      JDK1.1
@see        #checkPermission(java.security.Permission) checkPermission"
      end

      operation 7038491 "checkMulticast"
	public explicit_return_type "void"
	nparams 2
	  param inout name "maddr" type class_ref 530715 // InetAddress
	  param in name "ttl" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Throws a <code>SecurityException</code> if the 
calling thread is not allowed to use
(join/leave/send/receive) IP multicast.
<p>
This method calls <code>checkPermission</code> with the
<code>java.net.SocketPermission(maddr.getHostAddress(), 
\"accept,connect\")</code> permission.
<p>
If you override this method, then you should make a call to 
<code>super.checkMulticast</code>
at the point the overridden method would normally throw an
exception. 

@param      maddr  Internet group address to be used.
@param      ttl        value in use, if it is multicast send.
Note: this particular implementation does not use the ttl
parameter. 
@exception  SecurityException  if the calling thread is not allowed to 
 use (join/leave/send/receive) IP multicast.
@exception  NullPointerException if the address argument is
            <code>null</code>.
@since      JDK1.1
@deprecated Use #checkPermission(java.security.Permission) instead
@see        #checkPermission(java.security.Permission) checkPermission"
      end

      operation 7038619 "checkPropertiesAccess"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws a <code>SecurityException</code> if the 
calling thread is not allowed to access or modify the system 
properties. 
<p>
This method is used by the <code>getProperties</code> and 
<code>setProperties</code> methods of class <code>System</code>. 
<p>
This method calls <code>checkPermission</code> with the
<code>PropertyPermission(\"*\", \"read,write\")</code> permission.
<p>
If you override this method, then you should make a call to 
<code>super.checkPropertiesAccess</code>
at the point the overridden method would normally throw an
exception.
<p>

@exception  SecurityException  if the calling thread does not have 
            permission to access or modify the system properties.
@see        java.lang.System#getProperties()
@see        java.lang.System#setProperties(java.util.Properties)
@see        #checkPermission(java.security.Permission) checkPermission"
      end

      operation 7038747 "checkPropertyAccess"
	public explicit_return_type "void"
	nparams 1
	  param in name "key" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws a <code>SecurityException</code> if the 
calling thread is not allowed to access the system property with 
the specified <code>key</code> name. 
<p>
This method is used by the <code>getProperty</code> method of 
class <code>System</code>. 
<p>
This method calls <code>checkPermission</code> with the
<code>PropertyPermission(key, \"read\")</code> permission.
<p>
<p>
If you override this method, then you should make a call to 
<code>super.checkPropertyAccess</code>
at the point the overridden method would normally throw an
exception.

@param      key   a system property key.

@exception  SecurityException  if the calling thread does not have 
            permission to access the specified system property.
@exception  NullPointerException if the <code>key</code> argument is
            <code>null</code>.
@exception  IllegalArgumentException if <code>key</code> is empty.

@see        java.lang.System#getProperty(java.lang.String)
@see        #checkPermission(java.security.Permission) checkPermission"
      end

      operation 7038875 "checkTopLevelWindow"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "window" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>false</code> if the calling 
thread is not trusted to bring up the top-level window indicated 
by the <code>window</code> argument. In this case, the caller can 
still decide to show the window, but the window should include 
some sort of visual warning. If the method returns 
<code>true</code>, then the window can be shown without any 
special restrictions. 
<p>
See class <code>Window</code> for more information on trusted and 
untrusted windows. 
<p>
This method calls
<code>checkPermission</code> with the
<code>AWTPermission(\"showWindowWithoutWarningBanner\")</code> permission,
and returns <code>true</code> if a SecurityException is not thrown,
otherwise it returns <code>false</code>.
<p>
If you override this method, then you should make a call to 
<code>super.checkTopLevelWindow</code>
at the point the overridden method would normally return 
<code>false</code>, and the value of 
<code>super.checkTopLevelWindow</code> should
be returned.

@param      window   the new window that is being created.
@return     <code>true</code> if the calling thread is trusted to put up
            top-level windows; <code>false</code> otherwise.
@exception  NullPointerException if the <code>window</code> argument is
            <code>null</code>.
@see        java.awt.Window
@see        #checkPermission(java.security.Permission) checkPermission"
      end

      operation 7039003 "checkPrintJobAccess"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws a <code>SecurityException</code> if the 
calling thread is not allowed to initiate a print job request.
<p>
This method calls
<code>checkPermission</code> with the
<code>RuntimePermission(\"queuePrintJob\")</code> permission.
<p>
If you override this method, then you should make a call to 
<code>super.checkPrintJobAccess</code>
at the point the overridden method would normally throw an
exception.
<p>

@exception  SecurityException  if the calling thread does not have 
            permission to initiate a print job request.
@since   JDK1.1
@see        #checkPermission(java.security.Permission) checkPermission"
      end

      operation 7039131 "checkSystemClipboardAccess"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws a <code>SecurityException</code> if the 
calling thread is not allowed to access the system clipboard.
<p>
This method calls <code>checkPermission</code> with the
<code>AWTPermission(\"accessClipboard\")</code> 
permission.
<p>
If you override this method, then you should make a call to 
<code>super.checkSystemClipboardAccess</code>
at the point the overridden method would normally throw an
exception.

@since   JDK1.1
@exception  SecurityException  if the calling thread does not have 
            permission to access the system clipboard.
@see        #checkPermission(java.security.Permission) checkPermission"
      end

      operation 7039259 "checkAwtEventQueueAccess"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws a <code>SecurityException</code> if the 
calling thread is not allowed to access the AWT event queue.
<p>
This method calls <code>checkPermission</code> with the
<code>AWTPermission(\"accessEventQueue\")</code> permission.
<p>
If you override this method, then you should make a call to 
<code>super.checkAwtEventQueueAccess</code>
at the point the overridden method would normally throw an
exception.

@since   JDK1.1
@exception  SecurityException  if the calling thread does not have 
            permission to access the AWT event queue.
@see        #checkPermission(java.security.Permission) checkPermission"
      end

      attribute 2735387 "packageAccessValid"
	class_attribute private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "We have an initial invalid bit (initially false) for the class
variables which tell if the cache is valid.  If the underlying
java.security.Security property changes via setProperty(), the
Security class uses reflection to change the variable and thus
invalidate the cache.

Locking is handled by synchronization to the
packageAccessLock/packageDefinitionLock objects.  They are only
used in this class.

Note that cache invalidation as a result of the property change
happens without using these locks, so there may be a delay between
when a thread updates the property and when other threads updates
the cache.
"
      end

      attribute 2735515 "packageAccess"
	class_attribute private explicit_type "String"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2735643 "packageAccessLock"
	class_attribute const_attribute private explicit_type "Object"
	init_value "=  new Object()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2735771 "packageDefinitionValid"
	class_attribute private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2735899 "packageDefinition"
	class_attribute private explicit_type "String"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2736027 "packageDefinitionLock"
	class_attribute const_attribute private explicit_type "Object"
	init_value "=  new Object()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7039387 "getPackages"
	class_operation private explicit_return_type "String"
	nparams 1
	  param in name "p" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7039515 "checkPackageAccess"
	public explicit_return_type "void"
	nparams 1
	  param in name "pkg" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws a <code>SecurityException</code> if the
calling thread is not allowed to access the package specified by
the argument.
<p>
This method is used by the <code>loadClass</code> method of class
loaders.
<p>
This method first gets a list of
restricted packages by obtaining a comma-separated list from
a call to
<code>java.security.Security.getProperty(\"package.access\")</code>,
and checks to see if <code>pkg</code> starts with or equals
any of the restricted packages. If it does, then
<code>checkPermission</code> gets called with the
<code>RuntimePermission(\"accessClassInPackage.\"+pkg)</code>
permission.
<p>
If this method is overridden, then
<code>super.checkPackageAccess</code> should be called
as the first line in the overridden method.

@param      pkg   the package name.
@exception  SecurityException  if the calling thread does not have
            permission to access the specified package.
@exception  NullPointerException if the package name argument is
            <code>null</code>.
@see        java.lang.ClassLoader#loadClass(java.lang.String, boolean)
 loadClass
@see        java.security.Security#getProperty getProperty
@see        #checkPermission(java.security.Permission) checkPermission"
      end

      operation 7039643 "checkPackageDefinition"
	public explicit_return_type "void"
	nparams 1
	  param in name "pkg" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws a <code>SecurityException</code> if the
calling thread is not allowed to define classes in the package
specified by the argument.
<p>
This method is used by the <code>loadClass</code> method of some
class loaders.
<p>
This method first gets a list of restricted packages by
obtaining a comma-separated list from a call to
<code>java.security.Security.getProperty(\"package.definition\")</code>,
and checks to see if <code>pkg</code> starts with or equals
any of the restricted packages. If it does, then
<code>checkPermission</code> gets called with the
<code>RuntimePermission(\"defineClassInPackage.\"+pkg)</code>
permission.
<p>
If this method is overridden, then
<code>super.checkPackageDefinition</code> should be called
as the first line in the overridden method.

@param      pkg   the package name.
@exception  SecurityException  if the calling thread does not have
            permission to define classes in the specified package.
@see        java.lang.ClassLoader#loadClass(java.lang.String, boolean)
@see        java.security.Security#getProperty getProperty
@see        #checkPermission(java.security.Permission) checkPermission"
      end

      operation 7039771 "checkSetFactory"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws a <code>SecurityException</code> if the 
calling thread is not allowed to set the socket factory used by 
<code>ServerSocket</code> or <code>Socket</code>, or the stream 
handler factory used by <code>URL</code>. 
<p>
This method calls <code>checkPermission</code> with the
<code>RuntimePermission(\"setFactory\")</code> permission.
<p>
If you override this method, then you should make a call to 
<code>super.checkSetFactory</code>
at the point the overridden method would normally throw an
exception.
<p>

@exception  SecurityException  if the calling thread does not have 
            permission to specify a socket factory or a stream 
            handler factory.

@see        java.net.ServerSocket#setSocketFactory(java.net.SocketImplFactory) setSocketFactory
@see        java.net.Socket#setSocketImplFactory(java.net.SocketImplFactory) setSocketImplFactory
@see        java.net.URL#setURLStreamHandlerFactory(java.net.URLStreamHandlerFactory) setURLStreamHandlerFactory
@see        #checkPermission(java.security.Permission) checkPermission"
      end

      operation 7039899 "checkMemberAccess"
	public explicit_return_type "void"
	nparams 2
	  param inout name "clazz" type class_ref 164635 // Class
	  param in name "which" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws a <code>SecurityException</code> if the 
calling thread is not allowed to access members. 
<p>
The default policy is to allow access to PUBLIC members, as well
as access to classes that have the same class loader as the caller.
In all other cases, this method calls <code>checkPermission</code> 
with the <code>RuntimePermission(\"accessDeclaredMembers\")
</code> permission.
<p>
If this method is overridden, then a call to 
<code>super.checkMemberAccess</code> cannot be made,
as the default implementation of <code>checkMemberAccess</code>
relies on the code being checked being at a stack depth of
4.

@param clazz the class that reflection is to be performed on.

@param which type of access, PUBLIC or DECLARED.

@exception  SecurityException if the caller does not have
            permission to access members.
@exception  NullPointerException if the <code>clazz</code> argument is
            <code>null</code>.
@see java.lang.reflect.Member
@since JDK1.1
@see        #checkPermission(java.security.Permission) checkPermission"
      end

      operation 7040027 "checkSecurityAccess"
	public explicit_return_type "void"
	nparams 1
	  param in name "target" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether the permission with the specified permission target
name should be granted or denied.

<p> If the requested permission is allowed, this method returns
quietly. If denied, a SecurityException is raised. 

<p> This method creates a <code>SecurityPermission</code> object for
the given permission target name and calls <code>checkPermission</code>
with it.

<p> See the documentation for
<code>{@link java.security.SecurityPermission}</code> for
a list of possible permission target names.

<p> If you override this method, then you should make a call to 
<code>super.checkSecurityAccess</code>
at the point the overridden method would normally throw an
exception.

@param target the target name of the <code>SecurityPermission</code>.

@exception SecurityException if the calling thread does not have
permission for the requested access.
@exception NullPointerException if <code>target</code> is null.
@exception IllegalArgumentException if <code>target</code> is empty.

@since   JDK1.1
@see        #checkPermission(java.security.Permission) checkPermission"
      end

      operation 7040155 "currentLoadedClass0"
	private return_type class_ref 164635 // Class
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7040283 "getThreadGroup"
	public return_type class_ref 163483 // ThreadGroup
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the thread group into which to instantiate any new
thread being created at the time this is being called.
By default, it returns the thread group of the current
thread. This should be overridden by a specific security
manager to return the appropriate thread group.

@return  ThreadGroup that new threads are instantiated into
@since   JDK1.1
@see     java.lang.ThreadGroup"
      end
    end

    class 908955 "AbstractMethodError"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Thrown when an application tries to call an abstract method. 
Normally, this error is caught by the compiler; this error can 
only occur at run time if the definition of some class has 
incompatibly changed since the currently executing method was last
compiled. 

@author  unascribed
@version 1.18, 12/19/03
@since   JDK1.0"
      classrelation 1771419 // <generalisation>
	relation 1771419 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1771419 // <generalisation>
	  b parent class_ref 909083 // IncompatibleClassChangeError
      end

      operation 6923419 "AbstractMethodError"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>AbstractMethodError</code> with no detail  message."
      end

      operation 6923547 "AbstractMethodError"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>AbstractMethodError</code> with the specified 
detail message. 

@param   s   the detail message."
      end
    end

    class 909083 "IncompatibleClassChangeError"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Thrown when an incompatible class change has occurred to some class 
definition. The definition of some class, on which the currently 
executing method depends, has since changed. 

@author  unascribed
@version 1.18, 12/19/03
@since   JDK1.0"
      classrelation 1771291 // <generalisation>
	relation 1771291 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1771291 // <generalisation>
	  b parent class_ref 689563 // LinkageError
      end

      operation 6923163 "IncompatibleClassChangeError"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>IncompatibleClassChangeError</code> with no 
detail message. "
      end

      operation 6923291 "IncompatibleClassChangeError"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>IncompatibleClassChangeError</code> with the 
specified detail message. 

@param   s   the detail message."
      end
    end

    class 909211 "AbstractStringBuilder"
      abstract visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A mutable sequence of characters.
<p>
Implements a modifiable string. At any point in time it contains some 
particular sequence of characters, but the length and content of the 
sequence can be changed through certain method calls.

@author	Michael McCloskey
@version 	1.14, 09/26/05
@since	1.5"
      classrelation 1771547 // <realization>
	relation 1771547 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1771547 // <realization>
	  b parent class_ref 573851 // Appendable
      end

      classrelation 1771675 // <realization>
	relation 1771675 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1771675 // <realization>
	  b parent class_ref 393755 // CharSequence
      end

      attribute 2719387 "value"
	package explicit_type "char"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The value is used for character storage.
"
      end

      attribute 2719515 "count"
	package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The count is the number of characters used.
"
      end

      operation 6924187 "AbstractStringBuilder"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This no-arg constructor is necessary for serialization of subclasses."
      end

      operation 6924315 "AbstractStringBuilder"
	package explicit_return_type ""
	nparams 1
	  param in name "capacity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an AbstractStringBuilder of the specified capacity."
      end

      operation 6924443 "length"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the length (character count).

@return  the length of the sequence of characters currently 
         represented by this object"
      end

      operation 6924571 "capacity"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current capacity. The capacity is the amount of storage 
available for newly inserted characters, beyond which an allocation 
will occur.

@return  the current capacity"
      end

      operation 6924699 "ensureCapacity"
	public explicit_return_type "void"
	nparams 1
	  param in name "minimumCapacity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Ensures that the capacity is at least equal to the specified minimum.
If the current capacity is less than the argument, then a new internal
array is allocated with greater capacity. The new capacity is the 
larger of: 
<ul>
<li>The <code>minimumCapacity</code> argument. 
<li>Twice the old capacity, plus <code>2</code>. 
</ul>
If the <code>minimumCapacity</code> argument is nonpositive, this
method takes no action and simply returns.

@param   minimumCapacity   the minimum desired capacity."
      end

      operation 6924827 "expandCapacity"
	package explicit_return_type "void"
	nparams 1
	  param in name "minimumCapacity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This implements the expansion semantics of ensureCapacity with no
size check or synchronization."
      end

      operation 6924955 "trimToSize"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to reduce storage used for the character sequence.
If the buffer is larger than necessary to hold its current sequence of 
characters, then it may be resized to become more space efficient. 
Calling this method may, but is not required to, affect the value 
returned by a subsequent call to the {@link #capacity()} method."
      end

      operation 6925083 "setLength"
	public explicit_return_type "void"
	nparams 1
	  param in name "newLength" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the length of the character sequence.
The sequence is changed to a new character sequence 
whose length is specified by the argument. For every nonnegative 
index <i>k</i> less than <code>newLength</code>, the character at 
index <i>k</i> in the new character sequence is the same as the 
character at index <i>k</i> in the old sequence if <i>k</i> is less 
than the length of the old character sequence; otherwise, it is the 
null character <code>'&#92;u0000'</code>. 
 
In other words, if the <code>newLength</code> argument is less than 
the current length, the length is changed to the specified length.
<p>
If the <code>newLength</code> argument is greater than or equal 
to the current length, sufficient null characters 
(<code>'&#92;u0000'</code>) are appended so that 
length becomes the <code>newLength</code> argument. 
<p>
The <code>newLength</code> argument must be greater than or equal 
to <code>0</code>. 

@param      newLength   the new length
@throws     IndexOutOfBoundsException  if the
              <code>newLength</code> argument is negative."
      end

      operation 6925211 "charAt"
	public explicit_return_type "char"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>char</code> value in this sequence at the specified index.
The first <code>char</code> value is at index <code>0</code>, the next at index
<code>1</code>, and so on, as in array indexing.
<p>
The index argument must be greater than or equal to
<code>0</code>, and less than the length of this sequence.

<p>If the <code>char</code> value specified by the index is a
<a href=\"Character.html#unicode\">surrogate</a>, the surrogate
value is returned.

@param      index   the index of the desired <code>char</code> value.
@return     the <code>char</code> value at the specified index.
@throws     IndexOutOfBoundsException  if <code>index</code> is 
            negative or greater than or equal to <code>length()</code>."
      end

      operation 6925339 "codePointAt"
	public explicit_return_type "int"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the character (Unicode code point) at the specified
index. The index refers to <code>char</code> values
(Unicode code units) and ranges from <code>0</code> to
{@link #length()}<code> - 1</code>.

<p> If the <code>char</code> value specified at the given index
is in the high-surrogate range, the following index is less
than the length of this sequence, and the
<code>char</code> value at the following index is in the
low-surrogate range, then the supplementary code point
corresponding to this surrogate pair is returned. Otherwise,
the <code>char</code> value at the given index is returned.

@param      index the index to the <code>char</code> values
@return     the code point value of the character at the
            <code>index</code>
@exception  IndexOutOfBoundsException  if the <code>index</code>
            argument is negative or not less than the length of this
            sequence."
      end

      operation 6925467 "codePointBefore"
	public explicit_return_type "int"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the character (Unicode code point) before the specified
index. The index refers to <code>char</code> values
(Unicode code units) and ranges from <code>1</code> to {@link
#length()}.

<p> If the <code>char</code> value at <code>(index - 1)</code>
is in the low-surrogate range, <code>(index - 2)</code> is not
negative, and the <code>char</code> value at <code>(index -
2)</code> is in the high-surrogate range, then the
supplementary code point value of the surrogate pair is
returned. If the <code>char</code> value at <code>index -
1</code> is an unpaired low-surrogate or a high-surrogate, the
surrogate value is returned.

@param     index the index following the code point that should be returned
@return    the Unicode code point value before the given index.
@exception IndexOutOfBoundsException if the <code>index</code>
           argument is less than 1 or greater than the length
           of this sequence."
      end

      operation 6925595 "codePointCount"
	public explicit_return_type "int"
	nparams 2
	  param in name "beginIndex" explicit_type "int"
	  param in name "endIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of Unicode code points in the specified text
range of this sequence. The text range begins at the specified
<code>beginIndex</code> and extends to the <code>char</code> at
index <code>endIndex - 1</code>. Thus the length (in
<code>char</code>s) of the text range is
<code>endIndex-beginIndex</code>. Unpaired surrogates within
this sequence count as one code point each.

@param beginIndex the index to the first <code>char</code> of
the text range.
@param endIndex the index after the last <code>char</code> of
the text range.
@return the number of Unicode code points in the specified text
range
@exception IndexOutOfBoundsException if the
<code>beginIndex</code> is negative, or <code>endIndex</code>
is larger than the length of this sequence, or
<code>beginIndex</code> is larger than <code>endIndex</code>."
      end

      operation 6925723 "offsetByCodePoints"
	public explicit_return_type "int"
	nparams 2
	  param in name "index" explicit_type "int"
	  param in name "codePointOffset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index within this sequence that is offset from the
given <code>index</code> by <code>codePointOffset</code> code
points. Unpaired surrogates within the text range given by
<code>index</code> and <code>codePointOffset</code> count as
one code point each.

@param index the index to be offset
@param codePointOffset the offset in code points
@return the index within this sequence
@exception IndexOutOfBoundsException if <code>index</code>
  is negative or larger then the length of this sequence,
  or if <code>codePointOffset</code> is positive and the subsequence
  starting with <code>index</code> has fewer than
  <code>codePointOffset</code> code points,
  or if <code>codePointOffset</code> is negative and the subsequence
  before <code>index</code> has fewer than the absolute value of
  <code>codePointOffset</code> code points."
      end

      operation 6925851 "getChars"
	public explicit_return_type "void"
	nparams 4
	  param in name "srcBegin" explicit_type "int"
	  param in name "srcEnd" explicit_type "int"
	  param in name "dst" explicit_type "char"
	  param in name "dstBegin" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Characters are copied from this sequence into the 
destination character array <code>dst</code>. The first character to 
be copied is at index <code>srcBegin</code>; the last character to 
be copied is at index <code>srcEnd-1</code>. The total number of 
characters to be copied is <code>srcEnd-srcBegin</code>. The 
characters are copied into the subarray of <code>dst</code> starting 
at index <code>dstBegin</code> and ending at index:
<p><blockquote><pre>
dstbegin + (srcEnd-srcBegin) - 1
</pre></blockquote>

@param      srcBegin   start copying at this offset.
@param      srcEnd     stop copying at this offset.
@param      dst        the array to copy the data into.
@param      dstBegin   offset into <code>dst</code>.
@throws     NullPointerException if <code>dst</code> is 
            <code>null</code>.
@throws     IndexOutOfBoundsException  if any of the following is true:
            <ul>
            <li><code>srcBegin</code> is negative
            <li><code>dstBegin</code> is negative
            <li>the <code>srcBegin</code> argument is greater than 
            the <code>srcEnd</code> argument.
            <li><code>srcEnd</code> is greater than 
            <code>this.length()</code>.
            <li><code>dstBegin+srcEnd-srcBegin</code> is greater than 
            <code>dst.length</code>
            </ul>"
      end

      operation 6925979 "setCharAt"
	public explicit_return_type "void"
	nparams 2
	  param in name "index" explicit_type "int"
	  param in name "ch" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The character at the specified index is set to <code>ch</code>. This 
sequence is altered to represent a new character sequence that is 
identical to the old character sequence, except that it contains the 
character <code>ch</code> at position <code>index</code>. 
<p>
The index argument must be greater than or equal to 
<code>0</code>, and less than the length of this sequence. 

@param      index   the index of the character to modify.
@param      ch      the new character.
@throws     IndexOutOfBoundsException  if <code>index</code> is 
            negative or greater than or equal to <code>length()</code>."
      end

      operation 6926107 "append"
	public return_type class_ref 909211 // AbstractStringBuilder
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the string representation of the <code>Object</code> 
argument.
<p>
The argument is converted to a string as if by the method 
<code>String.valueOf</code>, and the characters of that 
string are then appended to this sequence.

@param   obj   an <code>Object</code>.
@return  a reference to this object."
      end

      operation 6926235 "append"
	public return_type class_ref 909211 // AbstractStringBuilder
	nparams 1
	  param in name "str" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the specified string to this character sequence.
<p>
The characters of the <code>String</code> argument are appended, in 
order, increasing the length of this sequence by the length of the 
argument. If <code>str</code> is <code>null</code>, then the four 
characters <code>\"null\"</code> are appended.
<p>
Let <i>n</i> be the length of this character sequence just prior to 
execution of the <code>append</code> method. Then the character at 
index <i>k</i> in the new character sequence is equal to the character 
at index <i>k</i> in the old character sequence, if <i>k</i> is less 
than <i>n</i>; otherwise, it is equal to the character at index 
<i>k-n</i> in the argument <code>str</code>.

@param   str   a string.
@return  a reference to this object."
      end

      operation 6926363 "append"
	public return_type class_ref 909211 // AbstractStringBuilder
	nparams 1
	  param inout name "sb" type class_ref 198171 // StringBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Documentation in subclasses because of synchro difference"
      end

      operation 6926491 "append"
	public return_type class_ref 909211 // AbstractStringBuilder
	nparams 1
	  param inout name "s" type class_ref 393755 // CharSequence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Documentation in subclasses because of synchro difference"
      end

      operation 6926619 "append"
	public return_type class_ref 909211 // AbstractStringBuilder
	nparams 3
	  param inout name "s" type class_ref 393755 // CharSequence
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends a subsequence of the specified <code>CharSequence</code> to this
sequence.
<p>
Characters of the argument <code>s</code>, starting at
index <code>start</code>, are appended, in order, to the contents of
this sequence up to the (exclusive) index <code>end</code>. The length
of this sequence is increased by the value of <code>end - start</code>.
<p>
Let <i>n</i> be the length of this character sequence just prior to
execution of the <code>append</code> method. Then the character at
index <i>k</i> in this character sequence becomes equal to the
character at index <i>k</i> in this sequence, if <i>k</i> is less than
<i>n</i>; otherwise, it is equal to the character at index 
<i>k+start-n</i> in the argument <code>s</code>.
<p>
If <code>s</code> is <code>null</code>, then this method appends
characters as if the s parameter was a sequence containing the four
characters <code>\"null\"</code>.

@param   s the sequence to append.
@param   start   the starting index of the subsequence to be appended.
@param   end     the end index of the subsequence to be appended.
@return  a reference to this object.
@throws     IndexOutOfBoundsException if
                 <code>start</code> or <code>end</code> are negative, or
            <code>start</code> is greater than <code>end</code> or
            <code>end</code> is greater than <code>s.length()</code>"
      end

      operation 6926747 "append"
	public return_type class_ref 909211 // AbstractStringBuilder
	nparams 1
	  param in name "str" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the string representation of the <code>char</code> array 
argument to this sequence. 
<p>
The characters of the array argument are appended, in order, to 
the contents of this sequence. The length of this sequence
increases by the length of the argument. 
<p>
The overall effect is exactly as if the argument were converted to 
a string by the method {@link String#valueOf(char[])} and the 
characters of that string were then {@link #append(String) appended} 
to this character sequence.

@param   str   the characters to be appended.
@return  a reference to this object."
      end

      operation 6926875 "append"
	public return_type class_ref 909211 // AbstractStringBuilder
	nparams 3
	  param in name "str" explicit_type "char"
	  param in name "offset" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the string representation of a subarray of the
<code>char</code> array argument to this sequence.
<p>
Characters of the <code>char</code> array <code>str</code>, starting at
index <code>offset</code>, are appended, in order, to the contents
of this sequence. The length of this sequence increases
by the value of <code>len</code>.
<p>
The overall effect is exactly as if the arguments were converted to
a string by the method {@link String#valueOf(char[],int,int)} and the
characters of that string were then {@link #append(String) appended}
to this character sequence.

@param   str      the characters to be appended.
@param   offset   the index of the first <code>char</code> to append.
@param   len      the number of <code>char</code>s to append.
@return  a reference to this object."
      end

      operation 6927003 "append"
	public return_type class_ref 909211 // AbstractStringBuilder
	nparams 1
	  param inout name "b" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the string representation of the <code>boolean</code> 
argument to the sequence.
<p>
The argument is converted to a string as if by the method 
<code>String.valueOf</code>, and the characters of that 
string are then appended to this sequence. 

@param   b   a <code>boolean</code>.
@return  a reference to this object."
      end

      operation 6927131 "append"
	public return_type class_ref 909211 // AbstractStringBuilder
	nparams 1
	  param in name "c" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the string representation of the <code>char</code> 
argument to this sequence. 
<p>
The argument is appended to the contents of this sequence. 
The length of this sequence increases by <code>1</code>. 
<p>
The overall effect is exactly as if the argument were converted to 
a string by the method {@link String#valueOf(char)} and the character 
in that string were then {@link #append(String) appended} to this 
character sequence.

@param   c   a <code>char</code>.
@return  a reference to this object."
      end

      operation 6927259 "append"
	public return_type class_ref 909211 // AbstractStringBuilder
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the string representation of the <code>int</code> 
argument to this sequence. 
<p>
The argument is converted to a string as if by the method 
<code>String.valueOf</code>, and the characters of that 
string are then appended to this sequence. 

@param   i   an <code>int</code>.
@return  a reference to this object."
      end

      attribute 2719643 "sizeTable"
	class_attribute const_attribute package explicit_type "int"
	multiplicity "[]"
	init_value "=  { 9, 99, 999, 9999, 99999, 999999, 9999999,
                                     99999999, 999999999, Integer.MAX_VALUE }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 6927387 "stringSizeOfInt"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "x" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Requires positive x"
      end

      operation 6927515 "append"
	public return_type class_ref 909211 // AbstractStringBuilder
	nparams 1
	  param in name "l" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the string representation of the <code>long</code> 
argument to this sequence.
<p>
The argument is converted to a string as if by the method 
<code>String.valueOf</code>, and the characters of that 
string are then appended to this sequence.

@param   l   a <code>long</code>.
@return  a reference to this object."
      end

      operation 6927643 "stringSizeOfLong"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "x" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Requires positive x"
      end

      operation 6927771 "append"
	public return_type class_ref 909211 // AbstractStringBuilder
	nparams 1
	  param in name "f" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the string representation of the <code>float</code> 
argument to this sequence.
<p>
The argument is converted to a string as if by the method 
<code>String.valueOf</code>, and the characters of that 
string are then appended to this string sequence.

@param   f   a <code>float</code>.
@return  a reference to this object."
      end

      operation 6927899 "append"
	public return_type class_ref 909211 // AbstractStringBuilder
	nparams 1
	  param in name "d" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the string representation of the <code>double</code> 
argument to this sequence.
<p>
The argument is converted to a string as if by the method 
<code>String.valueOf</code>, and the characters of that 
string are then appended to this sequence.

@param   d   a <code>double</code>.
@return  a reference to this object."
      end

      operation 6928027 "delete"
	public return_type class_ref 909211 // AbstractStringBuilder
	nparams 2
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the characters in a substring of this sequence.
The substring begins at the specified <code>start</code> and extends to
the character at index <code>end - 1</code> or to the end of the
sequence if no such character exists. If
<code>start</code> is equal to <code>end</code>, no changes are made.

@param      start  The beginning index, inclusive.
@param      end    The ending index, exclusive.
@return     This object.
@throws     StringIndexOutOfBoundsException  if <code>start</code>
            is negative, greater than <code>length()</code>, or
		   greater than <code>end</code>."
      end

      operation 6928155 "appendCodePoint"
	public return_type class_ref 909211 // AbstractStringBuilder
	nparams 1
	  param in name "codePoint" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the string representation of the <code>codePoint</code>
argument to this sequence.

<p> The argument is appended to the contents of this sequence.
The length of this sequence increases by
{@link Character#charCount(int) Character.charCount(codePoint)}.

<p> The overall effect is exactly as if the argument were
converted to a <code>char</code> array by the method {@link
Character#toChars(int)} and the character in that array were
then {@link #append(char[]) appended} to this character
sequence.

@param   codePoint   a Unicode code point
@return  a reference to this object.
@exception IllegalArgumentException if the specified
<code>codePoint</code> isn't a valid Unicode code point"
      end

      operation 6928283 "deleteCharAt"
	public return_type class_ref 909211 // AbstractStringBuilder
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the <code>char</code> at the specified position in this
sequence. This sequence is shortened by one <code>char</code>.

<p>Note: If the character at the given index is a supplementary
character, this method does not remove the entire character. If
correct handling of supplementary characters is required,
determine the number of <code>char</code>s to remove by calling
<code>Character.charCount(thisSequence.codePointAt(index))</code>,
where <code>thisSequence</code> is this sequence.

@param       index  Index of <code>char</code> to remove
@return      This object.
@throws      StringIndexOutOfBoundsException  if the <code>index</code>
		    is negative or greater than or equal to
		    <code>length()</code>."
      end

      operation 6928411 "replace"
	public return_type class_ref 909211 // AbstractStringBuilder
	nparams 3
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	  param in name "str" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replaces the characters in a substring of this sequence
with characters in the specified <code>String</code>. The substring
begins at the specified <code>start</code> and extends to the character
at index <code>end - 1</code> or to the end of the
sequence if no such character exists. First the
characters in the substring are removed and then the specified
<code>String</code> is inserted at <code>start</code>. (This 
sequence will be lengthened to accommodate the
specified String if necessary.)

@param      start    The beginning index, inclusive.
@param      end      The ending index, exclusive.
@param      str   String that will replace previous contents.
@return     This object.
@throws     StringIndexOutOfBoundsException  if <code>start</code>
            is negative, greater than <code>length()</code>, or
		   greater than <code>end</code>."
      end

      operation 6928539 "substring"
	public explicit_return_type "String"
	nparams 1
	  param in name "start" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new <code>String</code> that contains a subsequence of
characters currently contained in this character sequence. The 
substring begins at the specified index and extends to the end of
this sequence.

@param      start    The beginning index, inclusive.
@return     The new string.
@throws     StringIndexOutOfBoundsException  if <code>start</code> is
            less than zero, or greater than the length of this object."
      end

      operation 6928667 "subSequence"
	public return_type class_ref 393755 // CharSequence
	nparams 2
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new character sequence that is a subsequence of this sequence.

<p> An invocation of this method of the form

<blockquote><pre>
sb.subSequence(begin,&nbsp;end)</pre></blockquote>

behaves in exactly the same way as the invocation

<blockquote><pre>
sb.substring(begin,&nbsp;end)</pre></blockquote>

This method is provided so that this class can
implement the {@link CharSequence} interface. </p>

@param      start   the start index, inclusive.
@param      end     the end index, exclusive.
@return     the specified subsequence.

@throws  IndexOutOfBoundsException
         if <tt>start</tt> or <tt>end</tt> are negative,
         if <tt>end</tt> is greater than <tt>length()</tt>,
         or if <tt>start</tt> is greater than <tt>end</tt>
@spec JSR-51"
      end

      operation 6928795 "substring"
	public explicit_return_type "String"
	nparams 2
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new <code>String</code> that contains a subsequence of
characters currently contained in this sequence. The 
substring begins at the specified <code>start</code> and 
extends to the character at index <code>end - 1</code>.

@param      start    The beginning index, inclusive.
@param      end      The ending index, exclusive.
@return     The new string.
@throws     StringIndexOutOfBoundsException  if <code>start</code>
            or <code>end</code> are negative or greater than
		   <code>length()</code>, or <code>start</code> is
		   greater than <code>end</code>."
      end

      operation 6928923 "insert"
	public return_type class_ref 909211 // AbstractStringBuilder
	nparams 4
	  param in name "index" explicit_type "int"
	  param in name "str" explicit_type "char"
	  param in name "offset" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the string representation of a subarray of the <code>str</code>
array argument into this sequence. The subarray begins at the
specified <code>offset</code> and extends <code>len</code> <code>char</code>s.
The characters of the subarray are inserted into this sequence at
the position indicated by <code>index</code>. The length of this
sequence increases by <code>len</code> <code>char</code>s.

@param      index    position at which to insert subarray.
@param      str       A <code>char</code> array.
@param      offset   the index of the first <code>char</code> in subarray to
            be inserted.
@param      len      the number of <code>char</code>s in the subarray to
            be inserted.
@return     This object
@throws     StringIndexOutOfBoundsException  if <code>index</code>
            is negative or greater than <code>length()</code>, or
            <code>offset</code> or <code>len</code> are negative, or
            <code>(offset+len)</code> is greater than
            <code>str.length</code>."
      end

      operation 6929051 "insert"
	public return_type class_ref 909211 // AbstractStringBuilder
	nparams 2
	  param in name "offset" explicit_type "int"
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the string representation of the <code>Object</code> 
argument into this character sequence.
<p>
The second argument is converted to a string as if by the method 
<code>String.valueOf</code>, and the characters of that 
string are then inserted into this sequence at the indicated 
offset. 
<p>
The offset argument must be greater than or equal to 
<code>0</code>, and less than or equal to the length of this 
sequence.

@param      offset   the offset.
@param      obj      an <code>Object</code>.
@return     a reference to this object.
@throws     StringIndexOutOfBoundsException  if the offset is invalid."
      end

      operation 6929179 "insert"
	public return_type class_ref 909211 // AbstractStringBuilder
	nparams 2
	  param in name "offset" explicit_type "int"
	  param in name "str" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the string into this character sequence.
<p>
The characters of the <code>String</code> argument are inserted, in 
order, into this sequence at the indicated offset, moving up any 
characters originally above that position and increasing the length 
of this sequence by the length of the argument. If 
<code>str</code> is <code>null</code>, then the four characters 
<code>\"null\"</code> are inserted into this sequence.
<p>
The character at index <i>k</i> in the new character sequence is 
equal to:
<ul>
<li>the character at index <i>k</i> in the old character sequence, if 
<i>k</i> is less than <code>offset</code> 
<li>the character at index <i>k</i><code>-offset</code> in the 
argument <code>str</code>, if <i>k</i> is not less than 
<code>offset</code> but is less than <code>offset+str.length()</code> 
<li>the character at index <i>k</i><code>-str.length()</code> in the 
old character sequence, if <i>k</i> is not less than 
<code>offset+str.length()</code>
</ul><p>
The offset argument must be greater than or equal to 
<code>0</code>, and less than or equal to the length of this 
sequence.

@param      offset   the offset.
@param      str      a string.
@return     a reference to this object.
@throws     StringIndexOutOfBoundsException  if the offset is invalid."
      end

      operation 6929307 "insert"
	public return_type class_ref 909211 // AbstractStringBuilder
	nparams 2
	  param in name "offset" explicit_type "int"
	  param in name "str" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the string representation of the <code>char</code> array 
argument into this sequence.
<p>
The characters of the array argument are inserted into the 
contents of this sequence at the position indicated by 
<code>offset</code>. The length of this sequence increases by 
the length of the argument. 
<p>
The overall effect is exactly as if the argument were converted to 
a string by the method {@link String#valueOf(char[])} and the 
characters of that string were then 
{@link #insert(int,String) inserted} into this 
character sequence at the position indicated by
<code>offset</code>.

@param      offset   the offset.
@param      str      a character array.
@return     a reference to this object.
@throws     StringIndexOutOfBoundsException  if the offset is invalid."
      end

      operation 6929435 "insert"
	public return_type class_ref 909211 // AbstractStringBuilder
	nparams 2
	  param in name "dstOffset" explicit_type "int"
	  param inout name "s" type class_ref 393755 // CharSequence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified <code>CharSequence</code> into this sequence.
<p>
The characters of the <code>CharSequence</code> argument are inserted,
in order, into this sequence at the indicated offset, moving up
any characters originally above that position and increasing the length 
of this sequence by the length of the argument s.
<p>
The result of this method is exactly the same as if it were an
invocation of this object's insert(dstOffset, s, 0, s.length()) method.

<p>If <code>s</code> is <code>null</code>, then the four characters 
<code>\"null\"</code> are inserted into this sequence.

@param      dstOffset   the offset.
@param      s the sequence to be inserted
@return     a reference to this object.
@throws     IndexOutOfBoundsException  if the offset is invalid."
      end

      operation 6929563 "insert"
	public return_type class_ref 909211 // AbstractStringBuilder
	nparams 4
	  param in name "dstOffset" explicit_type "int"
	  param inout name "s" type class_ref 393755 // CharSequence
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts a subsequence of the specified <code>CharSequence</code> into
this sequence.
<p>
The subsequence of the argument <code>s</code> specified by
<code>start</code> and <code>end</code> are inserted,
in order, into this sequence at the specified destination offset, moving
up any characters originally above that position. The length of this
sequence is increased by <code>end - start</code>.
<p>
The character at index <i>k</i> in this sequence becomes equal to:
<ul>
<li>the character at index <i>k</i> in this sequence, if
<i>k</i> is less than <code>dstOffset</code>
<li>the character at index <i>k</i><code>+start-dstOffset</code> in
the argument <code>s</code>, if <i>k</i> is greater than or equal to
<code>dstOffset</code> but is less than <code>dstOffset+end-start</code>
<li>the character at index <i>k</i><code>-(end-start)</code> in this
sequence, if <i>k</i> is greater than or equal to
<code>dstOffset+end-start</code>
</ul><p>
The dstOffset argument must be greater than or equal to
<code>0</code>, and less than or equal to the length of this
sequence.
<p>The start argument must be nonnegative, and not greater than
<code>end</code>.
<p>The end argument must be greater than or equal to
<code>start</code>, and less than or equal to the length of s.

<p>If <code>s</code> is <code>null</code>, then this method inserts
characters as if the s parameter was a sequence containing the four
characters <code>\"null\"</code>.

@param      dstOffset   the offset in this sequence.
@param      s       the sequence to be inserted.
@param      start   the starting index of the subsequence to be inserted.
@param      end     the end index of the subsequence to be inserted.
@return     a reference to this object.
@throws     IndexOutOfBoundsException  if <code>dstOffset</code>
            is negative or greater than <code>this.length()</code>, or
             <code>start</code> or <code>end</code> are negative, or
             <code>start</code> is greater than <code>end</code> or
             <code>end</code> is greater than <code>s.length()</code>"
      end

      operation 6929691 "insert"
	public return_type class_ref 909211 // AbstractStringBuilder
	nparams 2
	  param in name "offset" explicit_type "int"
	  param inout name "b" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the string representation of the <code>boolean</code> 
argument into this sequence. 
<p>
The second argument is converted to a string as if by the method 
<code>String.valueOf</code>, and the characters of that 
string are then inserted into this sequence at the indicated 
offset. 
<p>
The offset argument must be greater than or equal to 
<code>0</code>, and less than or equal to the length of this 
sequence. 

@param      offset   the offset.
@param      b        a <code>boolean</code>.
@return     a reference to this object.
@throws     StringIndexOutOfBoundsException  if the offset is invalid."
      end

      operation 6929819 "insert"
	public return_type class_ref 909211 // AbstractStringBuilder
	nparams 2
	  param in name "offset" explicit_type "int"
	  param in name "c" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the string representation of the <code>char</code> 
argument into this sequence. 
<p>
The second argument is inserted into the contents of this sequence
at the position indicated by <code>offset</code>. The length 
of this sequence increases by one. 
<p>
The overall effect is exactly as if the argument were converted to 
a string by the method {@link String#valueOf(char)} and the character 
in that string were then {@link #insert(int, String) inserted} into 
this character sequence at the position indicated by
<code>offset</code>.
<p>
The offset argument must be greater than or equal to 
<code>0</code>, and less than or equal to the length of this 
sequence. 

@param      offset   the offset.
@param      c        a <code>char</code>.
@return     a reference to this object.
@throws     IndexOutOfBoundsException  if the offset is invalid."
      end

      operation 6929947 "insert"
	public return_type class_ref 909211 // AbstractStringBuilder
	nparams 2
	  param in name "offset" explicit_type "int"
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the string representation of the second <code>int</code> 
argument into this sequence. 
<p>
The second argument is converted to a string as if by the method 
<code>String.valueOf</code>, and the characters of that 
string are then inserted into this sequence at the indicated 
offset. 
<p>
The offset argument must be greater than or equal to 
<code>0</code>, and less than or equal to the length of this 
sequence. 

@param      offset   the offset.
@param      i        an <code>int</code>.
@return     a reference to this object.
@throws     StringIndexOutOfBoundsException  if the offset is invalid."
      end

      operation 6930075 "insert"
	public return_type class_ref 909211 // AbstractStringBuilder
	nparams 2
	  param in name "offset" explicit_type "int"
	  param in name "l" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the string representation of the <code>long</code> 
argument into this sequence. 
<p>
The second argument is converted to a string as if by the method 
<code>String.valueOf</code>, and the characters of that 
string are then inserted into this sequence at the position 
indicated by <code>offset</code>. 
<p>
The offset argument must be greater than or equal to 
<code>0</code>, and less than or equal to the length of this 
sequence. 

@param      offset   the offset.
@param      l        a <code>long</code>.
@return     a reference to this object.
@throws     StringIndexOutOfBoundsException  if the offset is invalid."
      end

      operation 6930203 "insert"
	public return_type class_ref 909211 // AbstractStringBuilder
	nparams 2
	  param in name "offset" explicit_type "int"
	  param in name "f" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the string representation of the <code>float</code> 
argument into this sequence. 
<p>
The second argument is converted to a string as if by the method 
<code>String.valueOf</code>, and the characters of that 
string are then inserted into this sequence at the indicated 
offset. 
<p>
The offset argument must be greater than or equal to 
<code>0</code>, and less than or equal to the length of this 
sequence. 

@param      offset   the offset.
@param      f        a <code>float</code>.
@return     a reference to this object.
@throws     StringIndexOutOfBoundsException  if the offset is invalid."
      end

      operation 6930331 "insert"
	public return_type class_ref 909211 // AbstractStringBuilder
	nparams 2
	  param in name "offset" explicit_type "int"
	  param in name "d" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the string representation of the <code>double</code> 
argument into this sequence.
<p>
The second argument is converted to a string as if by the method 
<code>String.valueOf</code>, and the characters of that 
string are then inserted into this sequence at the indicated 
offset. 
<p>
The offset argument must be greater than or equal to 
<code>0</code>, and less than or equal to the length of this 
sequence.

@param      offset   the offset.
@param      d        a <code>double</code>.
@return     a reference to this object.
@throws     StringIndexOutOfBoundsException  if the offset is invalid."
      end

      operation 6930459 "indexOf"
	public explicit_return_type "int"
	nparams 1
	  param in name "str" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index within this string of the first occurrence of the
specified substring. The integer returned is the smallest value 
<i>k</i> such that:
<blockquote><pre>
this.toString().startsWith(str, <i>k</i>)
</pre></blockquote>
is <code>true</code>.

@param   str   any string.
@return  if the string argument occurs as a substring within this
         object, then the index of the first character of the first
         such substring is returned; if it does not occur as a
         substring, <code>-1</code> is returned.
@throws  java.lang.NullPointerException if <code>str</code> is 
         <code>null</code>."
      end

      operation 6930587 "indexOf"
	public explicit_return_type "int"
	nparams 2
	  param in name "str" explicit_type "String"
	  param in name "fromIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index within this string of the first occurrence of the
specified substring, starting at the specified index.  The integer
returned is the smallest value <tt>k</tt> for which:
<blockquote><pre>
    k >= Math.min(fromIndex, str.length()) &&
                  this.toString().startsWith(str, k)
</pre></blockquote>
If no such value of <i>k</i> exists, then -1 is returned.

@param   str         the substring for which to search.
@param   fromIndex   the index from which to start the search.
@return  the index within this string of the first occurrence of the
         specified substring, starting at the specified index.
@throws  java.lang.NullPointerException if <code>str</code> is
           <code>null</code>."
      end

      operation 6930715 "lastIndexOf"
	public explicit_return_type "int"
	nparams 1
	  param in name "str" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index within this string of the rightmost occurrence
of the specified substring.  The rightmost empty string \"\" is
considered to occur at the index value <code>this.length()</code>. 
The returned index is the largest value <i>k</i> such that 
<blockquote><pre>
this.toString().startsWith(str, k)
</pre></blockquote>
is true.

@param   str   the substring to search for.
@return  if the string argument occurs one or more times as a substring
         within this object, then the index of the first character of
         the last such substring is returned. If it does not occur as
         a substring, <code>-1</code> is returned.
@throws  java.lang.NullPointerException  if <code>str</code> is 
         <code>null</code>."
      end

      operation 6930843 "lastIndexOf"
	public explicit_return_type "int"
	nparams 2
	  param in name "str" explicit_type "String"
	  param in name "fromIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index within this string of the last occurrence of the
specified substring. The integer returned is the largest value <i>k</i>
such that:
<blockquote><pre>
    k <= Math.min(fromIndex, str.length()) &&
                  this.toString().startsWith(str, k)
</pre></blockquote>
If no such value of <i>k</i> exists, then -1 is returned.

@param   str         the substring to search for.
@param   fromIndex   the index to start the search from.
@return  the index within this sequence of the last occurrence of the
         specified substring.
@throws  java.lang.NullPointerException if <code>str</code> is 
         <code>null</code>."
      end

      operation 6930971 "reverse"
	public return_type class_ref 909211 // AbstractStringBuilder
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Causes this character sequence to be replaced by the reverse of
the sequence. If there are any surrogate pairs included in the
sequence, these are treated as single characters for the
reverse operation. Thus, the order of the high-low surrogates
is never reversed.

Let <i>n</i> be the character length of this character sequence
(not the length in <code>char</code> values) just prior to
execution of the <code>reverse</code> method. Then the
character at index <i>k</i> in the new character sequence is
equal to the character at index <i>n-k-1</i> in the old
character sequence.

<p>Note that the reverse operation may result in producing
surrogate pairs that were unpaired low-surrogates and
high-surrogates before the operation. For example, reversing
\"&#92;uDC00&#92;uD800\" produces \"&#92;uD800&#92;uDC00\" which is
a valid surrogate pair.

@return  a reference to this object."
      end

      operation 6931099 "toString"
	abstract public explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representing the data in this sequence.
A new <code>String</code> object is allocated and initialized to 
contain the character sequence currently represented by this 
object. This <code>String</code> is then returned. Subsequent 
changes to this sequence do not affect the contents of the 
<code>String</code>.

@return  a string representation of this sequence of characters."
      end

      operation 6931227 "getValue"
	package explicit_return_type "char"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Needed by <tt>String</tt> for the contentEquals method."
      end
    end

    class 909339 "ArithmeticException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Thrown when an exceptional arithmetic condition has occurred. For 
example, an integer \"divide by zero\" throws an 
instance of this class. 

@author  unascribed
@version 1.22, 12/19/03
@since   JDK1.0"
      classrelation 1771803 // <generalisation>
	relation 1771803 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1771803 // <generalisation>
	  b parent class_ref 241051 // RuntimeException
      end

      operation 6931355 "ArithmeticException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>ArithmeticException</code> with no detail 
message. "
      end

      operation 6931483 "ArithmeticException"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>ArithmeticException</code> with the specified 
detail message. 

@param   s   the detail message."
      end
    end

    class 909467 "ArrayStoreException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Thrown to indicate that an attempt has been made to store the 
wrong type of object into an array of objects. For example, the 
following code generates an <code>ArrayStoreException</code>: 
<p><blockquote><pre>
    Object x[] = new String[3];
    x[0] = new Integer(0);
</pre></blockquote>

@author  unascribed
@version 1.11, 12/19/03
@since   JDK1.0"
      classrelation 1772187 // <generalisation>
	relation 1772187 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1772187 // <generalisation>
	  b parent class_ref 241051 // RuntimeException
      end

      operation 6932251 "ArrayStoreException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>ArrayStoreException</code> with no detail message. "
      end

      operation 6932379 "ArrayStoreException"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>ArrayStoreException</code> with the specified 
detail message. 

@param   s   the detail message."
      end
    end

    class 909595 "AssertionError"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Thrown to indicate that an assertion has failed.

<p>The seven one-argument public constructors provided by this
class ensure that the assertion error returned by the invocation:
<pre>
    new AssertionError(<i>expression</i>)
</pre>
has as its detail message the <i>string conversion</i> of
<i>expression</i> (as defined in <a
href=\"http://java.sun.com/docs/books/jls/second_edition/html/j.title.doc.html\">
<i>The Java Language Specification, Second Edition</i></a>, 
<a href=\"http://java.sun.com/docs/books/jls/second_edition/html/expressions.doc.html#40220\">
Section  15.18.1.1</a>), regardless of the type of <i>expression</i>.

@version 1.7, 12/19/03
@since   JDK1.4"
      classrelation 1772315 // <generalisation>
	relation 1772315 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1772315 // <generalisation>
	  b parent class_ref 221851 // Error
      end

      operation 6932507 "AssertionError"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an AssertionError with no detail message."
      end

      operation 6932635 "AssertionError"
	private explicit_return_type ""
	nparams 1
	  param in name "detailMessage" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This internal constructor does no processing on its string argument,
even if it is a null reference.  The public constructors will
never call this constructor with a null argument."
      end

      operation 6932763 "AssertionError"
	public explicit_return_type ""
	nparams 1
	  param inout name "detailMessage" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an AssertionError with its detail message derived
from the specified object, which is converted to a string as
defined in <i>The Java Language Specification, Second
Edition</i>, Section 15.18.1.1.
<p>
If the specified object is an instance of <tt>Throwable</tt>, it
becomes the <i>cause</i> of the newly constructed assertion error.

@param detailMessage value to be used in constructing detail message
@see   Throwable#getCause()"
      end

      operation 6932891 "AssertionError"
	public explicit_return_type ""
	nparams 1
	  param inout name "detailMessage" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an AssertionError with its detail message derived
from the specified <code>boolean</code>, which is converted to
a string as defined in <i>The Java Language Specification,
Second Edition</i>, Section 15.18.1.1.

@param detailMessage value to be used in constructing detail message"
      end

      operation 6933019 "AssertionError"
	public explicit_return_type ""
	nparams 1
	  param in name "detailMessage" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an AssertionError with its detail message derived
from the specified <code>char</code>, which is converted to a
string as defined in <i>The Java Language Specification, Second
Edition</i>, Section 15.18.1.1.

@param detailMessage value to be used in constructing detail message"
      end

      operation 6933147 "AssertionError"
	public explicit_return_type ""
	nparams 1
	  param in name "detailMessage" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an AssertionError with its detail message derived
from the specified <code>int</code>, which is converted to a
string as defined in <i>The Java Language Specification, Second
Edition</i>, Section 15.18.1.1.

@param detailMessage value to be used in constructing detail message"
      end

      operation 6933275 "AssertionError"
	public explicit_return_type ""
	nparams 1
	  param in name "detailMessage" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an AssertionError with its detail message derived
from the specified <code>long</code>, which is converted to a
string as defined in <i>The Java Language Specification, Second
Edition</i>, Section 15.18.1.1.

@param detailMessage value to be used in constructing detail message"
      end

      operation 6933403 "AssertionError"
	public explicit_return_type ""
	nparams 1
	  param in name "detailMessage" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an AssertionError with its detail message derived
from the specified <code>float</code>, which is converted to a
string as defined in <i>The Java Language Specification, Second
Edition</i>, Section 15.18.1.1.

@param detailMessage value to be used in constructing detail message"
      end

      operation 6933531 "AssertionError"
	public explicit_return_type ""
	nparams 1
	  param in name "detailMessage" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an AssertionError with its detail message derived
from the specified <code>double</code>, which is converted to a
string as defined in <i>The Java Language Specification, Second
Edition</i>, Section 15.18.1.1.

@param detailMessage value to be used in constructing detail message"
      end
    end

    class 909851 "CharacterData00"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The CharacterData00 class encapsulates the large tables once found in
java.lang.Character"
      operation 6938651 "getProperties"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The character properties are currently encoded into 32 bits in the following manner:
1 bit   mirrored property
4 bits  directionality property
9 bits  signed offset used for converting case
1 bit   if 1, adding the signed offset converts the character to lowercase
1 bit   if 1, subtracting the signed offset converts the character to uppercase
1 bit   if 1, this character has a titlecase equivalent (possibly itself)
3 bits  0  may not be part of an identifier
1  ignorable control; may continue a Unicode identifier or Java identifier
2  may continue a Java identifier but not a Unicode identifier (unused)
3  may continue a Unicode identifier or Java identifier
4  is a Java whitespace character
5  may start or continue a Java identifier;
may continue but not start a Unicode identifier (underscores)
6  may start or continue a Java identifier but not a Unicode identifier ($)
7  may start or continue a Unicode identifier or Java identifier
Thus:
5, 6, 7 may start a Java identifier
1, 2, 3, 5, 6, 7 may continue a Java identifier
7 may start a Unicode identifier
1, 3, 5, 7 may continue a Unicode identifier
1 is ignorable within an identifier
4 is Java whitespace
2 bits  0  this character has no numeric property
1  adding the digit offset to the character code and then
masking with 0x1F will produce the desired numeric value
2  this character has a \"strange\" numeric value
3  a Java supradecimal digit: adding the digit offset to the
character code, then masking with 0x1F, then adding 10
will produce the desired numeric value
5 bits  digit offset
5 bits  character type

The encoding of character properties is subject to change at any time."
      end

      operation 6938779 "getType"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6938907 "isLowerCase"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6939035 "isUpperCase"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6939163 "isTitleCase"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6939291 "isDigit"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6939419 "isDefined"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6939547 "isLetter"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6939675 "isLetterOrDigit"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6939803 "isSpaceChar"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6939931 "isJavaIdentifierStart"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6940059 "isJavaIdentifierPart"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6940187 "isUnicodeIdentifierStart"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6940315 "isUnicodeIdentifierPart"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6940443 "isIdentifierIgnorable"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6940571 "toLowerCase"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6940699 "toUpperCase"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6940827 "toTitleCase"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6940955 "digit"
	class_operation package explicit_return_type "int"
	nparams 2
	  param in name "ch" explicit_type "int"
	  param in name "radix" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6941083 "getNumericValue"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6941211 "isWhitespace"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6941339 "getDirectionality"
	class_operation package explicit_return_type "byte"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6941467 "isMirrored"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6941595 "toUpperCaseEx"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6941723 "toUpperCaseCharArray"
	class_operation package explicit_return_type "char"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6941851 "findInCharMap"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds the character in the uppercase mapping table.

@param ch the <code>char</code> to search
@return the index location ch in the table or -1 if not found
@since 1.4"
      end

      attribute 2721435 "charMap"
	class_attribute const_attribute package explicit_type "char"
	multiplicity "[][][]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The following tables and code generated using:
 java GenerateCharacter -plane 0 -template ../../tools/GenerateCharacter/CharacterData00.java.template -spec ../../tools/GenerateCharacter/UnicodeData.txt -specialcasing ../../tools/GenerateCharacter/SpecialCasing.txt -o C:/BUILD_AREA/jdk1.5.0_16/control/build/windows-i586/gensrc/java/lang/CharacterData00.java -string -usecharforbyte 11 4 1"
      end

      attribute 2721563 "X"
	class_attribute const_attribute package explicit_type "char"
	multiplicity "[]"
	init_value "=  (
    \"\\000\\020\\040\\060\\100\\120\\140\\160\\200\\220\\240\\260\\300\\320\\340\\360\\200\\u0100\"+
    \"\\u0110\\u0120\\u0130\\u0140\\u0150\\u0160\\u0170\\u0170\\u0180\\u0190\\u01A0\\u01B0\\u01C0\"+
    \"\\u01D0\\u01E0\\u01F0\\u0200\\200\\u0210\\200\\u0220\\u0230\\u0240\\u0250\\u0260\\u0270\"+
    \"\\u0280\\u0290\\u02A0\\u02B0\\u02C0\\u02D0\\u02E0\\u02F0\\u0300\\u0300\\u0310\\u0320\\u0330\"+
    \"\\u0340\\u0350\\u0360\\u0300\\u0370\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\"+
    \"\\u0360\\u0360\\u0380\\u0390\\u03A0\\u03B0\\u03C0\\u03D0\\u03E0\\u03F0\\u0400\\u0410\\u0420\"+
    \"\\u0430\\u0440\\u0450\\u0460\\u0470\\u03C0\\u0480\\u0490\\u04A0\\u04B0\\u04C0\\u04D0\\u04E0\"+
    \"\\u04F0\\u0500\\u0510\\u0520\\u0530\\u0540\\u0550\\u0520\\u0530\\u0560\\u0570\\u0520\\u0580\"+
    \"\\u0590\\u05A0\\u05B0\\u05C0\\u05D0\\u05E0\\u0360\\u05F0\\u0600\\u0610\\u0360\\u0620\\u0630\"+
    \"\\u0640\\u0650\\u0660\\u0670\\u0680\\u0360\\u0690\\u06A0\\u06B0\\u0360\\u0360\\u06C0\\u06D0\"+
    \"\\u06E0\\u0690\\u0690\\u06F0\\u0690\\u0690\\u0700\\u0690\\u0710\\u0720\\u0690\\u0730\\u0690\"+
    \"\\u0740\\u0750\\u0760\\u0770\\u0750\\u0690\\u0780\\u0790\\u0360\\u0690\\u0690\\u07A0\\u05C0\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u07B0\\u07C0\\u0690\\u0690\\u07D0\\u07E0\\u07F0\\u0800\"+
    \"\\u0810\\u0690\\u0820\\u0830\\u0840\\u0850\\u0690\\u0860\\u0870\\u0690\\u0880\\u0360\\u0360\"+
    \"\\u0890\\u08A0\\u08B0\\u08C0\\u0360\\u0360\\u0360\\u08D0\\u0360\\u0360\\u0360\\u0360\\u0360\"+
    \"\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\"+
    \"\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\\u08E0\\u08F0\\u0900\\u0910\\u0360\\u0360\\u0360\"+
    \"\\u0360\\200\\200\\200\\200\\u0920\\200\\200\\u0930\\u0940\\u0950\\u0960\\u0970\\u0980\\u0990\"+
    \"\\u09A0\\u09B0\\u09C0\\u09D0\\u09E0\\u09F0\\u0A00\\u0A10\\u0A20\\u0A30\\u0A40\\u0A50\\u0A60\"+
    \"\\u0A70\\u0A80\\u0A90\\u0AA0\\u0AB0\\u0AC0\\u0AD0\\u0AE0\\u0AF0\\u0B00\\u0B10\\u0B20\\u0B30\"+
    \"\\u0B40\\u0B50\\u0B60\\u0B70\\u0B80\\u0B90\\u0BA0\\u0360\\u08D0\\u0BB0\\u0BC0\\u0BD0\\u0BE0\"+
    \"\\u0BF0\\u0C00\\u0C10\\u08D0\\u08D0\\u08D0\\u08D0\\u08D0\\u0C20\\u0C30\\u0C40\\u0C50\\u08D0\"+
    \"\\u08D0\\u0C60\\u0C70\\u0C80\\u0360\\u0360\\u0C90\\u0CA0\\u0CB0\\u0CC0\\u0CD0\\u0CE0\\u0CF0\"+
    \"\\u0D00\\u08D0\\u08D0\\u08D0\\u08D0\\u08D0\\u08D0\\u08D0\\u08D0\\u0D10\\u0D10\\u0D10\\u0D10\"+
    \"\\u0D20\\u0D30\\u0D40\\u0D50\\u0D60\\u0D70\\u0D80\\u0D90\\u0DA0\\u0DB0\\u0DC0\\u0DD0\\u0DE0\"+
    \"\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\"+
    \"\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\"+
    \"\\u0360\\u0DF0\\u08D0\\u08D0\\u0E00\\u08D0\\u08D0\\u08D0\\u08D0\\u08D0\\u08D0\\u0E10\\u0E20\"+
    \"\\u0E30\\u0E40\\u05C0\\u0690\\u0E50\\u0E60\\u0690\\u0E70\\u0E80\\u0E90\\u0690\\u0690\\u0EA0\"+
    \"\\u0870\\u0360\\u0EB0\\u0EC0\\u0ED0\\u0EE0\\u0EF0\\u0ED0\\u0F00\\u0F10\\u0F20\\u0B60\\u0B60\"+
    \"\\u0B60\\u0F30\\u0B60\\u0B60\\u0F40\\u0F50\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0F60\\u08D0\\u08D0\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0F70\\u0360\\u0360\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0F80\\u08D0\\u0BB0\\u0360\"+
    \"\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\"+
    \"\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\"+
    \"\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\"+
    \"\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\\u0360\"+
    \"\\u0360\\u0360\\u0360\\u0360\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0F90\\u0360\\u0360\\u0FA0\\u0FA0\\u0FA0\\u0FA0\\u0FA0\\u0FA0\\u0FA0\\u0FA0\"+
    \"\\u0FA0\\u0FA0\\u0FA0\\u0FA0\\u0FA0\\u0FA0\\u0FA0\\u0FA0\\u0FA0\\u0FA0\\u0FA0\\u0FA0\\u0FA0\"+
    \"\\u0FA0\\u0FA0\\u0FA0\\u0FA0\\u0FA0\\u0FA0\\u0FA0\\u0FA0\\u0FA0\\u0FA0\\u0FA0\\u0FA0\\u0FA0\"+
    \"\\u0FA0\\u0FA0\\u0FA0\\u0FA0\\u0FA0\\u0FA0\\u0FA0\\u0FA0\\u0FA0\\u0FA0\\u0FA0\\u0FA0\\u0FA0\"+
    \"\\u0FA0\\u0FA0\\u0FA0\\u0FA0\\u0FA0\\u0FA0\\u0FA0\\u0FA0\\u0FA0\\u0FA0\\u0FA0\\u0FA0\\u0FA0\"+
    \"\\u0FA0\\u0FA0\\u0FA0\\u0FA0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\"+
    \"\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\"+
    \"\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\"+
    \"\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\"+
    \"\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\"+
    \"\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\"+
    \"\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\"+
    \"\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\"+
    \"\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\"+
    \"\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\"+
    \"\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\"+
    \"\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\"+
    \"\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\"+
    \"\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\"+
    \"\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\"+
    \"\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0FB0\\u0690\\u0690\\u0690\\u0690\"+
    \"\\u0690\\u0690\\u0690\\u0690\\u0690\\u0FC0\\u0690\\u0FD0\\u0360\\u0360\\u0360\\u0360\\u0FE0\"+
    \"\\u0FF0\\u1000\\u0300\\u0300\\u1010\\u1020\\u0300\\u0300\\u0300\\u0300\\u0300\\u0300\\u0300\"+
    \"\\u0300\\u0300\\u0300\\u1030\\u1040\\u0300\\u1050\\u0300\\u1060\\u1070\\u1080\\u1090\\u10A0\"+
    \"\\u10B0\\u0300\\u0300\\u0300\\u10C0\\u10D0\\040\\u10E0\\u10F0\\u1100\\u1110\\u1120\\u1130\").toCharArray()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The X table has 2048 entries for a total of 4096 bytes."
      end

      attribute 2721691 "Y"
	class_attribute const_attribute package explicit_type "char"
	multiplicity "[]"
	init_value "=  (
    \"\\000\\000\\000\\000\\002\\004\\006\\000\\000\\000\\000\\000\\000\\000\\010\\004\\012\\014\\016\"+
    \"\\020\\022\\024\\026\\030\\032\\032\\032\\032\\032\\034\\036\\040\\042\\044\\044\\044\\044\\044\"+
    \"\\044\\044\\044\\044\\044\\044\\044\\046\\050\\052\\054\\056\\056\\056\\056\\056\\056\\056\\056\"+
    \"\\056\\056\\056\\056\\060\\062\\064\\000\\000\\066\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\070\\072\\072\\074\\076\\100\\102\\104\\106\\110\\112\\114\\116\\120\\122\"+
    \"\\124\\126\\126\\126\\126\\126\\126\\126\\126\\126\\126\\126\\130\\126\\126\\126\\132\\134\\134\"+
    \"\\134\\134\\134\\134\\134\\134\\134\\134\\134\\136\\134\\134\\134\\140\\142\\142\\142\\142\\142\"+
    \"\\142\\142\\142\\142\\142\\142\\142\\142\\142\\142\\142\\142\\142\\142\\142\\142\\142\\142\\142\"+
    \"\\144\\142\\142\\142\\146\\150\\150\\150\\150\\150\\150\\150\\152\\142\\142\\142\\142\\142\\142\"+
    \"\\142\\142\\142\\142\\142\\142\\142\\142\\142\\142\\142\\142\\142\\142\\142\\142\\142\\154\\150\"+
    \"\\150\\152\\156\\142\\142\\160\\162\\164\\166\\170\\172\\162\\174\\176\\142\\200\\202\\204\\142\"+
    \"\\142\\142\\206\\210\\200\\142\\206\\212\\214\\150\\216\\142\\220\\142\\222\\224\\224\\226\\230\"+
    \"\\232\\226\\234\\150\\150\\150\\150\\150\\150\\150\\236\\142\\142\\142\\142\\142\\142\\142\\142\"+
    \"\\142\\240\\232\\142\\242\\142\\142\\142\\142\\244\\142\\142\\142\\142\\142\\142\\142\\142\\142\"+
    \"\\200\\246\\250\\250\\250\\250\\250\\250\\250\\250\\250\\250\\250\\250\\200\\252\\254\\256\\260\"+
    \"\\262\\200\\200\\264\\266\\200\\200\\270\\200\\200\\272\\200\\274\\276\\200\\200\\200\\200\\200\"+
    \"\\300\\302\\200\\200\\300\\304\\200\\200\\200\\306\\200\\200\\200\\200\\200\\200\\200\\200\\200\"+
    \"\\200\\200\\200\\200\\200\\310\\310\\310\\310\\312\\314\\310\\310\\310\\316\\316\\320\\320\\320\"+
    \"\\320\\320\\310\\316\\316\\316\\316\\316\\316\\316\\310\\310\\322\\316\\316\\316\\316\\322\\316\"+
    \"\\316\\316\\316\\316\\316\\316\\316\\324\\324\\324\\324\\324\\324\\324\\324\\324\\324\\324\\324\"+
    \"\\324\\324\\324\\324\\324\\324\\326\\324\\324\\324\\324\\324\\324\\324\\324\\324\\250\\250\\330\"+
    \"\\324\\324\\324\\324\\324\\324\\324\\324\\324\\250\\250\\316\\250\\250\\332\\250\\334\\250\\250\"+
    \"\\316\\336\\340\\342\\344\\346\\350\\126\\126\\126\\126\\126\\126\\126\\126\\352\\126\\126\\126\"+
    \"\\126\\354\\356\\360\\134\\134\\134\\134\\134\\134\\134\\134\\362\\134\\134\\134\\134\\364\\366\"+
    \"\\370\\372\\374\\376\\142\\142\\142\\142\\142\\142\\142\\142\\142\\142\\142\\142\\u0100\\u0102\"+
    \"\\u0104\\u0106\\u0108\\142\\250\\250\\u010A\\u010A\\u010A\\u010A\\u010A\\u010A\\u010A\\u010A\"+
    \"\\126\\126\\126\\126\\126\\126\\126\\126\\126\\126\\126\\126\\126\\126\\126\\126\\134\\134\\134\"+
    \"\\134\\134\\134\\134\\134\\134\\134\\134\\134\\134\\134\\134\\134\\u010C\\u010C\\u010C\\u010C\"+
    \"\\u010C\\u010C\\u010C\\u010C\\142\\u010E\\324\\u0110\\u0112\\142\\142\\142\\142\\142\\142\"+
    \"\\142\\142\\142\\142\\142\\u0114\\150\\150\\150\\150\\150\\150\\u0116\\142\\142\\142\\142\\142\"+
    \"\\142\\142\\142\\142\\142\\142\\142\\142\\142\\142\\142\\142\\142\\142\\250\\142\\250\\250\\250\"+
    \"\\142\\142\\142\\142\\142\\142\\142\\142\\250\\250\\250\\250\\250\\250\\250\\250\\250\\250\\250\"+
    \"\\250\\250\\250\\250\\250\\u0118\\u011A\\u011A\\u011A\\u011A\\u011A\\u011A\\u011A\\u011A\"+
    \"\\u011A\\u011A\\u011A\\u011A\\u011A\\u011A\\u011A\\u011A\\u011A\\u011A\\u011C\\u011E\\u0120\"+
    \"\\u0120\\u0120\\u0122\\u0124\\u0124\\u0124\\u0124\\u0124\\u0124\\u0124\\u0124\\u0124\\u0124\"+
    \"\\u0124\\u0124\\u0124\\u0124\\u0124\\u0124\\u0124\\u0124\\u0126\\u0128\\u012A\\250\\250\"+
    \"\\330\\324\\324\\324\\324\\324\\324\\324\\324\\330\\324\\324\\324\\324\\324\\324\\324\\324\\324\"+
    \"\\324\\324\\330\\324\\u012C\\u012C\\u012E\\u0110\\250\\250\\250\\250\\250\\u0130\\u0130\\u0130\"+
    \"\\u0130\\u0130\\u0130\\u0130\\u0130\\u0130\\u0130\\u0130\\u0130\\u0130\\u0132\\250\\250\"+
    \"\\u0130\\u0134\\u0136\\250\\250\\250\\250\\250\\u0138\\u0138\\250\\250\\250\\250\\u013A\\074\"+
    \"\\324\\324\\324\\250\\250\\u013C\\250\\u013C\\u013E\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\"+
    \"\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\\u0142\\250\\250\\u0144\\u0140\\u0140\\u0140\"+
    \"\\u0140\\u0146\\324\\324\\324\\324\\324\\324\\u0110\\250\\250\\250\\u0148\\u0148\\u0148\\u0148\"+
    \"\\u0148\\u014A\\u014C\\u0140\\u014E\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\"+
    \"\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\"+
    \"\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\\u0150\"+
    \"\\324\\324\\324\\u0152\\u0154\\324\\324\\u0156\\u0158\\u015A\\324\\324\\u0140\\032\\032\\032\"+
    \"\\032\\032\\u0140\\u015C\\u015E\\u0160\\u0160\\u0160\\u0160\\u0160\\u0160\\u0160\\u0162\"+
    \"\\u0146\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\"+
    \"\\u0140\\u0140\\u0140\\324\\324\\324\\324\\324\\324\\324\\324\\324\\324\\324\\324\\324\\u0110\"+
    \"\\u013E\\u0140\\250\\250\\250\\250\\250\\250\\250\\250\\250\\250\\250\\250\\250\\250\\250\\250\"+
    \"\\250\\250\\250\\250\\250\\250\\250\\250\\u0140\\u0140\\u0140\\324\\324\\324\\324\\324\\u014E\"+
    \"\\250\\250\\250\\250\\250\\250\\250\\330\\u0164\\224\\224\\224\\224\\224\\224\\224\\224\\224\"+
    \"\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\250\"+
    \"\\u0166\\u0168\\u016A\\324\\324\\324\\u0164\\u0168\\u016A\\250\\u016C\\324\\u0110\\250\\224\"+
    \"\\224\\224\\224\\224\\324\\u0120\\u016E\\u016E\\u016E\\u016E\\u016E\\u0170\\250\\250\\250\"+
    \"\\250\\250\\250\\250\\330\\u0168\\u0172\\224\\224\\224\\u0174\\u0172\\u0174\\u0172\\224\\224\"+
    \"\\224\\224\\224\\224\\224\\224\\224\\224\\u0174\\224\\224\\224\\u0174\\u0174\\250\\224\\224\"+
    \"\\250\\u0166\\u0168\\u016A\\324\\u0110\\u0176\\u0178\\u0176\\u016A\\250\\250\\250\\250\\u0176\"+
    \"\\250\\250\\224\\u0172\\224\\324\\250\\u016E\\u016E\\u016E\\u016E\\u016E\\224\\072\\u017A\"+
    \"\\u017A\\u017C\\u017E\\250\\250\\330\\u0164\\u0172\\224\\224\\u0174\\250\\u0172\\u0174\\u0172\"+
    \"\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\u0174\\224\\224\\224\\u0174\\224\\u0172\"+
    \"\\u0174\\224\\250\\u0110\\u0168\\u016A\\u0110\\250\\330\\u0110\\330\\324\\250\\250\\250\\250\"+
    \"\\250\\u0172\\224\\u0174\\u0174\\250\\250\\250\\u016E\\u016E\\u016E\\u016E\\u016E\\324\\224\"+
    \"\\u0174\\250\\250\\250\\250\\250\\330\\u0164\\u0172\\224\\224\\224\\224\\u0172\\224\\u0172\"+
    \"\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\u0174\\224\\224\\224\\u0174\\224\\u0172\"+
    \"\\224\\224\\250\\u0166\\u0168\\u016A\\324\\324\\330\\u0164\\u0176\\u016A\\250\\u0174\\250\"+
    \"\\250\\250\\250\\250\\250\\250\\224\\324\\250\\u016E\\u016E\\u016E\\u016E\\u016E\\u0180\\250\"+
    \"\\250\\250\\250\\250\\250\\250\\224\\224\\224\\224\\u0174\\224\\224\\224\\u0174\\224\\u0172\"+
    \"\\224\\224\\250\\u0166\\u016A\\u016A\\324\\250\\u0176\\u0178\\u0176\\u016A\\250\\250\\250\"+
    \"\\250\\u0164\\250\\250\\224\\u0172\\224\\250\\250\\u016E\\u016E\\u016E\\u016E\\u016E\\u0182\"+
    \"\\250\\250\\250\\250\\250\\250\\250\\250\\u0166\\u0172\\224\\224\\u0174\\250\\224\\u0174\\224\"+
    \"\\224\\250\\u0172\\u0174\\u0174\\224\\250\\u0172\\u0174\\250\\224\\u0174\\250\\224\\224\\224\"+
    \"\\224\\u0172\\224\\250\\250\\u0168\\u0164\\u0178\\250\\u0168\\u0178\\u0168\\u016A\\250\\250\"+
    \"\\250\\250\\u0176\\250\\250\\250\\250\\250\\250\\250\\u0184\\u016E\\u016E\\u016E\\u016E\\u0186\"+
    \"\\u0188\\074\\074\\u018A\\u018C\\250\\250\\u0176\\u0168\\u0172\\224\\224\\224\\u0174\\224\"+
    \"\\u0174\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\u0174\\224\\224\\224\\224\\224\"+
    \"\\u0172\\224\\224\\250\\250\\324\\u0164\\u0168\\u0178\\324\\u0110\\324\\324\\250\\250\\250\"+
    \"\\330\\u0110\\250\\250\\250\\250\\224\\250\\250\\u016E\\u016E\\u016E\\u016E\\u016E\\250\\250\"+
    \"\\250\\250\\250\\250\\250\\250\\250\\u0168\\u0172\\224\\224\\224\\u0174\\224\\u0174\\224\\224\"+
    \"\\224\\224\\224\\224\\224\\224\\224\\224\\224\\u0174\\224\\224\\224\\224\\224\\u0172\\224\\224\"+
    \"\\250\\u0166\\u018E\\u0168\\u0168\\u0178\\u0190\\u0178\\u0168\\324\\250\\250\\250\\u0176\"+
    \"\\u0178\\250\\250\\250\\u0174\\224\\224\\224\\224\\u0174\\224\\224\\224\\224\\224\\224\\224\"+
    \"\\224\\250\\250\\u0168\\u016A\\324\\250\\u0168\\u0178\\u0168\\u016A\\250\\250\\250\\250\\u0176\"+
    \"\\250\\250\\250\\250\\250\\u0168\\u0172\\224\\224\\224\\224\\224\\224\\224\\224\\u0174\\250\"+
    \"\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\u0172\\224\\224\\224\\224\\u0172\"+
    \"\\250\\224\\224\\224\\u0174\\250\\u0110\\250\\u0176\\u0168\\324\\u0110\\u0110\\u0168\\u0168\"+
    \"\\u0168\\u0168\\250\\250\\250\\250\\250\\250\\250\\250\\250\\u0168\\u0170\\250\\250\\250\\250\"+
    \"\\250\\u0172\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\"+
    \"\\224\\224\\224\\224\\224\\224\\224\\u016C\\224\\324\\324\\324\\u0110\\250\\u0180\\224\\224\"+
    \"\\224\\u0192\\324\\324\\324\\u0194\\u0196\\u0196\\u0196\\u0196\\u0196\\u0120\\250\\250\\u0172\"+
    \"\\u0174\\u0174\\u0172\\u0174\\u0174\\u0172\\250\\250\\250\\224\\224\\u0172\\224\\224\\224\"+
    \"\\u0172\\224\\u0172\\u0172\\250\\224\\u0172\\224\\u016C\\224\\324\\324\\324\\330\\u0166\\250\"+
    \"\\224\\224\\u0174\\332\\324\\324\\324\\250\\u0196\\u0196\\u0196\\u0196\\u0196\\250\\224\\250\"+
    \"\\u0198\\u019A\\u0120\\u0120\\u0120\\u0120\\u0120\\u0120\\u0120\\u019C\\u019A\\u019A\\324\"+
    \"\\u019A\\u019A\\u019A\\u019E\\u019E\\u019E\\u019E\\u019E\\u01A0\\u01A0\\u01A0\\u01A0\\u01A0\"+
    \"\\u010E\\u010E\\u010E\\u01A2\\u01A2\\u0168\\224\\224\\224\\224\\u0172\\224\\224\\224\\224\"+
    \"\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\u0174\\250\\250\\330\\324\\324\"+
    \"\\324\\324\\324\\324\\u0164\\324\\324\\u0194\\324\\224\\224\\250\\250\\324\\324\\324\\324\\330\"+
    \"\\324\\324\\324\\324\\324\\324\\324\\324\\324\\324\\324\\324\\324\\324\\324\\324\\324\\u0110\"+
    \"\\u019A\\u019A\\u019A\\u019A\\u01A4\\u019A\\u019A\\u017E\\u01A6\\250\\250\\250\\250\\250\"+
    \"\\250\\250\\250\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\"+
    \"\\224\\u0172\\224\\224\\u0172\\u0174\\u016A\\324\\u0164\\u0110\\250\\324\\u016A\\250\\250\"+
    \"\\250\\u019E\\u019E\\u019E\\u019E\\u019E\\u0120\\u0120\\u0120\\224\\224\\224\\u0168\\324\"+
    \"\\250\\250\\250\\372\\372\\372\\372\\372\\372\\372\\372\\372\\372\\372\\372\\372\\372\\372\\372\"+
    \"\\372\\372\\372\\250\\250\\250\\250\\250\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\"+
    \"\\224\\224\\224\\224\\224\\224\\224\\224\\224\\u0174\\u0128\\250\\250\\224\\224\\224\\224\\224\"+
    \"\\224\\224\\224\\224\\224\\224\\224\\224\\250\\250\\u0172\\224\\u0174\\250\\250\\224\\224\\224\"+
    \"\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\"+
    \"\\224\\224\\224\\250\\250\\250\\224\\224\\224\\u0174\\224\\224\\224\\224\\224\\224\\224\\224\"+
    \"\\224\\224\\224\\224\\224\\224\\224\\u0174\\u0174\\224\\224\\250\\224\\224\\224\\u0174\\u0174\"+
    \"\\224\\224\\250\\224\\224\\224\\u0174\\u0174\\224\\224\\250\\224\\224\\224\\224\\224\\224\\224\"+
    \"\\224\\224\\224\\224\\224\\224\\224\\224\\u0174\\u0174\\224\\224\\250\\224\\224\\224\\u0174\"+
    \"\\u0174\\224\\224\\250\\224\\224\\224\\u0174\\224\\224\\224\\u0174\\224\\224\\224\\224\\224\"+
    \"\\224\\224\\224\\224\\224\\224\\u0174\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\"+
    \"\\u0174\\224\\224\\224\\224\\224\\224\\224\\224\\224\\u0174\\250\\250\\u0128\\u0120\\u0120\"+
    \"\\u0120\\u01A8\\u01AA\\u01AA\\u01AA\\u01AA\\u01AC\\u01AE\\u01A0\\u01A0\\u01A0\\u01B0\\250\"+
    \"\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\u0174\\250\\250\\250\\250\\250\\224\\224\"+
    \"\\224\\224\\224\\224\\u01B2\\u01B4\\224\\224\\224\\u0174\\250\\250\\250\\250\\u01B6\\224\\224\"+
    \"\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\u01B8\\u01BA\\250\\224\\224\\224\\224\\224\"+
    \"\\u01B2\\u0120\\u01BC\\u01BE\\250\\250\\250\\250\\250\\250\\250\\224\\224\\224\\224\\224\\224\"+
    \"\\u0174\\224\\224\\324\\u0110\\250\\250\\250\\250\\250\\224\\224\\224\\224\\224\\224\\224\\224\"+
    \"\\224\\324\\u0194\\u0170\\250\\250\\250\\250\\224\\224\\224\\224\\224\\224\\224\\224\\224\\324\"+
    \"\\250\\250\\250\\250\\250\\250\\224\\224\\224\\224\\224\\224\\u0174\\224\\u0174\\324\\250\\250\"+
    \"\\250\\250\\250\\250\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\u01C0\\u016A\\324\\324\"+
    \"\\324\\u0168\\u0168\\u0168\\u0168\\u0164\\u016A\\324\\324\\324\\324\\324\\u0120\\u01C2\\u0120\"+
    \"\\u01C4\\u016C\\250\\u019E\\u019E\\u019E\\u019E\\u019E\\250\\250\\250\\u01C6\\u01C6\\u01C6\"+
    \"\\u01C6\\u01C6\\250\\250\\250\\020\\020\\020\\u01C8\\020\\u01CA\\324\\u01CC\\u0196\\u0196\"+
    \"\\u0196\\u0196\\u0196\\250\\250\\250\\224\\u01CE\\224\\224\\224\\224\\224\\224\\224\\224\\224\"+
    \"\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\250\\250\"+
    \"\\250\\250\\224\\224\\224\\224\\u016C\\250\\250\\250\\250\\250\\250\\250\\250\\250\\250\\250\"+
    \"\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\u0174\\250\\324\\u0164\"+
    \"\\u0168\\u016A\\u01D0\\u01D2\\250\\250\\u0168\\u0164\\u0168\\u0168\\u016A\\324\\250\\250\"+
    \"\\u018C\\250\\020\\u016E\\u016E\\u016E\\u016E\\u016E\\224\\224\\224\\224\\224\\224\\224\\224\"+
    \"\\224\\224\\224\\224\\224\\224\\224\\250\\224\\224\\u0174\\250\\250\\250\\250\\250\\074\\074\"+
    \"\\074\\074\\074\\074\\074\\074\\074\\074\\074\\074\\074\\074\\074\\074\\200\\200\\200\\200\\200\"+
    \"\\200\\200\\200\\200\\200\\200\\200\\200\\200\\200\\200\\200\\200\\200\\200\\200\\200\\310\\310\"+
    \"\\310\\310\\310\\310\\310\\310\\310\\310\\310\\310\\310\\310\\310\\310\\310\\310\\310\\310\\310\"+
    \"\\310\\310\\310\\310\\310\\310\\200\\200\\200\\200\\200\\250\\250\\250\\250\\250\\250\\250\\250\"+
    \"\\250\\250\\142\\142\\142\\142\\142\\142\\142\\142\\142\\142\\142\\u01D4\\u01D4\\u01D6\\250\"+
    \"\\250\\142\\142\\142\\142\\142\\142\\142\\142\\142\\142\\142\\142\\142\\250\\250\\250\\u01D8\"+
    \"\\u01D8\\u01D8\\u01D8\\u01DA\\u01DA\\u01DA\\u01DA\\u01D8\\u01D8\\u01D8\\250\\u01DA\\u01DA\"+
    \"\\u01DA\\250\\u01D8\\u01D8\\u01D8\\u01D8\\u01DA\\u01DA\\u01DA\\u01DA\\u01D8\\u01D8\\u01D8\"+
    \"\\u01D8\\u01DA\\u01DA\\u01DA\\u01DA\\u01D8\\u01D8\\u01D8\\250\\u01DA\\u01DA\\u01DA\\250\"+
    \"\\u01DC\\u01DC\\u01DC\\u01DC\\u01DE\\u01DE\\u01DE\\u01DE\\u01D8\\u01D8\\u01D8\\u01D8\\u01DA\"+
    \"\\u01DA\\u01DA\\u01DA\\u01E0\\u01E2\\u01E2\\u01E4\\u01E6\\u01E8\\u01EA\\250\\u01D4\\u01D4\"+
    \"\\u01D4\\u01D4\\u01EC\\u01EC\\u01EC\\u01EC\\u01D4\\u01D4\\u01D4\\u01D4\\u01EC\\u01EC\\u01EC\"+
    \"\\u01EC\\u01D4\\u01D4\\u01D4\\u01D4\\u01EC\\u01EC\\u01EC\\u01EC\\u01D8\\u01D4\\u01EE\\u01D4\"+
    \"\\u01DA\\u01F0\\u01F2\\u01F4\\316\\u01D4\\u01EE\\u01D4\\u01F6\\u01F6\\u01F2\\316\\u01D8\"+
    \"\\u01D4\\250\\u01D4\\u01DA\\u01F8\\u01FA\\316\\u01D8\\u01D4\\u01FC\\u01D4\\u01DA\\u01FE\"+
    \"\\u0200\\316\\250\\u01D4\\u01EE\\u01D4\\u0202\\u0204\\u01F2\\u0206\\u0208\\u0208\\u0208\"+
    \"\\u020A\\u0208\\u020C\\u020E\\u0210\\u0212\\u0212\\u0212\\020\\u0214\\u0216\\u0214\\u0216\"+
    \"\\020\\020\\020\\020\\u0218\\u021A\\u021A\\u021C\\u021E\\u021E\\u0220\\020\\u0222\\u0224\"+
    \"\\020\\u0226\\u0228\\020\\u022A\\u022C\\020\\020\\020\\020\\020\\u022E\\u0230\\u0232\\250\"+
    \"\\250\\250\\u0234\\u020E\\u020E\\250\\250\\250\\u020E\\u020E\\u020E\\u0236\\250\\110\\110\"+
    \"\\110\\u0238\\u022A\\u023A\\u023C\\u023C\\u023C\\u023C\\u023C\\u0238\\u022A\\u023E\\250\"+
    \"\\250\\250\\250\\250\\250\\250\\250\\072\\072\\072\\072\\072\\072\\072\\072\\072\\250\\250\\250\"+
    \"\\250\\250\\250\\250\\250\\250\\250\\250\\250\\250\\250\\250\\324\\324\\324\\324\\324\\324\\u0240\"+
    \"\\u0112\\u0154\\u0112\\u0154\\324\\324\\u0110\\250\\250\\250\\250\\250\\250\\250\\250\\250\"+
    \"\\250\\074\\u0242\\074\\u0244\\074\\u0246\\372\\200\\372\\u0248\\u0244\\074\\u0244\\372\\372\"+
    \"\\074\\074\\074\\u0242\\u024A\\u0242\\u024C\\372\\u024E\\372\\u0244\\220\\224\\u0250\\074\"+
    \"\\u0252\\372\\036\\u0254\\u0256\\200\\200\\u0258\\250\\250\\250\\u025A\\122\\122\\122\\122\"+
    \"\\122\\122\\u025C\\u025C\\u025C\\u025C\\u025C\\u025C\\u025E\\u025E\\u0260\\u0260\\u0260\"+
    \"\\u0260\\u0260\\u0260\\u0262\\u0262\\u0264\\u0266\\250\\250\\250\\250\\250\\250\\u0254\\u0254\"+
    \"\\u0268\\074\\074\\u0254\\074\\074\\u0268\\u0258\\074\\u0268\\074\\074\\074\\u0268\\074\\074\"+
    \"\\074\\074\\074\\074\\074\\074\\074\\074\\074\\074\\074\\074\\074\\u0254\\074\\u0268\\u0268\"+
    \"\\074\\074\\074\\074\\074\\074\\074\\074\\074\\074\\074\\074\\074\\074\\074\\u0254\\u0254\\u0254\"+
    \"\\u0254\\u0254\\u0254\\u026A\\u026C\\036\\u0254\\u026C\\u026C\\u026C\\u0254\\u026A\\u0238\"+
    \"\\u026A\\036\\u0254\\u026C\\u026C\\u026A\\u026C\\036\\036\\036\\u0254\\u026A\\u026C\\u026C\"+
    \"\\u026C\\u026C\\u0254\\u0254\\u026A\\u026A\\u026C\\u026C\\u026C\\u026C\\u026C\\u026C\\u026C\"+
    \"\\u026C\\036\\u0254\\u0254\\u026C\\u026C\\u0254\\u0254\\u0254\\u0254\\u026A\\036\\036\\u026C\"+
    \"\\u026C\\u026C\\u026C\\u0254\\u026C\\u026C\\u026C\\u026C\\u026C\\u026C\\u026C\\u026C\\u026C\"+
    \"\\u026C\\u026C\\u026C\\u026C\\u026C\\u026C\\036\\u026A\\u026C\\036\\u0254\\u0254\\036\\u0254\"+
    \"\\u0254\\u0254\\u0254\\u026C\\u0254\\u026C\\u026C\\u026C\\u026C\\u026C\\u026C\\u026C\\u026C\"+
    \"\\u026C\\036\\u0254\\u0254\\u026C\\u0254\\u0254\\u0254\\u0254\\u026A\\u026C\\u026C\\u0254\"+
    \"\\u026C\\u0254\\u0254\\u026C\\u026C\\u026C\\u026C\\u026C\\u026C\\u026C\\u026C\\u026C\\u026C\"+
    \"\\u026C\\u026C\\u0254\\u026C\\u026C\\u026C\\u026C\\u026C\\u026C\\u026C\\u026C\\074\\074\"+
    \"\\074\\074\\u026C\\u026C\\074\\074\\074\\074\\074\\074\\074\\074\\074\\074\\u026C\\074\\074\"+
    \"\\074\\u026E\\u0270\\074\\074\\074\\074\\074\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\"+
    \"\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\"+
    \"\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\"+
    \"\\u019A\\u0272\\u0268\\074\\074\\074\\074\\074\\074\\074\\074\\074\\074\\074\\u0274\\074\\074\"+
    \"\\u0258\\u0254\\u0254\\u0254\\u0254\\u0254\\u0254\\u0254\\u0254\\u0254\\u0254\\u0254\\u0254\"+
    \"\\u01A2\\u0276\\074\\074\\074\\074\\074\\074\\074\\074\\074\\074\\074\\074\\u018C\\250\\250\"+
    \"\\250\\250\\250\\250\\250\\074\\074\\074\\u018C\\250\\250\\250\\250\\250\\250\\250\\250\\250\"+
    \"\\250\\250\\250\\074\\074\\074\\074\\074\\u018C\\250\\250\\250\\250\\250\\250\\250\\250\\250\"+
    \"\\250\\u0278\\u0278\\u0278\\u0278\\u0278\\u0278\\u0278\\u0278\\u0278\\u0278\\u027A\\u027A\"+
    \"\\u027A\\u027A\\u027A\\u027A\\u027A\\u027A\\u027A\\u027A\\u027C\\u027C\\u027C\\u027C\\u027C\"+
    \"\\u027C\\u027C\\u027C\\u027C\\u027C\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\"+
    \"\\u019A\\u019A\\u019A\\u019A\\u019A\\u027E\\u027E\\u027E\\u027E\\u027E\\u027E\\u027E\\u027E\"+
    \"\\u027E\\u027E\\u027E\\u027E\\u027E\\u0280\\u0280\\u0280\\u0280\\u0280\\u0280\\u0280\\u0280\"+
    \"\\u0280\\u0280\\u0280\\u0280\\u0280\\u0282\\u0284\\u0284\\u0284\\u0284\\u0286\\u0288\\u0288\"+
    \"\\u0288\\u0288\\u028A\\074\\074\\074\\074\\074\\074\\074\\074\\074\\074\\074\\u0258\\074\\074\"+
    \"\\074\\074\\u0258\\074\\074\\074\\074\\074\\074\\074\\074\\074\\074\\074\\074\\074\\074\\074\"+
    \"\\074\\074\\074\\074\\074\\074\\074\\074\\074\\074\\074\\074\\u0254\\u0254\\u0254\\u0254\\074\"+
    \"\\074\\074\\074\\074\\074\\074\\074\\074\\074\\074\\074\\u028C\\074\\074\\074\\074\\074\\074\"+
    \"\\074\\074\\074\\074\\u0258\\074\\074\\074\\074\\074\\074\\074\\250\\074\\074\\074\\074\\074\"+
    \"\\074\\074\\074\\074\\250\\250\\250\\250\\250\\250\\250\\074\\250\\250\\250\\250\\250\\250\\250\"+
    \"\\250\\250\\250\\250\\250\\250\\250\\250\\u028C\\074\\u018C\\074\\074\\250\\074\\074\\074\\074\"+
    \"\\074\\074\\074\\074\\074\\074\\074\\074\\074\\074\\u028C\\074\\074\\074\\074\\074\\074\\074\"+
    \"\\074\\074\\074\\074\\074\\074\\074\\074\\074\\074\\u028C\\u028C\\074\\u018C\\250\\u018C\\074\"+
    \"\\074\\074\\u018C\\u028C\\074\\074\\074\\022\\022\\022\\022\\022\\022\\022\\u028E\\u028E\\u028E\"+
    \"\\u028E\\u028E\\u0290\\u0290\\u0290\\u0290\\u0290\\u0292\\u0292\\u0292\\u0292\\u0292\\u018C\"+
    \"\\250\\074\\074\\074\\074\\074\\074\\074\\074\\074\\074\\074\\074\\u028C\\074\\074\\074\\074\"+
    \"\\074\\074\\u018C\\250\\250\\250\\250\\250\\250\\250\\250\\u0254\\u026A\\u026C\\036\\u0254\"+
    \"\\u0254\\u026C\\036\\u0254\\u026C\\u026C\\022\\022\\022\\250\\250\\u0254\\u0254\\u0254\\u0254\"+
    \"\\u0254\\u0254\\u0254\\u0254\\u0254\\u0254\\u0254\\u0254\\u0254\\u0254\\u0254\\u0254\\u0254\"+
    \"\\u0254\\u0254\\u0254\\u0254\\u0254\\u0254\\u0254\\u0254\\u022A\\u0294\\u0294\\u0294\\u0294\"+
    \"\\u0294\\u0294\\u0294\\u0294\\u0294\\u0294\\u0296\\u026A\\u026C\\u026C\\u026C\\u026C\\u026C\"+
    \"\\u026C\\u026C\\u026C\\u026C\\u026C\\u0254\\u0254\\u0254\\u0254\\036\\u0254\\u0254\\u0254\"+
    \"\\u026C\\u026C\\u026C\\u0254\\u026A\\u0254\\u0254\\u026C\\u026C\\036\\u026C\\u0254\\022\"+
    \"\\022\\036\\u0254\\u026A\\u026A\\u026C\\u0254\\u026C\\u0254\\u0254\\u0254\\u0254\\u0254\"+
    \"\\u026C\\u026C\\u026C\\u0254\\022\\u0254\\u0254\\u0254\\u0254\\u0254\\u0254\\u026C\\u026C\"+
    \"\\u026C\\u026C\\u026C\\u026C\\u026C\\u026C\\u026C\\036\\u026C\\u026C\\u0254\\036\\036\\u026A\"+
    \"\\u026A\\u026C\\036\\u0254\\u0254\\u026C\\u0254\\u0254\\u0254\\u026C\\036\\u0254\\u0254\"+
    \"\\u0254\\u0254\\u0254\\u0254\\u0254\\u0254\\u0254\\u0254\\u0254\\u026A\\036\\u0254\\u0254\"+
    \"\\u0254\\u0254\\u0254\\u026C\\u0254\\u0254\\u026C\\u026C\\u026A\\036\\u026A\\036\\u0254\"+
    \"\\u026A\\u026C\\u026C\\u026C\\u026C\\u026C\\u026C\\u026C\\u026C\\u026C\\u026C\\u026C\\u026C\"+
    \"\\u026C\\u026C\\u026C\\u026C\\u026C\\u026C\\u026C\\u026C\\u026C\\u0254\\u026C\\u026C\\u026C\"+
    \"\\u026C\\u026A\\u026C\\u026C\\u026C\\u026C\\u026C\\u026C\\u026C\\u026C\\u026C\\u026C\\u026C\"+
    \"\\u026C\\u026C\\u026C\\u026C\\u026C\\u026C\\u026C\\u026C\\036\\u0254\\u0254\\036\\036\\u0254\"+
    \"\\u026C\\u026C\\036\\u0254\\u0254\\u026C\\036\\u0254\\u026A\\u0254\\u026A\\u026C\\u026C\"+
    \"\\u026A\\u0254\\074\\074\\074\\074\\074\\074\\074\\250\\250\\250\\250\\250\\250\\250\\250\\250\"+
    \"\\074\\074\\074\\074\\074\\074\\074\\074\\074\\074\\074\\074\\074\\u028C\\074\\074\\074\\074\"+
    \"\\074\\074\\074\\074\\074\\074\\074\\074\\250\\250\\250\\250\\250\\250\\074\\074\\074\\074\\074\"+
    \"\\074\\074\\074\\074\\074\\074\\250\\250\\250\\250\\250\\250\\250\\250\\250\\250\\250\\250\\250\"+
    \"\\074\\074\\074\\074\\074\\074\\250\\250\\012\\020\\u0298\\u029A\\022\\022\\022\\022\\022\\074\"+
    \"\\022\\022\\022\\022\\u029C\\u029E\\u02A0\\u02A2\\u02A2\\u02A2\\u02A2\\324\\324\\324\\u02A4\"+
    \"\\310\\310\\074\\u02A6\\u02A8\\u02AA\\074\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\"+
    \"\\224\\u0174\\330\\u02AC\\u02AE\\u02B0\\u02B2\\224\\224\\224\\224\\224\\224\\224\\224\\224\"+
    \"\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\"+
    \"\\u02B4\\310\\u02B0\\250\\250\\u0172\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\"+
    \"\\224\\224\\224\\224\\224\\224\\224\\224\\u0174\\250\\u0172\\224\\224\\224\\224\\224\\224\\224\"+
    \"\\224\\224\\224\\224\\224\\224\\224\\u0174\\u019A\\u02B6\\u02B6\\u019A\\u019A\\u019A\\u019A\"+
    \"\\u019A\\250\\250\\250\\250\\250\\250\\250\\250\\224\\224\\224\\224\\224\\224\\224\\224\\u019A\"+
    \"\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\"+
    \"\\u0272\\u018C\\u02B8\\u02B8\\u02B8\\u02B8\\u02B8\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\"+
    \"\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\\250\\250\\250\\250\\250\\250\\u02BA\\u02BC\"+
    \"\\u02BC\\u02BC\\u02BC\\u02BC\\122\\122\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\"+
    \"\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\\074\\u01A6\\u019A\\u019A\\u019A\\u019A\"+
    \"\\u019A\\u019A\\u019A\\u019A\\u02BE\\122\\122\\122\\122\\122\\122\\122\\u019A\\u019A\\u019A\"+
    \"\\u019A\\u019A\\u019A\\074\\074\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\"+
    \"\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\"+
    \"\\u019A\\u019A\\u017E\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\"+
    \"\\u019A\\u0272\\074\\u0274\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\"+
    \"\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\\074\\u019A\\u019A\\u019A\\u019A\"+
    \"\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\\u019A\\u0272\\224\"+
    \"\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\250\\250\\250\\250\\250\\224\\224\\224\\250\"+
    \"\\250\\250\\250\\250\\250\\250\\250\\250\\250\\250\\250\\250\\224\\224\\224\\224\\224\\224\\u0174\"+
    \"\\250\\074\\074\\074\\074\\074\\074\\074\\074\\224\\224\\250\\250\\250\\250\\250\\250\\250\\250\"+
    \"\\250\\250\\250\\250\\250\\250\\u02C0\\u02C0\\u02C0\\u02C0\\u02C0\\u02C0\\u02C0\\u02C0\\u02C0\"+
    \"\\u02C0\\u02C0\\u02C0\\u02C0\\u02C0\\u02C0\\u02C0\\u02C2\\u02C2\\u02C2\\u02C2\\u02C2\\u02C2\"+
    \"\\u02C2\\u02C2\\u02C2\\u02C2\\u02C2\\u02C2\\u02C2\\u02C2\\u02C2\\u02C2\\224\\224\\224\\224\"+
    \"\\224\\224\\224\\250\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\u0174\"+
    \"\\250\\250\\250\\250\\250\\250\\250\\250\\250\\250\\u01D4\\u01D4\\u01D4\\u01EE\\250\\250\\250\"+
    \"\\250\\250\\u02C4\\u01D4\\u01D4\\250\\250\\u02C6\\u02C8\\u0130\\u0130\\u0130\\u0130\\u02CA\"+
    \"\\u0130\\u0130\\u0130\\u0130\\u0130\\u0130\\u0132\\u0130\\u0130\\u0132\\u0132\\u0130\\u02C6\"+
    \"\\u0132\\u0130\\u0130\\u0130\\u0130\\u0130\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\"+
    \"\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\\250\\250\\250\\250\"+
    \"\\250\\250\\250\\250\\250\\250\\250\\250\\250\\250\\250\\250\\u013E\\u0140\\u0140\\u0140\\u0140\"+
    \"\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\"+
    \"\\u0140\\u0140\\u0140\\u0140\\u01A2\\250\\250\\250\\250\\250\\250\\250\\250\\u0140\\u0140\"+
    \"\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\"+
    \"\\u0140\\250\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\"+
    \"\\250\\250\\250\\250\\250\\250\\250\\250\\250\\250\\250\\250\\250\\250\\250\\250\\250\\250\\250\"+
    \"\\250\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\\u02CC\\250\\324\\324\\324\\324\\324\\324\"+
    \"\\324\\324\\250\\250\\250\\250\\250\\250\\250\\250\\324\\324\\250\\250\\250\\250\\250\\250\\u02CE\"+
    \"\\u02D0\\u02D2\\u02D4\\u02D4\\u02D4\\u02D4\\u02D4\\u02D4\\u02D4\\u02D6\\u02D8\\u02D6\\020\"+
    \"\\u0226\\u02DA\\034\\u02DC\\u02DE\\020\\u029C\\u02D4\\u02D4\\u02E0\\020\\u02E2\\u0254\\u02E4\"+
    \"\\u02E6\\u0220\\250\\250\\u0140\\u0140\\u0142\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\"+
    \"\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\\u0140\"+
    \"\\u0142\\u0162\\u0232\\014\\016\\020\\022\\024\\026\\030\\032\\032\\032\\032\\032\\034\\036\"+
    \"\\040\\054\\056\\056\\056\\056\\056\\056\\056\\056\\056\\056\\056\\056\\060\\062\\u022A\\u022C\"+
    \"\\022\\u0226\\224\\224\\224\\224\\224\\u02B0\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\"+
    \"\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\310\\224\\224\\224\\224\\224\\224\"+
    \"\\224\\224\\224\\224\\224\\224\\224\\224\\224\\u0174\\250\\224\\224\\224\\250\\224\\224\\224\"+
    \"\\250\\224\\224\\224\\250\\224\\u0174\\250\\072\\u02E8\\u018A\\u02EA\\u0258\\u0254\\u0268\"+
    \"\\u018C\\250\\250\\250\\250\\u0162\\u020E\\074\\250\").toCharArray()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The Y table has 4416 entries for a total of 8832 bytes."
      end

      attribute 2721819 "A"
	class_attribute const_attribute package explicit_type "int"
	multiplicity "[]"
	init_value "=  new int[748]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The A table has 748 entries for a total of 2992 bytes."
      end

      attribute 2721947 "A_DATA"
	class_attribute const_attribute package explicit_type "String"
	init_value "= 
    \"\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u5800\\u400F\\u5000\\u400F\\u5800\\u400F\\u6000\"+
    \"\\u400F\\u5000\\u400F\\u5000\\u400F\\u5000\\u400F\\u6000\\u400C\\u6800\\030\\u6800\\030\"+
    \"\\u2800\\030\\u2800\\u601A\\u2800\\030\\u6800\\030\\u6800\\030\\uE800\\025\\uE800\\026\\u6800\"+
    \"\\030\\u2800\\031\\u3800\\030\\u2800\\024\\u3800\\030\\u2000\\030\\u1800\\u3609\\u1800\\u3609\"+
    \"\\u3800\\030\\u6800\\030\\uE800\\031\\u6800\\031\\uE800\\031\\u6800\\030\\u6800\\030\\202\"+
    \"\\u7FE1\\202\\u7FE1\\202\\u7FE1\\202\\u7FE1\\uE800\\025\\u6800\\030\\uE800\\026\\u6800\\033\"+
    \"\\u6800\\u5017\\u6800\\033\\201\\u7FE2\\201\\u7FE2\\201\\u7FE2\\201\\u7FE2\\uE800\\025\\u6800\"+
    \"\\031\\uE800\\026\\u6800\\031\\u4800\\u100F\\u4800\\u100F\\u5000\\u100F\\u3800\\014\\u6800\"+
    \"\\030\\u2800\\u601A\\u2800\\u601A\\u6800\\034\\u6800\\034\\u6800\\033\\u6800\\034\\000\\u7002\"+
    \"\\uE800\\035\\u6800\\031\\u6800\\u1010\\u6800\\034\\u6800\\033\\u2800\\034\\u2800\\031\\u1800\"+
    \"\\u060B\\u1800\\u060B\\u6800\\033\\u07FD\\u7002\\u6800\\034\\u6800\\030\\u6800\\033\\u1800\"+
    \"\\u050B\\000\\u7002\\uE800\\036\\u6800\\u080B\\u6800\\u080B\\u6800\\u080B\\u6800\\030\\202\"+
    \"\\u7001\\202\\u7001\\202\\u7001\\u6800\\031\\202\\u7001\\u07FD\\u7002\\201\\u7002\\201\\u7002\"+
    \"\\201\\u7002\\u6800\\031\\201\\u7002\\u061D\\u7002\\006\\u7001\\005\\u7002\\u07FF\\uF001\"+
    \"\\u03A1\\u7002\\000\\u7002\\006\\u7001\\005\\u7002\\006\\u7001\\005\\u7002\\u07FD\\u7002\"+
    \"\\u061E\\u7001\\006\\u7001\\000\\u7002\\u034A\\u7001\\u033A\\u7001\\006\\u7001\\005\\u7002\"+
    \"\\u0336\\u7001\\u0336\\u7001\\006\\u7001\\005\\u7002\\000\\u7002\\u013E\\u7001\\u032A\\u7001\"+
    \"\\u032E\\u7001\\006\\u7001\\u033E\\u7001\\u067D\\u7002\\u034E\\u7001\\u0346\\u7001\\000\"+
    \"\\u7002\\000\\u7002\\u034E\\u7001\\u0356\\u7001\\u05F9\\u7002\\u035A\\u7001\\u036A\\u7001\"+
    \"\\006\\u7001\\005\\u7002\\u036A\\u7001\\005\\u7002\\u0366\\u7001\\u0366\\u7001\\006\\u7001\"+
    \"\\005\\u7002\\u036E\\u7001\\000\\u7002\\000\\u7005\\000\\u7002\\u0721\\u7002\\000\\u7005\"+
    \"\\000\\u7005\\012\\uF001\\007\\uF003\\011\\uF002\\012\\uF001\\007\\uF003\\011\\uF002\\011\"+
    \"\\uF002\\006\\u7001\\005\\u7002\\u013D\\u7002\\u07FD\\u7002\\012\\uF001\\u067E\\u7001\\u0722\"+
    \"\\u7001\\u05FA\\u7001\\000\\u7002\\000\\u7002\\u7800\\000\\u7800\\000\\u7800\\000\\000\\u7002\"+
    \"\\u0349\\u7002\\u0339\\u7002\\000\\u7002\\u0335\\u7002\\u0335\\u7002\\000\\u7002\\u0329\"+
    \"\\u7002\\000\\u7002\\u032D\\u7002\\u0335\\u7002\\000\\u7002\\000\\u7002\\u033D\\u7002\\u0345\"+
    \"\\u7002\\u034D\\u7002\\000\\u7002\\u034D\\u7002\\u0355\\u7002\\000\\u7002\\000\\u7002\\u0359\"+
    \"\\u7002\\u0369\\u7002\\000\\u7002\\000\\u7002\\u0369\\u7002\\u0365\\u7002\\u0365\\u7002\"+
    \"\\u036D\\u7002\\000\\u7002\\000\\u7004\\000\\u7004\\000\\u7004\\u6800\\u7004\\u6800\\u7004\"+
    \"\\000\\u7004\\u6800\\033\\u6800\\033\\u6800\\u7004\\u6800\\u7004\\000\\u7004\\u6800\\033\"+
    \"\\u4000\\u3006\\u4000\\u3006\\u4000\\u3006\\u46B1\\u3006\\u7800\\000\\u4000\\u3006\\000\"+
    \"\\u7004\\u7800\\000\\u6800\\030\\u7800\\000\\232\\u7001\\u6800\\030\\226\\u7001\\226\\u7001\"+
    \"\\226\\u7001\\u7800\\000\\u0102\\u7001\\u7800\\000\\376\\u7001\\376\\u7001\\u07FD\\u7002\"+
    \"\\202\\u7001\\u7800\\000\\202\\u7001\\231\\u7002\\225\\u7002\\225\\u7002\\225\\u7002\\u07FD\"+
    \"\\u7002\\201\\u7002\\175\\u7002\\201\\u7002\\u0101\\u7002\\375\\u7002\\375\\u7002\\u7800\"+
    \"\\000\\371\\u7002\\345\\u7002\\000\\u7001\\000\\u7001\\000\\u7001\\275\\u7002\\331\\u7002\"+
    \"\\000\\u7002\\u0159\\u7002\\u0141\\u7002\\u07E5\\u7002\\000\\u7002\\u0712\\u7001\\u0181\"+
    \"\\u7002\\u6800\\031\\006\\u7001\\005\\u7002\\u07E6\\u7001\\u0142\\u7001\\u0142\\u7001\\u0141\"+
    \"\\u7002\\u0141\\u7002\\000\\034\\u4000\\u3006\\u4000\\u3006\\u7800\\000\\u4000\\007\\u4000\"+
    \"\\007\\000\\u7001\\006\\u7001\\005\\u7002\\u7800\\000\\u7800\\000\\302\\u7001\\302\\u7001\"+
    \"\\302\\u7001\\302\\u7001\\u7800\\000\\u7800\\000\\000\\u7004\\000\\030\\000\\030\\u7800\\000\"+
    \"\\301\\u7002\\301\\u7002\\301\\u7002\\301\\u7002\\u07FD\\u7002\\u7800\\000\\000\\030\\u6800\"+
    \"\\024\\u7800\\000\\u0800\\030\\u4000\\u3006\\u4000\\u3006\\u0800\\030\\u0800\\u7005\\u0800\"+
    \"\\u7005\\u0800\\u7005\\u7800\\000\\u0800\\u7005\\u0800\\030\\u0800\\030\\u7800\\000\\u1000\"+
    \"\\u1010\\u1000\\u1010\\u3800\\030\\u1000\\030\\u7800\\000\\u1000\\030\\u7800\\000\\u1000\"+
    \"\\u7005\\u1000\\u7005\\u1000\\u7005\\u1000\\u7005\\u7800\\000\\u1000\\u7004\\u1000\\u7005\"+
    \"\\u1000\\u7005\\u4000\\u3006\\u3000\\u3409\\u3000\\u3409\\u2800\\030\\u3000\\030\\u3000\"+
    \"\\030\\u1000\\030\\u4000\\u3006\\u1000\\u7005\\u1000\\030\\u1000\\u7005\\u4000\\u3006\\u1000\"+
    \"\\u1010\\u4000\\007\\u4000\\u3006\\u4000\\u3006\\u1000\\u7004\\u1000\\u7004\\u4000\\u3006\"+
    \"\\u4000\\u3006\\u6800\\034\\u1000\\u7005\\u1000\\034\\u1000\\034\\u1000\\u7005\\u1000\\030\"+
    \"\\u1000\\030\\u7800\\000\\u4800\\u1010\\u4000\\u3006\\000\\u3008\\u4000\\u3006\\000\\u7005\"+
    \"\\000\\u3008\\000\\u3008\\000\\u3008\\u4000\\u3006\\000\\u7005\\u4000\\u3006\\000\\u3749\"+
    \"\\000\\u3749\\000\\030\\u7800\\000\\u7800\\000\\000\\u7005\\000\\u7005\\u7800\\000\\u7800\"+
    \"\\000\\000\\u3008\\000\\u3008\\u7800\\000\\000\\u05AB\\000\\u05AB\\000\\013\\000\\u06EB\\000\"+
    \"\\034\\u7800\\000\\u7800\\000\\u2800\\u601A\\000\\034\\000\\u7005\\u7800\\000\\000\\u3749\"+
    \"\\000\\u074B\\000\\u080B\\000\\u080B\\u6800\\034\\u6800\\034\\u2800\\u601A\\u6800\\034\\u7800\"+
    \"\\000\\000\\u3008\\000\\u3006\\000\\u3006\\000\\u3008\\000\\u7004\\u4000\\u3006\\u4000\\u3006\"+
    \"\\000\\030\\000\\u3609\\000\\u3609\\000\\u7005\\000\\034\\000\\034\\000\\034\\000\\030\\000\"+
    \"\\034\\000\\u3409\\000\\u3409\\000\\u080B\\000\\u080B\\u6800\\025\\u6800\\026\\u4000\\u3006\"+
    \"\\000\\034\\u7800\\000\\000\\034\\000\\030\\000\\u3709\\000\\u3709\\000\\u3709\\000\\u070B\"+
    \"\\000\\u042B\\000\\u054B\\000\\u080B\\000\\u080B\\u7800\\000\\000\\u7005\\000\\030\\000\\030\"+
    \"\\000\\u7005\\u6000\\u400C\\000\\u7005\\000\\u7005\\u6800\\025\\u6800\\026\\u7800\\000\\000\"+
    \"\\u746A\\000\\u746A\\000\\u746A\\u7800\\000\\000\\u1010\\000\\u1010\\000\\030\\000\\u7004\"+
    \"\\000\\030\\u2800\\u601A\\u6800\\u060B\\u6800\\u060B\\u6800\\024\\u6800\\030\\u6800\\030\"+
    \"\\u4000\\u3006\\u6000\\u400C\\u7800\\000\\000\\u7005\\000\\u7004\\u4000\\u3006\\u4000\\u3008\"+
    \"\\u4000\\u3008\\u4000\\u3008\\u07FD\\u7002\\u07FD\\u7002\\u07FD\\u7002\\355\\u7002\\u07E1\"+
    \"\\u7002\\u07E1\\u7002\\u07E2\\u7001\\u07E2\\u7001\\u07FD\\u7002\\u07E1\\u7002\\u7800\\000\"+
    \"\\u07E2\\u7001\\u06D9\\u7002\\u06D9\\u7002\\u06A9\\u7002\\u06A9\\u7002\\u0671\\u7002\\u0671\"+
    \"\\u7002\\u0601\\u7002\\u0601\\u7002\\u0641\\u7002\\u0641\\u7002\\u0609\\u7002\\u0609\\u7002\"+
    \"\\u07FF\\uF003\\u07FF\\uF003\\u07FD\\u7002\\u7800\\000\\u06DA\\u7001\\u06DA\\u7001\\u07FF\"+
    \"\\uF003\\u6800\\033\\u07FD\\u7002\\u6800\\033\\u06AA\\u7001\\u06AA\\u7001\\u0672\\u7001\"+
    \"\\u0672\\u7001\\u7800\\000\\u6800\\033\\u07FD\\u7002\\u07E5\\u7002\\u0642\\u7001\\u0642\"+
    \"\\u7001\\u07E6\\u7001\\u6800\\033\\u0602\\u7001\\u0602\\u7001\\u060A\\u7001\\u060A\\u7001\"+
    \"\\u6800\\033\\u7800\\000\\u6000\\u400C\\u6000\\u400C\\u6000\\u400C\\u6000\\014\\u6000\\u400C\"+
    \"\\u4800\\u400C\\u4800\\u1010\\u4800\\u1010\\000\\u1010\\u0800\\u1010\\u6800\\024\\u6800\"+
    \"\\024\\u6800\\035\\u6800\\036\\u6800\\025\\u6800\\035\\u6000\\u400D\\u5000\\u400E\\u7800\"+
    \"\\u1010\\u7800\\u1010\\u7800\\u1010\\u6000\\014\\u2800\\030\\u2800\\030\\u2800\\030\\u6800\"+
    \"\\030\\u6800\\030\\uE800\\035\\uE800\\036\\u6800\\030\\u6800\\030\\u6800\\u5017\\u6800\\u5017\"+
    \"\\u6800\\030\\u6800\\031\\uE800\\025\\uE800\\026\\u6800\\030\\u6800\\031\\u6800\\030\\u6800\"+
    \"\\u5017\\u7800\\000\\u7800\\000\\u6800\\030\\u7800\\000\\u6000\\u400C\\u1800\\u060B\\000\"+
    \"\\u7002\\u2800\\031\\u2800\\031\\uE800\\026\\000\\u7002\\u1800\\u040B\\u1800\\u040B\\uE800\"+
    \"\\026\\u7800\\000\\u4000\\u3006\\u4000\\007\\000\\u7001\\u6800\\034\\u6800\\034\\000\\u7001\"+
    \"\\000\\u7002\\000\\u7001\\000\\u7001\\000\\u7002\\u07FE\\u7001\\u6800\\034\\u07FE\\u7001\"+
    \"\\u07FE\\u7001\\u2800\\034\\000\\u7002\\000\\u7005\\000\\u7002\\u7800\\000\\000\\u7002\\u6800\"+
    \"\\031\\u6800\\031\\u6800\\031\\000\\u7001\\u6800\\034\\u6800\\031\\u7800\\000\\u6800\\u080B\"+
    \"\\102\\u742A\\102\\u742A\\102\\u780A\\102\\u780A\\101\\u762A\\101\\u762A\\101\\u780A\\101\"+
    \"\\u780A\\000\\u780A\\000\\u780A\\000\\u780A\\000\\u700A\\u6800\\031\\u6800\\034\\u6800\\031\"+
    \"\\uE800\\031\\uE800\\031\\uE800\\031\\u6800\\034\\uE800\\025\\uE800\\026\\u6800\\034\\000\"+
    \"\\034\\u6800\\034\\u6800\\034\\000\\034\\u6800\\030\\u6800\\034\\u1800\\u042B\\u1800\\u042B\"+
    \"\\u1800\\u05AB\\u1800\\u05AB\\u1800\\u072B\\u1800\\u072B\\152\\034\\152\\034\\151\\034\\151\"+
    \"\\034\\u1800\\u06CB\\u6800\\u040B\\u6800\\u040B\\u6800\\u040B\\u6800\\u040B\\u6800\\u058B\"+
    \"\\u6800\\u058B\\u6800\\u058B\\u6800\\u058B\\u6800\\u042B\\u7800\\000\\u6800\\034\\u6800\"+
    \"\\u056B\\u6800\\u056B\\u6800\\u042B\\u6800\\u042B\\u6800\\u06EB\\u6800\\u06EB\\uE800\\026\"+
    \"\\uE800\\025\\uE800\\026\\u6800\\031\\u6800\\034\\000\\u7004\\000\\u7005\\000\\u772A\\u6800\"+
    \"\\024\\u6800\\025\\u6800\\026\\u6800\\026\\u6800\\034\\000\\u740A\\000\\u740A\\000\\u740A\"+
    \"\\u6800\\024\\000\\u7004\\000\\u764A\\000\\u776A\\000\\u748A\\000\\u7004\\000\\u7005\\u6800\"+
    \"\\030\\u4000\\u3006\\u6800\\033\\u6800\\033\\000\\u7004\\000\\u7004\\000\\u7005\\u6800\\024\"+
    \"\\000\\u7005\\000\\u7005\\u6800\\u5017\\000\\u05EB\\000\\u05EB\\000\\u042B\\000\\u042B\\u6800\"+
    \"\\034\\u6800\\u048B\\u6800\\u048B\\u6800\\u048B\\000\\034\\u6800\\u080B\\000\\023\\000\\023\"+
    \"\\000\\022\\000\\022\\u7800\\000\\u07FD\\u7002\\u7800\\000\\u0800\\u7005\\u4000\\u3006\\u0800\"+
    \"\\u7005\\u0800\\u7005\\u2800\\031\\u1000\\u601A\\u6800\\034\\u6800\\030\\u6800\\024\\u6800\"+
    \"\\024\\u6800\\u5017\\u6800\\u5017\\u6800\\025\\u6800\\026\\u6800\\025\\u6800\\026\\u6800\"+
    \"\\030\\u6800\\030\\u6800\\025\\u6800\\u5017\\u6800\\u5017\\u3800\\030\\u7800\\000\\u6800\"+
    \"\\030\\u3800\\030\\u6800\\026\\u2800\\030\\u2800\\031\\u2800\\024\\u6800\\031\\u7800\\000\"+
    \"\\u6800\\030\\u2800\\u601A\\u6800\\031\\u6800\\033\\u2800\\u601A\\u7800\\000\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      extra_member 160795 "initialization"
	
	cpp "" ""
	java "  static {
            charMap = new char[][][] {
        { {'\\u00DF'}, {'\\u0053', '\\u0053', } },
        { {'\\u0130'}, {'\\u0130', } },
        { {'\\u0149'}, {'\\u02BC', '\\u004E', } },
        { {'\\u01F0'}, {'\\u004A', '\\u030C', } },
        { {'\\u0390'}, {'\\u0399', '\\u0308', '\\u0301', } },
        { {'\\u03B0'}, {'\\u03A5', '\\u0308', '\\u0301', } },
        { {'\\u0587'}, {'\\u0535', '\\u0552', } },
        { {'\\u1E96'}, {'\\u0048', '\\u0331', } },
        { {'\\u1E97'}, {'\\u0054', '\\u0308', } },
        { {'\\u1E98'}, {'\\u0057', '\\u030A', } },
        { {'\\u1E99'}, {'\\u0059', '\\u030A', } },
        { {'\\u1E9A'}, {'\\u0041', '\\u02BE', } },
        { {'\\u1F50'}, {'\\u03A5', '\\u0313', } },
        { {'\\u1F52'}, {'\\u03A5', '\\u0313', '\\u0300', } },
        { {'\\u1F54'}, {'\\u03A5', '\\u0313', '\\u0301', } },
        { {'\\u1F56'}, {'\\u03A5', '\\u0313', '\\u0342', } },
        { {'\\u1F80'}, {'\\u1F08', '\\u0399', } },
        { {'\\u1F81'}, {'\\u1F09', '\\u0399', } },
        { {'\\u1F82'}, {'\\u1F0A', '\\u0399', } },
        { {'\\u1F83'}, {'\\u1F0B', '\\u0399', } },
        { {'\\u1F84'}, {'\\u1F0C', '\\u0399', } },
        { {'\\u1F85'}, {'\\u1F0D', '\\u0399', } },
        { {'\\u1F86'}, {'\\u1F0E', '\\u0399', } },
        { {'\\u1F87'}, {'\\u1F0F', '\\u0399', } },
        { {'\\u1F88'}, {'\\u1F08', '\\u0399', } },
        { {'\\u1F89'}, {'\\u1F09', '\\u0399', } },
        { {'\\u1F8A'}, {'\\u1F0A', '\\u0399', } },
        { {'\\u1F8B'}, {'\\u1F0B', '\\u0399', } },
        { {'\\u1F8C'}, {'\\u1F0C', '\\u0399', } },
        { {'\\u1F8D'}, {'\\u1F0D', '\\u0399', } },
        { {'\\u1F8E'}, {'\\u1F0E', '\\u0399', } },
        { {'\\u1F8F'}, {'\\u1F0F', '\\u0399', } },
        { {'\\u1F90'}, {'\\u1F28', '\\u0399', } },
        { {'\\u1F91'}, {'\\u1F29', '\\u0399', } },
        { {'\\u1F92'}, {'\\u1F2A', '\\u0399', } },
        { {'\\u1F93'}, {'\\u1F2B', '\\u0399', } },
        { {'\\u1F94'}, {'\\u1F2C', '\\u0399', } },
        { {'\\u1F95'}, {'\\u1F2D', '\\u0399', } },
        { {'\\u1F96'}, {'\\u1F2E', '\\u0399', } },
        { {'\\u1F97'}, {'\\u1F2F', '\\u0399', } },
        { {'\\u1F98'}, {'\\u1F28', '\\u0399', } },
        { {'\\u1F99'}, {'\\u1F29', '\\u0399', } },
        { {'\\u1F9A'}, {'\\u1F2A', '\\u0399', } },
        { {'\\u1F9B'}, {'\\u1F2B', '\\u0399', } },
        { {'\\u1F9C'}, {'\\u1F2C', '\\u0399', } },
        { {'\\u1F9D'}, {'\\u1F2D', '\\u0399', } },
        { {'\\u1F9E'}, {'\\u1F2E', '\\u0399', } },
        { {'\\u1F9F'}, {'\\u1F2F', '\\u0399', } },
        { {'\\u1FA0'}, {'\\u1F68', '\\u0399', } },
        { {'\\u1FA1'}, {'\\u1F69', '\\u0399', } },
        { {'\\u1FA2'}, {'\\u1F6A', '\\u0399', } },
        { {'\\u1FA3'}, {'\\u1F6B', '\\u0399', } },
        { {'\\u1FA4'}, {'\\u1F6C', '\\u0399', } },
        { {'\\u1FA5'}, {'\\u1F6D', '\\u0399', } },
        { {'\\u1FA6'}, {'\\u1F6E', '\\u0399', } },
        { {'\\u1FA7'}, {'\\u1F6F', '\\u0399', } },
        { {'\\u1FA8'}, {'\\u1F68', '\\u0399', } },
        { {'\\u1FA9'}, {'\\u1F69', '\\u0399', } },
        { {'\\u1FAA'}, {'\\u1F6A', '\\u0399', } },
        { {'\\u1FAB'}, {'\\u1F6B', '\\u0399', } },
        { {'\\u1FAC'}, {'\\u1F6C', '\\u0399', } },
        { {'\\u1FAD'}, {'\\u1F6D', '\\u0399', } },
        { {'\\u1FAE'}, {'\\u1F6E', '\\u0399', } },
        { {'\\u1FAF'}, {'\\u1F6F', '\\u0399', } },
        { {'\\u1FB2'}, {'\\u1FBA', '\\u0399', } },
        { {'\\u1FB3'}, {'\\u0391', '\\u0399', } },
        { {'\\u1FB4'}, {'\\u0386', '\\u0399', } },
        { {'\\u1FB6'}, {'\\u0391', '\\u0342', } },
        { {'\\u1FB7'}, {'\\u0391', '\\u0342', '\\u0399', } },
        { {'\\u1FBC'}, {'\\u0391', '\\u0399', } },
        { {'\\u1FC2'}, {'\\u1FCA', '\\u0399', } },
        { {'\\u1FC3'}, {'\\u0397', '\\u0399', } },
        { {'\\u1FC4'}, {'\\u0389', '\\u0399', } },
        { {'\\u1FC6'}, {'\\u0397', '\\u0342', } },
        { {'\\u1FC7'}, {'\\u0397', '\\u0342', '\\u0399', } },
        { {'\\u1FCC'}, {'\\u0397', '\\u0399', } },
        { {'\\u1FD2'}, {'\\u0399', '\\u0308', '\\u0300', } },
        { {'\\u1FD3'}, {'\\u0399', '\\u0308', '\\u0301', } },
        { {'\\u1FD6'}, {'\\u0399', '\\u0342', } },
        { {'\\u1FD7'}, {'\\u0399', '\\u0308', '\\u0342', } },
        { {'\\u1FE2'}, {'\\u03A5', '\\u0308', '\\u0300', } },
        { {'\\u1FE3'}, {'\\u03A5', '\\u0308', '\\u0301', } },
        { {'\\u1FE4'}, {'\\u03A1', '\\u0313', } },
        { {'\\u1FE6'}, {'\\u03A5', '\\u0342', } },
        { {'\\u1FE7'}, {'\\u03A5', '\\u0308', '\\u0342', } },
        { {'\\u1FF2'}, {'\\u1FFA', '\\u0399', } },
        { {'\\u1FF3'}, {'\\u03A9', '\\u0399', } },
        { {'\\u1FF4'}, {'\\u038F', '\\u0399', } },
        { {'\\u1FF6'}, {'\\u03A9', '\\u0342', } },
        { {'\\u1FF7'}, {'\\u03A9', '\\u0342', '\\u0399', } },
        { {'\\u1FFC'}, {'\\u03A9', '\\u0399', } },
        { {'\\uFB00'}, {'\\u0046', '\\u0046', } },
        { {'\\uFB01'}, {'\\u0046', '\\u0049', } },
        { {'\\uFB02'}, {'\\u0046', '\\u004C', } },
        { {'\\uFB03'}, {'\\u0046', '\\u0046', '\\u0049', } },
        { {'\\uFB04'}, {'\\u0046', '\\u0046', '\\u004C', } },
        { {'\\uFB05'}, {'\\u0053', '\\u0054', } },
        { {'\\uFB06'}, {'\\u0053', '\\u0054', } },
        { {'\\uFB13'}, {'\\u0544', '\\u0546', } },
        { {'\\uFB14'}, {'\\u0544', '\\u0535', } },
        { {'\\uFB15'}, {'\\u0544', '\\u053B', } },
        { {'\\uFB16'}, {'\\u054E', '\\u0546', } },
        { {'\\uFB17'}, {'\\u0544', '\\u053D', } },
    };
        { // THIS CODE WAS AUTOMATICALLY CREATED BY GenerateCharacter:
            char[] data = A_DATA.toCharArray();
            assert (data.length == (748 * 2));
            int i = 0, j = 0;
            while (i < (748 * 2)) {
                int entry = data[i++] << 16;
                A[j++] = entry | data[i++];
            }
        }

    }"
	php ""
	python ""
	idl ""
      end
    end

    class 909979 "CharacterData01"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " The CharacterData class encapsulates the large tables once found in
 java.lang.Character. "
      operation 6941979 "getProperties"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The character properties are currently encoded into 32 bits in the following manner:
1 bit   mirrored property
4 bits  directionality property
9 bits  signed offset used for converting case
1 bit   if 1, adding the signed offset converts the character to lowercase
1 bit   if 1, subtracting the signed offset converts the character to uppercase
1 bit   if 1, this character has a titlecase equivalent (possibly itself)
3 bits  0  may not be part of an identifier
1  ignorable control; may continue a Unicode identifier or Java identifier
2  may continue a Java identifier but not a Unicode identifier (unused)
3  may continue a Unicode identifier or Java identifier
4  is a Java whitespace character
5  may start or continue a Java identifier;
may continue but not start a Unicode identifier (underscores)
6  may start or continue a Java identifier but not a Unicode identifier ($)
7  may start or continue a Unicode identifier or Java identifier
Thus:
5, 6, 7 may start a Java identifier
1, 2, 3, 5, 6, 7 may continue a Java identifier
7 may start a Unicode identifier
1, 3, 5, 7 may continue a Unicode identifier
1 is ignorable within an identifier
4 is Java whitespace
2 bits  0  this character has no numeric property
1  adding the digit offset to the character code and then
masking with 0x1F will produce the desired numeric value
2  this character has a \"strange\" numeric value
3  a Java supradecimal digit: adding the digit offset to the
character code, then masking with 0x1F, then adding 10
will produce the desired numeric value
5 bits  digit offset
5 bits  character type

The encoding of character properties is subject to change at any time."
      end

      operation 6942107 "getType"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6942235 "isLowerCase"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6942363 "isUpperCase"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6942491 "isTitleCase"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6942619 "isDigit"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6942747 "isDefined"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6942875 "isLetter"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6943003 "isLetterOrDigit"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6943131 "isSpaceChar"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6943259 "isJavaIdentifierStart"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6943387 "isJavaIdentifierPart"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6943515 "isUnicodeIdentifierStart"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6943643 "isUnicodeIdentifierPart"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6943771 "isIdentifierIgnorable"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6943899 "toLowerCase"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6944027 "toUpperCase"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6944155 "toTitleCase"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6944283 "digit"
	class_operation package explicit_return_type "int"
	nparams 2
	  param in name "ch" explicit_type "int"
	  param in name "radix" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6944411 "getNumericValue"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6944539 "isWhitespace"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6944667 "getDirectionality"
	class_operation package explicit_return_type "byte"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6944795 "isMirrored"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 2722075 "X"
	class_attribute const_attribute package explicit_type "char"
	multiplicity "[]"
	init_value "=  (
    \"\\000\\001\\002\\003\\004\\004\\004\\005\\006\\007\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\010\\011\\012\\003\\013\\003\\003\\003\\014\\015\\016\\004\\017\\020\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\021\\022\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\023\\023\\023\\023\\023\\023\\023\\024\"+
    \"\\023\\025\\023\\026\\027\\030\\031\\003\\003\\003\\003\\003\\003\\003\\003\\003\\032\\032\\033\"+
    \"\\003\\003\\003\\003\\003\\034\\035\\036\\037\\040\\041\\042\\043\\044\\045\\046\\047\\050\\034\"+
    \"\\035\\051\\037\\052\\053\\054\\043\\055\\056\\057\\060\\061\\062\\063\\064\\065\\066\\067\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\"+
    \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\").toCharArray()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " may need to implement for JSR 204
 static int toUpperCaseEx(int ch);
 static char[] toUpperCaseCharArray(int ch);
 The following tables and code generated using:
 java GenerateCharacter -plane 1 -template ../../tools/GenerateCharacter/CharacterData01.java.template -spec ../../tools/GenerateCharacter/UnicodeData.txt -specialcasing ../../tools/GenerateCharacter/SpecialCasing.txt -o C:/BUILD_AREA/jdk1.5.0_16/control/build/windows-i586/gensrc/java/lang/CharacterData01.java -string -usecharforbyte 11 4 1
 The X table has 2048 entries for a total of 4096 bytes."
      end

      attribute 2722203 "Y"
	class_attribute const_attribute package explicit_type "char"
	multiplicity "[]"
	init_value "=  (
    \"\\000\\000\\000\\000\\000\\000\\002\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\004\\000\\000\\000\\000\\000\\000\\000\\000\\000\\004\\000\\002\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\006\\000\\000\\000\\000\\000\\000\\000\\006\\006\\006\\006\\006\\006\\006\\006\\006\\006\"+
    \"\\006\\006\\006\\006\\006\\006\\006\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\004\\006\"+
    \"\\006\\010\\012\\006\\014\\016\\016\\016\\016\\020\\022\\024\\024\\024\\024\\024\\024\\024\\024\"+
    \"\\024\\024\\024\\024\\024\\024\\024\\024\\006\\026\\030\\030\\030\\030\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\004\\032\\034\\006\\006\\006\\006\\006\\006\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\036\\006\\006\\006\\006\\006\"+
    \"\\006\\006\\006\\006\\006\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\040\\042\\042\\042\\042\\042\\042\\042\\042\\042\\042\\042\\042\\042\\042\\042\\042\\042\"+
    \"\\042\\042\\042\\044\\044\\044\\044\\044\\044\\044\\044\\044\\044\\044\\044\\044\\044\\044\\044\"+
    \"\\044\\044\\044\\044\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\006\\046\\046\\046\\046\\046\\006\\006\\006\\006\\006\"+
    \"\\006\\006\\006\\006\\006\\006\\050\\050\\050\\006\\052\\050\\050\\050\\050\\050\\050\\050\\050\"+
    \"\\050\\050\\050\\050\\050\\050\\050\\050\\050\\050\\050\\050\\050\\050\\054\\052\\006\\052\\054\"+
    \"\\030\\030\\030\\030\\030\\030\\030\\030\\030\\030\\030\\030\\030\\030\\030\\030\\030\\030\\030\"+
    \"\\030\\030\\030\\030\\030\\030\\030\\030\\006\\006\\006\\006\\006\\030\\030\\030\\012\\006\\030\"+
    \"\\030\\030\\030\\030\\030\\030\\030\\030\\030\\030\\030\\030\\056\\060\\062\\030\\056\\064\\064\"+
    \"\\066\\070\\070\\070\\072\\062\\062\\062\\074\\076\\062\\062\\062\\030\\030\\030\\030\\030\\030\"+
    \"\\030\\030\\030\\030\\030\\030\\030\\030\\030\\062\\062\\030\\030\\030\\030\\030\\030\\030\\030\"+
    \"\\030\\030\\030\\030\\030\\030\\030\\030\\030\\030\\030\\030\\030\\030\\030\\030\\006\\100\\100\"+
    \"\\100\\100\\100\\100\\100\\100\\100\\100\\100\\100\\100\\100\\100\\100\\100\\100\\100\\100\\100\"+
    \"\\100\\100\\100\\100\\100\\100\\102\\006\\006\\006\\006\\104\\104\\104\\104\\104\\104\\104\\104\"+
    \"\\104\\104\\104\\104\\104\\106\\106\\106\\106\\106\\106\\106\\106\\106\\106\\106\\106\\106\\104\"+
    \"\\104\\104\\104\\104\\104\\104\\104\\104\\104\\104\\104\\104\\106\\106\\106\\110\\106\\106\\106\"+
    \"\\106\\106\\106\\106\\106\\106\\104\\104\\104\\104\\104\\104\\104\\104\\104\\104\\104\\104\\104\"+
    \"\\106\\106\\106\\106\\106\\106\\106\\106\\106\\106\\106\\106\\106\\112\\104\\006\\112\\114\\112\"+
    \"\\114\\104\\112\\104\\104\\104\\104\\106\\106\\116\\116\\106\\106\\106\\116\\106\\106\\106\\106\"+
    \"\\106\\104\\104\\104\\104\\104\\104\\104\\104\\104\\104\\104\\104\\104\\106\\106\\106\\106\\106\"+
    \"\\106\\106\\106\\106\\106\\106\\106\\106\\104\\114\\104\\112\\114\\104\\104\\104\\112\\104\\104\"+
    \"\\104\\112\\106\\106\\106\\106\\106\\106\\106\\106\\106\\106\\106\\106\\106\\104\\114\\104\\112\"+
    \"\\104\\104\\112\\112\\006\\104\\104\\104\\112\\106\\106\\106\\106\\106\\106\\106\\106\\106\\106\"+
    \"\\106\\106\\106\\104\\104\\104\\104\\104\\104\\104\\104\\104\\104\\104\\104\\104\\106\\106\\106\"+
    \"\\106\\106\\106\\106\\106\\106\\106\\106\\106\\106\\104\\104\\104\\104\\104\\104\\104\\106\\106\"+
    \"\\106\\106\\106\\106\\106\\106\\106\\104\\106\\106\\106\\106\\106\\106\\106\\106\\106\\106\\106\"+
    \"\\106\\106\\104\\104\\104\\104\\104\\104\\104\\104\\104\\104\\104\\104\\104\\106\\106\\106\\106\"+
    \"\\106\\106\\106\\106\\106\\106\\106\\106\\106\\104\\104\\104\\104\\104\\104\\104\\104\\106\\106\"+
    \"\\006\\006\\104\\104\\104\\104\\104\\104\\104\\104\\104\\104\\104\\104\\120\\106\\106\\106\\106\"+
    \"\\106\\106\\106\\106\\106\\106\\106\\106\\122\\106\\106\\106\\104\\104\\104\\104\\104\\104\\104\"+
    \"\\104\\104\\104\\104\\104\\120\\106\\106\\106\\106\\106\\106\\106\\106\\106\\106\\106\\106\\122\"+
    \"\\106\\106\\106\\104\\104\\104\\104\\104\\104\\104\\104\\104\\104\\104\\104\\120\\106\\106\\106\"+
    \"\\106\\106\\106\\106\\106\\106\\106\\106\\106\\122\\106\\106\\106\\104\\104\\104\\104\\104\\104\"+
    \"\\104\\104\\104\\104\\104\\104\\120\\106\\106\\106\\106\\106\\106\\106\\106\\106\\106\\106\\106\"+
    \"\\122\\106\\106\\106\\104\\104\\104\\104\\104\\104\\104\\104\\104\\104\\104\\104\\120\\106\\106\"+
    \"\\106\\106\\106\\106\\106\\106\\106\\106\\106\\106\\122\\106\\106\\106\\006\\006\\124\\124\\124\"+
    \"\\124\\124\\126\\126\\126\\126\\126\\130\\130\\130\\130\\130\\132\\132\\132\\132\\132\\134\\134\"+
    \"\\134\\134\\134\").toCharArray()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The Y table has 896 entries for a total of 1792 bytes."
      end

      attribute 2722331 "A"
	class_attribute const_attribute package explicit_type "int"
	multiplicity "[]"
	init_value "=  new int[94]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The A table has 94 entries for a total of 376 bytes."
      end

      attribute 2722459 "A_DATA"
	class_attribute const_attribute package explicit_type "String"
	init_value "= 
    \"\\000\\u7005\\000\\u7005\\u7800\\000\\000\\u7005\\000\\u7005\\u7800\\000\\u7800\\000\\u7800\"+
    \"\\000\\000\\030\\u6800\\030\\000\\034\\u7800\\000\\u7800\\000\\000\\u074B\\000\\u074B\\000\"+
    \"\\u074B\\000\\u074B\\000\\u046B\\000\\u058B\\000\\u080B\\000\\u080B\\000\\u080B\\u7800\\000\"+
    \"\\000\\034\\000\\034\\000\\034\\000\\u042B\\000\\u048B\\000\\u050B\\000\\u080B\\000\\u700A\"+
    \"\\u7800\\000\\u7800\\000\\000\\030\\242\\u7001\\242\\u7001\\241\\u7002\\241\\u7002\\000\\u3409\"+
    \"\\000\\u3409\\u0800\\u7005\\u0800\\u7005\\u0800\\u7005\\u7800\\000\\u7800\\000\\u0800\\u7005\"+
    \"\\000\\034\\000\\u3008\\000\\u3008\\u4000\\u3006\\u4000\\u3006\\u4000\\u3006\\000\\u3008\"+
    \"\\000\\u3008\\000\\u3008\\u4800\\u1010\\u4800\\u1010\\u4800\\u1010\\u4800\\u1010\\u4000\"+
    \"\\u3006\\u4000\\u3006\\000\\034\\000\\034\\u4000\\u3006\\u6800\\034\\u6800\\034\\u6800\\034\"+
    \"\\u7800\\000\\000\\u7001\\000\\u7001\\000\\u7002\\000\\u7002\\000\\u7002\\u7800\\000\\000\"+
    \"\\u7001\\u7800\\000\\u7800\\000\\000\\u7001\\u7800\\000\\000\\u7002\\000\\u7001\\000\\031\"+
    \"\\000\\u7002\\000\\031\\u1800\\u3649\\u1800\\u3649\\u1800\\u3509\\u1800\\u3509\\u1800\\u37C9\"+
    \"\\u1800\\u37C9\\u1800\\u3689\\u1800\\u3689\\u1800\\u3549\\u1800\\u3549\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      extra_member 160923 "initialization"
	
	cpp "" ""
	java "  static {
                { // THIS CODE WAS AUTOMATICALLY CREATED BY GenerateCharacter:
            char[] data = A_DATA.toCharArray();
            assert (data.length == (94 * 2));
            int i = 0, j = 0;
            while (i < (94 * 2)) {
                int entry = data[i++] << 16;
                A[j++] = entry | data[i++];
            }
        }

    }"
	php ""
	python ""
	idl ""
      end
    end

    class 910107 "CharacterData02"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " The CharacterData class encapsulates the large tables found in
Java.lang.Character. "
      operation 6944923 "getProperties"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The character properties are currently encoded into 32 bits in the following manner:
1 bit   mirrored property
4 bits  directionality property
9 bits  signed offset used for converting case
1 bit   if 1, adding the signed offset converts the character to lowercase
1 bit   if 1, subtracting the signed offset converts the character to uppercase
1 bit   if 1, this character has a titlecase equivalent (possibly itself)
3 bits  0  may not be part of an identifier
1  ignorable control; may continue a Unicode identifier or Java identifier
2  may continue a Java identifier but not a Unicode identifier (unused)
3  may continue a Unicode identifier or Java identifier
4  is a Java whitespace character
5  may start or continue a Java identifier;
may continue but not start a Unicode identifier (underscores)
6  may start or continue a Java identifier but not a Unicode identifier ($)
7  may start or continue a Unicode identifier or Java identifier
Thus:
5, 6, 7 may start a Java identifier
1, 2, 3, 5, 6, 7 may continue a Java identifier
7 may start a Unicode identifier
1, 3, 5, 7 may continue a Unicode identifier
1 is ignorable within an identifier
4 is Java whitespace
2 bits  0  this character has no numeric property
1  adding the digit offset to the character code and then
masking with 0x1F will produce the desired numeric value
2  this character has a \"strange\" numeric value
3  a Java supradecimal digit: adding the digit offset to the
character code, then masking with 0x1F, then adding 10
will produce the desired numeric value
5 bits  digit offset
5 bits  character type

The encoding of character properties is subject to change at any time."
      end

      operation 6945051 "getType"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6945179 "isLowerCase"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6945307 "isUpperCase"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6945435 "isTitleCase"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6945563 "isDigit"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6945691 "isDefined"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6945819 "isLetter"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6945947 "isLetterOrDigit"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6946075 "isSpaceChar"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6946203 "isJavaIdentifierStart"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6946331 "isJavaIdentifierPart"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6946459 "isUnicodeIdentifierStart"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6946587 "isUnicodeIdentifierPart"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6946715 "isIdentifierIgnorable"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6946843 "toLowerCase"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6946971 "toUpperCase"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6947099 "toTitleCase"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6947227 "digit"
	class_operation package explicit_return_type "int"
	nparams 2
	  param in name "ch" explicit_type "int"
	  param in name "radix" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6947355 "getNumericValue"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6947483 "isWhitespace"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6947611 "getDirectionality"
	class_operation package explicit_return_type "byte"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6947739 "isMirrored"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 2722587 "X"
	class_attribute const_attribute package explicit_type "char"
	multiplicity "[]"
	init_value "=  (
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\020\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\060\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\").toCharArray()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " may need to implement for JSR 204
 static int toUpperCaseEx(int ch);
 static char[] toUpperCaseCharArray(int ch);
 The following tables and code generated using:
 java GenerateCharacter -plane 2 -template ../../tools/GenerateCharacter/CharacterData02.java.template -spec ../../tools/GenerateCharacter/UnicodeData.txt -specialcasing ../../tools/GenerateCharacter/SpecialCasing.txt -o C:/BUILD_AREA/jdk1.5.0_16/control/build/windows-i586/gensrc/java/lang/CharacterData02.java -string -usecharforbyte 11 4 1
 The X table has 2048 entries for a total of 4096 bytes."
      end

      attribute 2722715 "Y"
	class_attribute const_attribute package explicit_type "char"
	multiplicity "[]"
	init_value "=  (
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\000\\000\\002\\004\\004\\004\\004\\004\\004\\004\\004\\004\\004\"+
    \"\\004\\004\\004\\004\\004\\004\\004\\004\\004\\004\\000\\000\\000\\000\\000\\000\\000\\000\\000\"+
    \"\\000\\000\\000\\000\\000\\000\\004\").toCharArray()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The Y table has 64 entries for a total of 128 bytes."
      end

      attribute 2722843 "A"
	class_attribute const_attribute package explicit_type "int"
	multiplicity "[]"
	init_value "=  new int[6]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The A table has 6 entries for a total of 24 bytes."
      end

      attribute 2722971 "A_DATA"
	class_attribute const_attribute package explicit_type "String"
	init_value "= 
    \"\\000\\u7005\\000\\u7005\\000\\u7005\\u7800\\000\\u7800\\000\\u7800\\000\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      extra_member 161051 "initialization"
	
	cpp "" ""
	java "  static {
                { // THIS CODE WAS AUTOMATICALLY CREATED BY GenerateCharacter:
            char[] data = A_DATA.toCharArray();
            assert (data.length == (6 * 2));
            int i = 0, j = 0;
            while (i < (6 * 2)) {
                int entry = data[i++] << 16;
                A[j++] = entry | data[i++];
            }
        }

    }"
	php ""
	python ""
	idl ""
      end
    end

    class 910235 "CharacterData0E"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " The CharacterData class encapsulates the large tables found in
Java.lang.Character. "
      operation 6947867 "getProperties"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The character properties are currently encoded into 32 bits in the following manner:
1 bit   mirrored property
4 bits  directionality property
9 bits  signed offset used for converting case
1 bit   if 1, adding the signed offset converts the character to lowercase
1 bit   if 1, subtracting the signed offset converts the character to uppercase
1 bit   if 1, this character has a titlecase equivalent (possibly itself)
3 bits  0  may not be part of an identifier
1  ignorable control; may continue a Unicode identifier or Java identifier
2  may continue a Java identifier but not a Unicode identifier (unused)
3  may continue a Unicode identifier or Java identifier
4  is a Java whitespace character
5  may start or continue a Java identifier;
may continue but not start a Unicode identifier (underscores)
6  may start or continue a Java identifier but not a Unicode identifier ($)
7  may start or continue a Unicode identifier or Java identifier
Thus:
5, 6, 7 may start a Java identifier
1, 2, 3, 5, 6, 7 may continue a Java identifier
7 may start a Unicode identifier
1, 3, 5, 7 may continue a Unicode identifier
1 is ignorable within an identifier
4 is Java whitespace
2 bits  0  this character has no numeric property
1  adding the digit offset to the character code and then
masking with 0x1F will produce the desired numeric value
2  this character has a \"strange\" numeric value
3  a Java supradecimal digit: adding the digit offset to the
character code, then masking with 0x1F, then adding 10
will produce the desired numeric value
5 bits  digit offset
5 bits  character type

The encoding of character properties is subject to change at any time."
      end

      operation 6947995 "getType"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6948123 "isLowerCase"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6948251 "isUpperCase"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6948379 "isTitleCase"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6948507 "isDigit"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6948635 "isDefined"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6948763 "isLetter"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6948891 "isLetterOrDigit"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6949019 "isSpaceChar"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6949147 "isJavaIdentifierStart"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6949275 "isJavaIdentifierPart"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6949403 "isUnicodeIdentifierStart"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6949531 "isUnicodeIdentifierPart"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6949659 "isIdentifierIgnorable"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6949787 "toLowerCase"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6949915 "toUpperCase"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6950043 "toTitleCase"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6950171 "digit"
	class_operation package explicit_return_type "int"
	nparams 2
	  param in name "ch" explicit_type "int"
	  param in name "radix" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6950299 "getNumericValue"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6950427 "isWhitespace"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6950555 "getDirectionality"
	class_operation package explicit_return_type "byte"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6950683 "isMirrored"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 2723099 "X"
	class_attribute const_attribute package explicit_type "char"
	multiplicity "[]"
	init_value "=  (
    \"\\000\\020\\020\\020\\040\\040\\040\\040\\060\\060\\060\\060\\060\\060\\060\\100\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\"+
    \"\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\").toCharArray()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " may need to implement for JSR 204
 static int toUpperCaseEx(int ch);
 static char[] toUpperCaseCharArray(int ch);
 The following tables and code generated using:
 java GenerateCharacter -plane 14 -template ../../tools/GenerateCharacter/CharacterData0E.java.template -spec ../../tools/GenerateCharacter/UnicodeData.txt -specialcasing ../../tools/GenerateCharacter/SpecialCasing.txt -o C:/BUILD_AREA/jdk1.5.0_16/control/build/windows-i586/gensrc/java/lang/CharacterData0E.java -string -usecharforbyte 11 4 1
 The X table has 2048 entries for a total of 4096 bytes."
      end

      attribute 2723227 "Y"
	class_attribute const_attribute package explicit_type "char"
	multiplicity "[]"
	init_value "=  (
    \"\\000\\002\\002\\002\\002\\002\\002\\002\\002\\002\\002\\002\\002\\002\\002\\002\\004\\004\\004\"+
    \"\\004\\004\\004\\004\\004\\004\\004\\004\\004\\004\\004\\004\\004\\002\\002\\002\\002\\002\\002\"+
    \"\\002\\002\\002\\002\\002\\002\\002\\002\\002\\002\\006\\006\\006\\006\\006\\006\\006\\006\\006\"+
    \"\\006\\006\\006\\006\\006\\006\\006\\006\\006\\006\\006\\006\\006\\006\\006\\002\\002\\002\\002\"+
    \"\\002\\002\\002\\002\").toCharArray()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The Y table has 80 entries for a total of 160 bytes."
      end

      attribute 2723355 "A"
	class_attribute const_attribute package explicit_type "int"
	multiplicity "[]"
	init_value "=  new int[8]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The A table has 8 entries for a total of 32 bytes."
      end

      attribute 2723483 "A_DATA"
	class_attribute const_attribute package explicit_type "String"
	init_value "= 
    \"\\u7800\\000\\u4800\\u1010\\u7800\\000\\u7800\\000\\u4800\\u1010\\u4800\\u1010\\u4000\\u3006\"+
    \"\\u4000\\u3006\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      extra_member 161179 "initialization"
	
	cpp "" ""
	java "  static {
                { // THIS CODE WAS AUTOMATICALLY CREATED BY GenerateCharacter:
            char[] data = A_DATA.toCharArray();
            assert (data.length == (8 * 2));
            int i = 0, j = 0;
            while (i < (8 * 2)) {
                int entry = data[i++] << 16;
                A[j++] = entry | data[i++];
            }
        }

    }"
	php ""
	python ""
	idl ""
      end
    end

    class 910363 "CharacterDataLatin1"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " The CharacterData class encapsulates the large tables found in
Java.lang.Character. "
      operation 6950811 "getProperties"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The character properties are currently encoded into 32 bits in the following manner:
1 bit   mirrored property
4 bits  directionality property
9 bits  signed offset used for converting case
1 bit   if 1, adding the signed offset converts the character to lowercase
1 bit   if 1, subtracting the signed offset converts the character to uppercase
1 bit   if 1, this character has a titlecase equivalent (possibly itself)
3 bits  0  may not be part of an identifier
1  ignorable control; may continue a Unicode identifier or Java identifier
2  may continue a Java identifier but not a Unicode identifier (unused)
3  may continue a Unicode identifier or Java identifier
4  is a Java whitespace character
5  may start or continue a Java identifier;
may continue but not start a Unicode identifier (underscores)
6  may start or continue a Java identifier but not a Unicode identifier ($)
7  may start or continue a Unicode identifier or Java identifier
Thus:
5, 6, 7 may start a Java identifier
1, 2, 3, 5, 6, 7 may continue a Java identifier
7 may start a Unicode identifier
1, 3, 5, 7 may continue a Unicode identifier
1 is ignorable within an identifier
4 is Java whitespace
2 bits  0  this character has no numeric property
1  adding the digit offset to the character code and then
masking with 0x1F will produce the desired numeric value
2  this character has a \"strange\" numeric value
3  a Java supradecimal digit: adding the digit offset to the
character code, then masking with 0x1F, then adding 10
will produce the desired numeric value
5 bits  digit offset
5 bits  character type

The encoding of character properties is subject to change at any time."
      end

      operation 6950939 "getType"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6951067 "isLowerCase"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6951195 "isUpperCase"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6951323 "isTitleCase"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6951451 "isDigit"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6951579 "isDefined"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6951707 "isLetter"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6951835 "isLetterOrDigit"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6951963 "isSpaceChar"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6952091 "isJavaIdentifierStart"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6952219 "isJavaIdentifierPart"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6952347 "isUnicodeIdentifierStart"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6952475 "isUnicodeIdentifierPart"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6952603 "isIdentifierIgnorable"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6952731 "toLowerCase"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6952859 "toUpperCase"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6952987 "toTitleCase"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6953115 "digit"
	class_operation package explicit_return_type "int"
	nparams 2
	  param in name "ch" explicit_type "int"
	  param in name "radix" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6953243 "getNumericValue"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6953371 "isWhitespace"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6953499 "getDirectionality"
	class_operation package explicit_return_type "byte"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6953627 "isMirrored"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6953755 "toUpperCaseEx"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 2723611 "sharpsMap"
	class_attribute package explicit_type "char"
	multiplicity "[]"
	init_value "=  new char[] {'S', 'S'}"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 6953883 "toUpperCaseCharArray"
	class_operation package explicit_return_type "char"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 2723739 "A"
	class_attribute const_attribute package explicit_type "int"
	multiplicity "[]"
	init_value "=  new int[256]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The following tables and code generated using:
 java GenerateCharacter -template ../../tools/GenerateCharacter/CharacterDataLatin1.java.template -spec ../../tools/GenerateCharacter/UnicodeData.txt -specialcasing ../../tools/GenerateCharacter/SpecialCasing.txt -o C:/BUILD_AREA/jdk1.5.0_16/control/build/windows-i586/gensrc/java/lang/CharacterDataLatin1.java -string -usecharforbyte -latin1 8
 The A table has 256 entries for a total of 1024 bytes."
      end

      attribute 2723867 "A_DATA"
	class_attribute const_attribute package explicit_type "String"
	init_value "= 
    \"\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\"+
    \"\\u100F\\u4800\\u100F\\u4800\\u100F\\u5800\\u400F\\u5000\\u400F\\u5800\\u400F\\u6000\\u400F\"+
    \"\\u5000\\u400F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\"+
    \"\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\"+
    \"\\u4800\\u100F\\u4800\\u100F\\u5000\\u400F\\u5000\\u400F\\u5000\\u400F\\u5800\\u400F\\u6000\"+
    \"\\u400C\\u6800\\030\\u6800\\030\\u2800\\030\\u2800\\u601A\\u2800\\030\\u6800\\030\\u6800\"+
    \"\\030\\uE800\\025\\uE800\\026\\u6800\\030\\u2800\\031\\u3800\\030\\u2800\\024\\u3800\\030\"+
    \"\\u2000\\030\\u1800\\u3609\\u1800\\u3609\\u1800\\u3609\\u1800\\u3609\\u1800\\u3609\\u1800\"+
    \"\\u3609\\u1800\\u3609\\u1800\\u3609\\u1800\\u3609\\u1800\\u3609\\u3800\\030\\u6800\\030\"+
    \"\\uE800\\031\\u6800\\031\\uE800\\031\\u6800\\030\\u6800\\030\\202\\u7FE1\\202\\u7FE1\\202\"+
    \"\\u7FE1\\202\\u7FE1\\202\\u7FE1\\202\\u7FE1\\202\\u7FE1\\202\\u7FE1\\202\\u7FE1\\202\\u7FE1\"+
    \"\\202\\u7FE1\\202\\u7FE1\\202\\u7FE1\\202\\u7FE1\\202\\u7FE1\\202\\u7FE1\\202\\u7FE1\\202\"+
    \"\\u7FE1\\202\\u7FE1\\202\\u7FE1\\202\\u7FE1\\202\\u7FE1\\202\\u7FE1\\202\\u7FE1\\202\\u7FE1\"+
    \"\\202\\u7FE1\\uE800\\025\\u6800\\030\\uE800\\026\\u6800\\033\\u6800\\u5017\\u6800\\033\\201\"+
    \"\\u7FE2\\201\\u7FE2\\201\\u7FE2\\201\\u7FE2\\201\\u7FE2\\201\\u7FE2\\201\\u7FE2\\201\\u7FE2\"+
    \"\\201\\u7FE2\\201\\u7FE2\\201\\u7FE2\\201\\u7FE2\\201\\u7FE2\\201\\u7FE2\\201\\u7FE2\\201\"+
    \"\\u7FE2\\201\\u7FE2\\201\\u7FE2\\201\\u7FE2\\201\\u7FE2\\201\\u7FE2\\201\\u7FE2\\201\\u7FE2\"+
    \"\\201\\u7FE2\\201\\u7FE2\\201\\u7FE2\\uE800\\025\\u6800\\031\\uE800\\026\\u6800\\031\\u4800\"+
    \"\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u5000\\u100F\"+
    \"\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\"+
    \"\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\"+
    \"\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\"+
    \"\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\"+
    \"\\u3800\\014\\u6800\\030\\u2800\\u601A\\u2800\\u601A\\u2800\\u601A\\u2800\\u601A\\u6800\"+
    \"\\034\\u6800\\034\\u6800\\033\\u6800\\034\\000\\u7002\\uE800\\035\\u6800\\031\\u6800\\u1010\"+
    \"\\u6800\\034\\u6800\\033\\u2800\\034\\u2800\\031\\u1800\\u060B\\u1800\\u060B\\u6800\\033\"+
    \"\\u07FD\\u7002\\u6800\\034\\u6800\\030\\u6800\\033\\u1800\\u050B\\000\\u7002\\uE800\\036\"+
    \"\\u6800\\u080B\\u6800\\u080B\\u6800\\u080B\\u6800\\030\\202\\u7001\\202\\u7001\\202\\u7001\"+
    \"\\202\\u7001\\202\\u7001\\202\\u7001\\202\\u7001\\202\\u7001\\202\\u7001\\202\\u7001\\202\"+
    \"\\u7001\\202\\u7001\\202\\u7001\\202\\u7001\\202\\u7001\\202\\u7001\\202\\u7001\\202\\u7001\"+
    \"\\202\\u7001\\202\\u7001\\202\\u7001\\202\\u7001\\202\\u7001\\u6800\\031\\202\\u7001\\202\"+
    \"\\u7001\\202\\u7001\\202\\u7001\\202\\u7001\\202\\u7001\\202\\u7001\\u07FD\\u7002\\201\\u7002\"+
    \"\\201\\u7002\\201\\u7002\\201\\u7002\\201\\u7002\\201\\u7002\\201\\u7002\\201\\u7002\\201\"+
    \"\\u7002\\201\\u7002\\201\\u7002\\201\\u7002\\201\\u7002\\201\\u7002\\201\\u7002\\201\\u7002\"+
    \"\\201\\u7002\\201\\u7002\\201\\u7002\\201\\u7002\\201\\u7002\\201\\u7002\\201\\u7002\\u6800\"+
    \"\\031\\201\\u7002\\201\\u7002\\201\\u7002\\201\\u7002\\201\\u7002\\201\\u7002\\201\\u7002\"+
    \"\\u061D\\u7002\""
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      extra_member 161307 "initialization"
	
	cpp "" ""
	java "  static {
                { // THIS CODE WAS AUTOMATICALLY CREATED BY GenerateCharacter:
            char[] data = A_DATA.toCharArray();
            assert (data.length == (256 * 2));
            int i = 0, j = 0;
            while (i < (256 * 2)) {
                int entry = data[i++] << 16;
                A[j++] = entry | data[i++];
            }
        }

    }"
	php ""
	python ""
	idl ""
      end
    end

    class 910491 "CharacterDataPrivateUse"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " The CharacterData class encapsulates the large tables found in
Java.lang.Character. "
      operation 6954011 "getProperties"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6954139 "getType"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6954267 "isLowerCase"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6954395 "isUpperCase"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6954523 "isTitleCase"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6954651 "isDigit"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6954779 "isDefined"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6954907 "isLetter"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6955035 "isLetterOrDigit"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6955163 "isSpaceChar"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6955291 "isJavaIdentifierStart"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6955419 "isJavaIdentifierPart"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6955547 "isUnicodeIdentifierStart"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6955675 "isUnicodeIdentifierPart"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6955803 "isIdentifierIgnorable"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6955931 "toLowerCase"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6956059 "toUpperCase"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6956187 "toTitleCase"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6956315 "digit"
	class_operation package explicit_return_type "int"
	nparams 2
	  param in name "ch" explicit_type "int"
	  param in name "radix" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6956443 "getNumericValue"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6956571 "isWhitespace"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6956699 "getDirectionality"
	class_operation package explicit_return_type "byte"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6956827 "isMirrored"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 910619 "CharacterDataUndefined"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " The CharacterData class encapsulates the large tables found in
Java.lang.Character. "
      operation 6956955 "getProperties"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6957083 "getType"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6957211 "isLowerCase"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6957339 "isUpperCase"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6957467 "isTitleCase"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6957595 "isDigit"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6957723 "isDefined"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6957851 "isLetter"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6957979 "isLetterOrDigit"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6958107 "isSpaceChar"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6958235 "isJavaIdentifierStart"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6958363 "isJavaIdentifierPart"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6958491 "isUnicodeIdentifierStart"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6958619 "isUnicodeIdentifierPart"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6958747 "isIdentifierIgnorable"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6958875 "toLowerCase"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6959003 "toUpperCase"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6959131 "toTitleCase"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6959259 "digit"
	class_operation package explicit_return_type "int"
	nparams 2
	  param in name "ch" explicit_type "int"
	  param in name "radix" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6959387 "getNumericValue"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6959515 "isWhitespace"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6959643 "getDirectionality"
	class_operation package explicit_return_type "byte"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6959771 "isMirrored"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 911643 "ClassCircularityError"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Thrown when a circularity has been detected while initializing a class.

@author     unascribed
@version    1.15, 12/19/03
@since      JDK1.0"
      classrelation 1776667 // <generalisation>
	relation 1776667 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1776667 // <generalisation>
	  b parent class_ref 689563 // LinkageError
      end

      operation 6976923 "ClassCircularityError"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>ClassCircularityError</code> with no detail  message."
      end

      operation 6977051 "ClassCircularityError"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>ClassCircularityError</code> with the 
specified detail message. 

@param      s   the detail message."
      end
    end

    class 911771 "Compiler"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The <code>Compiler</code> class is provided to support
Java-to-native-code compilers and related services. By design, the
<code>Compiler</code> class does nothing; it serves as a
placeholder for a JIT compiler implementation.
<p>
When the Java Virtual Machine first starts, it determines if the
system property <code>java.compiler</code> exists. (System
properties are accessible through <code>getProperty</code>  and ,
a method defined by the <code>System</code> class.) If so, it is
assumed to be the name of a library (with a platform-dependent
exact location and type); the <code>loadLibrary</code> method in
class <code>System</code> is called to load that library. If this
loading succeeds, the function named
<code>java_lang_Compiler_start()</code> in that library is called.
<p>
If no compiler is available, these methods do nothing.

@author  Frank Yellin
@version 1.20, 05/05/04
@see     java.lang.System#getProperty(java.lang.String)
@see     java.lang.System#getProperty(java.lang.String, java.lang.String)
@see     java.lang.System#loadLibrary(java.lang.String)
@since   JDK1.0"
      operation 6978331 "Compiler"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6978459 "initialize"
	class_operation private explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " don't make instances"
      end

      operation 6978587 "registerNatives"
	class_operation private explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      extra_member 161563 "initialization"
	
	cpp "" ""
	java "  static {
        registerNatives();
	java.security.AccessController.doPrivileged
	    (new java.security.PrivilegedAction() {
		public Object run() {
		    boolean loaded = false;
		    String jit = System.getProperty(\"java.compiler\");
		    if ((jit != null) && (!jit.equals(\"NONE\")) &&
			(!jit.equals(\"\")))
		    {
			try {
			    System.loadLibrary(jit);
			    initialize();
			    loaded = true;
			} catch (UnsatisfiedLinkError e) {
			    System.err.println(\"Warning: JIT compiler \\\"\" +
			      jit + \"\\\" not found. Will use interpreter.\");
			}
		    }
		    String info = System.getProperty(\"java.vm.info\");
		    if (loaded) {
			System.setProperty(\"java.vm.info\", info + \", \" + jit);
		    } else {
			System.setProperty(\"java.vm.info\", info + \", nojit\");
		    }
		    return null;
		}
	    });
    }"
	php ""
	python ""
	idl ""
      end

      operation 6978715 "compileClass"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param inout name "clazz" type class_ref 164635 // Class
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compiles the specified class.

@param   clazz   a class.
@return  <code>true</code> if the compilation succeeded;
         <code>false</code> if the compilation failed or no compiler
         is available.
@exception NullPointerException if <code>clazz</code> is 
         <code>null</code>."
      end

      operation 6978843 "compileClasses"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "string" explicit_type "String"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compiles all classes whose name matches the specified string.

@param   string   the name of the classes to compile.
@return  <code>true</code> if the compilation succeeded;
         <code>false</code> if the compilation failed or no compiler
         is available.
@exception NullPointerException if <code>string</code> is 
         <code>null</code>."
      end

      operation 6978971 "command"
	class_operation public explicit_return_type "Object"
	nparams 1
	  param inout name "any" explicit_type "Object"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Examines the argument type and its fields and perform some documented
operation. No specific operations are required.

@param   any   an argument.
@return  a compiler-specific value, or <code>null</code> if no compiler
         is available.
@exception NullPointerException if <code>any</code> is 
         <code>null</code>."
      end

      operation 6979099 "enable"
	class_operation public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Cause the Compiler to resume operation."
      end

      operation 6979227 "disable"
	class_operation public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Cause the Compiler to cease operation."
      end
    end

    class 911899 "ConditionalSpecialCasing"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This is a utility class for <code>String.toLowerCase()</code> and
<code>String.toUpperCase()</code>, that handles special casing with
conditions.  In other words, it handles the mappings with conditions
that are defined in 
<a href=\"http://www.unicode.org/Public/UNIDATA/SpecialCasing.txt\">Special
Casing Properties</a> file.  
<p>
Note that the unconditional case mappings (including 1:M mappings)
are handled in <code>Character.toLower/UpperCase()</code>."
      attribute 2726171 "FINAL_CASED"
	class_attribute const_attribute package explicit_type "int"
	init_value "= 		1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " context conditions."
      end

      attribute 2726299 "AFTER_SOFT_DOTTED"
	class_attribute const_attribute package explicit_type "int"
	init_value "= 	2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2726427 "MORE_ABOVE"
	class_attribute const_attribute package explicit_type "int"
	init_value "= 		3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2726555 "AFTER_I"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  			4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2726683 "NOT_BEFORE_DOT"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  		5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2726811 "COMBINING_CLASS_ABOVE"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  230"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " combining class definitions"
      end

      class 912027 "Entry"
	visibility package 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 2726939 "ch"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2727067 "lower"
	  package explicit_type "char"
	  multiplicity "[]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2727195 "upper"
	  package explicit_type "char"
	  multiplicity "[]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2727323 "lang"
	  package explicit_type "String"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2727451 "condition"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 6981019 "Entry"
	  package explicit_return_type ""
	  nparams 5
	    param in name "ch" explicit_type "int"
	    param in name "lower" explicit_type "char"
	    param in name "upper" explicit_type "char"
	    param in name "lang" explicit_type "String"
	    param in name "condition" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6981147 "getCodePoint"
	  package explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6981275 "getLowerCase"
	  package explicit_return_type "char"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6981403 "getUpperCase"
	  package explicit_return_type "char"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6981531 "getLanguage"
	  package explicit_return_type "String"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6981659 "getCondition"
	  package explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 1777307 // entry (<unidirectional association>)
	relation 1777307 --->
	  a role_name "entry" multiplicity "[]" init_value "=  {
	//# ================================================================================
	//# Conditional mappings
	//# ================================================================================
	new Entry(0x03A3, new char[]{0x03C2}, new char[]{0x03A3}, null, FINAL_CASED), // # GREEK CAPITAL LETTER SIGMA

	//# ================================================================================
	//# Locale-sensitive mappings
	//# ================================================================================
	//# Lithuanian
	new Entry(0x0307, new char[]{0x0307}, new char[]{}, \"lt\",  AFTER_SOFT_DOTTED), // # COMBINING DOT ABOVE
	new Entry(0x0049, new char[]{0x0069, 0x0307}, new char[]{0x0049}, \"lt\", MORE_ABOVE), // # LATIN CAPITAL LETTER I
	new Entry(0x004A, new char[]{0x006A, 0x0307}, new char[]{0x004A}, \"lt\", MORE_ABOVE), // # LATIN CAPITAL LETTER J
	new Entry(0x012E, new char[]{0x012F, 0x0307}, new char[]{0x012E}, \"lt\", MORE_ABOVE), // # LATIN CAPITAL LETTER I WITH OGONEK
	new Entry(0x00CC, new char[]{0x0069, 0x0307, 0x0300}, new char[]{0x00CC}, \"lt\", 0), // # LATIN CAPITAL LETTER I WITH GRAVE
	new Entry(0x00CD, new char[]{0x0069, 0x0307, 0x0301}, new char[]{0x00CD}, \"lt\", 0), // # LATIN CAPITAL LETTER I WITH ACUTE
	new Entry(0x0128, new char[]{0x0069, 0x0307, 0x0303}, new char[]{0x0128}, \"lt\", 0), // # LATIN CAPITAL LETTER I WITH TILDE

	//# ================================================================================
	//# Turkish and Azeri
//	new Entry(0x0130, new char[]{0x0069}, new char[]{0x0130}, \"tr\", 0), // # LATIN CAPITAL LETTER I WITH DOT ABOVE
//	new Entry(0x0130, new char[]{0x0069}, new char[]{0x0130}, \"az\", 0), // # LATIN CAPITAL LETTER I WITH DOT ABOVE
	new Entry(0x0307, new char[]{}, new char[]{0x0307}, \"tr\", AFTER_I), // # COMBINING DOT ABOVE
	new Entry(0x0307, new char[]{}, new char[]{0x0307}, \"az\", AFTER_I), // # COMBINING DOT ABOVE
	new Entry(0x0049, new char[]{0x0131}, new char[]{0x0049}, \"tr\", NOT_BEFORE_DOT), // # LATIN CAPITAL LETTER I
	new Entry(0x0049, new char[]{0x0131}, new char[]{0x0049}, \"az\", NOT_BEFORE_DOT), // # LATIN CAPITAL LETTER I
	new Entry(0x0069, new char[]{0x0069}, new char[]{0x0130}, \"tr\", 0), // # LATIN SMALL LETTER I
	new Entry(0x0069, new char[]{0x0069}, new char[]{0x0130}, \"az\", 0)  // # LATIN SMALL LETTER I
    }" class_relation package
	    comment " Special case mapping entries
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1777307 // entry (<unidirectional association>)
	  b parent class_ref 912027 // Entry
      end

      classrelation 1777435 // entryTable (<unidirectional association>)
	relation 1777435 --->
	  a role_name "entryTable" init_value "=  new Hashtable()" class_relation package
	    comment " A hash table that contains the above entries
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1777435 // entryTable (<unidirectional association>)
	  b parent class_ref 139035 // Hashtable
      end

      extra_member 161691 "initialization"
	
	cpp "" ""
	java "  static {
	// create hashtable from the entry
	for (int i = 0; i < entry.length; i ++) {
	    Entry cur = entry[i];
	    Integer cp = new Integer(cur.getCodePoint());
	    HashSet set = (HashSet)entryTable.get(cp);
	    if (set == null) {
		set = new HashSet();
	    }
	    set.add(cur);
	    entryTable.put(cp, set);
	}
    }"
	php ""
	python ""
	idl ""
      end

      operation 6979355 "toLowerCaseEx"
	class_operation package explicit_return_type "int"
	nparams 3
	  param in name "src" explicit_type "String"
	  param in name "index" explicit_type "int"
	  param inout name "locale" type class_ref 138907 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6979483 "toUpperCaseEx"
	class_operation package explicit_return_type "int"
	nparams 3
	  param in name "src" explicit_type "String"
	  param in name "index" explicit_type "int"
	  param inout name "locale" type class_ref 138907 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6979611 "toLowerCaseCharArray"
	class_operation package explicit_return_type "char"
	nparams 3
	  param in name "src" explicit_type "String"
	  param in name "index" explicit_type "int"
	  param inout name "locale" type class_ref 138907 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6979739 "toUpperCaseCharArray"
	class_operation package explicit_return_type "char"
	nparams 3
	  param in name "src" explicit_type "String"
	  param in name "index" explicit_type "int"
	  param inout name "locale" type class_ref 138907 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6979867 "lookUpTable"
	class_operation private explicit_return_type "char"
	nparams 4
	  param in name "src" explicit_type "String"
	  param in name "index" explicit_type "int"
	  param inout name "locale" type class_ref 138907 // Locale
	  param inout name "bLowerCasing" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6979995 "isConditionMet"
	class_operation private explicit_return_type "boolean"
	nparams 4
	  param in name "src" explicit_type "String"
	  param in name "index" explicit_type "int"
	  param inout name "locale" type class_ref 138907 // Locale
	  param in name "condition" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6980123 "isFinalCased"
	class_operation private explicit_return_type "boolean"
	nparams 3
	  param in name "src" explicit_type "String"
	  param in name "index" explicit_type "int"
	  param inout name "locale" type class_ref 138907 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements the \"Final_Cased\" condition

Specification: Within the closest word boundaries containing C, there is a cased
letter before C, and there is no cased letter after C.

Regular Expression: 
  Before C: [{cased==true}][{wordBoundary!=true}]*
  After C: !([{wordBoundary!=true}]*[{cased}])"
      end

      operation 6980251 "isAfterI"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param in name "src" explicit_type "String"
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements the \"After_I\" condition

Specification: The last preceding base character was an uppercase I,
and there is no intervening combining character class 230 (ABOVE).

Regular Expression: 
  Before C: [I]([{cc!=230}&{cc!=0}])*"
      end

      operation 6980379 "isAfterSoftDotted"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param in name "src" explicit_type "String"
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements the \"After_Soft_Dotted\" condition

Specification: The last preceding character with combining class
of zero before C was Soft_Dotted, and there is no intervening
combining character class 230 (ABOVE).

Regular Expression: 
  Before C: [{Soft_Dotted==true}]([{cc!=230}&{cc!=0}])*"
      end

      operation 6980507 "isMoreAbove"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param in name "src" explicit_type "String"
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements the \"More_Above\" condition

Specification: C is followed by one or more characters of combining
class 230 (ABOVE) in the combining character sequence.

Regular Expression: 
  After C: [{cc!=0}]*[{cc==230}]"
      end

      operation 6980635 "isBeforeDot"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param in name "src" explicit_type "String"
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements the \"Before_Dot\" condition

Specification: C is followed by <code>U+0307 COMBINING DOT ABOVE</code>.
Any sequence of characters with a combining class that is
neither 0 nor 230 may intervene between the current character
and the combining dot above.

Regular Expression: 
  After C: ([{cc!=230}&{cc!=0}])*[\\u0307]"
      end

      operation 6980763 "isCased"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Examines whether a character is 'cased'.

A character C is defined to be 'cased' if and only if at least one of
following are true for C: uppercase==true, or lowercase==true, or 
general_category==titlecase_letter.

The uppercase and lowercase property values are specified in the data
file DerivedCoreProperties.txt in the Unicode Character Database."
      end

      operation 6980891 "isSoftDotted"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 912155 "Deprecated"
      visibility public stereotype "@interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}@interface ${name}${extends} {
${members}}
"
      java_annotation "@Documented
@Retention(RetentionPolicy.RUNTIME)
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A program element annotated &#64;Deprecated is one that programmers
are discouraged from using, typically because it is dangerous,
or because a better alternative exists.  Compilers warn when a
deprecated program element is used or overridden in non-deprecated code.

@author  Neal Gafter
@version 1.4, 06/10/04
@since 1.5"
    end

    class 912283 "EnumConstantNotPresentException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Thrown when an application tries to access an enum constant by name
and the enum type contains no constant with the specified name.

@author  Josh Bloch
@since   1.5"
      classrelation 1778203 // <generalisation>
	relation 1778203 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1778203 // <generalisation>
	  b parent class_ref 241051 // RuntimeException
      end

      classrelation 1778331 // enumType (<unidirectional association>)
	relation 1778331 --->
	  a role_name "enumType" private
	    comment "
The type of the missing enum constant.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? extends Enum> ${name}${value};
"
	    classrelation_ref 1778331 // enumType (<unidirectional association>)
	  b parent class_ref 164635 // Class
      end

      attribute 2728859 "constantName"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The name of the missing enum constant.
"
      end

      operation 6986523 "EnumConstantNotPresentException"
	public explicit_return_type ""
	nparams 2
	  param inout name "enumType" type class_ref 164635 // Class
	  param in name "constantName" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends Enum> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <tt>EnumConstantNotPresentException</tt> for the 
specified constant.

@param enumType the type of the missing enum constant
@param constantName the name of the missing enum constant"
      end

      operation 6986651 "enumType"
	public return_type class_ref 164635 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends Enum> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the type of the missing enum constant.

@return the type of the missing enum constant"
      end

      operation 6986779 "constantName"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the missing enum constant.

@return the name of the missing enum constant"
      end
    end

    class 912411 "IllegalAccessError"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Thrown if an application attempts to access or modify a field, or 
to call a method that it does not have access to. 
<p>
Normally, this error is caught by the compiler; this error can 
only occur at run time if the definition of a class has 
incompatibly changed. 

@author  unascribed
@version 1.16, 12/19/03
@since   JDK1.0"
      classrelation 1779099 // <generalisation>
	relation 1779099 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1779099 // <generalisation>
	  b parent class_ref 909083 // IncompatibleClassChangeError
      end

      operation 6990875 "IllegalAccessError"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>IllegalAccessError</code> with no detail message."
      end

      operation 6991003 "IllegalAccessError"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>IllegalAccessError</code> with the specified 
detail message. 

@param   s   the detail message."
      end
    end

    class 912539 "IllegalMonitorStateException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Thrown to indicate that a thread has attempted to wait on an 
object's monitor or to notify other threads waiting on an object's
monitor without owning the specified monitor. 

@author  unascribed
@version 1.12, 12/19/03
@see     java.lang.Object#notify()
@see     java.lang.Object#notifyAll()
@see     java.lang.Object#wait() 
@see     java.lang.Object#wait(long) 
@see     java.lang.Object#wait(long, int) 
@since   JDK1.0"
      classrelation 1779483 // <generalisation>
	relation 1779483 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1779483 // <generalisation>
	  b parent class_ref 241051 // RuntimeException
      end

      operation 6991899 "IllegalMonitorStateException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>IllegalMonitorStateException</code> with no 
detail message. "
      end

      operation 6992027 "IllegalMonitorStateException"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>IllegalMonitorStateException</code> with the 
specified detail message. 

@param   s   the detail message."
      end
    end

    class 912667 "IllegalThreadStateException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Thrown to indicate that a thread is not in an appropriate state 
for the requested operation. See, for example, the 
<code>suspend</code> and <code>resume</code> methods in class 
<code>Thread</code>. 

@author  unascribed
@version 1.21, 12/19/03
@see     java.lang.Thread#resume()
@see     java.lang.Thread#suspend()
@since   JDK1.0"
      classrelation 1779611 // <generalisation>
	relation 1779611 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1779611 // <generalisation>
	  b parent class_ref 216859 // IllegalArgumentException
      end

      operation 6992155 "IllegalThreadStateException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>IllegalThreadStateException</code> with no 
detail message. "
      end

      operation 6992283 "IllegalThreadStateException"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>IllegalThreadStateException</code> with the 
specified detail message. 

@param   s   the detail message."
      end
    end

    class 912795 "InheritableThreadLocal"
      visibility public 
      nformals 3
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 3
      actual class class_ref 163867 // ThreadLocal
        rank 0 explicit_value "T"
      actual class class_ref 163867 // ThreadLocal
        rank 1 explicit_value ""
      actual class class_ref 163867 // ThreadLocal
        rank 2 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class extends <tt>ThreadLocal</tt> to provide inheritance of values
from parent thread to child thread: when a child thread is created, the
child receives initial values for all inheritable thread-local variables
for which the parent has values.  Normally the child's values will be
identical to the parent's; however, the child's value can be made an
arbitrary function of the parent's by overriding the <tt>childValue</tt>
method in this class.

<p>Inheritable thread-local variables are used in preference to
ordinary thread-local variables when the per-thread-attribute being
maintained in the variable (e.g., User ID, Transaction ID) must be
automatically transmitted to any child threads that are created.

@author  Josh Bloch and Doug Lea
@version 1.21, 02/09/04
@see     ThreadLocal
@since   1.2"
      classrelation 1779995 // <realization>
	relation 1779995 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 1779995 // <realization>
	  b parent class_ref 163867 // ThreadLocal
      end

      operation 6995739 "childValue"
	protected explicit_return_type "T"
	nparams 1
	  param inout name "parentValue" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Computes the child's initial value for this inheritable thread-local
variable as a function of the parent's value at the time the child
thread is created.  This method is called from within the parent
thread before the child is started.
<p>
This method merely returns its input argument, and should be overridden
if a different behavior is desired.

@param parentValue the parent thread's value
@return the child thread's initial value"
      end

      operation 6995867 "getMap"
	package return_type class_ref 163995 // ThreadLocalMap
	nparams 1
	  param inout name "t" type class_ref 163227 // Thread
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the map associated with a ThreadLocal. 

@param t the current thread"
      end

      operation 6995995 "createMap"
	package explicit_return_type "void"
	nparams 2
	  param inout name "t" type class_ref 163227 // Thread
	  param inout name "firstValue" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create the map associated with a ThreadLocal. 

@param t the current thread
@param firstValue value for the initial entry of the table.
@param map the map to store."
      end
    end

    class 913051 "InstantiationError"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Thrown when an application tries to use the Java <code>new</code> 
construct to instantiate an abstract class or an interface. 
<p>
Normally, this error is caught by the compiler; this error can 
only occur at run time if the definition of a class has 
incompatibly changed. 

@author  unascribed
@version 1.12, 12/19/03
@since   JDK1.0"
      classrelation 1780123 // <generalisation>
	relation 1780123 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1780123 // <generalisation>
	  b parent class_ref 909083 // IncompatibleClassChangeError
      end

      operation 6996123 "InstantiationError"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>InstantiationError</code> with no detail  message."
      end

      operation 6996251 "InstantiationError"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>InstantiationError</code> with the specified 
detail message. 

@param   s   the detail message."
      end
    end

    class 913307 "VirtualMachineError"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Thrown to indicate that the Java Virtual Machine is broken or has 
run out of resources necessary for it to continue operating. 


@author  Frank Yellin
@version 1.14, 12/19/03
@since   JDK1.0"
      classrelation 1780891 // <generalisation>
	relation 1780891 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1780891 // <generalisation>
	  b parent class_ref 221851 // Error
      end

      operation 7001755 "VirtualMachineError"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>VirtualMachineError</code> with no detail message."
      end

      operation 7001883 "VirtualMachineError"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>VirtualMachineError</code> with the specified 
detail message. 

@param   s   the detail message."
      end
    end

    class 913435 "Iterable"
      visibility public stereotype "interface"
      nformals 3
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Implementing this interface allows an object to be the target of
 the \"foreach\" statement."
      operation 7002523 "iterator"
	public return_type class_ref 135323 // Iterator
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iterator over a set of elements of type T.

@return an Iterator."
      end
    end

    class 913691 "Math"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The class <code>Math</code> contains methods for performing basic
numeric operations such as the elementary exponential, logarithm,
square root, and trigonometric functions.

<p>Unlike some of the numeric methods of class
<code>StrictMath</code>, all implementations of the equivalent
functions of class <code>Math</code> are not defined to return the
bit-for-bit same results.  This relaxation permits
better-performing implementations where strict reproducibility is
not required.

<p>By default many of the <code>Math</code> methods simply call
the equivalent method in <code>StrictMath</code> for their
implementation.  Code generators are encouraged to use
platform-specific native libraries or microprocessor instructions,
where available, to provide higher-performance implementations of
<code>Math</code> methods.  Such higher-performance
implementations still must conform to the specification for
<code>Math</code>.

<p>The quality of implementation specifications concern two
properties, accuracy of the returned result and monotonicity of the
method.  Accuracy of the floating-point <code>Math</code> methods
is measured in terms of <i>ulps</i>, units in the last place.  For
a given floating-point format, an ulp of a specific real number
value is the distance between the two floating-point values
bracketing that numerical value.  When discussing the accuracy of a
method as a whole rather than at a specific argument, the number of
ulps cited is for the worst-case error at any argument.  If a
method always has an error less than 0.5 ulps, the method always
returns the floating-point number nearest the exact result; such a
method is <i>correctly rounded</i>.  A correctly rounded method is
generally the best a floating-point approximation can be; however,
it is impractical for many floating-point methods to be correctly
rounded.  Instead, for the <code>Math</code> class, a larger error
bound of 1 or 2 ulps is allowed for certain methods.  Informally,
with a 1 ulp error bound, when the exact result is a representable
number, the exact result should be returned as the computed result;
otherwise, either of the two floating-point values which bracket
the exact result may be returned.  For exact results large in
magnitude, one of the endpoints of the bracket may be infinite.
Besides accuracy at individual arguments, maintaining proper
relations between the method at different arguments is also
important.  Therefore, most methods with more than 0.5 ulp errors
are required to be <i>semi-monotonic</i>: whenever the mathematical
function is non-decreasing, so is the floating-point approximation,
likewise, whenever the mathematical function is non-increasing, so
is the floating-point approximation.  Not all approximations that
have 1 ulp accuracy will automatically meet the monotonicity
requirements.

@author  unascribed
@author  Joseph D. Darcy
@version 1.69, 06/14/04
@since   JDK1.0"
      operation 7007771 "Math"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Don't let anyone instantiate this class."
      end

      attribute 2732955 "E"
	class_attribute const_attribute public explicit_type "double"
	init_value "=  2.7182818284590452354"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The <code>double</code> value that is closer than any other to
<i>e</i>, the base of the natural logarithms.
"
      end

      attribute 2733083 "PI"
	class_attribute const_attribute public explicit_type "double"
	init_value "=  3.14159265358979323846"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The <code>double</code> value that is closer than any other to
<i>pi</i>, the ratio of the circumference of a circle to its
diameter.
"
      end

      operation 7007899 "sin"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "a" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the trigonometric sine of an angle.  Special cases:
<ul><li>If the argument is NaN or an infinity, then the 
result is NaN.
<li>If the argument is zero, then the result is a zero with the
same sign as the argument.</ul>

<p>The computed result must be within 1 ulp of the exact result.
Results must be semi-monotonic.

@param   a   an angle, in radians.
@return  the sine of the argument."
      end

      operation 7008027 "cos"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "a" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the trigonometric cosine of an angle. Special cases:
<ul><li>If the argument is NaN or an infinity, then the 
result is NaN.</ul>

<p>The computed result must be within 1 ulp of the exact result.
Results must be semi-monotonic.

@param   a   an angle, in radians.
@return  the cosine of the argument."
      end

      operation 7008155 "tan"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "a" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the trigonometric tangent of an angle.  Special cases:
<ul><li>If the argument is NaN or an infinity, then the result 
is NaN.
<li>If the argument is zero, then the result is a zero with the
same sign as the argument.</ul>

<p>The computed result must be within 1 ulp of the exact result.
Results must be semi-monotonic.

@param   a   an angle, in radians.
@return  the tangent of the argument."
      end

      operation 7008283 "asin"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "a" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the arc sine of an angle, in the range of -<i>pi</i>/2 through
<i>pi</i>/2. Special cases: 
<ul><li>If the argument is NaN or its absolute value is greater 
than 1, then the result is NaN.
<li>If the argument is zero, then the result is a zero with the
same sign as the argument.</ul>

<p>The computed result must be within 1 ulp of the exact result.
Results must be semi-monotonic.

@param   a   the value whose arc sine is to be returned.
@return  the arc sine of the argument."
      end

      operation 7008411 "acos"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "a" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the arc cosine of an angle, in the range of 0.0 through
<i>pi</i>.  Special case:
<ul><li>If the argument is NaN or its absolute value is greater 
than 1, then the result is NaN.</ul>

<p>The computed result must be within 1 ulp of the exact result.
Results must be semi-monotonic.

@param   a   the value whose arc cosine is to be returned.
@return  the arc cosine of the argument."
      end

      operation 7008539 "atan"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "a" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the arc tangent of an angle, in the range of -<i>pi</i>/2
through <i>pi</i>/2.  Special cases: 
<ul><li>If the argument is NaN, then the result is NaN.
<li>If the argument is zero, then the result is a zero with the
same sign as the argument.</ul>

<p>The computed result must be within 1 ulp of the exact result.
Results must be semi-monotonic.

@param   a   the value whose arc tangent is to be returned.
@return  the arc tangent of the argument."
      end

      operation 7008667 "toRadians"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "angdeg" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts an angle measured in degrees to an approximately
equivalent angle measured in radians.  The conversion from
degrees to radians is generally inexact.

@param   angdeg   an angle, in degrees
@return  the measurement of the angle <code>angdeg</code>
         in radians.
@since   1.2"
      end

      operation 7008795 "toDegrees"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "angrad" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts an angle measured in radians to an approximately
equivalent angle measured in degrees.  The conversion from
radians to degrees is generally inexact; users should
<i>not</i> expect <code>cos(toRadians(90.0))</code> to exactly
equal <code>0.0</code>.

@param   angrad   an angle, in radians
@return  the measurement of the angle <code>angrad</code>
         in degrees.
@since   1.2"
      end

      operation 7008923 "exp"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "a" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns Euler's number <i>e</i> raised to the power of a
<code>double</code> value.  Special cases:
<ul><li>If the argument is NaN, the result is NaN.
<li>If the argument is positive infinity, then the result is 
positive infinity.
<li>If the argument is negative infinity, then the result is 
positive zero.</ul>

<p>The computed result must be within 1 ulp of the exact result.
Results must be semi-monotonic.

@param   a   the exponent to raise <i>e</i> to.
@return  the value <i>e</i><sup><code>a</code></sup>, 
         where <i>e</i> is the base of the natural logarithms."
      end

      operation 7009051 "log"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "a" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the natural logarithm (base <i>e</i>) of a <code>double</code>
value.  Special cases:
<ul><li>If the argument is NaN or less than zero, then the result 
is NaN.
<li>If the argument is positive infinity, then the result is 
positive infinity.
<li>If the argument is positive zero or negative zero, then the 
result is negative infinity.</ul>

<p>The computed result must be within 1 ulp of the exact result.
Results must be semi-monotonic.

@param   a   a value
@return  the value ln&nbsp;<code>a</code>, the natural logarithm of
         <code>a</code>."
      end

      operation 7009179 "log10"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "a" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the base 10 logarithm of a <code>double</code> value.
Special cases:

<ul><li>If the argument is NaN or less than zero, then the result 
is NaN.
<li>If the argument is positive infinity, then the result is 
positive infinity.
<li>If the argument is positive zero or negative zero, then the 
result is negative infinity.
<li> If the argument is equal to 10<sup><i>n</i></sup> for
integer <i>n</i>, then the result is <i>n</i>.
</ul>

<p>The computed result must be within 1 ulp of the exact result.
Results must be semi-monotonic.

@param   a   a value
@return  the base 10 logarithm of  <code>a</code>.
@since 1.5"
      end

      operation 7009307 "sqrt"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "a" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the correctly rounded positive square root of a 
<code>double</code> value.
Special cases:
<ul><li>If the argument is NaN or less than zero, then the result 
is NaN. 
<li>If the argument is positive infinity, then the result is positive 
infinity. 
<li>If the argument is positive zero or negative zero, then the 
result is the same as the argument.</ul>
Otherwise, the result is the <code>double</code> value closest to 
the true mathematical square root of the argument value.

@param   a   a value.
@return  the positive square root of <code>a</code>.
         If the argument is NaN or less than zero, the result is NaN."
      end

      operation 7009435 "cbrt"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "a" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the cube root of a <code>double</code> value.  For
positive finite <code>x</code>, <code>cbrt(-x) ==
-cbrt(x)</code>; that is, the cube root of a negative value is
the negative of the cube root of that value's magnitude.

Special cases: 

<ul>

<li>If the argument is NaN, then the result is NaN.

<li>If the argument is infinite, then the result is an infinity
with the same sign as the argument.

<li>If the argument is zero, then the result is a zero with the
same sign as the argument.

</ul>

<p>The computed result must be within 1 ulp of the exact result.

@param   a   a value.
@return  the cube root of <code>a</code>.
@since 1.5"
      end

      operation 7009563 "IEEEremainder"
	class_operation public explicit_return_type "double"
	nparams 2
	  param in name "f1" explicit_type "double"
	  param in name "f2" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Computes the remainder operation on two arguments as prescribed 
by the IEEE 754 standard.
The remainder value is mathematically equal to 
<code>f1&nbsp;-&nbsp;f2</code>&nbsp;&times;&nbsp;<i>n</i>,
where <i>n</i> is the mathematical integer closest to the exact 
mathematical value of the quotient <code>f1/f2</code>, and if two 
mathematical integers are equally close to <code>f1/f2</code>, 
then <i>n</i> is the integer that is even. If the remainder is 
zero, its sign is the same as the sign of the first argument. 
Special cases:
<ul><li>If either argument is NaN, or the first argument is infinite, 
or the second argument is positive zero or negative zero, then the 
result is NaN.
<li>If the first argument is finite and the second argument is 
infinite, then the result is the same as the first argument.</ul>

@param   f1   the dividend.
@param   f2   the divisor.
@return  the remainder when <code>f1</code> is divided by
         <code>f2</code>."
      end

      operation 7009691 "ceil"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "a" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the smallest (closest to negative infinity)
<code>double</code> value that is greater than or equal to the
argument and is equal to a mathematical integer. Special cases:
<ul><li>If the argument value is already equal to a
mathematical integer, then the result is the same as the
argument.  <li>If the argument is NaN or an infinity or
positive zero or negative zero, then the result is the same as
the argument.  <li>If the argument value is less than zero but
greater than -1.0, then the result is negative zero.</ul> Note
that the value of <code>Math.ceil(x)</code> is exactly the
value of <code>-Math.floor(-x)</code>.


@param   a   a value.
@return  the smallest (closest to negative infinity) 
         floating-point value that is greater than or equal to 
         the argument and is equal to a mathematical integer. "
      end

      operation 7009819 "floor"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "a" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the largest (closest to positive infinity)
<code>double</code> value that is less than or equal to the
argument and is equal to a mathematical integer. Special cases:
<ul><li>If the argument value is already equal to a
mathematical integer, then the result is the same as the
argument.  <li>If the argument is NaN or an infinity or
positive zero or negative zero, then the result is the same as
the argument.</ul>

@param   a   a value.
@return  the largest (closest to positive infinity) 
         floating-point value that less than or equal to the argument
         and is equal to a mathematical integer. "
      end

      operation 7009947 "rint"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "a" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>double</code> value that is closest in value
to the argument and is equal to a mathematical integer. If two
<code>double</code> values that are mathematical integers are
equally close, the result is the integer value that is
even. Special cases:
<ul><li>If the argument value is already equal to a mathematical 
integer, then the result is the same as the argument. 
<li>If the argument is NaN or an infinity or positive zero or negative 
zero, then the result is the same as the argument.</ul>

@param   a   a <code>double</code> value.
@return  the closest floating-point value to <code>a</code> that is
         equal to a mathematical integer."
      end

      operation 7010075 "atan2"
	class_operation public explicit_return_type "double"
	nparams 2
	  param in name "y" explicit_type "double"
	  param in name "x" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts rectangular coordinates (<code>x</code>,&nbsp;<code>y</code>)
to polar (r,&nbsp;<i>theta</i>).
This method computes the phase <i>theta</i> by computing an arc tangent
of <code>y/x</code> in the range of -<i>pi</i> to <i>pi</i>. Special 
cases:
<ul><li>If either argument is NaN, then the result is NaN. 
<li>If the first argument is positive zero and the second argument 
is positive, or the first argument is positive and finite and the 
second argument is positive infinity, then the result is positive 
zero. 
<li>If the first argument is negative zero and the second argument 
is positive, or the first argument is negative and finite and the 
second argument is positive infinity, then the result is negative zero. 
<li>If the first argument is positive zero and the second argument 
is negative, or the first argument is positive and finite and the 
second argument is negative infinity, then the result is the 
<code>double</code> value closest to <i>pi</i>. 
<li>If the first argument is negative zero and the second argument 
is negative, or the first argument is negative and finite and the 
second argument is negative infinity, then the result is the 
<code>double</code> value closest to -<i>pi</i>. 
<li>If the first argument is positive and the second argument is 
positive zero or negative zero, or the first argument is positive 
infinity and the second argument is finite, then the result is the 
<code>double</code> value closest to <i>pi</i>/2. 
<li>If the first argument is negative and the second argument is 
positive zero or negative zero, or the first argument is negative 
infinity and the second argument is finite, then the result is the 
<code>double</code> value closest to -<i>pi</i>/2. 
<li>If both arguments are positive infinity, then the result is the 
<code>double</code> value closest to <i>pi</i>/4. 
<li>If the first argument is positive infinity and the second argument 
is negative infinity, then the result is the <code>double</code> 
value closest to 3*<i>pi</i>/4. 
<li>If the first argument is negative infinity and the second argument 
is positive infinity, then the result is the <code>double</code> value 
closest to -<i>pi</i>/4. 
<li>If both arguments are negative infinity, then the result is the 
<code>double</code> value closest to -3*<i>pi</i>/4.</ul>

<p>The computed result must be within 2 ulps of the exact result.
Results must be semi-monotonic.

@param   y   the ordinate coordinate
@param   x   the abscissa coordinate
@return  the <i>theta</i> component of the point
         (<i>r</i>,&nbsp;<i>theta</i>)
         in polar coordinates that corresponds to the point
         (<i>x</i>,&nbsp;<i>y</i>) in Cartesian coordinates."
      end

      operation 7010203 "pow"
	class_operation public explicit_return_type "double"
	nparams 2
	  param in name "a" explicit_type "double"
	  param in name "b" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the first argument raised to the power of the
second argument. Special cases:

<ul><li>If the second argument is positive or negative zero, then the 
result is 1.0. 
<li>If the second argument is 1.0, then the result is the same as the 
first argument.
<li>If the second argument is NaN, then the result is NaN. 
<li>If the first argument is NaN and the second argument is nonzero, 
then the result is NaN. 

<li>If
<ul>
<li>the absolute value of the first argument is greater than 1
and the second argument is positive infinity, or
<li>the absolute value of the first argument is less than 1 and
the second argument is negative infinity,
</ul>
then the result is positive infinity. 

<li>If 
<ul>
<li>the absolute value of the first argument is greater than 1 and 
the second argument is negative infinity, or 
<li>the absolute value of the 
first argument is less than 1 and the second argument is positive 
infinity,
</ul>
then the result is positive zero. 

<li>If the absolute value of the first argument equals 1 and the 
second argument is infinite, then the result is NaN. 

<li>If 
<ul>
<li>the first argument is positive zero and the second argument
is greater than zero, or
<li>the first argument is positive infinity and the second
argument is less than zero,
</ul>
then the result is positive zero. 

<li>If 
<ul>
<li>the first argument is positive zero and the second argument
is less than zero, or
<li>the first argument is positive infinity and the second
argument is greater than zero,
</ul>
then the result is positive infinity.

<li>If 
<ul>
<li>the first argument is negative zero and the second argument
is greater than zero but not a finite odd integer, or
<li>the first argument is negative infinity and the second
argument is less than zero but not a finite odd integer,
</ul>
then the result is positive zero. 

<li>If 
<ul>
<li>the first argument is negative zero and the second argument
is a positive finite odd integer, or
<li>the first argument is negative infinity and the second
argument is a negative finite odd integer,
</ul>
then the result is negative zero. 

<li>If
<ul>
<li>the first argument is negative zero and the second argument
is less than zero but not a finite odd integer, or
<li>the first argument is negative infinity and the second
argument is greater than zero but not a finite odd integer,
</ul>
then the result is positive infinity. 

<li>If 
<ul>
<li>the first argument is negative zero and the second argument
is a negative finite odd integer, or
<li>the first argument is negative infinity and the second
argument is a positive finite odd integer,
</ul>
then the result is negative infinity. 

<li>If the first argument is finite and less than zero
<ul>
<li> if the second argument is a finite even integer, the
result is equal to the result of raising the absolute value of
the first argument to the power of the second argument

<li>if the second argument is a finite odd integer, the result
is equal to the negative of the result of raising the absolute
value of the first argument to the power of the second
argument

<li>if the second argument is finite and not an integer, then
the result is NaN.
</ul>

<li>If both arguments are integers, then the result is exactly equal 
to the mathematical result of raising the first argument to the power 
of the second argument if that result can in fact be represented 
exactly as a <code>double</code> value.</ul>

<p>(In the foregoing descriptions, a floating-point value is
considered to be an integer if and only if it is finite and a
fixed point of the method {@link #ceil <tt>ceil</tt>} or,
equivalently, a fixed point of the method {@link #floor
<tt>floor</tt>}. A value is a fixed point of a one-argument
method if and only if the result of applying the method to the
value is equal to the value.)

<p>The computed result must be within 1 ulp of the exact result.
Results must be semi-monotonic.

@param   a   the base.
@param   b   the exponent.
@return  the value <code>a<sup>b</sup></code>."
      end

      operation 7010331 "round"
	class_operation public explicit_return_type "int"
	nparams 1
	  param in name "a" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the closest <code>int</code> to the argument. The 
result is rounded to an integer by adding 1/2, taking the 
floor of the result, and casting the result to type <code>int</code>. 
In other words, the result is equal to the value of the expression:
<p><pre>(int)Math.floor(a + 0.5f)</pre>
<p>
Special cases:
<ul><li>If the argument is NaN, the result is 0.
<li>If the argument is negative infinity or any value less than or 
equal to the value of <code>Integer.MIN_VALUE</code>, the result is 
equal to the value of <code>Integer.MIN_VALUE</code>. 
<li>If the argument is positive infinity or any value greater than or 
equal to the value of <code>Integer.MAX_VALUE</code>, the result is 
equal to the value of <code>Integer.MAX_VALUE</code>.</ul> 

@param   a   a floating-point value to be rounded to an integer.
@return  the value of the argument rounded to the nearest
         <code>int</code> value.
@see     java.lang.Integer#MAX_VALUE
@see     java.lang.Integer#MIN_VALUE"
      end

      operation 7010459 "round"
	class_operation public explicit_return_type "long"
	nparams 1
	  param in name "a" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the closest <code>long</code> to the argument. The result 
is rounded to an integer by adding 1/2, taking the floor of the 
result, and casting the result to type <code>long</code>. In other 
words, the result is equal to the value of the expression:
<p><pre>(long)Math.floor(a + 0.5d)</pre>
<p>
Special cases:
<ul><li>If the argument is NaN, the result is 0.
<li>If the argument is negative infinity or any value less than or 
equal to the value of <code>Long.MIN_VALUE</code>, the result is 
equal to the value of <code>Long.MIN_VALUE</code>. 
<li>If the argument is positive infinity or any value greater than or 
equal to the value of <code>Long.MAX_VALUE</code>, the result is 
equal to the value of <code>Long.MAX_VALUE</code>.</ul> 

@param   a   a floating-point value to be rounded to a 
		<code>long</code>.
@return  the value of the argument rounded to the nearest
         <code>long</code> value.
@see     java.lang.Long#MAX_VALUE
@see     java.lang.Long#MIN_VALUE"
      end

      classrelation 1781787 // randomNumberGenerator (<unidirectional association>)
	relation 1781787 --->
	  a role_name "randomNumberGenerator" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1781787 // randomNumberGenerator (<unidirectional association>)
	  b parent class_ref 139547 // Random
      end

      operation 7010587 "initRNG"
	class_operation private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7010715 "random"
	class_operation public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>double</code> value with a positive sign, greater 
than or equal to <code>0.0</code> and less than <code>1.0</code>. 
Returned values are chosen pseudorandomly with (approximately) 
uniform distribution from that range. 

<p>When this method is first called, it creates a single new
pseudorandom-number generator, exactly as if by the expression
<blockquote><pre>new java.util.Random</pre></blockquote> This
new pseudorandom-number generator is used thereafter for all
calls to this method and is used nowhere else.

<p>This method is properly synchronized to allow correct use by
more than one thread. However, if many threads need to generate
pseudorandom numbers at a great rate, it may reduce contention
for each thread to have its own pseudorandom-number generator.
 
@return  a pseudorandom <code>double</code> greater than or equal 
to <code>0.0</code> and less than <code>1.0</code>.
@see     java.util.Random#nextDouble()"
      end

      operation 7010843 "abs"
	class_operation public explicit_return_type "int"
	nparams 1
	  param in name "a" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the absolute value of an <code>int</code> value.
If the argument is not negative, the argument is returned.
If the argument is negative, the negation of the argument is returned. 

<p>Note that if the argument is equal to the value of
<code>Integer.MIN_VALUE</code>, the most negative representable
<code>int</code> value, the result is that same value, which is
negative.

@param   a   the argument whose absolute value is to be determined
@return  the absolute value of the argument.
@see     java.lang.Integer#MIN_VALUE"
      end

      operation 7010971 "abs"
	class_operation public explicit_return_type "long"
	nparams 1
	  param in name "a" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the absolute value of a <code>long</code> value.
If the argument is not negative, the argument is returned.
If the argument is negative, the negation of the argument is returned. 

<p>Note that if the argument is equal to the value of
<code>Long.MIN_VALUE</code>, the most negative representable
<code>long</code> value, the result is that same value, which
is negative.

@param   a   the argument whose absolute value is to be determined
@return  the absolute value of the argument.
@see     java.lang.Long#MIN_VALUE"
      end

      operation 7011099 "abs"
	class_operation public explicit_return_type "float"
	nparams 1
	  param in name "a" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the absolute value of a <code>float</code> value.
If the argument is not negative, the argument is returned.
If the argument is negative, the negation of the argument is returned.
Special cases:
<ul><li>If the argument is positive zero or negative zero, the 
result is positive zero. 
<li>If the argument is infinite, the result is positive infinity. 
<li>If the argument is NaN, the result is NaN.</ul>
In other words, the result is the same as the value of the expression: 
<p><pre>Float.intBitsToFloat(0x7fffffff & Float.floatToIntBits(a))</pre>

@param   a   the argument whose absolute value is to be determined
@return  the absolute value of the argument."
      end

      operation 7011227 "abs"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "a" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the absolute value of a <code>double</code> value.
If the argument is not negative, the argument is returned.
If the argument is negative, the negation of the argument is returned.
Special cases:
<ul><li>If the argument is positive zero or negative zero, the result 
is positive zero. 
<li>If the argument is infinite, the result is positive infinity. 
<li>If the argument is NaN, the result is NaN.</ul>
In other words, the result is the same as the value of the expression: 
<p><code>Double.longBitsToDouble((Double.doubleToLongBits(a)&lt;&lt;1)&gt;&gt;&gt;1)</code> 

@param   a   the argument whose absolute value is to be determined
@return  the absolute value of the argument."
      end

      operation 7011355 "max"
	class_operation public explicit_return_type "int"
	nparams 2
	  param in name "a" explicit_type "int"
	  param in name "b" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the greater of two <code>int</code> values. That is, the 
result is the argument closer to the value of 
<code>Integer.MAX_VALUE</code>. If the arguments have the same value, 
the result is that same value.

@param   a   an argument.
@param   b   another argument.
@return  the larger of <code>a</code> and <code>b</code>.
@see     java.lang.Long#MAX_VALUE"
      end

      operation 7011483 "max"
	class_operation public explicit_return_type "long"
	nparams 2
	  param in name "a" explicit_type "long"
	  param in name "b" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the greater of two <code>long</code> values. That is, the 
result is the argument closer to the value of 
<code>Long.MAX_VALUE</code>. If the arguments have the same value, 
the result is that same value. 

@param   a   an argument.
@param   b   another argument.
@return  the larger of <code>a</code> and <code>b</code>.
@see     java.lang.Long#MAX_VALUE"
      end

      attribute 2733211 "negativeZeroFloatBits"
	class_attribute private explicit_type "long"
	init_value "=  Float.floatToIntBits(-0.0f)"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2733339 "negativeZeroDoubleBits"
	class_attribute private explicit_type "long"
	init_value "=  Double.doubleToLongBits(-0.0d)"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7011611 "max"
	class_operation public explicit_return_type "float"
	nparams 2
	  param in name "a" explicit_type "float"
	  param in name "b" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the greater of two <code>float</code> values.  That is,
the result is the argument closer to positive infinity. If the
arguments have the same value, the result is that same
value. If either value is NaN, then the result is NaN.  Unlike
the numerical comparison operators, this method considers
negative zero to be strictly smaller than positive zero. If one
argument is positive zero and the other negative zero, the
result is positive zero.

@param   a   an argument.
@param   b   another argument.
@return  the larger of <code>a</code> and <code>b</code>."
      end

      operation 7011739 "max"
	class_operation public explicit_return_type "double"
	nparams 2
	  param in name "a" explicit_type "double"
	  param in name "b" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the greater of two <code>double</code> values.  That
is, the result is the argument closer to positive infinity. If
the arguments have the same value, the result is that same
value. If either value is NaN, then the result is NaN.  Unlike
the numerical comparison operators, this method considers
negative zero to be strictly smaller than positive zero. If one
argument is positive zero and the other negative zero, the
result is positive zero.

@param   a   an argument.
@param   b   another argument.
@return  the larger of <code>a</code> and <code>b</code>."
      end

      operation 7011867 "min"
	class_operation public explicit_return_type "int"
	nparams 2
	  param in name "a" explicit_type "int"
	  param in name "b" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the smaller of two <code>int</code> values. That is,
the result the argument closer to the value of
<code>Integer.MIN_VALUE</code>.  If the arguments have the same
value, the result is that same value.

@param   a   an argument.
@param   b   another argument.
@return  the smaller of <code>a</code> and <code>b</code>.
@see     java.lang.Long#MIN_VALUE"
      end

      operation 7011995 "min"
	class_operation public explicit_return_type "long"
	nparams 2
	  param in name "a" explicit_type "long"
	  param in name "b" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the smaller of two <code>long</code> values. That is,
the result is the argument closer to the value of
<code>Long.MIN_VALUE</code>. If the arguments have the same
value, the result is that same value.

@param   a   an argument.
@param   b   another argument.
@return  the smaller of <code>a</code> and <code>b</code>.
@see     java.lang.Long#MIN_VALUE"
      end

      operation 7012123 "min"
	class_operation public explicit_return_type "float"
	nparams 2
	  param in name "a" explicit_type "float"
	  param in name "b" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the smaller of two <code>float</code> values.  That is,
the result is the value closer to negative infinity. If the
arguments have the same value, the result is that same
value. If either value is NaN, then the result is NaN.  Unlike
the numerical comparison operators, this method considers
negative zero to be strictly smaller than positive zero.  If
one argument is positive zero and the other is negative zero,
the result is negative zero.

@param   a   an argument.
@param   b   another argument.
@return  the smaller of <code>a</code> and <code>b.</code>"
      end

      operation 7012251 "min"
	class_operation public explicit_return_type "double"
	nparams 2
	  param in name "a" explicit_type "double"
	  param in name "b" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the smaller of two <code>double</code> values.  That
is, the result is the value closer to negative infinity. If the
arguments have the same value, the result is that same
value. If either value is NaN, then the result is NaN.  Unlike
the numerical comparison operators, this method considers
negative zero to be strictly smaller than positive zero. If one
argument is positive zero and the other is negative zero, the
result is negative zero.

@param   a   an argument.
@param   b   another argument.
@return  the smaller of <code>a</code> and <code>b</code>."
      end

      operation 7012379 "ulp"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "d" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the size of an ulp of the argument.  An ulp of a
<code>double</code> value is the positive distance between this
floating-point value and the <code>double</code> value next
larger in magnitude.  Note that for non-NaN <i>x</i>,
<code>ulp(-<i>x</i>) == ulp(<i>x</i>)</code>.

<p>Special Cases:
<ul>
<li> If the argument is NaN, then the result is NaN.
<li> If the argument is positive or negative infinity, then the
result is positive infinity.
<li> If the argument is positive or negative zero, then the result is
<code>Double.MIN_VALUE</code>.
<li> If the argument is &plusmn;<code>Double.MAX_VALUE</code>, then
the result is equal to 2<sup>971</sup>.
</ul>

@param d the floating-point value whose ulp is to be returned
@return the size of an ulp of the argument
@author Joseph D. Darcy
@since 1.5"
      end

      operation 7012507 "ulp"
	class_operation public explicit_return_type "float"
	nparams 1
	  param in name "f" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the size of an ulp of the argument.  An ulp of a
<code>float</code> value is the positive distance between this
floating-point value and the <code>float</code> value next
larger in magnitude.  Note that for non-NaN <i>x</i>,
<code>ulp(-<i>x</i>) == ulp(<i>x</i>)</code>.

<p>Special Cases:
<ul>
<li> If the argument is NaN, then the result is NaN.
<li> If the argument is positive or negative infinity, then the
result is positive infinity.
<li> If the argument is positive or negative zero, then the result is
<code>Float.MIN_VALUE</code>.
<li> If the argument is &plusmn;<code>Float.MAX_VALUE</code>, then
the result is equal to 2<sup>104</sup>.
</ul>

@param f the floating-point value whose ulp is to be returned
@return the size of an ulp of the argument
@author Joseph D. Darcy
@since 1.5"
      end

      operation 7012635 "signum"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "d" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the signum function of the argument; zero if the argument
is zero, 1.0 if the argument is greater than zero, -1.0 if the
argument is less than zero.

<p>Special Cases:
<ul>
<li> If the argument is NaN, then the result is NaN.
<li> If the argument is positive zero or negative zero, then the
     result is the same as the argument.
</ul>

@param d the floating-point value whose signum is to be returned
@return the signum function of the argument
@author Joseph D. Darcy
@since 1.5"
      end

      operation 7012763 "signum"
	class_operation public explicit_return_type "float"
	nparams 1
	  param in name "f" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the signum function of the argument; zero if the argument
is zero, 1.0f if the argument is greater than zero, -1.0f if the
argument is less than zero.

<p>Special Cases:
<ul>
<li> If the argument is NaN, then the result is NaN.
<li> If the argument is positive zero or negative zero, then the
     result is the same as the argument.
</ul>

@param f the floating-point value whose signum is to be returned
@return the signum function of the argument
@author Joseph D. Darcy
@since 1.5"
      end

      operation 7012891 "sinh"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "x" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hyperbolic sine of a <code>double</code> value.
The hyperbolic sine of <i>x</i> is defined to be
(<i>e<sup>x</sup>&nbsp;-&nbsp;e<sup>-x</sup></i>)/2
where <i>e</i> is {@linkplain Math#E Euler's number}.

<p>Special cases:
<ul>

<li>If the argument is NaN, then the result is NaN.

<li>If the argument is infinite, then the result is an infinity
with the same sign as the argument.

<li>If the argument is zero, then the result is a zero with the
same sign as the argument.

</ul>

<p>The computed result must be within 2.5 ulps of the exact result.

@param   x The number whose hyperbolic sine is to be returned.
@return  The hyperbolic sine of <code>x</code>.
@since 1.5"
      end

      operation 7013019 "cosh"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "x" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hyperbolic cosine of a <code>double</code> value.
The hyperbolic cosine of <i>x</i> is defined to be
(<i>e<sup>x</sup>&nbsp;+&nbsp;e<sup>-x</sup></i>)/2
where <i>e</i> is {@linkplain Math#E Euler's number}.

<p>Special cases:
<ul>

<li>If the argument is NaN, then the result is NaN.

<li>If the argument is infinite, then the result is positive
infinity.

<li>If the argument is zero, then the result is <code>1.0</code>.

</ul>

<p>The computed result must be within 2.5 ulps of the exact result.

@param   x The number whose hyperbolic cosine is to be returned.
@return  The hyperbolic cosine of <code>x</code>.
@since 1.5"
      end

      operation 7013147 "tanh"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "x" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hyperbolic tangent of a <code>double</code> value.
The hyperbolic tangent of <i>x</i> is defined to be
(<i>e<sup>x</sup>&nbsp;-&nbsp;e<sup>-x</sup></i>)/(<i>e<sup>x</sup>&nbsp;+&nbsp;e<sup>-x</sup></i>),
in other words, {@linkplain Math#sinh
sinh(<i>x</i>)}/{@linkplain Math#cosh cosh(<i>x</i>)}.  Note
that the absolute value of the exact tanh is always less than
1.

<p>Special cases:
<ul>

<li>If the argument is NaN, then the result is NaN.

<li>If the argument is zero, then the result is a zero with the
same sign as the argument.

<li>If the argument is positive infinity, then the result is
<code>+1.0</code>.

<li>If the argument is negative infinity, then the result is
<code>-1.0</code>.
 
</ul>

<p>The computed result must be within 2.5 ulps of the exact result.
The result of <code>tanh</code> for any finite input must have
an absolute value less than or equal to 1.  Note that once the
exact result of tanh is within 1/2 of an ulp of the limit value
of &plusmn;1, correctly signed &plusmn;<code>1.0</code> should
be returned.

@param   x The number whose hyperbolic tangent is to be returned.
@return  The hyperbolic tangent of <code>x</code>.
@since 1.5"
      end

      operation 7013275 "hypot"
	class_operation public explicit_return_type "double"
	nparams 2
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)
without intermediate overflow or underflow.

<p>Special cases:
<ul>

<li> If either argument is infinite, then the result
is positive infinity.

<li> If either argument is NaN and neither argument is infinite,
then the result is NaN.

</ul>

<p>The computed result must be within 1 ulp of the exact
result.  If one parameter is held constant, the results must be
semi-monotonic in the other parameter.

@param x a value
@param y a value
@return sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)
without intermediate overflow or underflow
@since 1.5"
      end

      operation 7013403 "expm1"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "x" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <i>e</i><sup>x</sup>&nbsp;-1.  Note that for values of
<i>x</i> near 0, the exact sum of
<code>expm1(x)</code>&nbsp;+&nbsp;1 is much closer to the true
result of <i>e</i><sup>x</sup> than <code>exp(x)</code>.

<p>Special cases:
<ul>
<li>If the argument is NaN, the result is NaN.

<li>If the argument is positive infinity, then the result is
positive infinity.

<li>If the argument is negative infinity, then the result is
-1.0.

<li>If the argument is zero, then the result is a zero with the
same sign as the argument.

</ul>

<p>The computed result must be within 1 ulp of the exact result.
Results must be semi-monotonic.  The result of
<code>expm1</code> for any finite input must be greater than or
equal to <code>-1.0</code>.  Note that once the exact result of
<i>e</i><sup><code>x</code></sup>&nbsp;-&nbsp;1 is within 1/2
ulp of the limit value -1, <code>-1.0</code> should be
returned.

@param   x   the exponent to raise <i>e</i> to in the computation of
             <i>e</i><sup><code>x</code></sup>&nbsp;-1.
@return  the value <i>e</i><sup><code>x</code></sup>&nbsp;-&nbsp;1."
      end

      operation 7013531 "log1p"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "x" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the natural logarithm of the sum of the argument and 1.
Note that for small values <code>x</code>, the result of
<code>log1p(x)</code> is much closer to the true result of ln(1
+ <code>x</code>) than the floating-point evaluation of
<code>log(1.0+x)</code>.

<p>Special cases:

<ul>

<li>If the argument is NaN or less than -1, then the result is
NaN.

<li>If the argument is positive infinity, then the result is
positive infinity.

<li>If the argument is negative one, then the result is
negative infinity.

<li>If the argument is zero, then the result is a zero with the
same sign as the argument.

</ul>

<p>The computed result must be within 1 ulp of the exact result.
Results must be semi-monotonic.

@param   x   a value
@return the value ln(<code>x</code>&nbsp;+&nbsp;1), the natural
log of <code>x</code>&nbsp;+&nbsp;1"
      end
    end

    class 913819 "NegativeArraySizeException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Thrown if an application tries to create an array with negative size.

@author  unascribed
@version 1.19, 12/19/03
@since   JDK1.0"
      classrelation 1781915 // <generalisation>
	relation 1781915 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1781915 // <generalisation>
	  b parent class_ref 241051 // RuntimeException
      end

      operation 7013659 "NegativeArraySizeException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>NegativeArraySizeException</code> with no 
detail message. "
      end

      operation 7013787 "NegativeArraySizeException"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>NegativeArraySizeException</code> with the 
specified detail message. 

@param   s   the detail message."
      end
    end

    class 913947 "NoClassDefFoundError"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Thrown if the Java Virtual Machine or a <code>ClassLoader</code> instance
tries to load in the definition of a class (as part of a normal method call
or as part of creating a new instance using the <code>new</code> expression)
and no definition of the class could be found. 
<p>
The searched-for class definition existed when the currently 
executing class was compiled, but the definition can no longer be 
found. 

@author  unascribed
@version 1.22, 12/19/03
@since   JDK1.0"
      classrelation 1782043 // <generalisation>
	relation 1782043 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1782043 // <generalisation>
	  b parent class_ref 689563 // LinkageError
      end

      operation 7013915 "NoClassDefFoundError"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>NoClassDefFoundError</code> with no detail message."
      end

      operation 7014043 "NoClassDefFoundError"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>NoClassDefFoundError</code> with the specified 
detail message. 

@param   s   the detail message."
      end
    end

    class 914075 "NoSuchFieldError"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Thrown if an application tries to access or modify a specified 
field of an object, and that object no longer has that field. 
<p>
Normally, this error is caught by the compiler; this error can 
only occur at run time if the definition of a class has 
incompatibly changed. 

@author  unascribed
@version 1.12, 12/19/03
@since   JDK1.0"
      classrelation 1782171 // <generalisation>
	relation 1782171 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1782171 // <generalisation>
	  b parent class_ref 909083 // IncompatibleClassChangeError
      end

      operation 7014171 "NoSuchFieldError"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>NoSuchFieldException</code> with no detail  message."
      end

      operation 7014299 "NoSuchFieldError"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>NoSuchFieldException</code> with the specified 
detail message. 

@param   s   the detail message."
      end
    end

    class 914203 "NoSuchMethodError"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Thrown if an application tries to call a specified method of a 
class (either static or instance), and that class no longer has a 
definition of that method. 
<p>
Normally, this error is caught by the compiler; this error can 
only occur at run time if the definition of a class has 
incompatibly changed. 

@author  unascribed
@version 1.21, 12/19/03
@since   JDK1.0"
      classrelation 1782427 // <generalisation>
	relation 1782427 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1782427 // <generalisation>
	  b parent class_ref 909083 // IncompatibleClassChangeError
      end

      operation 7014683 "NoSuchMethodError"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>NoSuchMethodError</code> with no detail message."
      end

      operation 7014811 "NoSuchMethodError"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>NoSuchMethodError</code> with the 
specified detail message. 

@param   s   the detail message."
      end
    end

    class 914331 "OutOfMemoryError"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Thrown when the Java Virtual Machine cannot allocate an object 
because it is out of memory, and no more memory could be made 
available by the garbage collector. 

@author  unascribed
@version 1.21, 12/19/03
@since   JDK1.0"
      classrelation 1782939 // <generalisation>
	relation 1782939 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1782939 // <generalisation>
	  b parent class_ref 913307 // VirtualMachineError
      end

      operation 7015835 "OutOfMemoryError"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>OutOfMemoryError</code> with no detail message."
      end

      operation 7015963 "OutOfMemoryError"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>OutOfMemoryError</code> with the specified 
detail message. 

@param   s   the detail message."
      end
    end

    class 914459 "Override"
      visibility public stereotype "@interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}@interface ${name}${extends} {
${members}}
"
      java_annotation "@Target(ElementType.METHOD)
@Retention(RetentionPolicy.SOURCE)
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Indicates that a method declaration is intended to override a
method declaration in a superclass.  If a method is annotated with
this annotation type but does not override a superclass method,
compilers are required to generate an error message.

@author  Joshua Bloch
@since 1.5"
    end

    class 914715 "ProcessBuilder"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class is used to create operating system processes.

<p>Each <code>ProcessBuilder</code> instance manages a collection
of process attributes.  The {@link #start()} method creates a new
{@link Process} instance with those attributes.  The {@link
#start()} method can be invoked repeatedly from the same instance
to create new subprocesses with identical or related attributes.

<p>Each process builder manages these process attributes:

<ul>

<li>a <i>command</i>, a list of strings which signifies the
external program file to be invoked and its arguments, if any.
Which string lists represent a valid operating system command is
system-dependent.  For example, it is common for each conceptual
argument to be an element in this list, but there are operating
systems where programs are expected to tokenize command line
strings themselves - on such a system a Java implementation might
require commands to contain exactly two elements.

<li>an <i>environment</i>, which is a system-dependent mapping from
<i>variables</i> to <i>values</i>.  The initial value is a copy of
the environment of the current process (see {@link System#getenv()}).

<li>a <i>working directory</i>.  The default value is the current
working directory of the current process, usually the directory
named by the system property <code>user.dir</code>.

<li>a <i>redirectErrorStream</i> property.  Initially, this property
is <code>false</code>, meaning that the standard output and error
output of a subprocess are sent to two separate streams, which can
be accessed using the {@link Process#getInputStream()} and {@link
Process#getErrorStream()} methods.  If the value is set to
<code>true</code>, the standard error is merged with the standard
output.  This makes it easier to correlate error messages with the
corresponding output.  In this case, the merged data can be read
from the stream returned by {@link Process#getInputStream()}, while
reading from the stream returned by {@link
Process#getErrorStream()} will get an immediate end of file.

</ul>

<p>Modifying a process builder's attributes will affect processes
subsequently started by that object's {@link #start()} method, but
will never affect previously started processes or the Java process
itself.

<p>Most error checking is performed by the {@link #start()} method.
It is possible to modify the state of an object so that {@link
#start()} will fail.  For example, setting the command attribute to
an empty list will not throw an exception unless {@link #start()}
is invoked.

<p><strong>Note that this class is not synchronized.</strong>
If multiple threads access a <code>ProcessBuilder</code> instance
concurrently, and at least one of the threads modifies one of the
attributes structurally, it <i>must</i> be synchronized externally.

<p>Starting a new process which uses the default working directory
and environment is easy:

<blockquote><pre>
Process p = new ProcessBuilder(\"myCommand\", \"myArg\").start();
</pre></blockquote>

<p>Here is an example that starts a process with a modified working
directory and environment:

<blockquote><pre>
ProcessBuilder pb = new ProcessBuilder(\"myCommand\", \"myArg1\", \"myArg2\");
Map&lt;String, String&gt; env = pb.environment();
env.put(\"VAR1\", \"myValue\");
env.remove(\"OTHERVAR\");
env.put(\"VAR2\", env.get(\"VAR1\") + \"suffix\");
pb.directory(\"myDir\");
Process p = pb.start();
</pre></blockquote>

<p>To start a process with an explicit set of environment
variables, first call {@link java.util.Map#clear() Map.clear()}
before adding environment variables.

@since 1.5"
      classrelation 1783963 // command (<unidirectional association>)
	relation 1783963 --->
	  a role_name "command" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String> ${name}${value};
"
	    classrelation_ref 1783963 // command (<unidirectional association>)
	  b parent class_ref 135579 // List
      end

      classrelation 1784091 // directory (<unidirectional association>)
	relation 1784091 --->
	  a role_name "directory" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1784091 // directory (<unidirectional association>)
	  b parent class_ref 165147 // File
      end

      classrelation 1784219 // environment (<unidirectional association>)
	relation 1784219 --->
	  a role_name "environment" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String,String> ${name}${value};
"
	    classrelation_ref 1784219 // environment (<unidirectional association>)
	  b parent class_ref 136603 // Map
      end

      attribute 2734491 "redirectErrorStream"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7020443 "ProcessBuilder"
	public explicit_return_type ""
	nparams 1
	  param inout name "command" type class_ref 135579 // List
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<String> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a process builder with the specified operating
system program and arguments.  This constructor does <i>not</i>
make a copy of the <code>command</code> list.  Subsequent
updates to the list will be reflected in the state of the
process builder.  It is not checked whether
<code>command</code> corresponds to a valid operating system
command.</p>

@param   command  The list containing the program and its arguments

@throws  NullPointerException
         If the argument is <code>null</code>"
      end

      operation 7020571 "ProcessBuilder"
	public explicit_return_type ""
	nparams 1
	  param inout name "" explicit_type "String...command"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a process builder with the specified operating
system program and arguments.  This is a convenience
constructor that sets the process builder's command to a string
list containing the same strings as the <code>command</code>
array, in the same order.  It is not checked whether
<code>command</code> corresponds to a valid operating system
command.</p>

@param   command  A string array containing the program and its arguments"
      end

      operation 7020699 "command"
	public return_type class_ref 914715 // ProcessBuilder
	nparams 1
	  param inout name "command" type class_ref 135579 // List
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<String> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this process builder's operating system program and
arguments.  This method does <i>not</i> make a copy of the
<code>command</code> list.  Subsequent updates to the list will
be reflected in the state of the process builder.  It is not
checked whether <code>command</code> corresponds to a valid
operating system command.</p>

@param   command  The list containing the program and its arguments
@return  This process builder

@throws  NullPointerException
         If the argument is <code>null</code>"
      end

      operation 7020827 "command"
	public return_type class_ref 914715 // ProcessBuilder
	nparams 1
	  param inout name "" explicit_type "String...command"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this process builder's operating system program and
arguments.  This is a convenience method that sets the command
to a string list containing the same strings as the
<code>command</code> array, in the same order.  It is not
checked whether <code>command</code> corresponds to a valid
operating system command.</p>

@param   command  A string array containing the program and its arguments
@return  This process builder"
      end

      operation 7020955 "command"
	public return_type class_ref 135579 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this process builder's operating system program and
arguments.  The returned list is <i>not</i> a copy.  Subsequent
updates to the list will be reflected in the state of this
process builder.</p>

@return  This process builder's program and its arguments"
      end

      operation 7021083 "environment"
	public return_type class_ref 136603 // Map
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String,String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string map view of this process builder's environment.

Whenever a process builder is created, the environment is
initialized to a copy of the current process environment (see
{@link System#getenv()}).  Subprocesses subsequently started by
this object's {@link #start()} method will use this map as
their environment.

<p>The returned object may be modified using ordinary {@link
java.util.Map Map} operations.  These modifications will be
visible to subprocesses started via the {@link #start()}
method.  Two <code>ProcessBuilder</code> instances always
contain independent process environments, so changes to the
returned map will never be reflected in any other
<code>ProcessBuilder</code> instance or the values returned by
{@link System#getenv System.getenv}.

<p>If the system does not support environment variables, an
empty map is returned.

<p>The returned map does not permit null keys or values.
Attempting to insert or query the presence of a null key or
value will throw a {@link NullPointerException}.
Attempting to query the presence of a key or value which is not
of type {@link String} will throw a {@link ClassCastException}.

<p>The behavior of the returned map is system-dependent.  A
system may not allow modifications to environment variables or
may forbid certain variable names or values.  For this reason,
attempts to modify the map may fail with
{@link UnsupportedOperationException} or
{@link IllegalArgumentException}
if the modification is not permitted by the operating system.

<p>Since the external format of environment variable names and
values is system-dependent, there may not be a one-to-one
mapping between them and Java's Unicode strings.  Nevertheless,
the map is implemented in such a way that environment variables
which are not modified by Java code will have an unmodified
native representation in the subprocess.

<p>The returned map and its collection views may not obey the
general contract of the {@link Object#equals} and
{@link Object#hashCode} methods.

<p>The returned map is typically case-sensitive on all platforms.

<p>If a security manager exists, its
{@link SecurityManager#checkPermission checkPermission}
method is called with a
<code>{@link RuntimePermission}(\"getenv.*\")</code>
permission.  This may result in a {@link SecurityException} being
thrown.

<p>When passing information to a Java subprocess,
<a href=System.html#EnvironmentVSSystemProperties>system properties</a>
are generally preferred over environment variables.</p>

@return  This process builder's environment

@throws  SecurityException
         If a security manager exists and its
         {@link SecurityManager#checkPermission checkPermission}
         method doesn't allow access to the process environment

@see     Runtime#exec(String[],String[],java.io.File)
@see     System#getenv()"
      end

      operation 7021211 "environment"
	package return_type class_ref 914715 // ProcessBuilder
	nparams 1
	  param in name "envp" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Only for use by Runtime.exec(...envp...)"
      end

      operation 7021339 "directory"
	public return_type class_ref 165147 // File
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this process builder's working directory.

Subprocesses subsequently started by this object's {@link
#start()} method will use this as their working directory.
The returned value may be <code>null</code> -- this means to use
the working directory of the current Java process, usually the
directory named by the system property <code>user.dir</code>,
as the working directory of the child process.</p>

@return  This process builder's working directory"
      end

      operation 7021467 "directory"
	public return_type class_ref 914715 // ProcessBuilder
	nparams 1
	  param inout name "directory" type class_ref 165147 // File
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this process builder's working directory.

Subprocesses subsequently started by this object's {@link
#start()} method will use this as their working directory.
The argument may be <code>null</code> -- this means to use the
working directory of the current Java process, usually the
directory named by the system property <code>user.dir</code>,
as the working directory of the child process.</p>

@param   directory  The new working directory
@return  This process builder"
      end

      operation 7021595 "redirectErrorStream"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells whether this process builder merges standard error and
standard output.

<p>If this property is <code>true</code>, then any error output
generated by subprocesses subsequently started by this object's
{@link #start()} method will be merged with the standard
output, so that both can be read using the
{@link Process#getInputStream()} method.  This makes it easier
to correlate error messages with the corresponding output.
The initial value is <code>false</code>.</p>

@return  This process builder's <code>redirectErrorStream</code> property"
      end

      operation 7021723 "redirectErrorStream"
	public return_type class_ref 914715 // ProcessBuilder
	nparams 1
	  param inout name "redirectErrorStream" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this process builder's <code>redirectErrorStream</code> property.

<p>If this property is <code>true</code>, then any error output
generated by subprocesses subsequently started by this object's
{@link #start()} method will be merged with the standard
output, so that both can be read using the
{@link Process#getInputStream()} method.  This makes it easier
to correlate error messages with the corresponding output.
The initial value is <code>false</code>.</p>

@param   redirectErrorStream  The new property value
@return  This process builder"
      end

      operation 7021851 "start"
	public return_type class_ref 173723 // Process
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Starts a new process using the attributes of this process builder.

<p>The new process will
invoke the command and arguments given by {@link #command()},
in a working directory as given by {@link #directory()},
with a process environment as given by {@link #environment()}.

<p>This method checks that the command is a valid operating
system command.  Which commands are valid is system-dependent,
but at the very least the command must be a non-empty list of
non-null strings.

<p>If there is a security manager, its
{@link SecurityManager#checkExec checkExec}
method is called with the first component of this object's
<code>command</code> array as its argument. This may result in
a {@link SecurityException} being thrown.

<p>Starting an operating system process is highly system-dependent.
Among the many things that can go wrong are:
<ul>
<li>The operating system program file was not found.
<li>Access to the program file was denied.
<li>The working directory does not exist.
</ul>

<p>In such cases an exception will be thrown.  The exact nature
of the exception is system-dependent, but it will always be a
subclass of {@link IOException}.

<p>Subsequent modifications to this process builder will not
affect the returned {@link Process}.</p>

@return  A new {@link Process} object for managing the subprocess

@throws  NullPointerException
         If an element of the command list is null

@throws  IndexOutOfBoundsException
         If the command is an empty list (has size <code>0</code>)

@throws  SecurityException
         If a security manager exists and its
         {@link SecurityManager#checkExec checkExec}
         method doesn't allow creation of the subprocess

@throws  IOException
         If an I/O error occurs

@see     Runtime#exec(String[], String[], java.io.File)
@see     SecurityManager#checkExec(String)"
      end
    end

    class 914843 "ProcessEnvironment"
      visibility package 
      nactuals 8
      actual class class_ref 144923 // HashMap
        rank 0 explicit_value "string"
      actual class class_ref 144923 // HashMap
        rank 1 explicit_value "string"
      actual class class_ref 144923 // HashMap
        rank 2 explicit_value ""
      actual class class_ref 144923 // HashMap
        rank 3 explicit_value ""
      actual class class_ref 144923 // HashMap
        rank 4 explicit_value ""
      actual class class_ref 144923 // HashMap
        rank 5 explicit_value ""
      actual class class_ref 144923 // HashMap
        rank 6 explicit_value ""
      actual class class_ref 144923 // HashMap
        rank 7 explicit_value ""
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 1784347 // <realization>
	relation 1784347 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 1784347 // <realization>
	  b parent class_ref 144923 // HashMap
      end

      operation 7021979 "validateName"
	class_operation private explicit_return_type "String"
	nparams 1
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7022107 "validateValue"
	class_operation private explicit_return_type "String"
	nparams 1
	  param in name "value" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7022235 "nonNullString"
	class_operation private explicit_return_type "String"
	nparams 1
	  param inout name "o" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7022363 "put"
	public explicit_return_type "String"
	nparams 2
	  param in name "key" explicit_type "String"
	  param in name "value" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7022491 "get"
	public explicit_return_type "String"
	nparams 1
	  param inout name "key" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7022619 "containsKey"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "key" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7022747 "containsValue"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "value" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7022875 "remove"
	public explicit_return_type "String"
	nparams 1
	  param inout name "key" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 914971 "CheckedEntry"
	visibility private 
	nactuals 12
	actual class class_ref 136603 // Map
	  rank 0 explicit_value "string"
	actual class class_ref 136603 // Map
	  rank 1 explicit_value "string"
	actual class class_ref 136603 // Map
	  rank 2 explicit_value ""
	actual class class_ref 136603 // Map
	  rank 3 explicit_value ""
	actual class class_ref 136603 // Map
	  rank 4 explicit_value ""
	actual class class_ref 136603 // Map
	  rank 5 explicit_value ""
	actual class class_ref 136603 // Map
	  rank 6 explicit_value ""
	actual class class_ref 136603 // Map
	  rank 7 explicit_value ""
	actual class class_ref 136859 // Entry
	  rank 0 explicit_value ""
	actual class class_ref 136859 // Entry
	  rank 1 explicit_value ""
	actual class class_ref 136859 // Entry
	  rank 2 explicit_value ""
	actual class class_ref 136859 // Entry
	  rank 3 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1784475 // <realization>
	  relation 1784475 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 1784475 // <realization>
	    b parent class_ref 136859 // Entry
	end

	classrelation 1784603 // e (<unidirectional association>)
	  relation 1784603 --->
	    a role_name "e" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String,String> ${name}${value};
"
	      classrelation_ref 1784603 // e (<unidirectional association>)
	    b parent class_ref 136859 // Entry
	end

	operation 7023003 "CheckedEntry"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "e" type class_ref 136859 // Entry
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<String,String> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7023131 "getKey"
	  public explicit_return_type "String"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7023259 "getValue"
	  public explicit_return_type "String"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7023387 "setValue"
	  public explicit_return_type "String"
	  nparams 1
	    param in name "value" explicit_type "String"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7023515 "toString"
	  public explicit_return_type "String"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7023643 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7023771 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 915099 "CheckedEntrySet"
	visibility private 
	nactuals 4
	actual class class_ref 137499 // AbstractSet
	  rank 0 explicit_value "Map.Entry<String,String>"
	actual class class_ref 137499 // AbstractSet
	  rank 1 explicit_value ""
	actual class class_ref 137499 // AbstractSet
	  rank 2 explicit_value ""
	actual class class_ref 137499 // AbstractSet
	  rank 3 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1784731 // <realization>
	  relation 1784731 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 1784731 // <realization>
	    b parent class_ref 137499 // AbstractSet
	end

	classrelation 1784859 // s (<unidirectional association>)
	  relation 1784859 --->
	    a role_name "s" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Map.Entry<String,String>> ${name}${value};
"
	      classrelation_ref 1784859 // s (<unidirectional association>)
	    b parent class_ref 136731 // Set
	end

	operation 7023899 "CheckedEntrySet"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "s" type class_ref 136731 // Set
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<Map.Entry<String,String>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7024027 "size"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7024155 "isEmpty"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7024283 "clear"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7024411 "iterator"
	  public return_type class_ref 135323 // Iterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Map.Entry<String,String>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7024539 "checkedEntry"
	  class_operation private return_type class_ref 136859 // Entry
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String,String> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7024667 "contains"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7024795 "remove"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 915227 "CheckedValues"
	visibility private 
	nactuals 4
	actual class class_ref 134939 // AbstractCollection
	  rank 0 explicit_value "string"
	actual class class_ref 134939 // AbstractCollection
	  rank 1 explicit_value ""
	actual class class_ref 134939 // AbstractCollection
	  rank 2 explicit_value ""
	actual class class_ref 134939 // AbstractCollection
	  rank 3 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1784987 // <realization>
	  relation 1784987 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 1784987 // <realization>
	    b parent class_ref 134939 // AbstractCollection
	end

	classrelation 1785115 // c (<unidirectional association>)
	  relation 1785115 --->
	    a role_name "c" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String> ${name}${value};
"
	      classrelation_ref 1785115 // c (<unidirectional association>)
	    b parent class_ref 135067 // Collection
	end

	operation 7024923 "CheckedValues"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "c" type class_ref 135067 // Collection
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<String> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7025051 "size"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7025179 "isEmpty"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7025307 "clear"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7025435 "iterator"
	  public return_type class_ref 135323 // Iterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7025563 "contains"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7025691 "remove"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 915355 "CheckedKeySet"
	visibility private 
	nactuals 4
	actual class class_ref 137499 // AbstractSet
	  rank 0 explicit_value "string"
	actual class class_ref 137499 // AbstractSet
	  rank 1 explicit_value ""
	actual class class_ref 137499 // AbstractSet
	  rank 2 explicit_value ""
	actual class class_ref 137499 // AbstractSet
	  rank 3 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1785243 // <realization>
	  relation 1785243 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 1785243 // <realization>
	    b parent class_ref 137499 // AbstractSet
	end

	classrelation 1785371 // s (<unidirectional association>)
	  relation 1785371 --->
	    a role_name "s" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String> ${name}${value};
"
	      classrelation_ref 1785371 // s (<unidirectional association>)
	    b parent class_ref 136731 // Set
	end

	operation 7025819 "CheckedKeySet"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "s" type class_ref 136731 // Set
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<String> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7025947 "size"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7026075 "isEmpty"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7026203 "clear"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7026331 "iterator"
	  public return_type class_ref 135323 // Iterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7026459 "contains"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7026587 "remove"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 7026715 "keySet"
	public return_type class_ref 136731 // Set
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7026843 "values"
	public return_type class_ref 135067 // Collection
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7026971 "entrySet"
	public return_type class_ref 136731 // Set
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Map.Entry<String,String>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 915483 "NameComparator"
	visibility private 
	nactuals 4
	actual class class_ref 138139 // Comparator
	  rank 0 explicit_value "string"
	actual class class_ref 138139 // Comparator
	  rank 1 explicit_value ""
	actual class class_ref 138139 // Comparator
	  rank 2 explicit_value ""
	actual class class_ref 138139 // Comparator
	  rank 3 explicit_value ""
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1785499 // <realization>
	  relation 1785499 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 1785499 // <realization>
	    b parent class_ref 138139 // Comparator
	end

	operation 7027099 "compare"
	  public explicit_return_type "int"
	  nparams 2
	    param in name "s1" explicit_type "String"
	    param in name "s2" explicit_type "String"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 915611 "EntryComparator"
	visibility private 
	nactuals 4
	actual class class_ref 138139 // Comparator
	  rank 0 explicit_value "Map.Entry<String,String>"
	actual class class_ref 138139 // Comparator
	  rank 1 explicit_value ""
	actual class class_ref 138139 // Comparator
	  rank 2 explicit_value ""
	actual class class_ref 138139 // Comparator
	  rank 3 explicit_value ""
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1785627 // <realization>
	  relation 1785627 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 1785627 // <realization>
	    b parent class_ref 138139 // Comparator
	end

	operation 7027227 "compare"
	  public explicit_return_type "int"
	  nparams 2
	    param inout name "e1" type class_ref 136859 // Entry
	    param inout name "e2" type class_ref 136859 // Entry
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<String,String> ${p0}, ${t1}<String,String> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      attribute 2734619 "MIN_NAME_LENGTH"
	class_attribute const_attribute package explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Allow `=' as first char in name, e.g. =C:=C:\\DIR"
      end

      classrelation 1785755 // nameComparator (<unidirectional association>)
	relation 1785755 --->
	  a role_name "nameComparator" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1785755 // nameComparator (<unidirectional association>)
	  b parent class_ref 915483 // NameComparator
      end

      classrelation 1785883 // entryComparator (<unidirectional association>)
	relation 1785883 --->
	  a role_name "entryComparator" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1785883 // entryComparator (<unidirectional association>)
	  b parent class_ref 915611 // EntryComparator
      end

      classrelation 1786011 // theEnvironment (<unidirectional association>)
	relation 1786011 --->
	  a role_name "theEnvironment" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1786011 // theEnvironment (<unidirectional association>)
	  b parent class_ref 914843 // ProcessEnvironment
      end

      classrelation 1786139 // theUnmodifiableEnvironment (<unidirectional association>)
	relation 1786139 --->
	  a role_name "theUnmodifiableEnvironment" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String,String> ${name}${value};
"
	    classrelation_ref 1786139 // theUnmodifiableEnvironment (<unidirectional association>)
	  b parent class_ref 136603 // Map
      end

      classrelation 1786267 // theCaseInsensitiveEnvironment (<unidirectional association>)
	relation 1786267 --->
	  a role_name "theCaseInsensitiveEnvironment" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String,String> ${name}${value};
"
	    classrelation_ref 1786267 // theCaseInsensitiveEnvironment (<unidirectional association>)
	  b parent class_ref 136603 // Map
      end

      extra_member 162075 "initialization"
	
	cpp "" ""
	java "  static {
	nameComparator  = new NameComparator();
	entryComparator = new EntryComparator();
	theEnvironment  = new ProcessEnvironment();
	theUnmodifiableEnvironment
	    = Collections.unmodifiableMap(theEnvironment);

	String envblock = environmentBlock();
	int beg, end, eql;
	for (beg = 0;
	     ((end = envblock.indexOf('\\u0000', beg  )) != -1 &&
	      // An initial `=' indicates a magic Windows variable name -- OK
	      (eql = envblock.indexOf('='     , beg+1)) != -1);
	     beg = end + 1) {
	    // Ignore corrupted environment strings.
	    if (eql < end)
		theEnvironment.put(envblock.substring(beg, eql),
				   envblock.substring(eql+1,end));
	}

	theCaseInsensitiveEnvironment
	    = new TreeMap<String,String>(nameComparator);
	theCaseInsensitiveEnvironment.putAll(theEnvironment);
    }"
	php ""
	python ""
	idl ""
      end

      operation 7027355 "ProcessEnvironment"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7027483 "ProcessEnvironment"
	private explicit_return_type ""
	nparams 1
	  param in name "capacity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7027611 "getenv"
	class_operation package explicit_return_type "String"
	nparams 1
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Only for use by System.getenv(String)"
      end

      operation 7027739 "getenv"
	class_operation package return_type class_ref 136603 // Map
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String,String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Only for use by System.getenv()"
      end

      operation 7027867 "environment"
	class_operation package return_type class_ref 136603 // Map
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String,String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Only for use by ProcessBuilder.environment()"
      end

      operation 7027995 "emptyEnvironment"
	class_operation package return_type class_ref 136603 // Map
	nparams 1
	  param in name "capacity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String,String> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Only for use by Runtime.exec(...String[]envp...)"
      end

      operation 7028123 "environmentBlock"
	class_operation private explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7028251 "toEnvironmentBlock"
	package explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Only for use by ProcessImpl.start()"
      end

      operation 7028379 "toEnvironmentBlock"
	class_operation package explicit_return_type "String"
	nparams 1
	  param inout name "map" type class_ref 136603 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<String,String> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 915739 "ProcessImpl"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " This class is for the exclusive use of ProcessBuilder.start() to
create new processes.

@author Martin Buchholz
@version 1.30, 04/03/25
@since   1.5"
      classrelation 1786395 // <generalisation>
	relation 1786395 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1786395 // <generalisation>
	  b parent class_ref 173723 // Process
      end

      operation 7028507 "start"
	class_operation package return_type class_ref 173723 // Process
	nparams 4
	  param in name "cmdarray" explicit_type "String"
	  param inout name "environment" type class_ref 136603 // Map
	  param in name "dir" explicit_type "String"
	  param inout name "redirectErrorStream" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}<String,String> ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " System-dependent portion of ProcessBuilder.start()"
      end

      attribute 2734747 "handle"
	private explicit_type "long"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1786523 // stdin_fd (<unidirectional association>)
	relation 1786523 --->
	  a role_name "stdin_fd" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1786523 // stdin_fd (<unidirectional association>)
	  b parent class_ref 904475 // FileDescriptor
      end

      classrelation 1786651 // stdout_fd (<unidirectional association>)
	relation 1786651 --->
	  a role_name "stdout_fd" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1786651 // stdout_fd (<unidirectional association>)
	  b parent class_ref 904475 // FileDescriptor
      end

      classrelation 1786779 // stderr_fd (<unidirectional association>)
	relation 1786779 --->
	  a role_name "stderr_fd" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1786779 // stderr_fd (<unidirectional association>)
	  b parent class_ref 904475 // FileDescriptor
      end

      classrelation 1786907 // stdin_stream (<unidirectional association>)
	relation 1786907 --->
	  a role_name "stdin_stream" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1786907 // stdin_stream (<unidirectional association>)
	  b parent class_ref 183835 // OutputStream
      end

      classrelation 1787035 // stdout_stream (<unidirectional association>)
	relation 1787035 --->
	  a role_name "stdout_stream" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1787035 // stdout_stream (<unidirectional association>)
	  b parent class_ref 179099 // InputStream
      end

      classrelation 1787163 // stderr_stream (<unidirectional association>)
	relation 1787163 --->
	  a role_name "stderr_stream" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1787163 // stderr_stream (<unidirectional association>)
	  b parent class_ref 179099 // InputStream
      end

      operation 7028635 "ProcessImpl"
	private explicit_return_type ""
	nparams 4
	  param in name "cmd" explicit_type "String"
	  param in name "envblock" explicit_type "String"
	  param in name "path" explicit_type "String"
	  param inout name "redirectErrorStream" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7028763 "getOutputStream"
	public return_type class_ref 183835 // OutputStream
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7028891 "getInputStream"
	public return_type class_ref 179099 // InputStream
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7029019 "getErrorStream"
	public return_type class_ref 179099 // InputStream
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7029147 "finalize"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7029275 "exitValue"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7029403 "waitFor"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7029531 "destroy"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7029659 "create"
	private explicit_return_type "long"
	nparams 7
	  param in name "cmdstr" explicit_type "String"
	  param in name "envblock" explicit_type "String"
	  param in name "dir" explicit_type "String"
	  param inout name "redirectErrorStream" explicit_type "boolean"
	  param inout name "in_fd" type class_ref 904475 // FileDescriptor
	  param inout name "out_fd" type class_ref 904475 // FileDescriptor
	  param inout name "err_fd" type class_ref 904475 // FileDescriptor
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7029787 "close"
	private explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 915867 "Runtime"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Every Java application has a single instance of class 
<code>Runtime</code> that allows the application to interface with 
the environment in which the application is running. The current 
runtime can be obtained from the <code>getRuntime</code> method. 
<p>
An application cannot create its own instance of this class. 

@author  unascribed
@version 1.74, 05/18/04
@see     java.lang.Runtime#getRuntime()
@since   JDK1.0"
      classrelation 1787291 // currentRuntime (<unidirectional association>)
	relation 1787291 --->
	  a role_name "currentRuntime" init_value "=  new Runtime()" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1787291 // currentRuntime (<unidirectional association>)
	  b parent class_ref 915867 // Runtime
      end

      operation 7029915 "getRuntime"
	class_operation public return_type class_ref 915867 // Runtime
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the runtime object associated with the current Java application.
Most of the methods of class <code>Runtime</code> are instance 
methods and must be invoked with respect to the current runtime object. 

@return  the <code>Runtime</code> object associated with the current
         Java application."
      end

      operation 7030043 "Runtime"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Don't let anyone else instantiate this class "
      end

      operation 7030171 "exit"
	public explicit_return_type "void"
	nparams 1
	  param in name "status" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Terminates the currently running Java virtual machine by initiating its
shutdown sequence.  This method never returns normally.  The argument
serves as a status code; by convention, a nonzero status code indicates
abnormal termination.

<p> The virtual machine's shutdown sequence consists of two phases.  In
the first phase all registered {@link #addShutdownHook shutdown hooks},
if any, are started in some unspecified order and allowed to run
concurrently until they finish.  In the second phase all uninvoked
finalizers are run if {@link #runFinalizersOnExit finalization-on-exit}
has been enabled.  Once this is done the virtual machine {@link #halt
halts}.

<p> If this method is invoked after the virtual machine has begun its
shutdown sequence then if shutdown hooks are being run this method will
block indefinitely.  If shutdown hooks have already been run and on-exit
finalization has been enabled then this method halts the virtual machine
with the given status code if the status is nonzero; otherwise, it
blocks indefinitely.

<p> The <tt>{@link System#exit(int) System.exit}</tt> method is the
conventional and convenient means of invoking this method. <p>

@param  status
        Termination status.  By convention, a nonzero status code
        indicates abnormal termination.

@throws SecurityException
        If a security manager is present and its <tt>{@link
        SecurityManager#checkExit checkExit}</tt> method does not permit
        exiting with the specified status

@see java.lang.SecurityException
@see java.lang.SecurityManager#checkExit(int)
@see #addShutdownHook
@see #removeShutdownHook
@see #runFinalizersOnExit
@see #halt(int)"
      end

      operation 7030299 "addShutdownHook"
	public explicit_return_type "void"
	nparams 1
	  param inout name "hook" type class_ref 163227 // Thread
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers a new virtual-machine shutdown hook.

<p> The Java virtual machine <i>shuts down</i> in response to two kinds
of events:

  <ul>

  <p> <li> The program <i>exits</i> normally, when the last non-daemon
  thread exits or when the <tt>{@link #exit exit}</tt> (equivalently,
  <tt>{@link System#exit(int) System.exit}</tt>) method is invoked, or

  <p> <li> The virtual machine is <i>terminated</i> in response to a
  user interrupt, such as typing <tt>^C</tt>, or a system-wide event,
  such as user logoff or system shutdown.

  </ul>

<p> A <i>shutdown hook</i> is simply an initialized but unstarted
thread.  When the virtual machine begins its shutdown sequence it will
start all registered shutdown hooks in some unspecified order and let
them run concurrently.  When all the hooks have finished it will then
run all uninvoked finalizers if finalization-on-exit has been enabled.
Finally, the virtual machine will halt.  Note that daemon threads will
continue to run during the shutdown sequence, as will non-daemon threads
if shutdown was initiated by invoking the <tt>{@link #exit exit}</tt>
method.

<p> Once the shutdown sequence has begun it can be stopped only by
invoking the <tt>{@link #halt halt}</tt> method, which forcibly
terminates the virtual machine.

<p> Once the shutdown sequence has begun it is impossible to register a
new shutdown hook or de-register a previously-registered hook.
Attempting either of these operations will cause an
<tt>{@link IllegalStateException}</tt> to be thrown.

<p> Shutdown hooks run at a delicate time in the life cycle of a virtual
machine and should therefore be coded defensively.  They should, in
particular, be written to be thread-safe and to avoid deadlocks insofar
as possible.  They should also not rely blindly upon services that may
have registered their own shutdown hooks and therefore may themselves in
the process of shutting down.

<p> Shutdown hooks should also finish their work quickly.  When a
program invokes <tt>{@link #exit exit}</tt> the expectation is
that the virtual machine will promptly shut down and exit.  When the
virtual machine is terminated due to user logoff or system shutdown the
underlying operating system may only allow a fixed amount of time in
which to shut down and exit.  It is therefore inadvisable to attempt any
user interaction or to perform a long-running computation in a shutdown
hook.

<p> Uncaught exceptions are handled in shutdown hooks just as in any
other thread, by invoking the <tt>{@link ThreadGroup#uncaughtException
uncaughtException}</tt> method of the thread's <tt>{@link
ThreadGroup}</tt> object.  The default implementation of this method
prints the exception's stack trace to <tt>{@link System#err}</tt> and
terminates the thread; it does not cause the virtual machine to exit or
halt.

<p> In rare circumstances the virtual machine may <i>abort</i>, that is,
stop running without shutting down cleanly.  This occurs when the
virtual machine is terminated externally, for example with the
<tt>SIGKILL</tt> signal on Unix or the <tt>TerminateProcess</tt> call on
Microsoft Windows.  The virtual machine may also abort if a native method goes awry
by, for example, corrupting internal data structures or attempting to
access nonexistent memory.  If the virtual machine aborts then no
guarantee can be made about whether or not any shutdown hooks will be
run. <p>

@param   hook
         An initialized but unstarted <tt>{@link Thread}</tt> object

@throws  IllegalArgumentException
         If the specified hook has already been registered,
         or if it can be determined that the hook is already running or
         has already been run

@throws  IllegalStateException
         If the virtual machine is already in the process
         of shutting down

@throws  SecurityException
         If a security manager is present and it denies
         <tt>{@link RuntimePermission}(\"shutdownHooks\")</tt>

@see #removeShutdownHook
@see #halt(int)
@see #exit(int)
@since 1.3"
      end

      operation 7030427 "removeShutdownHook"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "hook" type class_ref 163227 // Thread
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "De-registers a previously-registered virtual-machine shutdown hook. <p>

@param hook the hook to remove
@return <tt>true</tt> if the specified hook had previously been
registered and was successfully de-registered, <tt>false</tt>
otherwise.

@throws  IllegalStateException
         If the virtual machine is already in the process of shutting
         down

@throws  SecurityException
         If a security manager is present and it denies
         <tt>{@link RuntimePermission}(\"shutdownHooks\")</tt>

@see #addShutdownHook
@see #exit(int)
@since 1.3"
      end

      operation 7030555 "halt"
	public explicit_return_type "void"
	nparams 1
	  param in name "status" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Forcibly terminates the currently running Java virtual machine.  This
method never returns normally.

<p> This method should be used with extreme caution.  Unlike the
<tt>{@link #exit exit}</tt> method, this method does not cause shutdown
hooks to be started and does not run uninvoked finalizers if
finalization-on-exit has been enabled.  If the shutdown sequence has
already been initiated then this method does not wait for any running
shutdown hooks or finalizers to finish their work. <p>

@param  status
        Termination status.  By convention, a nonzero status code
        indicates abnormal termination.  If the <tt>{@link Runtime#exit
        exit}</tt> (equivalently, <tt>{@link System#exit(int)
        System.exit}</tt>) method has already been invoked then this
        status code will override the status code passed to that method.

@throws SecurityException
        If a security manager is present and its <tt>{@link
        SecurityManager#checkExit checkExit}</tt> method does not permit
        an exit with the specified status

@see #exit
@see #addShutdownHook
@see #removeShutdownHook
@since 1.3"
      end

      operation 7030683 "runFinalizersOnExit"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "value" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Enable or disable finalization on exit; doing so specifies that the
finalizers of all objects that have finalizers that have not yet been
automatically invoked are to be run before the Java runtime exits.
By default, finalization on exit is disabled.

<p>If there is a security manager, 
its <code>checkExit</code> method is first called
with 0 as its argument to ensure the exit is allowed. 
This could result in a SecurityException.

@param value true to enable finalization on exit, false to disable
@deprecated  This method is inherently unsafe.  It may result in
	    finalizers being called on live objects while other threads are
     concurrently manipulating those objects, resulting in erratic
	    behavior or deadlock.

@throws  SecurityException
       if a security manager exists and its <code>checkExit</code> 
       method doesn't allow the exit.

@see     java.lang.Runtime#exit(int)
@see     java.lang.Runtime#gc()
@see     java.lang.SecurityManager#checkExit(int)
@since   JDK1.1"
      end

      operation 7030811 "exec"
	public return_type class_ref 173723 // Process
	nparams 1
	  param in name "command" explicit_type "String"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the specified string command in a separate process.

<p>This is a convenience method.  An invocation of the form
<tt>exec(command)</tt>
behaves in exactly the same way as the invocation
<tt>{@link #exec(String, String[], File) exec}(command, null, null)</tt>.

@param   command   a specified system command.

@return  A new {@link Process} object for managing the subprocess

@throws  SecurityException
         If a security manager exists and its
         {@link SecurityManager#checkExec checkExec}
         method doesn't allow creation of the subprocess

@throws  IOException
         If an I/O error occurs

@throws  NullPointerException
         If <code>command</code> is <code>null</code>

@throws  IllegalArgumentException
         If <code>command</code> is empty

@see     #exec(String[], String[], File)
@see     ProcessBuilder"
      end

      operation 7030939 "exec"
	public return_type class_ref 173723 // Process
	nparams 2
	  param in name "command" explicit_type "String"
	  param in name "envp" explicit_type "String"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the specified string command in a separate process with the
specified environment.

<p>This is a convenience method.  An invocation of the form
<tt>exec(command, envp)</tt>
behaves in exactly the same way as the invocation
<tt>{@link #exec(String, String[], File) exec}(command, envp, null)</tt>.

@param   command   a specified system command.

@param   envp      array of strings, each element of which
                   has environment variable settings in the format
                   <i>name</i>=<i>value</i>, or
                   <tt>null</tt> if the subprocess should inherit
                   the environment of the current process.

@return  A new {@link Process} object for managing the subprocess

@throws  SecurityException
         If a security manager exists and its
         {@link SecurityManager#checkExec checkExec}
         method doesn't allow creation of the subprocess

@throws  IOException
         If an I/O error occurs

@throws  NullPointerException
         If <code>command</code> is <code>null</code>,
         or one of the elements of <code>envp</code> is <code>null</code>

@throws  IllegalArgumentException
         If <code>command</code> is empty

@see     #exec(String[], String[], File)
@see     ProcessBuilder"
      end

      operation 7031067 "exec"
	public return_type class_ref 173723 // Process
	nparams 3
	  param in name "command" explicit_type "String"
	  param in name "envp" explicit_type "String"
	  param inout name "dir" type class_ref 165147 // File
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the specified string command in a separate process with the
specified environment and working directory.

<p>This is a convenience method.  An invocation of the form
<tt>exec(command, envp, dir)</tt>
behaves in exactly the same way as the invocation
<tt>{@link #exec(String[], String[], File) exec}(cmdarray, envp, dir)</tt>,
where <code>cmdarray</code> is an array of all the tokens in
<code>command</code>.

<p>More precisely, the <code>command</code> string is broken
into tokens using a {@link StringTokenizer} created by the call
<code>new {@link StringTokenizer}(command)</code> with no
further modification of the character categories.  The tokens
produced by the tokenizer are then placed in the new string
array <code>cmdarray</code>, in the same order.

@param   command   a specified system command.

@param   envp      array of strings, each element of which
                   has environment variable settings in the format
                   <i>name</i>=<i>value</i>, or
                   <tt>null</tt> if the subprocess should inherit
                   the environment of the current process.

@param   dir       the working directory of the subprocess, or
                   <tt>null</tt> if the subprocess should inherit
                   the working directory of the current process.

@return  A new {@link Process} object for managing the subprocess

@throws  SecurityException
         If a security manager exists and its
         {@link SecurityManager#checkExec checkExec}
         method doesn't allow creation of the subprocess

@throws  IOException
         If an I/O error occurs

@throws  NullPointerException
         If <code>command</code> is <code>null</code>,
         or one of the elements of <code>envp</code> is <code>null</code>

@throws  IllegalArgumentException
         If <code>command</code> is empty

@see     ProcessBuilder
@since 1.3"
      end

      operation 7031195 "exec"
	public return_type class_ref 173723 // Process
	nparams 1
	  param in name "cmdarray" explicit_type "String"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the specified command and arguments in a separate process.

<p>This is a convenience method.  An invocation of the form
<tt>exec(cmdarray)</tt>
behaves in exactly the same way as the invocation
<tt>{@link #exec(String[], String[], File) exec}(cmdarray, null, null)</tt>.

@param   cmdarray  array containing the command to call and
                   its arguments.

@return  A new {@link Process} object for managing the subprocess

@throws  SecurityException
         If a security manager exists and its
         {@link SecurityManager#checkExec checkExec}
         method doesn't allow creation of the subprocess

@throws  IOException
         If an I/O error occurs

@throws  NullPointerException
         If <code>cmdarray</code> is <code>null</code>,
         or one of the elements of <code>cmdarray</code> is <code>null</code>

@throws  IndexOutOfBoundsException
         If <code>cmdarray</code> is an empty array
         (has length <code>0</code>)

@see     ProcessBuilder"
      end

      operation 7031323 "exec"
	public return_type class_ref 173723 // Process
	nparams 2
	  param in name "cmdarray" explicit_type "String"
	  param in name "envp" explicit_type "String"
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the specified command and arguments in a separate process
with the specified environment.

<p>This is a convenience method.  An invocation of the form
<tt>exec(cmdarray, envp)</tt>
behaves in exactly the same way as the invocation
<tt>{@link #exec(String[], String[], File) exec}(cmdarray, envp, null)</tt>.

@param   cmdarray  array containing the command to call and
                   its arguments.

@param   envp      array of strings, each element of which
                   has environment variable settings in the format
                   <i>name</i>=<i>value</i>, or
                   <tt>null</tt> if the subprocess should inherit
                   the environment of the current process.

@return  A new {@link Process} object for managing the subprocess

@throws  SecurityException
         If a security manager exists and its
         {@link SecurityManager#checkExec checkExec}
         method doesn't allow creation of the subprocess

@throws  IOException
         If an I/O error occurs

@throws  NullPointerException
         If <code>cmdarray</code> is <code>null</code>,
         or one of the elements of <code>cmdarray</code> is <code>null</code>,
         or one of the elements of <code>envp</code> is <code>null</code>

@throws  IndexOutOfBoundsException
         If <code>cmdarray</code> is an empty array
         (has length <code>0</code>)

@see     ProcessBuilder"
      end

      operation 7031451 "exec"
	public return_type class_ref 173723 // Process
	nparams 3
	  param in name "cmdarray" explicit_type "String"
	  param in name "envp" explicit_type "String"
	  param inout name "dir" type class_ref 165147 // File
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the specified command and arguments in a separate process with
the specified environment and working directory.

<p>Given an array of strings <code>cmdarray</code>, representing the
tokens of a command line, and an array of strings <code>envp</code>,
representing \"environment\" variable settings, this method creates
a new process in which to execute the specified command.

<p>This method checks that <code>cmdarray</code> is a valid operating
system command.  Which commands are valid is system-dependent,
but at the very least the command must be a non-empty list of
non-null strings.

<p>If <tt>envp</tt> is <tt>null</tt>, the subprocess inherits the
environment settings of the current process.

<p>{@link ProcessBuilder#start()} is now the preferred way to
start a process with a modified environment.

<p>The working directory of the new subprocess is specified by <tt>dir</tt>.
If <tt>dir</tt> is <tt>null</tt>, the subprocess inherits the
current working directory of the current process.

<p>If a security manager exists, its
{@link SecurityManager#checkExec checkExec}
method is invoked with the first component of the array
<code>cmdarray</code> as its argument. This may result in a
{@link SecurityException} being thrown.

<p>Starting an operating system process is highly system-dependent.
Among the many things that can go wrong are:
<ul>
<li>The operating system program file was not found.
<li>Access to the program file was denied.
<li>The working directory does not exist.
</ul>

<p>In such cases an exception will be thrown.  The exact nature
of the exception is system-dependent, but it will always be a
subclass of {@link IOException}.


@param   cmdarray  array containing the command to call and
                   its arguments.

@param   envp      array of strings, each element of which
                   has environment variable settings in the format
                   <i>name</i>=<i>value</i>, or
                   <tt>null</tt> if the subprocess should inherit
                   the environment of the current process.

@param   dir       the working directory of the subprocess, or
                   <tt>null</tt> if the subprocess should inherit
                   the working directory of the current process.

@return  A new {@link Process} object for managing the subprocess

@throws  SecurityException
         If a security manager exists and its
         {@link SecurityManager#checkExec checkExec}
         method doesn't allow creation of the subprocess

@throws  IOException
         If an I/O error occurs

@throws  NullPointerException
         If <code>cmdarray</code> is <code>null</code>,
         or one of the elements of <code>cmdarray</code> is <code>null</code>,
         or one of the elements of <code>envp</code> is <code>null</code>

@throws  IndexOutOfBoundsException
         If <code>cmdarray</code> is an empty array
         (has length <code>0</code>)

@see     ProcessBuilder
@since 1.3"
      end

      operation 7031579 "availableProcessors"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of processors available to the Java virtual machine.

<p> This value may change during a particular invocation of the virtual
machine.  Applications that are sensitive to the number of available
processors should therefore occasionally poll this property and adjust
their resource usage appropriately. </p>

@return  the maximum number of processors available to the virtual
         machine; never smaller than one
@since 1.4"
      end

      operation 7031707 "freeMemory"
	public explicit_return_type "long"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the amount of free memory in the Java Virtual Machine.
Calling the 
<code>gc</code> method may result in increasing the value returned 
by <code>freeMemory.</code>

@return  an approximation to the total amount of memory currently
         available for future allocated objects, measured in bytes."
      end

      operation 7031835 "totalMemory"
	public explicit_return_type "long"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the total amount of memory in the Java virtual machine.
The value returned by this method may vary over time, depending on 
the host environment.
<p>
Note that the amount of memory required to hold an object of any 
given type may be implementation-dependent.

@return  the total amount of memory currently available for current 
         and future objects, measured in bytes."
      end

      operation 7031963 "maxMemory"
	public explicit_return_type "long"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maximum amount of memory that the Java virtual machine will
attempt to use.  If there is no inherent limit then the value {@link
java.lang.Long#MAX_VALUE} will be returned. </p>

@return  the maximum amount of memory that the virtual machine will
         attempt to use, measured in bytes
@since 1.4"
      end

      operation 7032091 "gc"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Runs the garbage collector.
Calling this method suggests that the Java virtual machine expend 
effort toward recycling unused objects in order to make the memory 
they currently occupy available for quick reuse. When control 
returns from the method call, the virtual machine has made 
its best effort to recycle all discarded objects. 
<p>
The name <code>gc</code> stands for \"garbage 
collector\". The virtual machine performs this recycling 
process automatically as needed, in a separate thread, even if the 
<code>gc</code> method is not invoked explicitly.
<p>
The method {@link System#gc()} is the conventional and convenient 
means of invoking this method. "
      end

      operation 7032219 "runFinalization0"
	class_operation private explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Wormhole for calling java.lang.ref.Finalizer.runFinalization "
      end

      operation 7032347 "runFinalization"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Runs the finalization methods of any objects pending finalization.
Calling this method suggests that the Java virtual machine expend 
effort toward running the <code>finalize</code> methods of objects 
that have been found to be discarded but whose <code>finalize</code> 
methods have not yet been run. When control returns from the 
method call, the virtual machine has made a best effort to 
complete all outstanding finalizations. 
<p>
The virtual machine performs the finalization process 
automatically as needed, in a separate thread, if the 
<code>runFinalization</code> method is not invoked explicitly. 
<p>
The method {@link System#runFinalization()} is the conventional 
and convenient means of invoking this method.

@see     java.lang.Object#finalize()"
      end

      operation 7032475 "traceInstructions"
	public explicit_return_type "void"
	nparams 1
	  param inout name "on" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enables/Disables tracing of instructions.
If the <code>boolean</code> argument is <code>true</code>, this 
method suggests that the Java virtual machine emit debugging 
information for each instruction in the virtual machine as it 
is executed. The format of this information, and the file or other 
output stream to which it is emitted, depends on the host environment. 
The virtual machine may ignore this request if it does not support 
this feature. The destination of the trace output is system 
dependent. 
<p>
If the <code>boolean</code> argument is <code>false</code>, this 
method causes the virtual machine to stop performing the 
detailed instruction trace it is performing.

@param   on   <code>true</code> to enable instruction tracing;
              <code>false</code> to disable this feature."
      end

      operation 7032603 "traceMethodCalls"
	public explicit_return_type "void"
	nparams 1
	  param inout name "on" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enables/Disables tracing of method calls.
If the <code>boolean</code> argument is <code>true</code>, this 
method suggests that the Java virtual machine emit debugging 
information for each method in the virtual machine as it is 
called. The format of this information, and the file or other output 
stream to which it is emitted, depends on the host environment. The 
virtual machine may ignore this request if it does not support 
this feature.  
<p>
Calling this method with argument false suggests that the
virtual machine cease emitting per-call debugging information.

@param   on   <code>true</code> to enable instruction tracing;
              <code>false</code> to disable this feature."
      end

      operation 7032731 "load"
	public explicit_return_type "void"
	nparams 1
	  param in name "filename" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Loads the specified filename as a dynamic library. The filename 
argument must be a complete path name. 
From <code>java_g</code> it will automagically insert \"_g\" before the
\".so\" (for example
<code>Runtime.getRuntime().load(\"/home/avh/lib/libX11.so\");</code>).
<p>
First, if there is a security manager, its <code>checkLink</code> 
method is called with the <code>filename</code> as its argument. 
This may result in a security exception. 
<p>
This is similar to the method {@link #loadLibrary(String)}, but it 
accepts a general file name as an argument rather than just a library 
name, allowing any file of native code to be loaded.
<p>
The method {@link System#load(String)} is the conventional and 
convenient means of invoking this method.

@param      filename   the file to load.
@exception  SecurityException  if a security manager exists and its  
            <code>checkLink</code> method doesn't allow 
            loading of the specified dynamic library
@exception  UnsatisfiedLinkError  if the file does not exist.
@exception  NullPointerException if <code>filename</code> is
            <code>null</code>
@see        java.lang.Runtime#getRuntime()
@see        java.lang.SecurityException
@see        java.lang.SecurityManager#checkLink(java.lang.String)"
      end

      operation 7032859 "load0"
	package explicit_return_type "void"
	nparams 2
	  param inout name "fromClass" type class_ref 164635 // Class
	  param in name "filename" explicit_type "String"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7032987 "loadLibrary"
	public explicit_return_type "void"
	nparams 1
	  param in name "libname" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Loads the dynamic library with the specified library name. 
A file containing native code is loaded from the local file system 
from a place where library files are conventionally obtained. The 
details of this process are implementation-dependent. The 
mapping from a library name to a specific filename is done in a 
system-specific manner. 
<p>
First, if there is a security manager, its <code>checkLink</code> 
method is called with the <code>libname</code> as its argument. 
This may result in a security exception. 
<p>
The method {@link System#loadLibrary(String)} is the conventional 
and convenient means of invoking this method. If native
methods are to be used in the implementation of a class, a standard 
strategy is to put the native code in a library file (call it 
<code>LibFile</code>) and then to put a static initializer:
<blockquote><pre>
static { System.loadLibrary(\"LibFile\"); }
</pre></blockquote>
within the class declaration. When the class is loaded and 
initialized, the necessary native code implementation for the native 
methods will then be loaded as well. 
<p>
If this method is called more than once with the same library 
name, the second and subsequent calls are ignored. 

@param      libname   the name of the library.
@exception  SecurityException  if a security manager exists and its  
            <code>checkLink</code> method doesn't allow 
            loading of the specified dynamic library
@exception  UnsatisfiedLinkError  if the library does not exist.
@exception  NullPointerException if <code>libname</code> is
            <code>null</code>
@see        java.lang.SecurityException
@see        java.lang.SecurityManager#checkLink(java.lang.String)"
      end

      operation 7033115 "loadLibrary0"
	package explicit_return_type "void"
	nparams 2
	  param inout name "fromClass" type class_ref 164635 // Class
	  param in name "libname" explicit_type "String"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7033243 "getLocalizedInputStream"
	public return_type class_ref 179099 // InputStream
	nparams 1
	  param inout name "in" type class_ref 179099 // InputStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Creates a localized version of an input stream. This method takes 
an <code>InputStream</code> and returns an <code>InputStream</code> 
equivalent to the argument in all respects except that it is 
localized: as characters in the local character set are read from 
the stream, they are automatically converted from the local 
character set to Unicode. 
<p>
If the argument is already a localized stream, it may be returned 
as the result. 

@param      in InputStream to localize
@return     a localized input stream
@see        java.io.InputStream
@see        java.io.BufferedReader#BufferedReader(java.io.Reader)
@see        java.io.InputStreamReader#InputStreamReader(java.io.InputStream)
@deprecated As of JDK&nbsp;1.1, the preferred way to translate a byte
stream in the local encoding into a character stream in Unicode is via
the <code>InputStreamReader</code> and <code>BufferedReader</code>
classes."
      end

      operation 7033371 "getLocalizedOutputStream"
	public return_type class_ref 183835 // OutputStream
	nparams 1
	  param inout name "out" type class_ref 183835 // OutputStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Creates a localized version of an output stream. This method 
takes an <code>OutputStream</code> and returns an 
<code>OutputStream</code> equivalent to the argument in all respects 
except that it is localized: as Unicode characters are written to 
the stream, they are automatically converted to the local 
character set. 
<p>
If the argument is already a localized stream, it may be returned 
as the result. 

@deprecated As of JDK&nbsp;1.1, the preferred way to translate a
Unicode character stream into a byte stream in the local encoding is via
the <code>OutputStreamWriter</code>, <code>BufferedWriter</code>, and
<code>PrintWriter</code> classes.

@param      out OutputStream to localize
@return     a localized output stream
@see        java.io.OutputStream
@see        java.io.BufferedWriter#BufferedWriter(java.io.Writer)
@see        java.io.OutputStreamWriter#OutputStreamWriter(java.io.OutputStream)
@see        java.io.PrintWriter#PrintWriter(java.io.OutputStream)"
      end
    end

    class 915995 "Short"
      visibility public 
      nactuals 3
      actual class class_ref 221467 // Comparable
        rank 0 value class_ref 915995 // Short
      actual class class_ref 221467 // Comparable
        rank 1 explicit_value ""
      actual class class_ref 221467 // Comparable
        rank 2 explicit_value ""
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The <code>Short</code> class wraps a value of primitive type
<code>short</code> in an object.  An object of type
<code>Short</code> contains a single field whose type is
<code>short</code>.

<p>

In addition, this class provides several methods for converting a
<code>short</code> to a <code>String</code> and a
<code>String</code> to a <code>short</code>, as well as other
constants and methods useful when dealing with a <code>short</code>.

@author  Nakul Saraiya
@version 1.43, 05/11/04
@see     java.lang.Number
@since   JDK1.1"
      classrelation 1787803 // <generalisation>
	relation 1787803 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1787803 // <generalisation>
	  b parent class_ref 413979 // Number
      end

      classrelation 1787931 // <realization>
	relation 1787931 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 1787931 // <realization>
	  b parent class_ref 221467 // Comparable
      end

      attribute 2736155 "MIN_VALUE"
	class_attribute const_attribute public explicit_type "short"
	init_value "=  -32768"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A constant holding the minimum value a <code>short</code> can
have, -2<sup>15</sup>.
"
      end

      attribute 2736283 "MAX_VALUE"
	class_attribute const_attribute public explicit_type "short"
	init_value "=  32767"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A constant holding the maximum value a <code>short</code> can
have, 2<sup>15</sup>-1.
"
      end

      classrelation 1788059 // TYPE (<unidirectional association>)
	relation 1788059 --->
	  a role_name "TYPE" init_value "=  (Class<Short>) Class.getPrimitiveClass(\"short\")" class_relation const_relation public
	    comment "
The <code>Class</code> instance representing the primitive type
<code>short</code>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Short> ${name}${value};
"
	    classrelation_ref 1788059 // TYPE (<unidirectional association>)
	  b parent class_ref 164635 // Class
      end

      operation 7040411 "toString"
	class_operation public explicit_return_type "String"
	nparams 1
	  param in name "s" explicit_type "short"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new <code>String</code> object representing the
specified <code>short</code>. The radix is assumed to be 10.

@param s the <code>short</code> to be converted
@return the string representation of the specified <code>short</code>
@see java.lang.Integer#toString(int)"
      end

      operation 7040539 "parseShort"
	class_operation public explicit_return_type "short"
	nparams 1
	  param in name "s" explicit_type "String"
	nexceptions 1
	  exception class_ref 533659 // NumberFormatException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parses the string argument as a signed decimal
<code>short</code>. The characters in the string must all be
decimal digits, except that the first character may be an ASCII
minus sign <code>'-'</code> (<code>'&#92;u002D'</code>) to
indicate a negative value. The resulting <code>short</code> value is
returned, exactly as if the argument and the radix 10 were
given as arguments to the {@link #parseShort(java.lang.String,
int)} method.

@param s		a <code>String</code> containing the <code>short</code>
                 representation to be parsed
@return          the <code>short</code> value represented by the 
                 argument in decimal.
@exception	NumberFormatException If the string does not
			contain a parsable <code>short</code>."
      end

      operation 7040667 "parseShort"
	class_operation public explicit_return_type "short"
	nparams 2
	  param in name "s" explicit_type "String"
	  param in name "radix" explicit_type "int"
	nexceptions 1
	  exception class_ref 533659 // NumberFormatException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parses the string argument as a signed <code>short</code> in
the radix specified by the second argument. The characters in
the string must all be digits, of the specified radix (as
determined by whether {@link java.lang.Character#digit(char,
int)} returns a nonnegative value) except that the first
character may be an ASCII minus sign <code>'-'</code>
(<code>'&#92;u002D'</code>) to indicate a negative value.  The
resulting <code>byte</code> value is returned.
<p>
An exception of type <code>NumberFormatException</code> is
thrown if any of the following situations occurs:
<ul>
<li> The first argument is <code>null</code> or is a string of
length zero.

<li> The radix is either smaller than {@link
java.lang.Character#MIN_RADIX} or larger than {@link
java.lang.Character#MAX_RADIX}.

<li> Any character of the string is not a digit of the specified
radix, except that the first character may be a minus sign
<code>'-'</code> (<code>'&#92;u002D'</code>) provided that the
string is longer than length 1.

<li> The value represented by the string is not a value of type
<code>short</code>.
</ul>

@param s		the <code>String</code> containing the 
			<code>short</code> representation to be parsed
@param radix	the radix to be used while parsing <code>s</code>
@return     	the <code>short</code> represented by the string 
            	argument in the specified radix.
@exception	NumberFormatException If the <code>String</code> 
			does not contain a parsable <code>short</code>."
      end

      operation 7040795 "valueOf"
	class_operation public return_type class_ref 915995 // Short
	nparams 2
	  param in name "s" explicit_type "String"
	  param in name "radix" explicit_type "int"
	nexceptions 1
	  exception class_ref 533659 // NumberFormatException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>Short</code> object holding the value
extracted from the specified <code>String</code> when parsed
with the radix given by the second argument. The first argument
is interpreted as representing a signed <code>short</code> in
the radix specified by the second argument, exactly as if the
argument were given to the {@link #parseShort(java.lang.String,
int)} method. The result is a <code>Short</code> object that
represents the <code>short</code> value specified by the string.
<p> In other words, this method returns a <code>Short</code> object
equal to the value of:

<blockquote><code>
new Short(Short.parseShort(s, radix))
</code></blockquote>

@param s		the string to be parsed
@param radix 	the radix to be used in interpreting <code>s</code>
@return          a <code>Short</code> object holding the value 
			represented by the string argument in the 
			specified radix.
@exception	NumberFormatException If the <code>String</code> does
			not contain a parsable <code>short</code>."
      end

      operation 7040923 "valueOf"
	class_operation public return_type class_ref 915995 // Short
	nparams 1
	  param in name "s" explicit_type "String"
	nexceptions 1
	  exception class_ref 533659 // NumberFormatException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>Short</code> object holding the
value given by the specified <code>String</code>. The argument
is interpreted as representing a signed decimal
<code>short</code>, exactly as if the argument were given to
the {@link #parseShort(java.lang.String)} method. The result is
a <code>Short</code> object that represents the
<code>short</code> value specified by the string.  <p> In other
words, this method returns a <code>Byte</code> object equal to
the value of:

<blockquote><code>
new Short(Short.parseShort(s))
</code></blockquote>

@param s		the string to be parsed
@return          a <code>Short</code> object holding the value
			represented by the string argument
@exception	NumberFormatException If the <code>String</code> does
			not contain a parsable <code>short</code>."
      end

      class 916123 "ShortCache"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 7041051 "ShortCache"
	  private explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	classrelation 1788187 // cache (<unidirectional association>)
	  relation 1788187 --->
	    a role_name "cache" multiplicity "[]" init_value "=  new Short[-(-128) + 127 + 1]" class_relation const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 1788187 // cache (<unidirectional association>)
	    b parent class_ref 915995 // Short
	end

	extra_member 162203 "initialization"
	  
	  cpp "" ""
	  java "  static {
	    for(int i = 0; i < cache.length; i++)
		cache[i] = new Short((short)(i - 128));
	}"
	  php ""
	  python ""
	  idl ""
	end
      end

      operation 7041179 "valueOf"
	class_operation public return_type class_ref 915995 // Short
	nparams 1
	  param in name "s" explicit_type "short"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <tt>Short</tt> instance representing the specified
<tt>short</tt> value.
If a new <tt>Short</tt> instance is not required, this method
should generally be used in preference to the constructor
{@link #Short(short)}, as this method is likely to yield
significantly better space and time performance by caching
frequently requested values.

@param  s a short value.
@return a <tt>Short</tt> instance representing <tt>s</tt>.
@since  1.5"
      end

      operation 7041307 "decode"
	class_operation public return_type class_ref 915995 // Short
	nparams 1
	  param in name "nm" explicit_type "String"
	nexceptions 1
	  exception class_ref 533659 // NumberFormatException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Decodes a <code>String</code> into a <code>Short</code>.
Accepts decimal, hexadecimal, and octal numbers given by
the following grammar:

<blockquote>
<dl>
<dt><i>DecodableString:</i>
<dd><i>Sign<sub>opt</sub> DecimalNumeral</i>
<dd><i>Sign<sub>opt</sub></i> <code>0x</code> <i>HexDigits</i>
<dd><i>Sign<sub>opt</sub></i> <code>0X</code> <i>HexDigits</i>
<dd><i>Sign<sub>opt</sub></i> <code>#</code> <i>HexDigits</i>
<dd><i>Sign<sub>opt</sub></i> <code>0</code> <i>OctalDigits</i>
<p>
<dt><i>Sign:</i>
<dd><code>-</code>
</dl>
</blockquote>

<i>DecimalNumeral</i>, <i>HexDigits</i>, and <i>OctalDigits</i>
are defined in <a href=\"http://java.sun.com/docs/books/jls/second_edition/html/lexical.doc.html#48282\">&sect;3.10.1</a> 
of the <a href=\"http://java.sun.com/docs/books/jls/html/\">Java 
Language Specification</a>.
<p>
The sequence of characters following an (optional) negative
sign and/or radix specifier (&quot;<code>0x</code>&quot;,
&quot;<code>0X</code>&quot;, &quot;<code>#</code>&quot;, or
leading zero) is parsed as by the <code>Short.parseShort</code>
method with the indicated radix (10, 16, or 8).  This sequence
of characters must represent a positive value or a {@link
NumberFormatException} will be thrown.  The result is negated
if first character of the specified <code>String</code> is the
minus sign.  No whitespace characters are permitted in the
<code>String</code>.

@param     nm the <code>String</code> to decode.
@return	  a <code>Short</code> object holding the <code>short</code>
		  value represented by <code>nm</code>
@exception NumberFormatException  if the <code>String</code> does not
           contain a parsable <code>short</code>.
@see java.lang.Short#parseShort(java.lang.String, int)"
      end

      attribute 2736411 "value"
	const_attribute private explicit_type "short"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The value of the <code>Short</code>.

@serial
"
      end

      operation 7041435 "Short"
	public explicit_return_type ""
	nparams 1
	  param in name "value" explicit_type "short"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a newly allocated <code>Short</code> object that
represents the specified <code>short</code> value.

@param value	the value to be represented by the 
			<code>Short</code>."
      end

      operation 7041563 "Short"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	nexceptions 1
	  exception class_ref 533659 // NumberFormatException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a newly allocated <code>Short</code> object that
represents the <code>short</code> value indicated by the
<code>String</code> parameter. The string is converted to a
<code>short</code> value in exactly the manner used by the
<code>parseShort</code> method for radix 10.

@param s		the <code>String</code> to be converted to a 
			<code>Short</code>
@exception	NumberFormatException If the <code>String</code> 
			does not contain a parsable <code>short</code>.
@see        java.lang.Short#parseShort(java.lang.String, int)"
      end

      operation 7041691 "byteValue"
	public explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this <code>Short</code> as a
<code>byte</code>."
      end

      operation 7041819 "shortValue"
	public explicit_return_type "short"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this <code>Short</code> as a
<code>short</code>."
      end

      operation 7041947 "intValue"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this <code>Short</code> as an
<code>int</code>."
      end

      operation 7042075 "longValue"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this <code>Short</code> as a
<code>long</code>."
      end

      operation 7042203 "floatValue"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this <code>Short</code> as a
<code>float</code>."
      end

      operation 7042331 "doubleValue"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this <code>Short</code> as a
<code>double</code>."
      end

      operation 7042459 "toString"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>String</code> object representing this
<code>Short</code>'s value.  The value is converted to signed
decimal representation and returned as a string, exactly as if
the <code>short</code> value were given as an argument to the
{@link java.lang.Short#toString(short)} method.

@return  a string representation of the value of this object in
         base&nbsp;10."
      end

      operation 7042587 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hash code for this <code>Short</code>."
      end

      operation 7042715 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this object to the specified object.  The result is
<code>true</code> if and only if the argument is not
<code>null</code> and is a <code>Short</code> object that
contains the same <code>short</code> value as this object.

@param obj	the object to compare with
@return 		<code>true</code> if the objects are the same;
			<code>false</code> otherwise."
      end

      operation 7042843 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "anotherShort" type class_ref 915995 // Short
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares two <code>Short</code> objects numerically.

@param   anotherShort   the <code>Short</code> to be compared.
@return	the value <code>0</code> if this <code>Short</code> is
		equal to the argument <code>Short</code>; a value less than
		<code>0</code> if this <code>Short</code> is numerically less
		than the argument <code>Short</code>; and a value greater than
		 <code>0</code> if this <code>Short</code> is numerically
		 greater than the argument <code>Short</code> (signed
		 comparison).
@since   1.2"
      end

      attribute 2736539 "SIZE"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  16"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The number of bits used to represent a <tt>short</tt> value in two's
complement binary form.
"
      end

      operation 7042971 "reverseBytes"
	class_operation public explicit_return_type "short"
	nparams 1
	  param in name "i" explicit_type "short"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value obtained by reversing the order of the bytes in the
two's complement representation of the specified <tt>short</tt> value.

@return the value obtained by reversing (or, equivalently, swapping)
    the bytes in the specified <tt>short</tt> value.
@since 1.5"
      end

      attribute 2736667 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value "=  7515723908773894738L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " use serialVersionUID from JDK 1.1. for interoperability "
      end
    end

    class 916251 "Shutdown"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Package-private utility class containing data structures and logic
governing the virtual-machine shutdown sequence.

@author   Mark Reinhold
@version  1.11, 03/12/19
@since    1.3"
      class 916379 "WrappedHook"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1788315 // hook (<unidirectional association>)
	  relation 1788315 --->
	    a role_name "hook" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1788315 // hook (<unidirectional association>)
	    b parent class_ref 163227 // Thread
	end

	operation 7043099 "WrappedHook"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "t" type class_ref 163227 // Thread
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7043227 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7043355 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" explicit_type "Object"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      attribute 2736795 "RUNNING"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Shutdown state "
      end

      attribute 2736923 "HOOKS"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2737051 "FINALIZERS"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2737179 "state"
	class_attribute private explicit_type "int"
	init_value "=  RUNNING"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2737307 "runFinalizersOnExit"
	class_attribute private explicit_type "boolean"
	init_value "=  false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Should we run all finalizers upon exit? "
      end

      classrelation 1788443 // hooks (<unidirectional association>)
	relation 1788443 --->
	  a role_name "hooks" init_value "=  null" class_relation private
	    comment " The set of registered, wrapped hooks, or null if there aren't any 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1788443 // hooks (<unidirectional association>)
	  b parent class_ref 149659 // HashSet
      end

      class 916507 "Lock"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      attribute 2737435 "lock"
	class_attribute private explicit_type "Object"
	init_value "=  new Lock()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2737563 "haltLock"
	class_attribute private explicit_type "Object"
	init_value "=  new Lock()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Lock object for the native halt method "
      end

      operation 7043483 "setRunFinalizersOnExit"
	class_operation package explicit_return_type "void"
	nparams 1
	  param inout name "run" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Invoked by Runtime.runFinalizersOnExit "
      end

      operation 7043611 "add"
	class_operation package explicit_return_type "void"
	nparams 1
	  param inout name "hook" type class_ref 163227 // Thread
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Add a new shutdown hook.  Checks the shutdown state and the hook itself,
but does not do any security checks."
      end

      operation 7043739 "remove"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param inout name "hook" type class_ref 163227 // Thread
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Remove a previously-registered hook.  Like the add method, this method
does not do any security checks."
      end

      operation 7043867 "runHooks"
	class_operation private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Run all registered shutdown hooks"
      end

      operation 7043995 "halt"
	class_operation package explicit_return_type "void"
	nparams 1
	  param in name "status" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The halt method is synchronized on the halt lock
to avoid corruption of the delete-on-shutdown file list.
It invokes the true native halt method."
      end

      operation 7044123 "halt0"
	class_operation package explicit_return_type "void"
	nparams 1
	  param in name "status" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7044251 "runAllFinalizers"
	class_operation private explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Wormhole for invoking java.lang.ref.Finalizer.runAllFinalizers "
      end

      operation 7044379 "sequence"
	class_operation private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The actual shutdown sequence is defined here.

If it weren't for runFinalizersOnExit, this would be simple -- we'd just
run the hooks and then halt.  Instead we need to keep track of whether
we're running hooks or finalizers.  In the latter case a finalizer could
invoke exit(1) to cause immediate termination, while in the former case
any further invocations of exit(n), for any n, simply stall.  Note that
if on-exit finalizers are enabled they're run iff the shutdown is
initiated by an exit(0); they're never run on exit(n) for n != 0 or in
response to SIGINT, SIGTERM, etc."
      end

      operation 7044507 "exit"
	class_operation package explicit_return_type "void"
	nparams 1
	  param in name "status" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Invoked by Runtime.exit, which does all the security checks.
Also invoked by handlers for system-provided termination events,
which should pass a nonzero status code."
      end

      operation 7044635 "shutdown"
	class_operation package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Invoked by the JNI DestroyJavaVM procedure when the last non-daemon
thread has finished.  Unlike the exit method, this method does not
actually halt the VM."
      end
    end

    class 916635 "StackOverflowError"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Thrown when a stack overflow occurs because an application 
recurses too deeply. 

@author unascribed
@version 1.21, 12/19/03
@since   JDK1.0"
      classrelation 1788571 // <generalisation>
	relation 1788571 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1788571 // <generalisation>
	  b parent class_ref 913307 // VirtualMachineError
      end

      operation 7044763 "StackOverflowError"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>StackOverflowError</code> with no detail message."
      end

      operation 7044891 "StackOverflowError"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>StackOverflowError</code> with the specified 
detail message. 

@param   s   the detail message."
      end
    end

    class 916763 "StrictMath"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The class <code>StrictMath</code> contains methods for performing basic 
numeric operations such as the elementary exponential, logarithm, 
square root, and trigonometric functions. 

<p>To help ensure portability of Java programs, the definitions of
some of the numeric functions in this package require that they
produce the same results as certain published algorithms. These
algorithms are available from the well-known network library
<code>netlib</code> as the package \"Freely Distributable Math
Library,\" <a
href=\"ftp://ftp.netlib.org/fdlibm.tar\"><code>fdlibm</code></a>. These
algorithms, which are written in the C programming language, are
then to be understood as executed with all floating-point
operations following the rules of Java floating-point arithmetic.

<p>The Java math library is defined with respect to
<code>fdlibm</code> version 5.3. Where <code>fdlibm</code> provides
more than one definition for a function (such as
<code>acos</code>), use the \"IEEE 754 core function\" version
(residing in a file whose name begins with the letter
<code>e</code>).  The methods which require <code>fdlibm</code>
semantics are <code>sin</code>, <code>cos</code>, <code>tan</code>,
<code>asin</code>, <code>acos</code>, <code>atan</code>,
<code>exp</code>, <code>log</code>, <code>log10</code>,
<code>cbrt</code>, <code>atan2</code>, <code>pow</code>,
<code>sinh</code>, <code>cosh</code>, <code>tanh</code>,
<code>hypot</code>, <code>expm1</code>, and <code>log1p</code>.

@author  unascribed
@author  Joseph D. Darcy
@version 1.26, 06/14/04
@since   1.3"
      operation 7046299 "StrictMath"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Don't let anyone instantiate this class."
      end

      attribute 2738331 "E"
	class_attribute const_attribute public explicit_type "double"
	init_value "=  2.7182818284590452354"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The <code>double</code> value that is closer than any other to
<i>e</i>, the base of the natural logarithms.
"
      end

      attribute 2738459 "PI"
	class_attribute const_attribute public explicit_type "double"
	init_value "=  3.14159265358979323846"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The <code>double</code> value that is closer than any other to
<i>pi</i>, the ratio of the circumference of a circle to its
diameter.
"
      end

      operation 7046427 "sin"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "a" explicit_type "double"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the trigonometric sine of an angle. Special cases:
<ul><li>If the argument is NaN or an infinity, then the 
result is NaN.
<li>If the argument is zero, then the result is a zero with the
same sign as the argument.</ul>

@param   a   an angle, in radians.
@return  the sine of the argument."
      end

      operation 7046555 "cos"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "a" explicit_type "double"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the trigonometric cosine of an angle. Special cases:
<ul><li>If the argument is NaN or an infinity, then the 
result is NaN.</ul>

@param   a   an angle, in radians.
@return  the cosine of the argument."
      end

      operation 7046683 "tan"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "a" explicit_type "double"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the trigonometric tangent of an angle. Special cases:
<ul><li>If the argument is NaN or an infinity, then the result 
is NaN.
<li>If the argument is zero, then the result is a zero with the
same sign as the argument.</ul>

@param   a   an angle, in radians.
@return  the tangent of the argument."
      end

      operation 7046811 "asin"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "a" explicit_type "double"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the arc sine of an angle, in the range of -<i>pi</i>/2 through
<i>pi</i>/2. Special cases: 
<ul><li>If the argument is NaN or its absolute value is greater 
than 1, then the result is NaN.
<li>If the argument is zero, then the result is a zero with the
same sign as the argument.</ul>

@param   a   the value whose arc sine is to be returned.
@return  the arc sine of the argument."
      end

      operation 7046939 "acos"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "a" explicit_type "double"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the arc cosine of an angle, in the range of 0.0 through
<i>pi</i>. Special case:
<ul><li>If the argument is NaN or its absolute value is greater 
than 1, then the result is NaN.</ul>

@param   a   the value whose arc cosine is to be returned.
@return  the arc cosine of the argument."
      end

      operation 7047067 "atan"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "a" explicit_type "double"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the arc tangent of an angle, in the range of -<i>pi</i>/2
through <i>pi</i>/2. Special cases: 
<ul><li>If the argument is NaN, then the result is NaN.
<li>If the argument is zero, then the result is a zero with the
same sign as the argument.</ul>

@param   a   the value whose arc tangent is to be returned.
@return  the arc tangent of the argument."
      end

      operation 7047195 "toRadians"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "angdeg" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}strictfp ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts an angle measured in degrees to an approximately
equivalent angle measured in radians.  The conversion from
degrees to radians is generally inexact.

@param   angdeg   an angle, in degrees
@return  the measurement of the angle <code>angdeg</code>
         in radians."
      end

      operation 7047323 "toDegrees"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "angrad" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}strictfp ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts an angle measured in radians to an approximately
equivalent angle measured in degrees.  The conversion from
radians to degrees is generally inexact; users should
<i>not</i> expect <code>cos(toRadians(90.0))</code> to exactly
equal <code>0.0</code>.

@param   angrad   an angle, in radians
@return  the measurement of the angle <code>angrad</code>
         in degrees."
      end

      operation 7047451 "exp"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "a" explicit_type "double"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns Euler's number <i>e</i> raised to the power of a
<code>double</code> value. Special cases:
<ul><li>If the argument is NaN, the result is NaN.
<li>If the argument is positive infinity, then the result is 
positive infinity.
<li>If the argument is negative infinity, then the result is 
positive zero.</ul>

@param   a   the exponent to raise <i>e</i> to.
@return  the value <i>e</i><sup><code>a</code></sup>, 
		where <i>e</i> is the base of the natural logarithms."
      end

      operation 7047579 "log"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "a" explicit_type "double"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the natural logarithm (base <i>e</i>) of a <code>double</code>
value. Special cases:
<ul><li>If the argument is NaN or less than zero, then the result 
is NaN.
<li>If the argument is positive infinity, then the result is 
positive infinity.
<li>If the argument is positive zero or negative zero, then the 
result is negative infinity.</ul>

@param   a   a value
@return  the value ln&nbsp;<code>a</code>, the natural logarithm of
         <code>a</code>."
      end

      operation 7047707 "log10"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "a" explicit_type "double"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the base 10 logarithm of a <code>double</code> value.
Special cases:

<ul><li>If the argument is NaN or less than zero, then the result 
is NaN.
<li>If the argument is positive infinity, then the result is 
positive infinity.
<li>If the argument is positive zero or negative zero, then the 
result is negative infinity.
<li> If the argument is equal to 10<sup><i>n</i></sup> for
integer <i>n</i>, then the result is <i>n</i>.
</ul>

@param   a   a value
@return  the base 10 logarithm of  <code>a</code>.
@since 1.5"
      end

      operation 7047835 "sqrt"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "a" explicit_type "double"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the correctly rounded positive square root of a
<code>double</code> value.
Special cases:
<ul><li>If the argument is NaN or less than zero, then the result 
is NaN. 
<li>If the argument is positive infinity, then the result is positive 
infinity. 
<li>If the argument is positive zero or negative zero, then the 
result is the same as the argument.</ul>
Otherwise, the result is the <code>double</code> value closest to 
the true mathematical square root of the argument value.

@param   a   a value.
@return  the positive square root of <code>a</code>."
      end

      operation 7047963 "cbrt"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "a" explicit_type "double"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the cube root of a <code>double</code> value.  For
positive finite <code>x</code>, <code>cbrt(-x) ==
-cbrt(x)</code>; that is, the cube root of a negative value is
the negative of the cube root of that value's magnitude.
Special cases: 

<ul>

<li>If the argument is NaN, then the result is NaN.

<li>If the argument is infinite, then the result is an infinity
with the same sign as the argument.

<li>If the argument is zero, then the result is a zero with the
same sign as the argument.

</ul>

@param   a   a value.
@return  the cube root of <code>a</code>.
@since 1.5"
      end

      operation 7048091 "IEEEremainder"
	class_operation public explicit_return_type "double"
	nparams 2
	  param in name "f1" explicit_type "double"
	  param in name "f2" explicit_type "double"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Computes the remainder operation on two arguments as prescribed 
by the IEEE 754 standard.
The remainder value is mathematically equal to 
<code>f1&nbsp;-&nbsp;f2</code>&nbsp;&times;&nbsp;<i>n</i>,
where <i>n</i> is the mathematical integer closest to the exact 
mathematical value of the quotient <code>f1/f2</code>, and if two 
mathematical integers are equally close to <code>f1/f2</code>, 
then <i>n</i> is the integer that is even. If the remainder is 
zero, its sign is the same as the sign of the first argument. 
Special cases:
<ul><li>If either argument is NaN, or the first argument is infinite, 
or the second argument is positive zero or negative zero, then the 
result is NaN.
<li>If the first argument is finite and the second argument is 
infinite, then the result is the same as the first argument.</ul>

@param   f1   the dividend.
@param   f2   the divisor.
@return  the remainder when <code>f1</code> is divided by
         <code>f2</code>."
      end

      operation 7048219 "ceil"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "a" explicit_type "double"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the smallest (closest to negative infinity)
<code>double</code> value that is greater than or equal to the
argument and is equal to a mathematical integer. Special cases:
<ul><li>If the argument value is already equal to a
mathematical integer, then the result is the same as the
argument.  <li>If the argument is NaN or an infinity or
positive zero or negative zero, then the result is the same as
the argument.  <li>If the argument value is less than zero but
greater than -1.0, then the result is negative zero.</ul> Note
that the value of <code>StrictMath.ceil(x)</code> is exactly the
value of <code>-StrictMath.floor(-x)</code>.

@param   a   a value.
@return  the smallest (closest to negative infinity) 
         floating-point value that is greater than or equal to
         the argument and is equal to a mathematical integer. "
      end

      operation 7048347 "floor"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "a" explicit_type "double"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the largest (closest to positive infinity)
<code>double</code> value that is less than or equal to the
argument and is equal to a mathematical integer. Special cases:
<ul><li>If the argument value is already equal to a
mathematical integer, then the result is the same as the
argument.  <li>If the argument is NaN or an infinity or
positive zero or negative zero, then the result is the same as
the argument.</ul>

@param   a   a value.
@return  the largest (closest to positive infinity) 
         floating-point value that less than or equal to the argument
         and is equal to a mathematical integer. "
      end

      operation 7048475 "rint"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "a" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>double</code> value that is closest in value
to the argument and is equal to a mathematical integer. If two
<code>double</code> values that are mathematical integers are
equally close to the value of the argument, the result is the
integer value that is even. Special cases:
<ul><li>If the argument value is already equal to a mathematical 
integer, then the result is the same as the argument. 
<li>If the argument is NaN or an infinity or positive zero or negative 
zero, then the result is the same as the argument.</ul>

@param   a   a value.
@return  the closest floating-point value to <code>a</code> that is
         equal to a mathematical integer.
@author Joseph D. Darcy"
      end

      operation 7048603 "atan2"
	class_operation public explicit_return_type "double"
	nparams 2
	  param in name "y" explicit_type "double"
	  param in name "x" explicit_type "double"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts rectangular coordinates (<code>x</code>,&nbsp;<code>y</code>)
to polar (r,&nbsp;<i>theta</i>).
This method computes the phase <i>theta</i> by computing an arc tangent
of <code>y/x</code> in the range of -<i>pi</i> to <i>pi</i>. Special 
cases:
<ul><li>If either argument is NaN, then the result is NaN. 
<li>If the first argument is positive zero and the second argument 
is positive, or the first argument is positive and finite and the 
second argument is positive infinity, then the result is positive 
zero. 
<li>If the first argument is negative zero and the second argument 
is positive, or the first argument is negative and finite and the 
second argument is positive infinity, then the result is negative zero. 
<li>If the first argument is positive zero and the second argument 
is negative, or the first argument is positive and finite and the 
second argument is negative infinity, then the result is the 
<code>double</code> value closest to <i>pi</i>. 
<li>If the first argument is negative zero and the second argument 
is negative, or the first argument is negative and finite and the 
second argument is negative infinity, then the result is the 
<code>double</code> value closest to -<i>pi</i>. 
<li>If the first argument is positive and the second argument is 
positive zero or negative zero, or the first argument is positive 
infinity and the second argument is finite, then the result is the 
<code>double</code> value closest to <i>pi</i>/2. 
<li>If the first argument is negative and the second argument is 
positive zero or negative zero, or the first argument is negative 
infinity and the second argument is finite, then the result is the 
<code>double</code> value closest to -<i>pi</i>/2. 
<li>If both arguments are positive infinity, then the result is the 
<code>double</code> value closest to <i>pi</i>/4. 
<li>If the first argument is positive infinity and the second argument 
is negative infinity, then the result is the <code>double</code> 
value closest to 3*<i>pi</i>/4. 
<li>If the first argument is negative infinity and the second argument 
is positive infinity, then the result is the <code>double</code> value 
closest to -<i>pi</i>/4. 
<li>If both arguments are negative infinity, then the result is the 
<code>double</code> value closest to -3*<i>pi</i>/4.</ul>

@param   y   the ordinate coordinate
@param   x   the abscissa coordinate
@return  the <i>theta</i> component of the point
         (<i>r</i>,&nbsp;<i>theta</i>)
         in polar coordinates that corresponds to the point
         (<i>x</i>,&nbsp;<i>y</i>) in Cartesian coordinates."
      end

      operation 7048731 "pow"
	class_operation public explicit_return_type "double"
	nparams 2
	  param in name "a" explicit_type "double"
	  param in name "b" explicit_type "double"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the first argument raised to the power of the
second argument. Special cases:

<ul><li>If the second argument is positive or negative zero, then the 
result is 1.0. 
<li>If the second argument is 1.0, then the result is the same as the 
first argument.
<li>If the second argument is NaN, then the result is NaN. 
<li>If the first argument is NaN and the second argument is nonzero, 
then the result is NaN. 

<li>If
<ul>
<li>the absolute value of the first argument is greater than 1
and the second argument is positive infinity, or
<li>the absolute value of the first argument is less than 1 and
the second argument is negative infinity,
</ul>
then the result is positive infinity. 

<li>If 
<ul>
<li>the absolute value of the first argument is greater than 1 and 
the second argument is negative infinity, or 
<li>the absolute value of the 
first argument is less than 1 and the second argument is positive 
infinity,
</ul>
then the result is positive zero. 

<li>If the absolute value of the first argument equals 1 and the 
second argument is infinite, then the result is NaN. 

<li>If 
<ul>
<li>the first argument is positive zero and the second argument
is greater than zero, or
<li>the first argument is positive infinity and the second
argument is less than zero,
</ul>
then the result is positive zero. 

<li>If 
<ul>
<li>the first argument is positive zero and the second argument
is less than zero, or
<li>the first argument is positive infinity and the second
argument is greater than zero,
</ul>
then the result is positive infinity.

<li>If 
<ul>
<li>the first argument is negative zero and the second argument
is greater than zero but not a finite odd integer, or
<li>the first argument is negative infinity and the second
argument is less than zero but not a finite odd integer,
</ul>
then the result is positive zero. 

<li>If 
<ul>
<li>the first argument is negative zero and the second argument
is a positive finite odd integer, or
<li>the first argument is negative infinity and the second
argument is a negative finite odd integer,
</ul>
then the result is negative zero. 

<li>If
<ul>
<li>the first argument is negative zero and the second argument
is less than zero but not a finite odd integer, or
<li>the first argument is negative infinity and the second
argument is greater than zero but not a finite odd integer,
</ul>
then the result is positive infinity. 

<li>If 
<ul>
<li>the first argument is negative zero and the second argument
is a negative finite odd integer, or
<li>the first argument is negative infinity and the second
argument is a positive finite odd integer,
</ul>
then the result is negative infinity. 

<li>If the first argument is finite and less than zero
<ul>
<li> if the second argument is a finite even integer, the
result is equal to the result of raising the absolute value of
the first argument to the power of the second argument

<li>if the second argument is a finite odd integer, the result
is equal to the negative of the result of raising the absolute
value of the first argument to the power of the second
argument

<li>if the second argument is finite and not an integer, then
the result is NaN.
</ul>

<li>If both arguments are integers, then the result is exactly equal 
to the mathematical result of raising the first argument to the power 
of the second argument if that result can in fact be represented 
exactly as a <code>double</code> value.</ul>

<p>(In the foregoing descriptions, a floating-point value is
considered to be an integer if and only if it is finite and a
fixed point of the method {@link #ceil <tt>ceil</tt>} or,
equivalently, a fixed point of the method {@link #floor
<tt>floor</tt>}. A value is a fixed point of a one-argument
method if and only if the result of applying the method to the
value is equal to the value.)

@param   a   base.
@param   b   the exponent.
@return  the value <code>a<sup>b</sup></code>."
      end

      operation 7048859 "round"
	class_operation public explicit_return_type "int"
	nparams 1
	  param in name "a" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the closest <code>int</code> to the argument. The 
result is rounded to an integer by adding 1/2, taking the 
floor of the result, and casting the result to type <code>int</code>. 
In other words, the result is equal to the value of the expression:
<p><pre>(int)Math.floor(a + 0.5f)</pre>
<p>
Special cases:
<ul><li>If the argument is NaN, the result is 0.
<li>If the argument is negative infinity or any value less than or 
equal to the value of <code>Integer.MIN_VALUE</code>, the result is 
equal to the value of <code>Integer.MIN_VALUE</code>. 
<li>If the argument is positive infinity or any value greater than or 
equal to the value of <code>Integer.MAX_VALUE</code>, the result is 
equal to the value of <code>Integer.MAX_VALUE</code>.</ul> 

@param   a   a floating-point value to be rounded to an integer.
@return  the value of the argument rounded to the nearest
         <code>int</code> value.
@see     java.lang.Integer#MAX_VALUE
@see     java.lang.Integer#MIN_VALUE"
      end

      operation 7048987 "round"
	class_operation public explicit_return_type "long"
	nparams 1
	  param in name "a" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the closest <code>long</code> to the argument. The result 
is rounded to an integer by adding 1/2, taking the floor of the 
result, and casting the result to type <code>long</code>. In other 
words, the result is equal to the value of the expression:
<p><pre>(long)Math.floor(a + 0.5d)</pre>
<p>
Special cases:
<ul><li>If the argument is NaN, the result is 0.
<li>If the argument is negative infinity or any value less than or 
equal to the value of <code>Long.MIN_VALUE</code>, the result is 
equal to the value of <code>Long.MIN_VALUE</code>. 
<li>If the argument is positive infinity or any value greater than or 
equal to the value of <code>Long.MAX_VALUE</code>, the result is 
equal to the value of <code>Long.MAX_VALUE</code>.</ul> 

@param   a  a floating-point value to be rounded to a
		<code>long</code>. 
@return  the value of the argument rounded to the nearest
         <code>long</code> value.
@see     java.lang.Long#MAX_VALUE
@see     java.lang.Long#MIN_VALUE"
      end

      classrelation 1788827 // randomNumberGenerator (<unidirectional association>)
	relation 1788827 --->
	  a role_name "randomNumberGenerator" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1788827 // randomNumberGenerator (<unidirectional association>)
	  b parent class_ref 139547 // Random
      end

      operation 7049115 "initRNG"
	class_operation private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7049243 "random"
	class_operation public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>double</code> value with a positive sign, greater 
than or equal to <code>0.0</code> and less than <code>1.0</code>. 
Returned values are chosen pseudorandomly with (approximately) 
uniform distribution from that range. 

<p>When this method is first called, it creates a single new
pseudorandom-number generator, exactly as if by the expression
<blockquote><pre>new java.util.Random</pre></blockquote> This
new pseudorandom-number generator is used thereafter for all
calls to this method and is used nowhere else.

<p>This method is properly synchronized to allow correct use by
more than one thread. However, if many threads need to generate
pseudorandom numbers at a great rate, it may reduce contention
for each thread to have its own pseudorandom number generator.
 
@return  a pseudorandom <code>double</code> greater than or equal 
to <code>0.0</code> and less than <code>1.0</code>.
@see     java.util.Random#nextDouble()"
      end

      operation 7049371 "abs"
	class_operation public explicit_return_type "int"
	nparams 1
	  param in name "a" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the absolute value of an <code>int</code> value..
If the argument is not negative, the argument is returned.
If the argument is negative, the negation of the argument is returned. 

<p>Note that if the argument is equal to the value of
<code>Integer.MIN_VALUE</code>, the most negative representable
<code>int</code> value, the result is that same value, which is
negative.

@param   a   the  argument whose absolute value is to be determined.
@return  the absolute value of the argument.
@see     java.lang.Integer#MIN_VALUE"
      end

      operation 7049499 "abs"
	class_operation public explicit_return_type "long"
	nparams 1
	  param in name "a" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the absolute value of a <code>long</code> value.
If the argument is not negative, the argument is returned.
If the argument is negative, the negation of the argument is returned. 

<p>Note that if the argument is equal to the value of
<code>Long.MIN_VALUE</code>, the most negative representable
<code>long</code> value, the result is that same value, which
is negative.

@param   a   the  argument whose absolute value is to be determined.
@return  the absolute value of the argument.
@see     java.lang.Long#MIN_VALUE"
      end

      operation 7049627 "abs"
	class_operation public explicit_return_type "float"
	nparams 1
	  param in name "a" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the absolute value of a <code>float</code> value. 
If the argument is not negative, the argument is returned.
If the argument is negative, the negation of the argument is returned. 
Special cases:
<ul><li>If the argument is positive zero or negative zero, the 
result is positive zero. 
<li>If the argument is infinite, the result is positive infinity. 
<li>If the argument is NaN, the result is NaN.</ul>
In other words, the result is the same as the value of the expression: 
<p><pre>Float.intBitsToFloat(0x7fffffff & Float.floatToIntBits(a))</pre>

@param   a   the argument whose absolute value is to be determined
@return  the absolute value of the argument."
      end

      operation 7049755 "abs"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "a" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the absolute value of a <code>double</code> value.
If the argument is not negative, the argument is returned.
If the argument is negative, the negation of the argument is returned. 
Special cases:
<ul><li>If the argument is positive zero or negative zero, the result 
is positive zero. 
<li>If the argument is infinite, the result is positive infinity. 
<li>If the argument is NaN, the result is NaN.</ul>
In other words, the result is the same as the value of the expression: 
<p><code>Double.longBitsToDouble((Double.doubleToLongBits(a)&lt;&lt;1)&gt;&gt;&gt;1)</code>

@param   a   the argument whose absolute value is to be determined
@return  the absolute value of the argument."
      end

      operation 7049883 "max"
	class_operation public explicit_return_type "int"
	nparams 2
	  param in name "a" explicit_type "int"
	  param in name "b" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the greater of two <code>int</code> values. That is, the 
result is the argument closer to the value of 
<code>Integer.MAX_VALUE</code>. If the arguments have the same value, 
the result is that same value.

@param   a   an argument.
@param   b   another argument.
@return  the larger of <code>a</code> and <code>b</code>.
@see     java.lang.Long#MAX_VALUE"
      end

      operation 7050011 "max"
	class_operation public explicit_return_type "long"
	nparams 2
	  param in name "a" explicit_type "long"
	  param in name "b" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the greater of two <code>long</code> values. That is, the 
result is the argument closer to the value of 
<code>Long.MAX_VALUE</code>. If the arguments have the same value, 
the result is that same value. 

@param   a   an argument.
@param   b   another argument.
@return  the larger of <code>a</code> and <code>b</code>.
@see     java.lang.Long#MAX_VALUE"
      end

      attribute 2738587 "negativeZeroFloatBits"
	class_attribute private explicit_type "long"
	init_value "=  Float.floatToIntBits(-0.0f)"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2738715 "negativeZeroDoubleBits"
	class_attribute private explicit_type "long"
	init_value "=  Double.doubleToLongBits(-0.0d)"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7050139 "max"
	class_operation public explicit_return_type "float"
	nparams 2
	  param in name "a" explicit_type "float"
	  param in name "b" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the greater of two <code>float</code> values.  That is,
the result is the argument closer to positive infinity. If the
arguments have the same value, the result is that same
value. If either value is NaN, then the result is NaN.  Unlike
the numerical comparison operators, this method considers
negative zero to be strictly smaller than positive zero. If one
argument is positive zero and the other negative zero, the
result is positive zero.

@param   a   an argument.
@param   b   another argument.
@return  the larger of <code>a</code> and <code>b</code>."
      end

      operation 7050267 "max"
	class_operation public explicit_return_type "double"
	nparams 2
	  param in name "a" explicit_type "double"
	  param in name "b" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the greater of two <code>double</code> values.  That
is, the result is the argument closer to positive infinity. If
the arguments have the same value, the result is that same
value. If either value is NaN, then the result is NaN.  Unlike
the numerical comparison operators, this method considers
negative zero to be strictly smaller than positive zero. If one
argument is positive zero and the other negative zero, the
result is positive zero.

@param   a   an argument.
@param   b   another argument.
@return  the larger of <code>a</code> and <code>b</code>."
      end

      operation 7050395 "min"
	class_operation public explicit_return_type "int"
	nparams 2
	  param in name "a" explicit_type "int"
	  param in name "b" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the smaller of two <code>int</code> values. That is,
the result the argument closer to the value of
<code>Integer.MIN_VALUE</code>.  If the arguments have the same
value, the result is that same value.

@param   a   an argument.
@param   b   another argument.
@return  the smaller of <code>a</code> and <code>b</code>.
@see     java.lang.Long#MIN_VALUE"
      end

      operation 7050523 "min"
	class_operation public explicit_return_type "long"
	nparams 2
	  param in name "a" explicit_type "long"
	  param in name "b" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the smaller of two <code>long</code> values. That is,
the result is the argument closer to the value of
<code>Long.MIN_VALUE</code>. If the arguments have the same
value, the result is that same value.

@param   a   an argument.
@param   b   another argument.
@return  the smaller of <code>a</code> and <code>b</code>.
@see     java.lang.Long#MIN_VALUE"
      end

      operation 7050651 "min"
	class_operation public explicit_return_type "float"
	nparams 2
	  param in name "a" explicit_type "float"
	  param in name "b" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the smaller of two <code>float</code> values.  That is,
the result is the value closer to negative infinity. If the
arguments have the same value, the result is that same
value. If either value is NaN, then the result is NaN.  Unlike
the numerical comparison operators, this method considers
negative zero to be strictly smaller than positive zero.  If
one argument is positive zero and the other is negative zero,
the result is negative zero.

@param   a   an argument.
@param   b   another argument.
@return  the smaller of <code>a</code> and <code>b.</code>"
      end

      operation 7050779 "min"
	class_operation public explicit_return_type "double"
	nparams 2
	  param in name "a" explicit_type "double"
	  param in name "b" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the smaller of two <code>double</code> values.  That
is, the result is the value closer to negative infinity. If the
arguments have the same value, the result is that same
value. If either value is NaN, then the result is NaN.  Unlike
the numerical comparison operators, this method considers
negative zero to be strictly smaller than positive zero. If one
argument is positive zero and the other is negative zero, the
result is negative zero.

@param   a   an argument.
@param   b   another argument.
@return  the smaller of <code>a</code> and <code>b</code>."
      end

      operation 7050907 "ulp"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "d" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the size of an ulp of the argument.  An ulp of a
<code>double</code> value is the positive distance between this
floating-point value and the <code>double</code> value next
larger in magnitude.  Note that for non-NaN <i>x</i>,
<code>ulp(-<i>x</i>) == ulp(<i>x</i>)</code>.

<p>Special Cases:
<ul>
<li> If the argument is NaN, then the result is NaN.
<li> If the argument is positive or negative infinity, then the
result is positive infinity.
<li> If the argument is positive or negative zero, then the result is
<code>Double.MIN_VALUE</code>.
<li> If the argument is &plusmn;<code>Double.MAX_VALUE</code>, then
the result is equal to 2<sup>971</sup>.
</ul>

@param d the floating-point value whose ulp is to be returned
@return the size of an ulp of the argument
@author Joseph D. Darcy
@since 1.5"
      end

      operation 7051035 "ulp"
	class_operation public explicit_return_type "float"
	nparams 1
	  param in name "f" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the size of an ulp of the argument.  An ulp of a
<code>float</code> value is the positive distance between this
floating-point value and the <code>float</code> value next
larger in magnitude.  Note that for non-NaN <i>x</i>,
<code>ulp(-<i>x</i>) == ulp(<i>x</i>)</code>.

<p>Special Cases:
<ul>
<li> If the argument is NaN, then the result is NaN.
<li> If the argument is positive or negative infinity, then the
result is positive infinity.
<li> If the argument is positive or negative zero, then the result is
<code>Float.MIN_VALUE</code>.
<li> If the argument is &plusmn;<code>Float.MAX_VALUE</code>, then
the result is equal to 2<sup>104</sup>.
</ul>

@param f the floating-point value whose ulp is to be returned
@return the size of an ulp of the argument
@author Joseph D. Darcy
@since 1.5"
      end

      operation 7051163 "signum"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "d" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the signum function of the argument; zero if the argument
is zero, 1.0 if the argument is greater than zero, -1.0 if the
argument is less than zero.

<p>Special Cases:
<ul>
<li> If the argument is NaN, then the result is NaN.
<li> If the argument is positive zero or negative zero, then the
     result is the same as the argument.
</ul>

@param d the floating-point value whose signum is to be returned
@return the signum function of the argument
@author Joseph D. Darcy
@since 1.5"
      end

      operation 7051291 "signum"
	class_operation public explicit_return_type "float"
	nparams 1
	  param in name "f" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the signum function of the argument; zero if the argument
is zero, 1.0f if the argument is greater than zero, -1.0f if the
argument is less than zero.

<p>Special Cases:
<ul>
<li> If the argument is NaN, then the result is NaN.
<li> If the argument is positive zero or negative zero, then the
     result is the same as the argument.
</ul>

@param f the floating-point value whose signum is to be returned
@return the signum function of the argument
@author Joseph D. Darcy
@since 1.5"
      end

      operation 7051419 "sinh"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "x" explicit_type "double"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hyperbolic sine of a <code>double</code> value.
The hyperbolic sine of <i>x</i> is defined to be
(<i>e<sup>x</sup>&nbsp;-&nbsp;e<sup>-x</sup></i>)/2
where <i>e</i> is {@linkplain Math#E Euler's number}.

<p>Special cases:
<ul>

<li>If the argument is NaN, then the result is NaN.

<li>If the argument is infinite, then the result is an infinity
with the same sign as the argument.

<li>If the argument is zero, then the result is a zero with the
same sign as the argument.

</ul>

@param   x The number whose hyperbolic sine is to be returned.
@return  The hyperbolic sine of <code>x</code>.
@since 1.5"
      end

      operation 7051547 "cosh"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "x" explicit_type "double"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hyperbolic cosine of a <code>double</code> value.
The hyperbolic cosine of <i>x</i> is defined to be
(<i>e<sup>x</sup>&nbsp;+&nbsp;e<sup>-x</sup></i>)/2
where <i>e</i> is {@linkplain Math#E Euler's number}.

<p>Special cases:
<ul>

<li>If the argument is NaN, then the result is NaN.

<li>If the argument is infinite, then the result is positive
infinity.

<li>If the argument is zero, then the result is <code>1.0</code>.

</ul>

@param   x The number whose hyperbolic cosine is to be returned.
@return  The hyperbolic cosine of <code>x</code>.
@since 1.5"
      end

      operation 7051675 "tanh"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "x" explicit_type "double"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hyperbolic tangent of a <code>double</code> value.
The hyperbolic tangent of <i>x</i> is defined to be
(<i>e<sup>x</sup>&nbsp;-&nbsp;e<sup>-x</sup></i>)/(<i>e<sup>x</sup>&nbsp;+&nbsp;e<sup>-x</sup></i>),
in other words, {@linkplain Math#sinh
sinh(<i>x</i>)}/{@linkplain Math#cosh cosh(<i>x</i>)}.  Note
that the absolute value of the exact tanh is always less than
1.

<p>Special cases:
<ul>

<li>If the argument is NaN, then the result is NaN.

<li>If the argument is zero, then the result is a zero with the
same sign as the argument.

<li>If the argument is positive infinity, then the result is
<code>+1.0</code>.

<li>If the argument is negative infinity, then the result is
<code>-1.0</code>.
 
</ul>

@param   x The number whose hyperbolic tangent is to be returned.
@return  The hyperbolic tangent of <code>x</code>.
@since 1.5"
      end

      operation 7051803 "hypot"
	class_operation public explicit_return_type "double"
	nparams 2
	  param in name "x" explicit_type "double"
	  param in name "y" explicit_type "double"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)
without intermediate overflow or underflow.

<p>Special cases:
<ul>

<li> If either argument is infinite, then the result
is positive infinity.

<li> If either argument is NaN and neither argument is infinite,
then the result is NaN.

</ul>

@param x a value
@param y a value
@return sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)
without intermediate overflow or underflow
@since 1.5"
      end

      operation 7051931 "expm1"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "x" explicit_type "double"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <i>e</i><sup>x</sup>&nbsp;-1.  Note that for values of
<i>x</i> near 0, the exact sum of
<code>expm1(x)</code>&nbsp;+&nbsp;1 is much closer to the true
result of <i>e</i><sup>x</sup> than <code>exp(x)</code>.

<p>Special cases:
<ul>
<li>If the argument is NaN, the result is NaN.

<li>If the argument is positive infinity, then the result is
positive infinity.

<li>If the argument is negative infinity, then the result is
-1.0.

<li>If the argument is zero, then the result is a zero with the
same sign as the argument.

</ul>

@param   x   the exponent to raise <i>e</i> to in the computation of
             <i>e</i><sup><code>x</code></sup>&nbsp;-1.
@return  the value <i>e</i><sup><code>x</code></sup>&nbsp;-&nbsp;1."
      end

      operation 7052059 "log1p"
	class_operation public explicit_return_type "double"
	nparams 1
	  param in name "x" explicit_type "double"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the natural logarithm of the sum of the argument and 1.
Note that for small values <code>x</code>, the result of
<code>log1p(x)</code> is much closer to the true result of ln(1
+ <code>x</code>) than the floating-point evaluation of
<code>log(1.0+x)</code>.

<p>Special cases:

<ul>

<li>If the argument is NaN or less than -1, then the result is
NaN.

<li>If the argument is positive infinity, then the result is
positive infinity.

<li>If the argument is negative one, then the result is
negative infinity.

<li>If the argument is zero, then the result is a zero with the
same sign as the argument.

</ul>

@param   x   a value
@return the value ln(<code>x</code>&nbsp;+&nbsp;1), the natural
log of <code>x</code>&nbsp;+&nbsp;1"
      end
    end

    class 917019 "StringCoding"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Utility class for string encoding and decoding."
      operation 7075227 "StringCoding"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 1790747 // decoder (<unidirectional association>)
	relation 1790747 --->
	  a role_name "decoder" init_value "=  new ThreadLocal()" class_relation private
	    comment " The cached coders for each thread

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1790747 // decoder (<unidirectional association>)
	  b parent class_ref 163867 // ThreadLocal
      end

      classrelation 1790875 // encoder (<unidirectional association>)
	relation 1790875 --->
	  a role_name "encoder" init_value "=  new ThreadLocal()" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1790875 // encoder (<unidirectional association>)
	  b parent class_ref 163867 // ThreadLocal
      end

      attribute 2739867 "warnUnsupportedCharset"
	class_attribute private explicit_type "boolean"
	init_value "=  true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7075355 "deref"
	class_operation private explicit_return_type "Object"
	nparams 1
	  param inout name "tl" type class_ref 163867 // ThreadLocal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7075483 "set"
	class_operation private explicit_return_type "void"
	nparams 2
	  param inout name "tl" type class_ref 163867 // ThreadLocal
	  param inout name "ob" explicit_type "Object"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7075611 "trim"
	class_operation private explicit_return_type "byte"
	nparams 2
	  param in name "ba" explicit_type "byte"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Trim the given byte array to the given length"
      end

      operation 7075739 "trim"
	class_operation private explicit_return_type "char"
	nparams 2
	  param in name "ca" explicit_type "char"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Trim the given char array to the given length"
      end

      operation 7075867 "scale"
	class_operation private explicit_return_type "int"
	nparams 2
	  param in name "len" explicit_type "int"
	  param in name "expansionFactor" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7075995 "lookupCharset"
	class_operation private return_type class_ref 798619 // Charset
	nparams 1
	  param in name "csn" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7076123 "warnUnsupportedCharset"
	class_operation private explicit_return_type "void"
	nparams 1
	  param in name "csn" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 917147 "StringDecoder"
	abstract visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 2739995 "requestedCharsetName"
	  const_attribute private explicit_type "String"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 7076251 "StringDecoder"
	  protected explicit_return_type ""
	  nparams 1
	    param in name "requestedCharsetName" explicit_type "String"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7076379 "requestedCharsetName"
	  package explicit_return_type "String"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7076507 "charsetName"
	  abstract package explicit_return_type "String"
	  nparams 0
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7076635 "decode"
	  abstract package explicit_return_type "char"
	  nparams 3
	    param in name "ba" explicit_type "byte"
	    param in name "off" explicit_type "int"
	    param in name "len" explicit_type "int"
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 917275 "ConverterSD"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1791003 // <generalisation>
	  relation 1791003 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1791003 // <generalisation>
	    b parent class_ref 917147 // StringDecoder
	end

	attribute 2740123 "btc"
	  private explicit_type "ByteToCharConverter"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 7076763 "ConverterSD"
	  private explicit_return_type ""
	  nparams 2
	    param inout name "btc" explicit_type "ByteToCharConverter"
	    param in name "rcn" explicit_type "String"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7076891 "charsetName"
	  package explicit_return_type "String"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7077019 "decode"
	  package explicit_return_type "char"
	  nparams 3
	    param in name "ba" explicit_type "byte"
	    param in name "off" explicit_type "int"
	    param in name "len" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 917403 "CharsetSD"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1791131 // <generalisation>
	  relation 1791131 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1791131 // <generalisation>
	    b parent class_ref 917147 // StringDecoder
	end

	classrelation 1791259 // cs (<unidirectional association>)
	  relation 1791259 --->
	    a role_name "cs" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1791259 // cs (<unidirectional association>)
	    b parent class_ref 798619 // Charset
	end

	classrelation 1791387 // cd (<unidirectional association>)
	  relation 1791387 --->
	    a role_name "cd" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1791387 // cd (<unidirectional association>)
	    b parent class_ref 199707 // CharsetDecoder
	end

	operation 7077147 "CharsetSD"
	  private explicit_return_type ""
	  nparams 2
	    param inout name "cs" type class_ref 798619 // Charset
	    param in name "rcn" explicit_type "String"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7077275 "charsetName"
	  package explicit_return_type "String"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7077403 "decode"
	  package explicit_return_type "char"
	  nparams 3
	    param in name "ba" explicit_type "byte"
	    param in name "off" explicit_type "int"
	    param in name "len" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 7077531 "decode"
	class_operation package explicit_return_type "char"
	nparams 4
	  param in name "charsetName" explicit_type "String"
	  param in name "ba" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 205723 // UnsupportedEncodingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7077659 "decode"
	class_operation package explicit_return_type "char"
	nparams 3
	  param in name "ba" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 917531 "StringEncoder"
	abstract visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 2740251 "requestedCharsetName"
	  const_attribute private explicit_type "String"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 7077787 "StringEncoder"
	  protected explicit_return_type ""
	  nparams 1
	    param in name "requestedCharsetName" explicit_type "String"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7077915 "requestedCharsetName"
	  package explicit_return_type "String"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7078043 "charsetName"
	  abstract package explicit_return_type "String"
	  nparams 0
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7078171 "encode"
	  abstract package explicit_return_type "byte"
	  nparams 3
	    param in name "cs" explicit_type "char"
	    param in name "off" explicit_type "int"
	    param in name "len" explicit_type "int"
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 917659 "ConverterSE"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1791515 // <generalisation>
	  relation 1791515 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1791515 // <generalisation>
	    b parent class_ref 917531 // StringEncoder
	end

	attribute 2740379 "ctb"
	  private explicit_type "CharToByteConverter"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 7078299 "ConverterSE"
	  private explicit_return_type ""
	  nparams 2
	    param inout name "ctb" explicit_type "CharToByteConverter"
	    param in name "rcn" explicit_type "String"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7078427 "charsetName"
	  package explicit_return_type "String"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7078555 "encode"
	  package explicit_return_type "byte"
	  nparams 3
	    param in name "ca" explicit_type "char"
	    param in name "off" explicit_type "int"
	    param in name "len" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 917787 "CharsetSE"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1791643 // <generalisation>
	  relation 1791643 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 1791643 // <generalisation>
	    b parent class_ref 917531 // StringEncoder
	end

	classrelation 1791771 // cs (<unidirectional association>)
	  relation 1791771 --->
	    a role_name "cs" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1791771 // cs (<unidirectional association>)
	    b parent class_ref 798619 // Charset
	end

	classrelation 1791899 // ce (<unidirectional association>)
	  relation 1791899 --->
	    a role_name "ce" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1791899 // ce (<unidirectional association>)
	    b parent class_ref 199835 // CharsetEncoder
	end

	operation 7078683 "CharsetSE"
	  private explicit_return_type ""
	  nparams 2
	    param inout name "cs" type class_ref 798619 // Charset
	    param in name "rcn" explicit_type "String"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7078811 "charsetName"
	  package explicit_return_type "String"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7078939 "encode"
	  package explicit_return_type "byte"
	  nparams 3
	    param in name "ca" explicit_type "char"
	    param in name "off" explicit_type "int"
	    param in name "len" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 7079067 "encode"
	class_operation package explicit_return_type "byte"
	nparams 4
	  param in name "charsetName" explicit_type "String"
	  param in name "ca" explicit_type "char"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 205723 // UnsupportedEncodingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7079195 "encode"
	class_operation package explicit_return_type "byte"
	nparams 3
	  param in name "ca" explicit_type "char"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 917915 "SuppressWarnings"
      visibility public stereotype "@interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}@interface ${name}${extends} {
${members}}
"
      java_annotation "@Target({TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE})
@Retention(RetentionPolicy.SOURCE)
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Indicates that the named compiler warnings should be suppressed in the
annotated element (and in all program elements contained in the annotated
element).  Note that the set of warnings suppressed in a given element is
a superset of the warnings suppressed in all containing elements.  For
example, if you annotate a class to suppress one warning and annotate a
method to suppress another, both warnings will be suppressed in the method.

<p>As a matter of style, programmers should always use this annotation
on the most deeply nested element where it is effective.  If you want to
suppress a warning in a particular method, you should annotate that
method rather than its class.

@since 1.5
@author Josh Bloch"
      operation 7079707 "value"
	public explicit_return_type "String"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The set of warnings that are to be suppressed by the compiler in the
annotated element.  Duplicate names are permitted.  The second and
successive occurrences of a name are ignored.  The presence of
unrecognized warning names is <i>not</i> an error: Compilers must
ignore any warning names they do not recognize.  They are, however,
free to emit a warning if an annotation contains an unrecognized
warning name.

<p>Compiler vendors should document the warning names they support in
conjunction with this annotation type. They are encouraged to cooperate
to ensure that the same names work across multiple compilers."
      end
    end

    class 918043 "System"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The <code>System</code> class contains several useful class fields
and methods. It cannot be instantiated.

<p>Among the facilities provided by the <code>System</code> class
are standard input, standard output, and error output streams;
access to externally defined properties and environment
variables; a means of loading files and libraries; and a utility
method for quickly copying a portion of an array.

@author  unascribed
@version 1.150, 03/22/06
@since   JDK1.0"
      operation 7079835 "registerNatives"
	class_operation private explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " First thing---register the natives "
      end

      extra_member 162331 "initialization"
	
	cpp "" ""
	java "  static {
        registerNatives();
    }"
	php ""
	python ""
	idl ""
      end

      operation 7079963 "System"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Don't let anyone instantiate this class "
      end

      classrelation 1792155 // in (<unidirectional association>)
	relation 1792155 --->
	  a role_name "in" init_value "=  nullInputStream()" class_relation const_relation public
	    comment "
The \"standard\" input stream. This stream is already
open and ready to supply input data. Typically this stream
corresponds to keyboard input or another input source specified by
the host environment or user.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1792155 // in (<unidirectional association>)
	  b parent class_ref 179099 // InputStream
      end

      classrelation 1792283 // out (<unidirectional association>)
	relation 1792283 --->
	  a role_name "out" init_value "=  nullPrintStream()" class_relation const_relation public
	    comment "
The \"standard\" output stream. This stream is already
open and ready to accept output data. Typically this stream
corresponds to display output or another output destination
specified by the host environment or user.
<p>
For simple stand-alone Java applications, a typical way to write
a line of output data is:
<blockquote><pre>
    System.out.println(data)
</pre></blockquote>
<p>
See the <code>println</code> methods in class <code>PrintStream</code>.

@see     java.io.PrintStream#println()
@see     java.io.PrintStream#println(boolean)
@see     java.io.PrintStream#println(char)
@see     java.io.PrintStream#println(char[])
@see     java.io.PrintStream#println(double)
@see     java.io.PrintStream#println(float)
@see     java.io.PrintStream#println(int)
@see     java.io.PrintStream#println(long)
@see     java.io.PrintStream#println(java.lang.Object)
@see     java.io.PrintStream#println(java.lang.String)

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1792283 // out (<unidirectional association>)
	  b parent class_ref 162843 // PrintStream
      end

      classrelation 1792411 // err (<unidirectional association>)
	relation 1792411 --->
	  a role_name "err" init_value "=  nullPrintStream()" class_relation const_relation public
	    comment "
The \"standard\" error output stream. This stream is already
open and ready to accept output data.
<p>
Typically this stream corresponds to display output or another
output destination specified by the host environment or user. By
convention, this output stream is used to display error messages
or other information that should come to the immediate attention
of a user even if the principal output stream, the value of the
variable <code>out</code>, has been redirected to a file or other
destination that is typically not continuously monitored.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1792411 // err (<unidirectional association>)
	  b parent class_ref 162843 // PrintStream
      end

      classrelation 1792539 // security (<unidirectional association>)
	relation 1792539 --->
	  a role_name "security" init_value "=  null" class_relation private
	    comment " The security manager for the system.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1792539 // security (<unidirectional association>)
	  b parent class_ref 904347 // SecurityManager
      end

      operation 7080091 "setIn"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 179099 // InputStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reassigns the \"standard\" input stream.

<p>First, if there is a security manager, its <code>checkPermission</code>
method is called with a <code>RuntimePermission(\"setIO\")</code> permission
 to see if it's ok to reassign the \"standard\" input stream.
<p>

@param in the new standard input stream.

@throws SecurityException
       if a security manager exists and its
       <code>checkPermission</code> method doesn't allow
       reassigning of the standard input stream.

@see SecurityManager#checkPermission
@see java.lang.RuntimePermission

@since   JDK1.1"
      end

      operation 7080219 "setOut"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 162843 // PrintStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reassigns the \"standard\" output stream.

<p>First, if there is a security manager, its <code>checkPermission</code>
method is called with a <code>RuntimePermission(\"setIO\")</code> permission
 to see if it's ok to reassign the \"standard\" output stream.

@param out the new standard output stream

@throws SecurityException
       if a security manager exists and its
       <code>checkPermission</code> method doesn't allow
       reassigning of the standard output stream.

@see SecurityManager#checkPermission
@see java.lang.RuntimePermission

@since   JDK1.1"
      end

      operation 7080347 "setErr"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "err" type class_ref 162843 // PrintStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reassigns the \"standard\" error output stream.

<p>First, if there is a security manager, its <code>checkPermission</code>
method is called with a <code>RuntimePermission(\"setIO\")</code> permission
 to see if it's ok to reassign the \"standard\" error output stream.

@param err the new standard error output stream.

@throws SecurityException
       if a security manager exists and its
       <code>checkPermission</code> method doesn't allow
       reassigning of the standard error output stream.

@see SecurityManager#checkPermission
@see java.lang.RuntimePermission

@since   JDK1.1"
      end

      operation 7080475 "inheritedChannel"
	class_operation public return_type class_ref 918171 // Channel
	nparams 0
	nexceptions 1
	  exception class_ref 179355 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the channel inherited from the entity that created this
Java virtual machine.

<p> This method returns the channel obtained by invoking the
{@link java.nio.channels.spi.SelectorProvider#inheritedChannel
inheritedChannel} method of the system-wide default
{@link java.nio.channels.spi.SelectorProvider} object. </p>

<p> In addition to the network-oriented channels described in
{@link java.nio.channels.spi.SelectorProvider#inheritedChannel
inheritedChannel}, this method may return other kinds of
channels in the future.

@return	The inherited channel, if any, otherwise <tt>null</tt>.

@throws	IOException
		If an I/O error occurs

@throws	SecurityException
		If a security manager is present and it does not
		permit access to the channel.

@since 1.5"
      end

      operation 7080603 "checkIO"
	class_operation private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7080731 "setIn0"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 179099 // InputStream
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7080859 "setOut0"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 162843 // PrintStream
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7080987 "setErr0"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "err" type class_ref 162843 // PrintStream
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7081115 "setSecurityManager"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "s" type class_ref 904347 // SecurityManager
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the System security.

<p> If there is a security manager already installed, this method first
calls the security manager's <code>checkPermission</code> method
with a <code>RuntimePermission(\"setSecurityManager\")</code>
permission to ensure it's ok to replace the existing
security manager.
This may result in throwing a <code>SecurityException</code>.

<p> Otherwise, the argument is established as the current
security manager. If the argument is <code>null</code> and no
security manager has been established, then no action is taken and
the method simply returns.

@param      s   the security manager.
@exception  SecurityException  if the security manager has already
            been set and its <code>checkPermission</code> method
            doesn't allow it to be replaced.
@see #getSecurityManager
@see SecurityManager#checkPermission
@see java.lang.RuntimePermission"
      end

      operation 7081243 "setSecurityManager0"
	class_operation private explicit_return_type "void"
	nparams 1
	  param in name "s" type class_ref 904347 // SecurityManager
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7081371 "getSecurityManager"
	class_operation public return_type class_ref 904347 // SecurityManager
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the system security interface.

@return  if a security manager has already been established for the
         current application, then that security manager is returned;
         otherwise, <code>null</code> is returned.
@see     #setSecurityManager"
      end

      operation 7081499 "currentTimeMillis"
	class_operation public explicit_return_type "long"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current time in milliseconds.  Note that
while the unit of time of the return value is a millisecond,
the granularity of the value depends on the underlying
operating system and may be larger.  For example, many
operating systems measure time in units of tens of
milliseconds.

<p> See the description of the class <code>Date</code> for
a discussion of slight discrepancies that may arise between
\"computer time\" and coordinated universal time (UTC).

@return  the difference, measured in milliseconds, between
         the current time and midnight, January 1, 1970 UTC.
@see     java.util.Date"
      end

      operation 7081627 "nanoTime"
	class_operation public explicit_return_type "long"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current value of the most precise available system
timer, in nanoseconds.

<p>This method can only be used to measure elapsed time and is
not related to any other notion of system or wall-clock time.
The value returned represents nanoseconds since some fixed but
arbitrary time (perhaps in the future, so values may be
negative).  This method provides nanosecond precision, but not
necessarily nanosecond accuracy. No guarantees are made about
how frequently values change. Differences in successive calls
that span greater than approximately 292 years (2<sup>63</sup>
nanoseconds) will not accurately compute elapsed time due to
numerical overflow.

<p> For example, to measure how long some code takes to execute:
<pre>
  long startTime = System.nanoTime();
  // ... the code being measured ...
  long estimatedTime = System.nanoTime() - startTime;
</pre>

@return The current value of the system timer, in nanoseconds.
@since 1.5"
      end

      operation 7081755 "arraycopy"
	class_operation public explicit_return_type "void"
	nparams 5
	  param inout name "src" explicit_type "Object"
	  param in name "srcPos" explicit_type "int"
	  param inout name "dest" explicit_type "Object"
	  param in name "destPos" explicit_type "int"
	  param in name "length" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copies an array from the specified source array, beginning at the
specified position, to the specified position of the destination array.
A subsequence of array components are copied from the source
array referenced by <code>src</code> to the destination array
referenced by <code>dest</code>. The number of components copied is
equal to the <code>length</code> argument. The components at
positions <code>srcPos</code> through
<code>srcPos+length-1</code> in the source array are copied into
positions <code>destPos</code> through
<code>destPos+length-1</code>, respectively, of the destination
array.
<p>
If the <code>src</code> and <code>dest</code> arguments refer to the
same array object, then the copying is performed as if the
components at positions <code>srcPos</code> through
<code>srcPos+length-1</code> were first copied to a temporary
array with <code>length</code> components and then the contents of
the temporary array were copied into positions
<code>destPos</code> through <code>destPos+length-1</code> of the
destination array.
<p>
If <code>dest</code> is <code>null</code>, then a
<code>NullPointerException</code> is thrown.
<p>
If <code>src</code> is <code>null</code>, then a
<code>NullPointerException</code> is thrown and the destination
array is not modified.
<p>
Otherwise, if any of the following is true, an
<code>ArrayStoreException</code> is thrown and the destination is
not modified:
<ul>
<li>The <code>src</code> argument refers to an object that is not an
    array.
<li>The <code>dest</code> argument refers to an object that is not an
    array.
<li>The <code>src</code> argument and <code>dest</code> argument refer
    to arrays whose component types are different primitive types.
<li>The <code>src</code> argument refers to an array with a primitive
   component type and the <code>dest</code> argument refers to an array
    with a reference component type.
<li>The <code>src</code> argument refers to an array with a reference
   component type and the <code>dest</code> argument refers to an array
    with a primitive component type.
</ul>
<p>
Otherwise, if any of the following is true, an
<code>IndexOutOfBoundsException</code> is
thrown and the destination is not modified:
<ul>
<li>The <code>srcPos</code> argument is negative.
<li>The <code>destPos</code> argument is negative.
<li>The <code>length</code> argument is negative.
<li><code>srcPos+length</code> is greater than
    <code>src.length</code>, the length of the source array.
<li><code>destPos+length</code> is greater than
    <code>dest.length</code>, the length of the destination array.
</ul>
<p>
Otherwise, if any actual component of the source array from
position <code>srcPos</code> through
<code>srcPos+length-1</code> cannot be converted to the component
type of the destination array by assignment conversion, an
<code>ArrayStoreException</code> is thrown. In this case, let
<b><i>k</i></b> be the smallest nonnegative integer less than
length such that <code>src[srcPos+</code><i>k</i><code>]</code>
cannot be converted to the component type of the destination
array; when the exception is thrown, source array components from
positions <code>srcPos</code> through
<code>srcPos+</code><i>k</i><code>-1</code>
will already have been copied to destination array positions
<code>destPos</code> through
<code>destPos+</code><i>k</I><code>-1</code> and no other
positions of the destination array will have been modified.
(Because of the restrictions already itemized, this
paragraph effectively applies only to the situation where both
arrays have component types that are reference types.)

@param      src      the source array.
@param      srcPos   starting position in the source array.
@param      dest     the destination array.
@param      destPos  starting position in the destination data.
@param      length   the number of array elements to be copied.
@exception  IndexOutOfBoundsException  if copying would cause
              access of data outside array bounds.
@exception  ArrayStoreException  if an element in the <code>src</code>
              array could not be stored into the <code>dest</code> array
              because of a type mismatch.
@exception  NullPointerException if either <code>src</code> or
              <code>dest</code> is <code>null</code>."
      end

      operation 7081883 "identityHashCode"
	class_operation public explicit_return_type "int"
	nparams 1
	  param inout name "x" explicit_type "Object"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the same hash code for the given object as
would be returned by the default method hashCode(),
whether or not the given object's class overrides
hashCode().
The hash code for the null reference is zero.

@param x object for which the hashCode is to be calculated
@return  the hashCode
@since   JDK1.1"
      end

      classrelation 1792667 // props (<unidirectional association>)
	relation 1792667 --->
	  a role_name "props" class_relation private
	    comment "
System properties. The following properties are guaranteed to be defined:
<dl>
<dt>java.version		<dd>Java version number
<dt>java.vendor		<dd>Java vendor specific string
<dt>java.vendor.url	<dd>Java vendor URL
<dt>java.home		<dd>Java installation directory
<dt>java.class.version	<dd>Java class version number
<dt>java.class.path	<dd>Java classpath
<dt>os.name		<dd>Operating System Name
<dt>os.arch		<dd>Operating System Architecture
<dt>os.version		<dd>Operating System Version
<dt>file.separator	<dd>File separator (\"/\" on Unix)
<dt>path.separator	<dd>Path separator (\":\" on Unix)
<dt>line.separator	<dd>Line separator (\"\\n\" on Unix)
<dt>user.name		<dd>User account name
<dt>user.home		<dd>User home directory
<dt>user.dir		<dd>User's current working directory
</dl>

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1792667 // props (<unidirectional association>)
	  b parent class_ref 154907 // Properties
      end

      operation 7082011 "initProperties"
	class_operation private return_type class_ref 154907 // Properties
	nparams 1
	  param inout name "props" type class_ref 154907 // Properties
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7082139 "getProperties"
	class_operation public return_type class_ref 154907 // Properties
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines the current system properties.
<p>
First, if there is a security manager, its
<code>checkPropertiesAccess</code> method is called with no
arguments. This may result in a security exception.
<p>
The current set of system properties for use by the 
{@link #getProperty(String)} method is returned as a 
<code>Properties</code> object. If there is no current set of 
system properties, a set of system properties is first created and 
initialized. This set of system properties always includes values 
for the following keys: 
<table summary=\"Shows property keys and associated values\">
<tr><th>Key</th>
    <th>Description of Associated Value</th></tr>
<tr><td><code>java.version</code></td>
    <td>Java Runtime Environment version</td></tr>
<tr><td><code>java.vendor</code></td>
    <td>Java Runtime Environment vendor</td></tr
<tr><td><code>java.vendor.url</code></td>
    <td>Java vendor URL</td></tr>
<tr><td><code>java.home</code></td>
    <td>Java installation directory</td></tr>
<tr><td><code>java.vm.specification.version</code></td>
    <td>Java Virtual Machine specification version</td></tr>
<tr><td><code>java.vm.specification.vendor</code></td>
    <td>Java Virtual Machine specification vendor</td></tr>
<tr><td><code>java.vm.specification.name</code></td>
    <td>Java Virtual Machine specification name</td></tr>
<tr><td><code>java.vm.version</code></td>
    <td>Java Virtual Machine implementation version</td></tr>
<tr><td><code>java.vm.vendor</code></td>
    <td>Java Virtual Machine implementation vendor</td></tr>
<tr><td><code>java.vm.name</code></td>
    <td>Java Virtual Machine implementation name</td></tr>
<tr><td><code>java.specification.version</code></td>
    <td>Java Runtime Environment specification  version</td></tr>
<tr><td><code>java.specification.vendor</code></td>
    <td>Java Runtime Environment specification  vendor</td></tr>
<tr><td><code>java.specification.name</code></td>
    <td>Java Runtime Environment specification  name</td></tr>
<tr><td><code>java.class.version</code></td>
    <td>Java class format version number</td></tr>
<tr><td><code>java.class.path</code></td>
    <td>Java class path</td></tr>
<tr><td><code>java.library.path</code></td>
    <td>List of paths to search when loading libraries</td></tr>
<tr><td><code>java.io.tmpdir</code></td>
    <td>Default temp file path</td></tr>
<tr><td><code>java.compiler</code></td>
    <td>Name of JIT compiler to use</td></tr>
<tr><td><code>java.ext.dirs</code></td>
    <td>Path of extension directory or directories</td></tr>
<tr><td><code>os.name</code></td>
    <td>Operating system name</td></tr>
<tr><td><code>os.arch</code></td>
    <td>Operating system architecture</td></tr>
<tr><td><code>os.version</code></td>
    <td>Operating system version</td></tr>
<tr><td><code>file.separator</code></td>
    <td>File separator (\"/\" on UNIX)</td></tr>
<tr><td><code>path.separator</code></td>
    <td>Path separator (\":\" on UNIX)</td></tr>
<tr><td><code>line.separator</code></td>
    <td>Line separator (\"\\n\" on UNIX)</td></tr>
<tr><td><code>user.name</code></td>
    <td>User's account name</td></tr>
<tr><td><code>user.home</code></td>
    <td>User's home directory</td></tr>
<tr><td><code>user.dir</code></td>
    <td>User's current working directory</td></tr>
</table>
<p>
Multiple paths in a system property value are separated by the path
separator character of the platform.
<p>
Note that even if the security manager does not permit the
<code>getProperties</code> operation, it may choose to permit the
{@link #getProperty(String)} operation.

@return     the system properties
@exception  SecurityException  if a security manager exists and its
            <code>checkPropertiesAccess</code> method doesn't allow access
             to the system properties.
@see        #setProperties
@see        java.lang.SecurityException
@see        java.lang.SecurityManager#checkPropertiesAccess()
@see        java.util.Properties"
      end

      operation 7082267 "setProperties"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "props" type class_ref 154907 // Properties
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the system properties to the <code>Properties</code>
argument.
<p>
First, if there is a security manager, its
<code>checkPropertiesAccess</code> method is called with no
arguments. This may result in a security exception.
<p>
The argument becomes the current set of system properties for use
by the {@link #getProperty(String)} method. If the argument is
<code>null</code>, then the current set of system properties is
forgotten.

@param      props   the new system properties.
@exception  SecurityException  if a security manager exists and its
            <code>checkPropertiesAccess</code> method doesn't allow access
             to the system properties.
@see        #getProperties
@see        java.util.Properties
@see        java.lang.SecurityException
@see        java.lang.SecurityManager#checkPropertiesAccess()"
      end

      operation 7082395 "getProperty"
	class_operation public explicit_return_type "String"
	nparams 1
	  param in name "key" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the system property indicated by the specified key.
<p>
First, if there is a security manager, its
<code>checkPropertyAccess</code> method is called with the key as
its argument. This may result in a SecurityException.
<p>
If there is no current set of system properties, a set of system
properties is first created and initialized in the same manner as
for the <code>getProperties</code> method.

@param      key   the name of the system property.
@return     the string value of the system property,
            or <code>null</code> if there is no property with that key.

@exception  SecurityException  if a security manager exists and its
            <code>checkPropertyAccess</code> method doesn't allow
             access to the specified system property.
@exception  NullPointerException if <code>key</code> is
            <code>null</code>.
@exception  IllegalArgumentException if <code>key</code> is empty.
@see        #setProperty
@see        java.lang.SecurityException
@see        java.lang.SecurityManager#checkPropertyAccess(java.lang.String)
@see        java.lang.System#getProperties()"
      end

      operation 7082523 "getProperty"
	class_operation public explicit_return_type "String"
	nparams 2
	  param in name "key" explicit_type "String"
	  param in name "def" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the system property indicated by the specified key.
<p>
First, if there is a security manager, its
<code>checkPropertyAccess</code> method is called with the
<code>key</code> as its argument.
<p>
If there is no current set of system properties, a set of system
properties is first created and initialized in the same manner as
for the <code>getProperties</code> method.

@param      key   the name of the system property.
@param      def   a default value.
@return     the string value of the system property,
            or the default value if there is no property with that key.

@exception  SecurityException  if a security manager exists and its
            <code>checkPropertyAccess</code> method doesn't allow
            access to the specified system property.
@exception  NullPointerException if <code>key</code> is
            <code>null</code>.
@exception  IllegalArgumentException if <code>key</code> is empty.
@see        #setProperty
@see        java.lang.SecurityManager#checkPropertyAccess(java.lang.String)
@see        java.lang.System#getProperties()"
      end

      operation 7082651 "setProperty"
	class_operation public explicit_return_type "String"
	nparams 2
	  param in name "key" explicit_type "String"
	  param in name "value" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the system property indicated by the specified key.
<p>
First, if a security manager exists, its
<code>SecurityManager.checkPermission</code> method
is called with a <code>PropertyPermission(key, \"write\")</code>
permission. This may result in a SecurityException being thrown.
If no exception is thrown, the specified property is set to the given
value.
<p>

@param      key   the name of the system property.
@param      value the value of the system property.
@return     the previous value of the system property,
            or <code>null</code> if it did not have one.

@exception  SecurityException  if a security manager exists and its
            <code>checkPermission</code> method doesn't allow
            setting of the specified property.
@exception  NullPointerException if <code>key</code> or 
            <code>value</code> is <code>null</code>.
@exception  IllegalArgumentException if <code>key</code> is empty.
@see        #getProperty
@see        java.lang.System#getProperty(java.lang.String)
@see        java.lang.System#getProperty(java.lang.String, java.lang.String)
@see        java.util.PropertyPermission
@see        SecurityManager#checkPermission
@since      1.2"
      end

      operation 7082779 "clearProperty"
	class_operation public explicit_return_type "String"
	nparams 1
	  param in name "key" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the system property indicated by the specified key. 
<p>
First, if a security manager exists, its 
<code>SecurityManager.checkPermission</code> method
is called with a <code>PropertyPermission(key, \"write\")</code>
permission. This may result in a SecurityException being thrown.
If no exception is thrown, the specified property is removed.
<p>

@param      key   the name of the system property to be removed. 
@return     the previous string value of the system property,
            or <code>null</code> if there was no property with that key.

@exception  SecurityException  if a security manager exists and its  
            <code>checkPropertyAccess</code> method doesn't allow
             access to the specified system property.
@exception  NullPointerException if <code>key</code> is
            <code>null</code>.
@exception  IllegalArgumentException if <code>key</code> is empty.
@see        #getProperty
@see        #setProperty
@see        java.util.Properties
@see        java.lang.SecurityException
@see        java.lang.SecurityManager#checkPropertiesAccess()
@since 1.5"
      end

      operation 7082907 "checkKey"
	class_operation private explicit_return_type "void"
	nparams 1
	  param in name "key" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7083035 "getenv"
	class_operation public explicit_return_type "String"
	nparams 1
	  param in name "name" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of the specified environment variable. An
environment variable is a system-dependent external named
value.

<p>If a security manager exists, its
{@link SecurityManager#checkPermission checkPermission}
method is called with a
<code>{@link RuntimePermission}(\"getenv.\"+name)</code>
permission.  This may result in a {@link SecurityException}
being thrown.  If no exception is thrown the value of the
variable <code>name</code> is returned.

<p><a name=\"EnvironmentVSSystemProperties\"><i>System
properties</i> and <i>environment variables</i> are both
conceptually mappings between names and values.  Both
mechanisms can be used to pass user-defined information to a
Java process.  Environment variables have a more global effect,
because they are visible to all descendants of the process
which defines them, not just the immediate Java subprocess.
They can have subtly different semantics, such as case
insensitivity, on different operating systems.  For these
reasons, environment variables are more likely to have
unintended side effects.  It is best to use system properties
where possible.  Environment variables should be used when a
global effect is desired, or when an external system interface
requires an environment variable (such as <code>PATH</code>).

<p>On UNIX systems the alphabetic case of <code>name</code> is
typically significant, while on Microsoft Windows systems it is
typically not.  For example, the expression
<code>System.getenv(\"FOO\").equals(System.getenv(\"foo\"))</code>
is likely to be true on Microsoft Windows.

@param  name the name of the environment variable
@return the string value of the variable, or <code>null</code>
        if the variable is not defined in the system environment
@throws NullPointerException if <code>name</code> is <code>null</code>
@throws SecurityException
        if a security manager exists and its
        {@link SecurityManager#checkPermission checkPermission}
        method doesn't allow access to the environment variable
        <code>name</code>
@see    #getenv()
@see    ProcessBuilder#environment()"
      end

      operation 7083163 "getenv"
	class_operation public return_type class_ref 136603 // Map
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String,String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an unmodifiable string map view of the current system environment.
The environment is a system-dependent mapping from names to
values which is passed from parent to child processes.

<p>If the system does not support environment variables, an
empty map is returned.

<p>The returned map will never contain null keys or values.
Attempting to query the presence of a null key or value will
throw a {@link NullPointerException}.  Attempting to query
the presence of a key or value which is not of type
{@link String} will throw a {@link ClassCastException}.

<p>The returned map and its collection views may not obey the
general contract of the {@link Object#equals} and
{@link Object#hashCode} methods.

<p>The returned map is typically case-sensitive on all platforms.

<p>If a security manager exists, its
{@link SecurityManager#checkPermission checkPermission}
method is called with a
<code>{@link RuntimePermission}(\"getenv.*\")</code>
permission.  This may result in a {@link SecurityException} being
thrown.

<p>When passing information to a Java subprocess,
<a href=#EnvironmentVSSystemProperties>system properties</a>
are generally preferred over environment variables.

@return the environment as a map of variable names to values
@throws SecurityException
        if a security manager exists and its
        {@link SecurityManager#checkPermission checkPermission}
        method doesn't allow access to the process environment
@see    #getenv(String)
@see    ProcessBuilder#environment()
@since  1.5"
      end

      operation 7083291 "exit"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "status" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Terminates the currently running Java Virtual Machine. The
argument serves as a status code; by convention, a nonzero status
code indicates abnormal termination.
<p>
This method calls the <code>exit</code> method in class
<code>Runtime</code>. This method never returns normally.
<p>
The call <code>System.exit(n)</code> is effectively equivalent to
the call:
<blockquote><pre>
Runtime.getRuntime().exit(n)
</pre></blockquote>

@param      status   exit status.
@throws  SecurityException
       if a security manager exists and its <code>checkExit</code>
       method doesn't allow exit with the specified status.
@see        java.lang.Runtime#exit(int)"
      end

      operation 7083419 "gc"
	class_operation public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Runs the garbage collector.
<p>
Calling the <code>gc</code> method suggests that the Java Virtual
Machine expend effort toward recycling unused objects in order to
make the memory they currently occupy available for quick reuse.
When control returns from the method call, the Java Virtual
Machine has made a best effort to reclaim space from all discarded
objects.
<p>
The call <code>System.gc()</code> is effectively equivalent to the
call:
<blockquote><pre>
Runtime.getRuntime().gc()
</pre></blockquote>

@see     java.lang.Runtime#gc()"
      end

      operation 7083547 "runFinalization"
	class_operation public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Runs the finalization methods of any objects pending finalization.
<p>
Calling this method suggests that the Java Virtual Machine expend
effort toward running the <code>finalize</code> methods of objects
that have been found to be discarded but whose <code>finalize</code>
methods have not yet been run. When control returns from the
method call, the Java Virtual Machine has made a best effort to
complete all outstanding finalizations.
<p>
The call <code>System.runFinalization()</code> is effectively
equivalent to the call:
<blockquote><pre>
Runtime.getRuntime().runFinalization()
</pre></blockquote>

@see     java.lang.Runtime#runFinalization()"
      end

      operation 7083675 "runFinalizersOnExit"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "value" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Enable or disable finalization on exit; doing so specifies that the
finalizers of all objects that have finalizers that have not yet been
automatically invoked are to be run before the Java runtime exits.
By default, finalization on exit is disabled.

<p>If there is a security manager,
its <code>checkExit</code> method is first called
with 0 as its argument to ensure the exit is allowed.
This could result in a SecurityException.

@deprecated  This method is inherently unsafe.  It may result in
	    finalizers being called on live objects while other threads are
     concurrently manipulating those objects, resulting in erratic
	    behavior or deadlock.
@param value indicating enabling or disabling of finalization
@throws  SecurityException
       if a security manager exists and its <code>checkExit</code>
       method doesn't allow the exit.

@see     java.lang.Runtime#exit(int)
@see     java.lang.Runtime#gc()
@see     java.lang.SecurityManager#checkExit(int)
@since   JDK1.1"
      end

      operation 7083803 "load"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "filename" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Loads a code file with the specified filename from the local file
system as a dynamic library. The filename
argument must be a complete path name.
<p>
The call <code>System.load(name)</code> is effectively equivalent
to the call:
<blockquote><pre>
Runtime.getRuntime().load(name)
</pre></blockquote>

@param      filename   the file to load.
@exception  SecurityException  if a security manager exists and its
            <code>checkLink</code> method doesn't allow
            loading of the specified dynamic library
@exception  UnsatisfiedLinkError  if the file does not exist.
@exception  NullPointerException if <code>filename</code> is
            <code>null</code>
@see        java.lang.Runtime#load(java.lang.String)
@see        java.lang.SecurityManager#checkLink(java.lang.String)"
      end

      operation 7083931 "loadLibrary"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "libname" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Loads the system library specified by the <code>libname</code>
argument. The manner in which a library name is mapped to the
actual system library is system dependent.
<p>
The call <code>System.loadLibrary(name)</code> is effectively
equivalent to the call
<blockquote><pre>
Runtime.getRuntime().loadLibrary(name)
</pre></blockquote>

@param      libname   the name of the library.
@exception  SecurityException  if a security manager exists and its
            <code>checkLink</code> method doesn't allow
            loading of the specified dynamic library
@exception  UnsatisfiedLinkError  if the library does not exist.
@exception  NullPointerException if <code>libname</code> is
            <code>null</code>
@see        java.lang.Runtime#loadLibrary(java.lang.String)
@see        java.lang.SecurityManager#checkLink(java.lang.String)"
      end

      operation 7084059 "mapLibraryName"
	class_operation public explicit_return_type "String"
	nparams 1
	  param in name "libname" explicit_type "String"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Maps a library name into a platform-specific string representing
a native library.

@param      libname the name of the library.
@return     a platform-dependent native library name.
@exception  NullPointerException if <code>libname</code> is
            <code>null</code>
@see        java.lang.System#loadLibrary(java.lang.String)
@see        java.lang.ClassLoader#findLibrary(java.lang.String)
@since      1.2"
      end

      operation 7084187 "nullInputStream"
	class_operation private return_type class_ref 179099 // InputStream
	nparams 0
	nexceptions 1
	  exception class_ref 538779 // NullPointerException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The following two methods exist because in, out, and err must be
initialized to null.  The compiler, however, cannot be permitted to
inline access to them, since they are later set to more sensible values
by initializeSystemClass()."
      end

      operation 7084315 "nullPrintStream"
	class_operation private return_type class_ref 162843 // PrintStream
	nparams 0
	nexceptions 1
	  exception class_ref 538779 // NullPointerException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7084443 "initializeSystemClass"
	class_operation private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initialize the system class.  Called after thread initialization."
      end

      operation 7084571 "getCallerClass"
	class_operation package return_type class_ref 164635 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " returns the class of the caller. "
      end
    end

    class 918299 "Terminator"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Package-private utility class for setting up and tearing down
platform-specific support for termination-triggered shutdowns.

@author   Mark Reinhold
@version  1.10, 03/12/19
@since    1.3"
      attribute 2740507 "handler"
	class_attribute private explicit_type "SignalHandler"
	init_value "=  null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7084699 "setup"
	class_operation package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Invocations of setup and teardown are already synchronized
on the shutdown lock, so no further synchronization is needed here"
      end

      operation 7084827 "teardown"
	class_operation package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 918427 "ThreadDeath"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An instance of <code>ThreadDeath</code> is thrown in the victim 
thread when the <code>stop</code> method with zero arguments in 
class <code>Thread</code> is called. 
<p>
An application should catch instances of this class only if it 
must clean up after being terminated asynchronously. If 
<code>ThreadDeath</code> is caught by a method, it is important 
that it be rethrown so that the thread actually dies. 
<p>
The top-level error handler does not print out a message if 
<code>ThreadDeath</code> is never caught. 
<p>
The class <code>ThreadDeath</code> is specifically a subclass of 
<code>Error</code> rather than <code>Exception</code>, even though 
it is a \"normal occurrence\", because many applications 
catch all occurrences of <code>Exception</code> and then discard 
the exception. 

@author unascribed
@version 1.15, 12/19/03
@see     java.lang.Thread#stop()
@since   JDK1.0"
      classrelation 1792795 // <generalisation>
	relation 1792795 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1792795 // <generalisation>
	  b parent class_ref 221851 // Error
      end
    end

    class 918555 "TypeNotPresentException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Thrown when an application tries to access a type using a string
representing the type's name, but no definition for the type with
the specified name can be found.   This exception differs from
{@link ClassNotFoundException} in that <tt>ClassNotFoundException</tt> is a
checked exception, whereas this exception is unchecked.

<p>Note that this exception may be used when undefined type variables
are accessed as well as when types (e.g., classes, interfaces or
annotation types) are loaded.

@author  Josh Bloch
@since 1.5"
      classrelation 1793435 // <generalisation>
	relation 1793435 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1793435 // <generalisation>
	  b parent class_ref 241051 // RuntimeException
      end

      attribute 2741659 "typeName"
	private explicit_type "String"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 7089563 "TypeNotPresentException"
	public explicit_return_type ""
	nparams 2
	  param in name "typeName" explicit_type "String"
	  param inout name "cause" type class_ref 164251 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <tt>TypeNotPresentException</tt> for the named type
with the specified cause.

@param typeName the fully qualified name of the unavailable type
@param cause the exception that was thrown when the system attempted to
   load the named type, or <tt>null</tt> if unavailable or inapplicable"
      end

      operation 7089691 "typeName"
	public explicit_return_type "String"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the fully qualified name of the unavailable type.

@return the fully qualified name of the unavailable type"
      end
    end

    class 918683 "UnknownError"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Thrown when an unknown but serious exception has occurred in the 
Java Virtual Machine. 

@author unascribed
@version 1.13, 12/19/03
@since   JDK1.0"
      classrelation 1793563 // <generalisation>
	relation 1793563 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1793563 // <generalisation>
	  b parent class_ref 913307 // VirtualMachineError
      end

      operation 7089819 "UnknownError"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>UnknownError</code> with no detail message. "
      end

      operation 7089947 "UnknownError"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>UnknownError</code> with the specified detail 
message. 

@param   s   the detail message."
      end
    end

    class 918811 "UnsatisfiedLinkError"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Thrown if the Java Virtual Machine cannot find an appropriate 
native-language definition of a method declared <code>native</code>. 

@author unascribed
@version 1.21, 12/19/03
@see     java.lang.Runtime
@since   JDK1.0"
      classrelation 1793691 // <generalisation>
	relation 1793691 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1793691 // <generalisation>
	  b parent class_ref 689563 // LinkageError
      end

      operation 7090075 "UnsatisfiedLinkError"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>UnsatisfiedLinkError</code> with no detail message."
      end

      operation 7090203 "UnsatisfiedLinkError"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>UnsatisfiedLinkError</code> with the 
specified detail message. 

@param   s   the detail message."
      end
    end

    class 918939 "UnsupportedClassVersionError"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Thrown when the Java Virtual Machine attempts to read a class 
file and determines that the major and minor version numbers
in the file are not supported.

@since   1.2"
      classrelation 1793819 // <generalisation>
	relation 1793819 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1793819 // <generalisation>
	  b parent class_ref 528411 // ClassFormatError
      end

      operation 7090331 "UnsupportedClassVersionError"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>UnsupportedClassVersionError</code> 
with no detail message. "
      end

      operation 7090459 "UnsupportedClassVersionError"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>UnsupportedClassVersionError</code> with
the specified detail message. 

@param   s   the detail message."
      end
    end

    class 919067 "VerifyError"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Thrown when the \"verifier\" detects that a class file, 
though well formed, contains some sort of internal inconsistency 
or security problem. 

@author  unascribed
@version 1.13, 12/19/03
@since   JDK1.0"
      classrelation 1793947 // <generalisation>
	relation 1793947 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1793947 // <generalisation>
	  b parent class_ref 689563 // LinkageError
      end

      operation 7090587 "VerifyError"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>VerifyError</code> with no detail message."
      end

      operation 7090715 "VerifyError"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>VerifyError</code> with the specified detail message.

@param   s   the detail message."
      end
    end

    class 919195 "Void"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The Void class is an uninstantiable placeholder class to hold a
reference to the Class object representing the Java keyword
void.

@author  unascribed
@version 1.13, 12/19/03
@since   JDK1.1"
      classrelation 1794075 // TYPE (<unidirectional association>)
	relation 1794075 --->
	  a role_name "TYPE" init_value "=  Class.getPrimitiveClass(\"void\")" class_relation const_relation public
	    comment "
The Class object representing the primitive Java type void.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Void> ${name}${value};
"
	    classrelation_ref 1794075 // TYPE (<unidirectional association>)
	  b parent class_ref 164635 // Class
      end

      operation 7090843 "Void"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The Void class cannot be instantiated."
      end
    end
  end

  deploymentview 130587 "lang"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 143515 "Runnable"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 163355 // Runnable
      end
      comment "@(#)Runnable.java	1.24 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 143643 "Thread"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.AccessController;
import java.security.AccessControlContext;
import java.security.PrivilegedAction;
import java.util.Map;
import java.util.HashMap;
import java.util.Collections;
import java.util.concurrent.locks.LockSupport;
import sun.misc.SoftCache;
import sun.nio.ch.Interruptible;
import sun.security.util.SecurityConstants;
${definition}"
      associated_classes
	class_ref 163227 // Thread
      end
      comment "@(#)Thread.java	1.156 06/03/22

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 170523 "Comparable"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 221467 // Comparable
      end
      comment "@(#)Comparable.java	1.22 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 170779 "Throwable"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
${definition}"
      associated_classes
	class_ref 164251 // Throwable
      end
      comment "@(#)Throwable.java	1.53 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 170907 "Exception"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 165403 // Exception
      end
      comment "@(#)Exception.java	1.31 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 171291 "Error"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 221851 // Error
      end
      comment "@(#)Error.java	1.16 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 219291 "RuntimeException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 241051 // RuntimeException
      end
      comment "@(#)RuntimeException.java	1.13 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 270363 "Cloneable"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 339867 // Cloneable
      end
      comment "@(#)Cloneable.java	1.16 04/01/17

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 320923 "Object"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 168347 // Object
      end
      comment "@(#)Object.java	1.68 04/04/08

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 351771 "ClassLoader"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.InputStream;
import java.io.IOException;
import java.io.File;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.net.MalformedURLException;
import java.net.URL;
import java.security.AccessController;
import java.security.AccessControlContext;
import java.security.CodeSource;
import java.security.Policy;
import java.security.PrivilegedAction;
import java.security.PrivilegedActionException;
import java.security.PrivilegedExceptionAction;
import java.security.ProtectionDomain;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;
import java.util.Stack;
import java.util.Map;
import java.util.Vector;
import sun.misc.ClassFileTransformer;
import sun.misc.CompoundEnumeration;
import sun.misc.Resource;
import sun.misc.URLClassPath;
import sun.misc.VM;
import sun.reflect.Reflection;
import sun.security.util.SecurityConstants;
${definition}"
      associated_classes
	class_ref 163611 // ClassLoader
	class_ref 528923 // SystemClassLoaderAction
      end
      comment "@(#)ClassLoader.java	1.186 04/08/02

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 391451 "Readable"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
${definition}"
      associated_classes
	class_ref 573339 // Readable
      end
      comment "@(#)Readable.java	1.3 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 391835 "Appendable"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
${definition}"
      associated_classes
	class_ref 573851 // Appendable
      end
      comment "@(#)Appendable.java	1.3 04/07/16

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 632603 "UnsupportedOperationException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 220315 // UnsupportedOperationException
      end
      comment "@(#)UnsupportedOperationException.java	1.19 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 632859 "IllegalStateException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 282779 // IllegalStateException
      end
      comment "@(#)IllegalStateException.java	1.15 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 650523 "Character"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Map;
import java.util.HashMap;
import java.util.Locale;
${definition}"
      associated_classes
	class_ref 602011 // Character
      end
      comment "@(#)Character.java	1.31 04/09/14

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 677787 "LinkageError"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 689563 // LinkageError
      end
      comment "@(#)LinkageError.java	1.13 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 677915 "IncompatibleClassChangeError"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 909083 // IncompatibleClassChangeError
      end
      comment "@(#)IncompatibleClassChangeError.java	1.18 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 678043 "AbstractMethodError"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 908955 // AbstractMethodError
      end
      comment "@(#)AbstractMethodError.java	1.18 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 678171 "CharSequence"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 393755 // CharSequence
      end
      comment "@(#)CharSequence.java	1.8 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 678299 "AbstractStringBuilder"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import sun.misc.FloatingDecimal;
${definition}"
      associated_classes
	class_ref 909211 // AbstractStringBuilder
      end
      comment "@(#)AbstractStringBuilder.java	1.14 05/09/26

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 678427 "ArithmeticException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 909339 // ArithmeticException
      end
      comment "@(#)ArithmeticException.java	1.22 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 678555 "IndexOutOfBoundsException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 870555 // IndexOutOfBoundsException
      end
      comment "@(#)IndexOutOfBoundsException.java	1.11 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 678683 "ArrayIndexOutOfBoundsException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 791195 // ArrayIndexOutOfBoundsException
      end
      comment "@(#)ArrayIndexOutOfBoundsException.java	1.21 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 678811 "ArrayStoreException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 909467 // ArrayStoreException
      end
      comment "@(#)ArrayStoreException.java	1.11 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 678939 "AssertionError"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 909595 // AssertionError
      end
      comment "@(#)AssertionError.java	1.7 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 679067 "AssertionStatusDirectives"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 528795 // AssertionStatusDirectives
      end
      comment "@(#)AssertionStatusDirectives.java	1.4 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 679195 "Boolean"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 392091 // Boolean
      end
      comment "@(#)Boolean.java	1.51 04/05/11

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 679323 "Number"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 413979 // Number
      end
      comment "@(#)Number.java	1.29 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 679451 "Byte"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 533403 // Byte
      end
      comment "@(#)Byte.java	1.40 04/05/11

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 679579 "CharacterData00"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 909851 // CharacterData00
      end
      comment " This file was generated AUTOMATICALLY from a template file Wed May 28 01:19:22 PDT 2008
 @(#)CharacterData00.java.template	1.4 04/09/14

Copyright 1994-2002 Sun Microsystems, Inc. All Rights Reserved.

This software is the proprietary information of Sun Microsystems, Inc.
Use is subject to license terms.
"
    end

    artifact 679707 "CharacterData01"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 909979 // CharacterData01
      end
      comment " This file was generated AUTOMATICALLY from a template file Wed May 28 01:19:23 PDT 2008
 @(#)CharacterData01.java.template	1.3 03/07/26

Copyright 1994-2002 Sun Microsystems, Inc. All Rights Reserved.

This software is the proprietary information of Sun Microsystems, Inc.
Use is subject to license terms.
"
    end

    artifact 679835 "CharacterData02"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 910107 // CharacterData02
      end
      comment " This file was generated AUTOMATICALLY from a template file Wed May 28 01:19:24 PDT 2008
 @(#)CharacterData02.java.template	1.3 03/07/26

Copyright 1994-2002 Sun Microsystems, Inc. All Rights Reserved.

This software is the proprietary information of Sun Microsystems, Inc.
Use is subject to license terms.
"
    end

    artifact 679963 "CharacterData0E"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 910235 // CharacterData0E
      end
      comment " This file was generated AUTOMATICALLY from a template file Wed May 28 01:19:25 PDT 2008
 @(#)CharacterData0E.java.template	1.3 03/07/26

Copyright 1994-2002 Sun Microsystems, Inc. All Rights Reserved.

This software is the proprietary information of Sun Microsystems, Inc.
Use is subject to license terms.
"
    end

    artifact 680091 "CharacterDataLatin1"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 910363 // CharacterDataLatin1
      end
      comment " This file was generated AUTOMATICALLY from a template file Wed May 28 01:19:21 PDT 2008
 @(#)CharacterDataLatin1.java.template	1.6 04/09/14

Copyright 1994-2002 Sun Microsystems, Inc. All Rights Reserved.

This software is the proprietary information of Sun Microsystems, Inc.
Use is subject to license terms.
"
    end

    artifact 680219 "CharacterDataPrivateUse"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 910491 // CharacterDataPrivateUse
      end
      comment " @(#)CharacterDataPrivateUse.java.template	1.2 03/07/26

Copyright 1994-2002 Sun Microsystems, Inc. All Rights Reserved.

This software is the proprietary information of Sun Microsystems, Inc.
Use is subject to license terms.
"
    end

    artifact 680347 "CharacterDataUndefined"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 910619 // CharacterDataUndefined
      end
      comment " @(#)CharacterDataUndefined.java.template	1.2 03/07/26

Copyright 1994-2002 Sun Microsystems, Inc. All Rights Reserved.

This software is the proprietary information of Sun Microsystems, Inc.
Use is subject to license terms.
"
    end

    artifact 680859 "Class"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.reflect.Array;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Member;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Constructor;
import java.lang.reflect.GenericDeclaration;
import java.lang.reflect.Modifier;
import java.lang.reflect.Type;
import java.lang.reflect.TypeVariable;
import java.lang.reflect.InvocationTargetException;
import java.lang.ref.SoftReference;
import java.io.InputStream;
import java.io.ObjectStreamClass;
import java.io.ObjectStreamField;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.LinkedList;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.Map;
import java.util.HashMap;
import sun.misc.Unsafe;
import sun.reflect.ConstantPool;
import sun.reflect.Reflection;
import sun.reflect.ReflectionFactory;
import sun.reflect.SignatureIterator;
import sun.reflect.generics.factory.CoreReflectionFactory;
import sun.reflect.generics.factory.GenericsFactory;
import sun.reflect.generics.repository.ClassRepository;
import sun.reflect.generics.repository.MethodRepository;
import sun.reflect.generics.repository.ConstructorRepository;
import sun.reflect.generics.scope.ClassScope;
import sun.security.util.SecurityConstants;
import java.lang.annotation.Annotation;
import sun.reflect.annotation.*;
${definition}"
      associated_classes
	class_ref 164635 // Class
      end
      comment "@(#)Class.java	1.188 06/05/10

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 680987 "ClassCastException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 233755 // ClassCastException
      end
      comment "@(#)ClassCastException.java	1.20 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 681115 "ClassCircularityError"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 911643 // ClassCircularityError
      end
      comment "@(#)ClassCircularityError.java	1.15 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 681243 "ClassFormatError"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 528411 // ClassFormatError
      end
      comment "@(#)ClassFormatError.java	1.20 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 681371 "ClassNotFoundException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 201883 // ClassNotFoundException
      end
      comment "@(#)ClassNotFoundException.java	1.20 04/02/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 681499 "CloneNotSupportedException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 383643 // CloneNotSupportedException
      end
      comment "@(#)CloneNotSupportedException.java	1.11 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 681627 "Compiler"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 911771 // Compiler
      end
      comment "@(#)Compiler.java	1.20 04/05/05

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 681755 "ConditionalSpecialCasing"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.text.BreakIterator;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.Locale;
import sun.text.Normalizer;
${definition}"
      associated_classes
	class_ref 911899 // ConditionalSpecialCasing
      end
      comment "@(#)ConditionalSpecialCasing.java	1.4 04/09/14

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 681883 "Deprecated"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.annotation.*;
${definition}"
      associated_classes
	class_ref 912155 // Deprecated
      end
      comment "@(#)Deprecated.java	1.4 04/06/10

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 682011 "Double"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import sun.misc.FloatingDecimal;
import sun.misc.FpUtils;
import sun.misc.DoubleConsts;
${definition}"
      associated_classes
	class_ref 689179 // Double
      end
      comment "@(#)Double.java	1.94 04/05/11

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 682139 "Enum"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.Serializable;
import java.io.IOException;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.io.ObjectStreamException;
${definition}"
      associated_classes
	class_ref 204187 // Enum
      end
      comment "@(#)Enum.java	1.13 07/10/04

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 682267 "EnumConstantNotPresentException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 912283 // EnumConstantNotPresentException
      end
      comment "@(#)EnumConstantNotPresentException.java	1.1 04/02/03

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 682395 "ExceptionInInitializerError"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 689435 // ExceptionInInitializerError
      end
      comment "@(#)ExceptionInInitializerError.java	1.17 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 682523 "Float"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import sun.misc.FloatingDecimal;
import sun.misc.FpUtils;
import sun.misc.FloatConsts;
import sun.misc.DoubleConsts;
${definition}"
      associated_classes
	class_ref 876955 // Float
      end
      comment "@(#)Float.java	1.94 04/05/11

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 682651 "IllegalAccessError"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 912411 // IllegalAccessError
      end
      comment "@(#)IllegalAccessError.java	1.16 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 682779 "IllegalAccessException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 306331 // IllegalAccessException
      end
      comment "@(#)IllegalAccessException.java	1.14 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 682907 "IllegalArgumentException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 216859 // IllegalArgumentException
      end
      comment "@(#)IllegalArgumentException.java	1.23 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 683035 "IllegalMonitorStateException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 912539 // IllegalMonitorStateException
      end
      comment "@(#)IllegalMonitorStateException.java	1.12 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 683163 "IllegalThreadStateException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 912667 // IllegalThreadStateException
      end
      comment "@(#)IllegalThreadStateException.java	1.21 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 683291 "ThreadLocal"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.ref.*;
${definition}"
      associated_classes
	class_ref 163867 // ThreadLocal
      end
      comment "@(#)ThreadLocal.java	1.33 04/02/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 683419 "InheritableThreadLocal"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.ref.*;
${definition}"
      associated_classes
	class_ref 912795 // InheritableThreadLocal
      end
      comment "@(#)InheritableThreadLocal.java	1.21 04/02/09

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 683547 "InstantiationError"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 913051 // InstantiationError
      end
      comment "@(#)InstantiationError.java	1.12 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 683675 "InstantiationException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 220059 // InstantiationException
      end
      comment "@(#)InstantiationException.java	1.17 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 683803 "Integer"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 170395 // Integer
      end
      comment "@(#)Integer.java	1.90 04/05/11

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 683931 "VirtualMachineError"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 913307 // VirtualMachineError
      end
      comment "@(#)VirtualMachineError.java	1.14 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 684059 "InternalError"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 567451 // InternalError
      end
      comment "@(#)InternalError.java	1.21 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 684187 "InterruptedException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 164123 // InterruptedException
      end
      comment "@(#)InterruptedException.java	1.15 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 684315 "Iterable"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Iterator;
${definition}"
      associated_classes
	class_ref 913435 // Iterable
      end
      comment "@(#)Iterable.java	1.3 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 684443 "Long"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 277915 // Long
      end
      comment "@(#)Long.java	1.79 04/05/11

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 684571 "Math"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Random;
${definition}"
      associated_classes
	class_ref 913691 // Math
      end
      comment "@(#)Math.java	1.69 04/06/14

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 684699 "NegativeArraySizeException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 913819 // NegativeArraySizeException
      end
      comment "@(#)NegativeArraySizeException.java	1.19 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 684827 "NoClassDefFoundError"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 913947 // NoClassDefFoundError
      end
      comment "@(#)NoClassDefFoundError.java	1.22 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 684955 "NoSuchFieldError"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 914075 // NoSuchFieldError
      end
      comment "@(#)NoSuchFieldError.java	1.12 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 685083 "NoSuchFieldException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 219931 // NoSuchFieldException
      end
      comment "@(#)NoSuchFieldException.java	1.14 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 685211 "NoSuchMethodError"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 914203 // NoSuchMethodError
      end
      comment "@(#)NoSuchMethodError.java	1.21 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 685339 "NoSuchMethodException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 791451 // NoSuchMethodException
      end
      comment "@(#)NoSuchMethodException.java	1.13 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 685467 "NullPointerException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 538779 // NullPointerException
      end
      comment "@(#)NullPointerException.java	1.19 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 685595 "NumberFormatException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 533659 // NumberFormatException
      end
      comment "@(#)NumberFormatException.java	1.20 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 685723 "OutOfMemoryError"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 914331 // OutOfMemoryError
      end
      comment "@(#)OutOfMemoryError.java	1.21 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 685851 "Override"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.annotation.*;
${definition}"
      associated_classes
	class_ref 914459 // Override
      end
      comment "@(#)Override.java	1.5 04/02/09

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 685979 "Package"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.InputStream;
import java.util.Enumeration;
import java.util.StringTokenizer;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URL;
import java.net.MalformedURLException;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.jar.JarInputStream;
import java.util.jar.Manifest;
import java.util.jar.Attributes;
import java.util.jar.Attributes.Name;
import java.util.jar.JarException;
import java.util.Map;
import java.util.HashMap;
import java.util.Iterator;
import sun.net.www.ParseUtil;
import java.lang.annotation.Annotation;
${definition}"
      associated_classes
	class_ref 528539 // Package
      end
      comment "@(#)Package.java	1.45 04/04/26

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 686107 "Process"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
${definition}"
      associated_classes
	class_ref 173723 // Process
      end
      comment "@(#)Process.java	1.23 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 686235 "ProcessBuilder"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
${definition}"
      associated_classes
	class_ref 914715 // ProcessBuilder
      end
      comment "@(#)ProcessBuilder.java	1.6 04/02/07

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.

@author  Martin Buchholz
@version 1.6, 04/02/07"
    end

    artifact 686363 "ProcessEnvironment"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
import java.util.*;
${definition}"
      associated_classes
	class_ref 914843 // ProcessEnvironment
      end
      comment "@(#)ProcessEnvironment.java	1.7 06/12/05

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.

 We use APIs that access a so-called Windows \"Environment Block\",
which looks like an array of jchars like this:

FOO=BAR\\u0000 ... GORP=QUUX\\u0000\\u0000

This data structure has a number of peculiarities we must contend with:
- The NUL jchar separators, and a double NUL jchar terminator.
  It appears that the Windows implementation requires double NUL
  termination even if the environment is empty.  We should always
  generate environments with double NUL termination, while accepting
  empty environments consisting of a single NUL.
- on Windows9x, this is actually an array of 8-bit chars, not jchars,
  encoded in the system default encoding.
- The block must be sorted by Unicode value, case-insensitively.
- There are magic environment variables maintained by Windows
  that start with a `=' (!) character.  These are used for
  Windows drive current directory (e.g. \"=C:=C:\\WINNT\") or the
  exit code of the last command (e.g. \"=ExitCode=0000001\").

Since Java and non-9x Windows speak the same character set, and
even the same encoding, we don't have to deal with unreliable
conversion to byte streams.  Just add a few NUL terminators.

System.getenv(String) is case-insensitive, while System.getenv()
returns a map that is case-sensitive, which is consistent with
native Windows APIs.

The non-private methods in this class are not for general use even
within this package.  Instead, they are the system-dependent parts
of the system-independent method of the same name.  Don't even
think of using this class unless your method's name appears below.

@author Martin Buchholz
@version 1.7, 06/12/05
@since 1.5"
    end

    artifact 686491 "ProcessImpl"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
${definition}"
      associated_classes
	class_ref 915739 // ProcessImpl
      end
      comment "@(#)ProcessImpl.java	1.30 04/03/25

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 686619 "Runtime"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
import java.util.StringTokenizer;
${definition}"
      associated_classes
	class_ref 915867 // Runtime
      end
      comment "@(#)Runtime.java	1.74 04/05/18

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 686747 "RuntimePermission"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.*;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.StringTokenizer;
${definition}"
      associated_classes
	class_ref 164507 // RuntimePermission
      end
      comment "@(#)RuntimePermission.java	1.53 04/04/20

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 686875 "SecurityException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 203419 // SecurityException
      end
      comment "@(#)SecurityException.java	1.16 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 687003 "SecurityManager"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.*;
import java.io.FileDescriptor;
import java.io.File;
import java.io.FilePermission;
import java.awt.AWTPermission;
import java.util.PropertyPermission;
import java.lang.RuntimePermission;
import java.net.SocketPermission;
import java.net.NetPermission;
import java.util.Hashtable;
import java.net.InetAddress;
import java.lang.reflect.Member;
import java.lang.reflect.*;
import java.net.URL;
import sun.security.util.SecurityConstants;
${definition}"
      associated_classes
	class_ref 904347 // SecurityManager
      end
      comment "@(#)SecurityManager.java	1.136 04/06/28

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 687131 "Short"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 915995 // Short
      end
      comment "@(#)Short.java	1.43 04/05/11

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 687259 "Shutdown"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.HashSet;
import java.util.Iterator;
${definition}"
      associated_classes
	class_ref 916251 // Shutdown
      end
      comment "@(#)Shutdown.java	1.11 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 687387 "StackOverflowError"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 916635 // StackOverflowError
      end
      comment "@(#)StackOverflowError.java	1.21 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 687515 "StackTraceElement"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 164379 // StackTraceElement
      end
      comment "@(#)StackTraceElement.java	1.10 04/02/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 687643 "StrictMath"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Random;
import sun.misc.FpUtils;
${definition}"
      associated_classes
	class_ref 916763 // StrictMath
      end
      comment "@(#)StrictMath.java	1.26 04/06/14

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 687771 "String"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.ObjectStreamClass;
import java.io.ObjectStreamField;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Formatter;
import java.util.Locale;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
${definition}"
      associated_classes
	class_ref 179611 // String
      end
      comment "@(#)String.java	1.189 05/10/21

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 687899 "StringBuffer"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import sun.misc.FloatingDecimal;
${definition}"
      associated_classes
	class_ref 198171 // StringBuffer
      end
      comment "@(#)StringBuffer.java	1.99 04/07/15

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 688027 "StringBuilder"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import sun.misc.FloatingDecimal;
${definition}"
      associated_classes
	class_ref 360091 // StringBuilder
      end
      comment "@(#)StringBuilder.java	1.9 04/07/16

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 688155 "StringCoding"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.CharConversionException;
import java.io.UnsupportedEncodingException;
import java.lang.ref.SoftReference;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CharsetEncoder;
import java.nio.charset.CharacterCodingException;
import java.nio.charset.CoderResult;
import java.nio.charset.CodingErrorAction;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.MalformedInputException;
import java.nio.charset.UnsupportedCharsetException;
import sun.io.ByteToCharConverter;
import sun.io.CharToByteConverter;
import sun.io.Converters;
import sun.misc.MessageUtils;
import sun.nio.cs.HistoricallyNamedCharset;
${definition}"
      associated_classes
	class_ref 917019 // StringCoding
      end
      comment "@(#)StringCoding.java	1.15	05/03/03

Copyright 2005 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 688283 "StringIndexOutOfBoundsException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 577691 // StringIndexOutOfBoundsException
      end
      comment "@(#)StringIndexOutOfBoundsException.java	1.22 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 688411 "SuppressWarnings"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.annotation.*;
import java.lang.annotation.ElementType;
import static java.lang.annotation.ElementType.*;
${definition}"
      associated_classes
	class_ref 917915 // SuppressWarnings
      end
      comment "@(#)SuppressWarnings.java	1.3 04/02/06

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 688539 "System"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
import java.util.Properties;
import java.util.PropertyPermission;
import java.util.StringTokenizer;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.security.AllPermission;
import java.nio.channels.Channel;
import java.nio.channels.spi.SelectorProvider;
import sun.net.InetAddressCachePolicy;
import sun.nio.ch.Interruptible;
import sun.reflect.Reflection;
import sun.security.util.SecurityConstants;
import sun.reflect.annotation.AnnotationType;
${definition}"
      associated_classes
	class_ref 918043 // System
      end
      comment "@(#)System.java	1.150 06/03/22

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 688667 "Terminator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import sun.misc.Signal;
import sun.misc.SignalHandler;
${definition}"
      associated_classes
	class_ref 918299 // Terminator
      end
      comment "@(#)Terminator.java	1.10 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 688795 "ThreadDeath"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 918427 // ThreadDeath
      end
      comment "@(#)ThreadDeath.java	1.15 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 688923 "ThreadGroup"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.PrintStream;
import sun.misc.VM;
${definition}"
      associated_classes
	class_ref 163483 // ThreadGroup
      end
      comment "@(#)ThreadGroup.java	1.63 04/06/17

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 689051 "TypeNotPresentException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 918555 // TypeNotPresentException
      end
      comment "@(#)TypeNotPresentException.java	1.4 04/02/03

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 689179 "UnknownError"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 918683 // UnknownError
      end
      comment "@(#)UnknownError.java	1.13 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 689307 "UnsatisfiedLinkError"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 918811 // UnsatisfiedLinkError
      end
      comment "@(#)UnsatisfiedLinkError.java	1.21 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 689435 "UnsupportedClassVersionError"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 918939 // UnsupportedClassVersionError
      end
      comment "@(#)UnsupportedClassVersionError.java	1.10 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 689563 "VerifyError"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 919067 // VerifyError
      end
      comment "@(#)VerifyError.java	1.13 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end

    artifact 689691 "Void"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 919195 // Void
      end
      comment "@(#)Void.java	1.13 03/12/19

Copyright 2004 Sun Microsystems, Inc. All rights reserved.
SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms."
    end
  end

  package_ref 133659 // reflect

  package_ref 138395 // ref

  package_ref 179995 // annotation

  package_ref 180251 // instrument

  package_ref 180379 // management
end
