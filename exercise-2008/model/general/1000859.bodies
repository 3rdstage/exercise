class CASUpdater
!!!7989659.java!!!	CASUpdater(inout tclass : Class, in fieldName : String)
            Field field = null;
	    Class caller = null;
	    int modifiers = 0;
            try {
                field = tclass.getDeclaredField(fieldName);
		caller = sun.reflect.Reflection.getCallerClass(3);
		modifiers = field.getModifiers();
                sun.reflect.misc.ReflectUtil.ensureMemberAccess(
                    caller, tclass, null, modifiers); 
		sun.reflect.misc.ReflectUtil.checkPackageAccess(tclass);
            } catch(Exception ex) {
                throw new RuntimeException(ex);
            }

            Class fieldt = field.getType();
            if (fieldt != long.class)
                throw new IllegalArgumentException("Must be long type");

            if (!Modifier.isVolatile(modifiers))
                throw new IllegalArgumentException("Must be volatile type");

	    this.cclass = (Modifier.isProtected(modifiers) &&
			   caller != tclass) ? caller : null;
            this.tclass = tclass;
            offset = unsafe.objectFieldOffset(field);
!!!7989787.java!!!	compareAndSet(inout obj : T, in expect : long, in update : long) : boolean
            if (!tclass.isInstance(obj))
                throw new ClassCastException();
	    if (cclass != null)
	        ensureProtectedAccess(obj);
            return unsafe.compareAndSwapLong(obj, offset, expect, update);
!!!7989915.java!!!	weakCompareAndSet(inout obj : T, in expect : long, in update : long) : boolean
            if (!tclass.isInstance(obj))
                throw new ClassCastException();
	    if (cclass != null)
	        ensureProtectedAccess(obj);
            return unsafe.compareAndSwapLong(obj, offset, expect, update);
!!!7990043.java!!!	set(inout obj : T, in newValue : long) : void
            if (!tclass.isInstance(obj))
                throw new ClassCastException();
	    if (cclass != null)
	        ensureProtectedAccess(obj);
            unsafe.putLongVolatile(obj, offset, newValue);
!!!7990171.java!!!	get(inout obj : T) : long
            if (!tclass.isInstance(obj))
                throw new ClassCastException();
	    if (cclass != null)
	        ensureProtectedAccess(obj);
            return unsafe.getLongVolatile(obj, offset);
!!!7990299.java!!!	ensureProtectedAccess(inout obj : T) : void
	    if (cclass.isInstance(obj)) {
		return;
	    }
	    throw new RuntimeException (
                new IllegalAccessException("Class " +
		    cclass.getName() +
                    " can not access a protected member of class " +
                    tclass.getName() +
		    " using an instance of " +
                    obj.getClass().getName()
		)
	    );
