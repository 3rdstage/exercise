class FontSize
!!!9934235.java!!!	getValue(inout a : AttributeSet, inout ss : StyleSheet) : float
            ss = getStyleSheet(ss);
	    if (index) {
		// it's an index, translate from size table
		return getPointSize((int) value, ss);
	    }
	    else if (lu == null) {
		return value;
	    }
	    else {
		if (lu.type == 0) {
                    boolean isW3CLengthUnits = (ss == null) ? false : ss.isW3CLengthUnits();
                    return lu.getValue(isW3CLengthUnits);
		}
		if (a != null) {
		    AttributeSet resolveParent = a.getResolveParent();

		    if (resolveParent != null) {
			int pValue = StyleConstants.getFontSize(resolveParent);

			float retValue;
			if (lu.type == 1 || lu.type == 3) {
			    retValue = lu.value * (float)pValue;
			}
			else {
			    retValue = lu.value + (float)pValue;
			}
			return retValue;
		    }
		}
		// a is null, or no resolve parent.
		return 12;
	    }
!!!9934363.java!!!	parseCssValue(in value : String) : Object
	    FontSize fs = new FontSize();
	    fs.svalue = value;
	    try {
		if (value.equals("xx-small")) {
		    fs.value = 1;
		    fs.index = true;
		} else if (value.equals("x-small")) {
		    fs.value = 2;
		    fs.index = true;
		} else if (value.equals("small")) {
		    fs.value = 3;
		    fs.index = true;
		} else if (value.equals("medium")) {
		    fs.value = 4;
		    fs.index = true;
		} else if (value.equals("large")) {
		    fs.value = 5;
		    fs.index = true;
		} else if (value.equals("x-large")) {
		    fs.value = 6;
		    fs.index = true;
		} else if (value.equals("xx-large")) {
		    fs.value = 7;
		    fs.index = true;
		} else {
		    fs.lu = new LengthUnit(value, (short)1, 1f);
		}
		// relative sizes, larger | smaller (adjust from parent by
		// 1.5 pixels)
		// em, ex refer to parent sizes
		// lengths: pt, mm, cm, pc, in, px
		//          em (font height 3em would be 3 times font height)
		//          ex (height of X)
		// lengths are (+/-) followed by a number and two letter
		// unit identifier
	    } catch (NumberFormatException nfe) {
		fs = null;
	    }
	    return fs;
!!!9934491.java!!!	parseHtmlValue(in value : String) : Object
	    FontSize fs = new FontSize();
	    fs.svalue = value;

	    try {
		/*
		 * relative sizes in the size attribute are relative
		 * to the <basefont>'s size.
		 */
		int baseFontSize = getBaseFontSize();
		if ((value != null) && (value.charAt(0) == '+')) {
		    int relSize = Integer.valueOf(value.substring(1)).intValue();
		    fs.value = baseFontSize + relSize;
		    fs.index = true;
		} else if ((value != null) && (value.charAt(0) == '-')) {
		    int relSize = -Integer.valueOf(value.substring(1)).intValue();
		    fs.value = baseFontSize + relSize;
		    fs.index = true;
		} else {
		    fs.value = Integer.parseInt(value);
		    if (fs.value > 7) {
			fs.value = 7;
		    } else if (fs.value < 0) {
			fs.value = 0;
		    }
		    fs.index = true;
		}

	    } catch (NumberFormatException nfe) {
		fs = null;
	    }
	    return fs;
!!!9934619.java!!!	fromStyleConstants(inout key : StyleConstants, inout value : Object) : Object
            if (value instanceof Number) {
                FontSize fs = new FontSize();

                fs.value = getIndexOfSize(((Number)value).floatValue(), StyleSheet.sizeMapDefault);
                fs.svalue = Integer.toString((int)fs.value);
                fs.index = true;
                return fs;
            }
            return parseCssValue(value.toString());
!!!9934747.java!!!	toStyleConstants(inout key : StyleConstants, inout v : View) : Object
	    if (v != null) {
		return new Integer((int) getValue(v.getAttributes(), null));
	    }
	    return new Integer((int) getValue(null, null));
