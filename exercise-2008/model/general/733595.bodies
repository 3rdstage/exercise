class XMLDTDLoader
!!!5018395.java!!!	XMLDTDLoader()
        this(new SymbolTable());
!!!5018523.java!!!	XMLDTDLoader(inout symbolTable : SymbolTable)
        this(symbolTable, null);
!!!5018651.java!!!	XMLDTDLoader(inout symbolTable : SymbolTable, inout grammarPool : XMLGrammarPool)
        this(symbolTable, grammarPool, null, new XMLEntityManager());
!!!5018779.java!!!	XMLDTDLoader(inout symbolTable : SymbolTable, inout grammarPool : XMLGrammarPool, inout errorReporter : XMLErrorReporter, inout entityResolver : XMLEntityResolver)
        fSymbolTable = symbolTable;
        fGrammarPool = grammarPool;
        if(errorReporter == null) {
            errorReporter = new XMLErrorReporter();
            errorReporter.setProperty(ERROR_HANDLER, new DefaultErrorHandler());
        }
        fErrorReporter = errorReporter;
        // Add XML message formatter if there isn't one.
        if (fErrorReporter.getMessageFormatter(XMLMessageFormatter.XML_DOMAIN) == null) {
            XMLMessageFormatter xmft = new XMLMessageFormatter();
            fErrorReporter.putMessageFormatter(XMLMessageFormatter.XML_DOMAIN, xmft);
            fErrorReporter.putMessageFormatter(XMLMessageFormatter.XMLNS_DOMAIN, xmft);
        }
        fEntityResolver = entityResolver;
        if(fEntityResolver instanceof XMLEntityManager) {
            fEntityManager = (XMLEntityManager)fEntityResolver;
        } else {
            fEntityManager = new XMLEntityManager();
        }
        fEntityManager.setProperty(Constants.XERCES_PROPERTY_PREFIX + Constants.ERROR_REPORTER_PROPERTY, errorReporter);
        fDTDScanner = new XMLDTDScannerImpl(fSymbolTable, fErrorReporter, fEntityManager);
        fDTDScanner.setDTDHandler(this);
        fDTDScanner.setDTDContentModelHandler(this);
        reset();
!!!5018907.java!!!	setFeature(in featureId : String, inout state : boolean) : void
        if(featureId.equals(VALIDATION)) {
            fValidation = state;
        } else if(featureId.equals(WARN_ON_DUPLICATE_ATTDEF)) {
            fWarnDuplicateAttdef = state;
        } else if(featureId.equals(NOTIFY_CHAR_REFS)) {
            fDTDScanner.setFeature(featureId, state);
        } else if(featureId.equals(STANDARD_URI_CONFORMANT_FEATURE)) {
            fStrictURI = state;
        }  else {
            throw new XMLConfigurationException(XMLConfigurationException.NOT_RECOGNIZED, featureId);
        }
!!!5019035.java!!!	getRecognizedProperties() : String
        return (String[])(LOADER_RECOGNIZED_PROPERTIES.clone());
!!!5019163.java!!!	getProperty(in propertyId : String) : Object
        if(propertyId.equals( SYMBOL_TABLE)) {
            return fSymbolTable;
        } else if(propertyId.equals( ERROR_REPORTER)) {
            return fErrorReporter;
        } else if(propertyId.equals( ERROR_HANDLER)) {
            return fErrorReporter.getErrorHandler();
        } else if(propertyId.equals( ENTITY_RESOLVER)) {
            return fEntityResolver;
        } else if(propertyId.equals( GRAMMAR_POOL)) {
            return fGrammarPool;
        } else if(propertyId.equals( DTD_VALIDATOR)) {
            return fValidator;
        } 
        throw new XMLConfigurationException(XMLConfigurationException.NOT_RECOGNIZED, propertyId);
!!!5019291.java!!!	setProperty(in propertyId : String, inout value : Object) : void
        if(propertyId.equals( SYMBOL_TABLE)) {
            fSymbolTable = (SymbolTable)value;
            fDTDScanner.setProperty(propertyId, value);
            fEntityManager.setProperty(propertyId, value);
        } else if(propertyId.equals( ERROR_REPORTER)) {
            fErrorReporter = (XMLErrorReporter)value;
            // Add XML message formatter if there isn't one.
            if (fErrorReporter.getMessageFormatter(XMLMessageFormatter.XML_DOMAIN) == null) {
                XMLMessageFormatter xmft = new XMLMessageFormatter();
                fErrorReporter.putMessageFormatter(XMLMessageFormatter.XML_DOMAIN, xmft);
                fErrorReporter.putMessageFormatter(XMLMessageFormatter.XMLNS_DOMAIN, xmft);
            }
            fDTDScanner.setProperty(propertyId, value);
            fEntityManager.setProperty(propertyId, value);
        } else if(propertyId.equals( ERROR_HANDLER)) {
            fErrorReporter.setProperty(propertyId, value);
        } else if(propertyId.equals( ENTITY_RESOLVER)) {
            fEntityResolver = (XMLEntityResolver)value;
        } else if(propertyId.equals( GRAMMAR_POOL)) {
            fGrammarPool = (XMLGrammarPool)value;
        } else {
            throw new XMLConfigurationException(XMLConfigurationException.NOT_RECOGNIZED, propertyId);
        }
!!!5019419.java!!!	getFeature(in featureId : String) : boolean
        if(featureId.equals( VALIDATION)) {
            return fValidation;
        } else if(featureId.equals( WARN_ON_DUPLICATE_ATTDEF)) {
            return fWarnDuplicateAttdef;
        } else if(featureId.equals( NOTIFY_CHAR_REFS)) {
            return fDTDScanner.getFeature(featureId);
        }
        throw new XMLConfigurationException(XMLConfigurationException.NOT_RECOGNIZED, featureId);
!!!5019547.java!!!	setLocale(inout locale : Locale) : void
        fLocale = locale;
!!!5019675.java!!!	getLocale() : Locale
        return fLocale;
!!!5019803.java!!!	setErrorHandler(inout errorHandler : XMLErrorHandler) : void
        fErrorReporter.setProperty(ERROR_HANDLER, errorHandler);
!!!5019931.java!!!	getErrorHandler() : XMLErrorHandler
        return fErrorReporter.getErrorHandler();
!!!5020059.java!!!	setEntityResolver(inout entityResolver : XMLEntityResolver) : void
        fEntityResolver = entityResolver;
!!!5020187.java!!!	getEntityResolver() : XMLEntityResolver
        return fEntityResolver;
!!!5020315.java!!!	loadGrammar(inout source : XMLInputSource) : Grammar
        reset();
        // First chance checking strict URI
        String eid = XMLEntityManager.expandSystemId(source.getSystemId(), source.getBaseSystemId(), fStrictURI);
        fDTDGrammar = new DTDGrammar(fSymbolTable, new XMLDTDDescription(source.getPublicId(), source.getSystemId(), source.getBaseSystemId(), eid, null));
        fGrammarBucket = new DTDGrammarBucket();
        fGrammarBucket.setStandalone(false);
        fGrammarBucket.setActiveGrammar(fDTDGrammar); 
        // no reason to use grammar bucket's "put" method--we
        // know which grammar it is, and we don't know the root name anyway...

        // actually start the parsing!
        try {
            fDTDScanner.setInputSource(source);
            fDTDScanner.scanDTDExternalSubset(true);
        } catch (EOFException e) {
            // expected behaviour...
        }
        finally {
            // Close all streams opened by the parser.
            fEntityManager.closeReaders();
        }
        if(fDTDGrammar != null && fGrammarPool != null) {
            fGrammarPool.cacheGrammars(XMLDTDDescription.XML_DTD, new Grammar[] {fDTDGrammar});
        }
        return fDTDGrammar;
!!!5020443.java!!!	reset() : void
        super.reset();
        fDTDScanner.reset();
        fEntityManager.reset();
        fErrorReporter.setDocumentLocator(fEntityManager.getEntityScanner());
