class HiddenTagView
!!!9922459.java!!!	HiddenTagView(inout e : Element)
	super(e);
	yAlign = 1;
!!!9922587.java!!!	createComponent() : Component
	JTextField tf = new JTextField(getElement().getName());
	Document doc = getDocument();
	Font font;
	if (doc instanceof StyledDocument) {
	    font = ((StyledDocument)doc).getFont(getAttributes());
	    tf.setFont(font);
	}
	else {
	    font = tf.getFont();
	}
	tf.getDocument().addDocumentListener(this);
	updateYAlign(font);

	// Create a panel to wrap the textfield so that the textfields
	// laf border shows through.
	JPanel panel = new JPanel(new BorderLayout());
	panel.setBackground(null);
	if (isEndTag()) {
	    panel.setBorder(EndBorder);
	}
	else {
	    panel.setBorder(StartBorder);
	}
	panel.add(tf);
	return panel;
!!!9922715.java!!!	getAlignment(in axis : int) : float
	if (axis == View.Y_AXIS) {
	    return yAlign;
	}
	return 0.5f;
!!!9922843.java!!!	getMinimumSpan(in axis : int) : float
	if (axis == View.X_AXIS && isVisible()) {
	    // Default to preferred.
	    return Math.max(30, super.getPreferredSpan(axis));
	}
	return super.getMinimumSpan(axis);
!!!9922971.java!!!	getPreferredSpan(in axis : int) : float
	if (axis == View.X_AXIS && isVisible()) {
	    return Math.max(30, super.getPreferredSpan(axis));
	}
	return super.getPreferredSpan(axis);
!!!9923099.java!!!	getMaximumSpan(in axis : int) : float
	if (axis == View.X_AXIS && isVisible()) {
	    // Default to preferred.
	    return Math.max(30, super.getMaximumSpan(axis));
	}
	return super.getMaximumSpan(axis);
!!!9923227.java!!!	insertUpdate(inout e : DocumentEvent) : void
	updateModelFromText();
!!!9923355.java!!!	removeUpdate(inout e : DocumentEvent) : void
	updateModelFromText();
!!!9923483.java!!!	changedUpdate(inout e : DocumentEvent) : void
	updateModelFromText();
!!!9923611.java!!!	changedUpdate(inout e : DocumentEvent, inout a : Shape, inout f : ViewFactory) : void
	if (!isSettingAttributes) {
	    setTextFromModel();
	}
!!!9923739.java!!!	updateYAlign(inout font : Font) : void
        Container c = getContainer();
	FontMetrics fm = (c != null) ? c.getFontMetrics(font) :
            Toolkit.getDefaultToolkit().getFontMetrics(font);
	float h = fm.getHeight();
	float d = fm.getDescent();
	yAlign = (h - d) / h;
!!!9923867.java!!!	resetBorder() : void
	Component comp = getComponent();

	if (comp != null) {
	    if (isEndTag()) {
		((JPanel)comp).setBorder(EndBorder);
	    }
	    else {
		((JPanel)comp).setBorder(StartBorder);
	    }
	}
!!!9923995.java!!!	setTextFromModel() : void
	if (SwingUtilities.isEventDispatchThread()) {
	    _setTextFromModel();
	}
	else {
	    SwingUtilities.invokeLater(new Runnable() {
		public void run() {
		    _setTextFromModel();
		}
	    });
	}
!!!9924123.java!!!	_setTextFromModel() : void
	Document doc = getDocument();
	try {
	    isSettingAttributes = true;
	    if (doc instanceof AbstractDocument) {
		((AbstractDocument)doc).readLock();
	    }
	    JTextComponent text = getTextComponent();
	    if (text != null) {
		text.setText(getRepresentedText());
		resetBorder();
		Container host = getContainer();
		if (host != null) {
		    preferenceChanged(this, true, true);
		    host.repaint();
		}
	    }
	}
	finally {
	    isSettingAttributes = false;
	    if (doc instanceof AbstractDocument) {
		((AbstractDocument)doc).readUnlock();
	    }
	}
!!!9924251.java!!!	updateModelFromText() : void
	if (!isSettingAttributes) {
	    if (SwingUtilities.isEventDispatchThread()) {
		_updateModelFromText();
	    }
	    else {
		SwingUtilities.invokeLater(new Runnable() {
		    public void run() {
			_updateModelFromText();
		    }
		});
	    }
	}
!!!9924379.java!!!	_updateModelFromText() : void
	Document doc = getDocument();
	Object name = getElement().getAttributes().getAttribute
	    (StyleConstants.NameAttribute);
	if ((name instanceof HTML.UnknownTag) &&
	    (doc instanceof StyledDocument)) {
	    SimpleAttributeSet sas = new SimpleAttributeSet();
	    JTextComponent textComponent = getTextComponent();
	    if (textComponent != null) {
		String text = textComponent.getText();
		isSettingAttributes = true;
		try {
		    sas.addAttribute(StyleConstants.NameAttribute,
				     new HTML.UnknownTag(text));
		    ((StyledDocument)doc).setCharacterAttributes
			(getStartOffset(), getEndOffset() -
			 getStartOffset(), sas, false);
		}
		finally {
		    isSettingAttributes = false;
		}
	    }
	}
!!!9924507.java!!!	getTextComponent() : JTextComponent
	Component comp = getComponent();

	return (comp == null) ? null : (JTextComponent)((Container)comp).
	                               getComponent(0);
!!!9924635.java!!!	getRepresentedText() : String
	String retValue = getElement().getName();
	return (retValue == null) ? "" : retValue;
!!!9924763.java!!!	isEndTag() : boolean
	AttributeSet as = getElement().getAttributes();
	if (as != null) {
	    Object end = as.getAttribute(HTML.Attribute.ENDTAG);
	    if (end != null && (end instanceof String) &&
		((String)end).equals("true")) {
		return true;
	    }
	}
	return false;
