class ICC_Profile
!!!6398491.java!!!	ICC_Profile(in ID : long)
        this.ID = ID;
!!!6398619.java!!!	ICC_Profile(inout pdi : ProfileDeferralInfo)
        this.deferralInfo = pdi;
        this.profileActivator = new ProfileActivator() {
            public void activate() {
                activateDeferredProfile();
            }
        };
        ProfileDeferralMgr.registerDeferral(this.profileActivator);
!!!6398747.java!!!	finalize() : void
        if (ID != 0) {
            CMM.checkStatus(CMM.cmmFreeProfile(ID));
        } else if (profileActivator != null) {
            ProfileDeferralMgr.unregisterDeferral(profileActivator);
        }
!!!6398875.java!!!	getInstance(in data : byte) : ICC_Profile
    ICC_Profile thisProfile;

        long[] theID = new long [1];

        if (ProfileDeferralMgr.deferring) {
            ProfileDeferralMgr.activateProfiles();
        }
        
        try {
            CMM.checkStatus(CMM.cmmLoadProfile(data, theID));
        } catch (CMMException c) {
            throw new IllegalArgumentException("Invalid ICC Profile Data");
        }

        try {
            if ((getColorSpaceType (theID[0]) == ColorSpace.TYPE_GRAY) &&
                (getData (theID[0], icSigMediaWhitePointTag) != null) &&
                (getData (theID[0], icSigGrayTRCTag) != null)) {
                thisProfile = new ICC_ProfileGray (theID[0]);
            }
            else if ((getColorSpaceType (theID[0]) == ColorSpace.TYPE_RGB) &&
                (getData (theID[0], icSigMediaWhitePointTag) != null) &&
                (getData (theID[0], icSigRedColorantTag) != null) &&
                (getData (theID[0], icSigGreenColorantTag) != null) &&
                (getData (theID[0], icSigBlueColorantTag) != null) &&
                (getData (theID[0], icSigRedTRCTag) != null) &&
                (getData (theID[0], icSigGreenTRCTag) != null) &&
                (getData (theID[0], icSigBlueTRCTag) != null)) {
                thisProfile = new ICC_ProfileRGB (theID[0]);
            }
            else {
                thisProfile = new ICC_Profile (theID[0]);
            }
        } catch (CMMException c) {
            thisProfile = new ICC_Profile (theID[0]);
        }
        return thisProfile;
!!!6399003.java!!!	getInstance(in cspace : int) : ICC_Profile
	ICC_Profile thisProfile = null;
	String fileName;

	switch (cspace) {
	case ColorSpace.CS_sRGB:
            synchronized(ICC_Profile.class) {
	        if (sRGBprofile == null) {
		    try {
		        /*
		         * Deferral is only used for standard profiles.
		         * Enabling the appropriate access privileges is handled
		         * at a lower level.
		         */
		        sRGBprofile = getDeferredInstance(
			    new ProfileDeferralInfo("sRGB.pf", 
                                                    ColorSpace.TYPE_RGB,
						    3, CLASS_DISPLAY)); 
		    } catch (IOException e) {
		        throw new IllegalArgumentException(
                              "Can't load standard profile: sRGB.pf");
		    }
	        }
	        thisProfile = sRGBprofile;
            }

	    break;

	case ColorSpace.CS_CIEXYZ:
            synchronized(ICC_Profile.class) {
	        if (XYZprofile == null) {
		    XYZprofile = getStandardProfile("CIEXYZ.pf");
	        }
	        thisProfile = XYZprofile;
            }

	    break;

	case ColorSpace.CS_PYCC:
            synchronized(ICC_Profile.class) {
	        if (PYCCprofile == null) {
		    PYCCprofile = getStandardProfile("PYCC.pf");
	        }
	        thisProfile = PYCCprofile;
            }

	    break;

	case ColorSpace.CS_GRAY:
            synchronized(ICC_Profile.class) {
	        if (GRAYprofile == null) {
		    GRAYprofile = getStandardProfile("GRAY.pf");
	        }
	        thisProfile = GRAYprofile;
            }

	    break;

	case ColorSpace.CS_LINEAR_RGB:
            synchronized(ICC_Profile.class) {
	        if (LINEAR_RGBprofile == null) {
		    LINEAR_RGBprofile = getStandardProfile("LINEAR_RGB.pf");
	        }
	        thisProfile = LINEAR_RGBprofile;
            }

	    break;

	default:
	    throw new IllegalArgumentException("Unknown color space");
	}

        return thisProfile;
!!!6399131.java!!!	getStandardProfile(in name : String) : ICC_Profile
        
	return (ICC_Profile) AccessController.doPrivileged(
	    new PrivilegedAction() {
                 public Object run() {
                     ICC_Profile p = null;
                     try {
                         p = getInstance (name);
                     } catch (IOException ex) {
                         throw new IllegalArgumentException(
			       "Can't load standard profile: " + name);
                     }
                     return p;
                 }
             });
!!!6399259.java!!!	getInstance(in fileName : String) : ICC_Profile
    ICC_Profile thisProfile;
    FileInputStream fis;

        SecurityManager security = System.getSecurityManager();
	if (security != null) {
            security.checkRead(fileName);
        }

        if ((fis = openProfile(fileName)) == null) {
            throw new IOException("Cannot open file " + fileName);
        }

        thisProfile = getInstance(fis);

        fis.close();    /* close the file */
    
        return thisProfile;
!!!6399387.java!!!	getInstance(inout s : InputStream) : ICC_Profile
    byte profileData[];

        if (s instanceof ProfileDeferralInfo) {
            /* hack to detect profiles whose loading can be deferred */
            return getDeferredInstance((ProfileDeferralInfo) s);
        }

        if ((profileData = getProfileDataFromStream(s)) == null) {
            throw new IllegalArgumentException("Invalid ICC Profile Data");
        }

        return getInstance(profileData);
!!!6399515.java!!!	getProfileDataFromStream(inout s : InputStream) : byte
    byte profileData[];
    int profileSize;

        byte header[] = new byte[128];
        int bytestoread = 128;
        int bytesread = 0;
        int n;

        while (bytestoread != 0) {
            if ((n = s.read(header, bytesread, bytestoread)) < 0) {
                return null;
            }
            bytesread += n;
            bytestoread -= n;
        }
        if (header[36] != 0x61 || header[37] != 0x63 ||
            header[38] != 0x73 || header[39] != 0x70) {
            return null;   /* not a valid profile */
        }
        profileSize = ((header[0] & 0xff) << 24) |
                      ((header[1] & 0xff) << 16) |
                      ((header[2] & 0xff) <<  8) |
                       (header[3] & 0xff);
        profileData = new byte[profileSize];
        System.arraycopy(header, 0, profileData, 0, 128);
        bytestoread = profileSize - 128;
        bytesread = 128;
        while (bytestoread != 0) {
            if ((n = s.read(profileData, bytesread, bytestoread)) < 0) {
                return null;
            }
            bytesread += n;
            bytestoread -= n;
        }

        return profileData;
!!!6399643.java!!!	getDeferredInstance(inout pdi : ProfileDeferralInfo) : ICC_Profile

        if (!ProfileDeferralMgr.deferring) {
            return getStandardProfile(pdi.filename);
        }
        if (pdi.colorSpaceType == ColorSpace.TYPE_RGB) {
            return new ICC_ProfileRGB(pdi);
        } else if (pdi.colorSpaceType == ColorSpace.TYPE_GRAY) {
            return new ICC_ProfileGray(pdi);
        } else {
            return new ICC_Profile(pdi);
        }
!!!6399771.java!!!	activateDeferredProfile() : void
    long[] theID = new long [1];
    byte profileData[];
    FileInputStream fis;
    String fileName = deferralInfo.filename;

        profileActivator = null;
        deferralInfo = null;
        if ((fis = openProfile(fileName)) == null) {
            throw new IllegalArgumentException("Cannot open file " + fileName);
        }
        try {
            profileData = getProfileDataFromStream(fis);
            fis.close();    /* close the file */
        }
        catch (IOException e) {
            throw new IllegalArgumentException("Invalid ICC Profile Data" +
                fileName);
        }
        if (profileData == null) {
            throw new IllegalArgumentException("Invalid ICC Profile Data" +
                fileName);
        }
        try {
            CMM.checkStatus(CMM.cmmLoadProfile(profileData, theID));
        } catch (CMMException c) {
            throw new IllegalArgumentException("Invalid ICC Profile Data" +
                fileName);
        }
        ID = theID[0];
!!!6399899.java!!!	getMajorVersion() : int
    byte[] theHeader;
    
        theHeader = getData(icSigHead); /* getData will activate deferred
                                           profiles if necessary */

        return (int) theHeader[8];
!!!6400027.java!!!	getMinorVersion() : int
    byte[] theHeader;
    
        theHeader = getData(icSigHead); /* getData will activate deferred
                                           profiles if necessary */

        return (int) theHeader[9];
!!!6400155.java!!!	getProfileClass() : int
    byte[] theHeader;
    int theClassSig, theClass;
    
        if (deferralInfo != null) {
            return deferralInfo.profileClass; /* Need to have this info for
                                                 ICC_ColorSpace without
                                                 causing a deferred profile
                                                 to be loaded */
        }

        theHeader = getData(icSigHead);

        theClassSig = intFromBigEndian (theHeader, icHdrDeviceClass);
                
        switch (theClassSig) {
        case icSigInputClass:
            theClass = CLASS_INPUT;
            break;

        case icSigDisplayClass:
            theClass = CLASS_DISPLAY;
            break;

        case icSigOutputClass:
            theClass = CLASS_OUTPUT;
            break;

        case icSigLinkClass:
            theClass = CLASS_DEVICELINK;
            break;

        case icSigColorSpaceClass:
            theClass = CLASS_COLORSPACECONVERSION;
            break;

        case icSigAbstractClass:
            theClass = CLASS_ABSTRACT;
            break;

        case icSigNamedColorClass:
            theClass = CLASS_NAMEDCOLOR;
            break;

        default:
            throw new IllegalArgumentException("Unknown profile class");
        }
        
        return theClass;
!!!6400283.java!!!	getColorSpaceType() : int
        if (deferralInfo != null) {
            return deferralInfo.colorSpaceType; /* Need to have this info for
                                                   ICC_ColorSpace without
                                                   causing a deferred profile
                                                   to be loaded */
        }
        return    getColorSpaceType(ID);
!!!6400411.java!!!	getColorSpaceType(in profileID : long) : int
    byte[] theHeader;
    int theColorSpaceSig, theColorSpace;
    
        theHeader = getData(profileID, icSigHead);
        theColorSpaceSig = intFromBigEndian(theHeader, icHdrColorSpace);
        theColorSpace = iccCStoJCS (theColorSpaceSig);
        return theColorSpace;
!!!6400539.java!!!	getPCSType() : int
        if (ProfileDeferralMgr.deferring) {
            ProfileDeferralMgr.activateProfiles();
        }
        return getPCSType(ID);
!!!6400667.java!!!	getPCSType(in profileID : long) : int
    byte[] theHeader;
    int thePCSSig, thePCS;
    
        theHeader = getData(profileID, icSigHead);
        thePCSSig = intFromBigEndian(theHeader, icHdrPcs);
        thePCS = iccCStoJCS(thePCSSig);
        return thePCS;
!!!6400795.java!!!	write(in fileName : String) : void
    FileOutputStream outputFile;
    byte profileData[];

        profileData = getData(); /* this will activate deferred
                                    profiles if necessary */
        outputFile = new FileOutputStream(fileName);
        outputFile.write(profileData);
        outputFile.close ();
!!!6400923.java!!!	write(inout s : OutputStream) : void
    byte profileData[];

        profileData = getData(); /* this will activate deferred
                                    profiles if necessary */
        s.write(profileData);
!!!6401051.java!!!	getData() : byte
    int[] profileSize = new int [1];
    byte[] profileData;

        if (ProfileDeferralMgr.deferring) {
            ProfileDeferralMgr.activateProfiles();
        }

        /* get the number of bytes needed for this profile */
        CMM.checkStatus(CMM.cmmGetProfileSize(ID, profileSize));

        profileData = new byte [profileSize[0]];

        /* get the data for the profile */
        CMM.checkStatus(CMM.cmmGetProfileData(ID, profileData));

        return profileData;
!!!6401179.java!!!	getData(in tagSignature : int) : byte

        if (ProfileDeferralMgr.deferring) {
            ProfileDeferralMgr.activateProfiles();
        }

        return getData(ID, tagSignature);
!!!6401307.java!!!	getData(in profileID : long, in tagSignature : int) : byte
    int[] tagSize = new int [1];
    byte[] tagData;

	try {
            /* get the number of bytes needed for this tag */
            CMM.checkStatus(CMM.cmmGetTagSize(profileID, tagSignature,
                                              tagSize));

            tagData = new byte[tagSize[0]]; /* get an array for the tag */

            /* get the tag's data */
            CMM.checkStatus(CMM.cmmGetTagData(profileID, tagSignature,
                                              tagData));
	} catch(CMMException c) {
	    tagData = null;
	}

        return tagData;
!!!6401435.java!!!	setData(in tagSignature : int, in tagData : byte) : void

        if (ProfileDeferralMgr.deferring) {
            ProfileDeferralMgr.activateProfiles();
        }

        CMM.checkStatus(CMM.cmmSetTagData(ID, tagSignature, tagData));
!!!6401563.java!!!	setRenderingIntent(in renderingIntent : int) : void
        byte[] theHeader = getData(icSigHead);/* getData will activate deferred
                                                 profiles if necessary */
        intToBigEndian (renderingIntent, theHeader, icHdrRenderingIntent);
                                                 /* set the rendering intent */
        setData (icSigHead, theHeader);
!!!6401691.java!!!	getRenderingIntent() : int
        byte[] theHeader = getData(icSigHead);/* getData will activate deferred
                                                 profiles if necessary */
        
        int renderingIntent = intFromBigEndian(theHeader, icHdrRenderingIntent);
                                                 /* set the rendering intent */
        return renderingIntent;
!!!6401819.java!!!	getNumComponents() : int
    byte[]    theHeader;
    int    theColorSpaceSig, theNumComponents;
    
        if (deferralInfo != null) {
            return deferralInfo.numComponents; /* Need to have this info for
                                                  ICC_ColorSpace without
                                                  causing a deferred profile
                                                  to be loaded */
        }
        theHeader = getData(icSigHead);

        theColorSpaceSig = intFromBigEndian (theHeader, icHdrColorSpace);

        switch (theColorSpaceSig) {
        case icSigGrayData:
            theNumComponents = 1;
            break;

        case icSigSpace2CLR:
            theNumComponents = 2;
            break;

        case icSigXYZData:
        case icSigLabData:
        case icSigLuvData:
        case icSigYCbCrData:
        case icSigYxyData:
        case icSigRgbData:
        case icSigHsvData:
        case icSigHlsData:
        case icSigCmyData:
        case icSigSpace3CLR:
            theNumComponents = 3;
            break;

        case icSigCmykData:
        case icSigSpace4CLR:
            theNumComponents = 4;
            break;

        case icSigSpace5CLR:
            theNumComponents = 5;
            break;

        case icSigSpace6CLR:
            theNumComponents = 6;
            break;

        case icSigSpace7CLR:
            theNumComponents = 7;
            break;

        case icSigSpace8CLR:
            theNumComponents = 8;
            break;

        case icSigSpace9CLR:
            theNumComponents = 9;
            break;

        case icSigSpaceACLR:
            theNumComponents = 10;
            break;

        case icSigSpaceBCLR:
            theNumComponents = 11;
            break;

        case icSigSpaceCCLR:
            theNumComponents = 12;
            break;

        case icSigSpaceDCLR:
            theNumComponents = 13;
            break;

        case icSigSpaceECLR:
            theNumComponents = 14;
            break;

        case icSigSpaceFCLR:
            theNumComponents = 15;
            break;

        default:
            throw new ProfileDataException ("invalid ICC color space");
        }
        
        return theNumComponents;
!!!6401947.java!!!	getMediaWhitePoint() : float
        return getXYZTag(icSigMediaWhitePointTag);
                                           /* get the media white point tag */
!!!6402075.java!!!	getXYZTag(in theTagSignature : int) : float
    byte[] theData;
    float[] theXYZNumber;
    int i1, i2, theS15Fixed16;
    
        theData = getData(theTagSignature); /* get the tag data */
                                            /* getData will activate deferred
                                               profiles if necessary */
        
        theXYZNumber = new float [3];        /* array to return */

        /* convert s15Fixed16Number to float */
        for (i1 = 0, i2 = icXYZNumberX; i1 < 3; i1++, i2 += 4) {
            theS15Fixed16 = intFromBigEndian(theData, i2);
            theXYZNumber [i1] = ((float) theS15Fixed16) / 65536.0f;
        }
        return theXYZNumber;
!!!6402203.java!!!	getGamma(in theTagSignature : int) : float
    byte[] theTRCData;
    float theGamma;
    int theU8Fixed8;

        theTRCData = getData(theTagSignature); /* get the TRC */
                                               /* getData will activate deferred
                                                  profiles if necessary */
        
        if (intFromBigEndian (theTRCData, icCurveCount) != 1) {
            throw new ProfileDataException ("TRC is not a gamma");
        }

        /* convert u8Fixed8 to float */
        theU8Fixed8 = (shortFromBigEndian(theTRCData, icCurveData)) & 0xffff;
            
        theGamma = ((float) theU8Fixed8) / 256.0f;
        
        return theGamma;
!!!6402331.java!!!	getTRC(in theTagSignature : int) : short
    byte[] theTRCData;
    short[] theTRC;
    int i1, i2, nElements, theU8Fixed8;

        theTRCData = getData(theTagSignature); /* get the TRC */
                                               /* getData will activate deferred
                                                  profiles if necessary */
        
        nElements = intFromBigEndian(theTRCData, icCurveCount);

        if (nElements == 1) {
            throw new ProfileDataException("TRC is not a table");
        }

        /* make the short array */
        theTRC = new short [nElements];

        for (i1 = 0, i2 = icCurveData; i1 < nElements; i1++, i2 += 2) {
            theTRC[i1] = shortFromBigEndian(theTRCData, i2);
        }
        
        return theTRC;
!!!6402459.java!!!	iccCStoJCS(in theColorSpaceSig : int) : int
    int theColorSpace;

        switch (theColorSpaceSig) {
        case icSigXYZData:
            theColorSpace = ColorSpace.TYPE_XYZ;
            break;

        case icSigLabData:
            theColorSpace = ColorSpace.TYPE_Lab;
            break;

        case icSigLuvData:
            theColorSpace = ColorSpace.TYPE_Luv;
            break;

        case icSigYCbCrData:
            theColorSpace = ColorSpace.TYPE_YCbCr;
            break;

        case icSigYxyData:
            theColorSpace = ColorSpace.TYPE_Yxy;
            break;

        case icSigRgbData:
            theColorSpace = ColorSpace.TYPE_RGB;
            break;

        case icSigGrayData:
            theColorSpace = ColorSpace.TYPE_GRAY;
            break;

        case icSigHsvData:
            theColorSpace = ColorSpace.TYPE_HSV;
            break;

        case icSigHlsData:
            theColorSpace = ColorSpace.TYPE_HLS;
            break;

        case icSigCmykData:
            theColorSpace = ColorSpace.TYPE_CMYK;
            break;

        case icSigCmyData:
            theColorSpace = ColorSpace.TYPE_CMY;
            break;

        case icSigSpace2CLR:
            theColorSpace = ColorSpace.TYPE_2CLR;
            break;

        case icSigSpace3CLR:
            theColorSpace = ColorSpace.TYPE_3CLR;
            break;

        case icSigSpace4CLR:
            theColorSpace = ColorSpace.TYPE_4CLR;
            break;

        case icSigSpace5CLR:
            theColorSpace = ColorSpace.TYPE_5CLR;
            break;

        case icSigSpace6CLR:
            theColorSpace = ColorSpace.TYPE_6CLR;
            break;

        case icSigSpace7CLR:
            theColorSpace = ColorSpace.TYPE_7CLR;
            break;

        case icSigSpace8CLR:
            theColorSpace = ColorSpace.TYPE_8CLR;
            break;

        case icSigSpace9CLR:
            theColorSpace = ColorSpace.TYPE_9CLR;
            break;

        case icSigSpaceACLR:
            theColorSpace = ColorSpace.TYPE_ACLR;
            break;

        case icSigSpaceBCLR:
            theColorSpace = ColorSpace.TYPE_BCLR;
            break;

        case icSigSpaceCCLR:
            theColorSpace = ColorSpace.TYPE_CCLR;
            break;

        case icSigSpaceDCLR:
            theColorSpace = ColorSpace.TYPE_DCLR;
            break;

        case icSigSpaceECLR:
            theColorSpace = ColorSpace.TYPE_ECLR;
            break;

        case icSigSpaceFCLR:
            theColorSpace = ColorSpace.TYPE_FCLR;
            break;

        default:
            throw new IllegalArgumentException ("Unknown color space");
        }
        
        return theColorSpace;
!!!6402587.java!!!	intFromBigEndian(in array : byte, in index : int) : int
        return (((array[index]   & 0xff) << 24) |
                ((array[index+1] & 0xff) << 16) |
                ((array[index+2] & 0xff) <<  8) |
                 (array[index+3] & 0xff));
!!!6402715.java!!!	intToBigEndian(in value : int, in array : byte, in index : int) : void
            array[index]   = (byte) (value >> 24);
            array[index+1] = (byte) (value >> 16);
            array[index+2] = (byte) (value >>  8);
            array[index+3] = (byte) (value);
!!!6402843.java!!!	shortFromBigEndian(in array : byte, in index : int) : short
        return (short) (((array[index]   & 0xff) << 8) |
                         (array[index+1] & 0xff));
!!!6402971.java!!!	shortToBigEndian(in value : short, in array : byte, in index : int) : void
            array[index]   = (byte) (value >> 8);
            array[index+1] = (byte) (value);
!!!6403099.java!!!	openProfile(in fileName : String) : FileInputStream
	return (FileInputStream)java.security.AccessController.doPrivileged(
	    new java.security.PrivilegedAction() {
	    public Object run() {
		return privilegedOpenProfile(fileName);
	    }
	});
!!!6403227.java!!!	privilegedOpenProfile(in fileName : String) : FileInputStream
        FileInputStream fis = null;
        String path, dir, fullPath;

        File f = new File(fileName); /* try absolute file name */

        if ((!f.isFile()) &&
		((path = System.getProperty("java.iccprofile.path")) != null)){
                                    /* try relative to java.iccprofile.path */
	        StringTokenizer st = 
		    new StringTokenizer(path, File.pathSeparator);
                while (st.hasMoreTokens() && (!f.isFile())) {
		    dir = st.nextToken();
		        fullPath = dir + File.separatorChar + fileName;
                    f = new File(fullPath);
		}
	    }

        if ((!f.isFile()) &&
		((path = System.getProperty("java.class.path")) != null)) {
                                    /* try relative to java.class.path */
	        StringTokenizer st =
		    new StringTokenizer(path, File.pathSeparator);
                while (st.hasMoreTokens() && (!f.isFile())) {
		    dir = st.nextToken();
		        fullPath = dir + File.separatorChar + fileName;
                    f = new File(fullPath);
		}
	    }

        if (!f.isFile()) { /* try the directory of built-in profiles */
	        dir = System.getProperty("java.home") +
		    File.separatorChar + "lib" + File.separatorChar + "cmm";
		fullPath = dir + File.separatorChar + fileName;
                f = new File(fullPath);
	    }

        if (f.isFile()) {
            try {
                fis = new FileInputStream(f);
            } catch (FileNotFoundException e) {
            }
        }
        return fis;
!!!6403355.java!!!	writeObject(inout s : ObjectOutputStream) : void
	s.defaultWriteObject();

	String csName = null;
	if (this == sRGBprofile) {
	    csName = "CS_sRGB";
	} else if (this == XYZprofile) {
	    csName = "CS_CIEXYZ";
	} else if (this == PYCCprofile) {
	    csName = "CS_PYCC";
	} else if (this == GRAYprofile) {
	    csName = "CS_GRAY";
	} else if (this == LINEAR_RGBprofile) {
	    csName = "CS_LINEAR_RGB";
	}

	// Future versions may choose to write profile data for new
	// predefined color spaces as well, if any will be introduced,
	// so that old versions that don't recognize the new CS name
	// may fall back to constructing profile from the data.
	byte[] data = null;
	if (csName == null) {
	    // getData will activate deferred profile if necessary
	    data = getData();
	}

	s.writeObject(csName);
	s.writeObject(data);
!!!6403483.java!!!	readObject(inout s : ObjectInputStream) : void
	s.defaultReadObject();

	String csName = (String)s.readObject();
	byte[] data = (byte[])s.readObject();

	int cspace = 0;		// ColorSpace.CS_* constant if known
	boolean isKnownPredefinedCS = false;
	if (csName != null) {
	    isKnownPredefinedCS = true;
	    if (csName.equals("CS_sRGB")) {
		cspace = ColorSpace.CS_sRGB;
	    } else if (csName.equals("CS_CIEXYZ")) {
		cspace = ColorSpace.CS_CIEXYZ;
	    } else if (csName.equals("CS_PYCC")) {
		cspace = ColorSpace.CS_PYCC;
	    } else if (csName.equals("CS_GRAY")) {
		cspace = ColorSpace.CS_GRAY;
	    } else if (csName.equals("CS_LINEAR_RGB")) {
		cspace = ColorSpace.CS_LINEAR_RGB;
	    } else {
		isKnownPredefinedCS = false;
	    }
	}

	if (isKnownPredefinedCS) {
	    resolvedDeserializedProfile = getInstance(cspace);
	} else {
	    resolvedDeserializedProfile = getInstance(data);
	}
!!!6403611.java!!!	readResolve() : Object
	return resolvedDeserializedProfile;
