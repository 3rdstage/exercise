class MultiTextUI
!!!9610139.java!!!	getUIs() : ComponentUI
        return MultiLookAndFeel.uisToArray(uis);
!!!9610267.java!!!	getToolTipText(inout a : JTextComponent, inout b : Point) : String
        String returnValue = 
            ((TextUI) (uis.elementAt(0))).getToolTipText(a,b);
        for (int i = 1; i < uis.size(); i++) {
            ((TextUI) (uis.elementAt(i))).getToolTipText(a,b);
        }
        return returnValue;
!!!9610395.java!!!	modelToView(inout a : JTextComponent, in b : int) : Rectangle
        Rectangle returnValue = 
            ((TextUI) (uis.elementAt(0))).modelToView(a,b);
        for (int i = 1; i < uis.size(); i++) {
            ((TextUI) (uis.elementAt(i))).modelToView(a,b);
        }
        return returnValue;
!!!9610523.java!!!	modelToView(inout a : JTextComponent, in b : int, inout c : Bias) : Rectangle
        Rectangle returnValue = 
            ((TextUI) (uis.elementAt(0))).modelToView(a,b,c);
        for (int i = 1; i < uis.size(); i++) {
            ((TextUI) (uis.elementAt(i))).modelToView(a,b,c);
        }
        return returnValue;
!!!9610651.java!!!	viewToModel(inout a : JTextComponent, inout b : Point) : int
        int returnValue = 
            ((TextUI) (uis.elementAt(0))).viewToModel(a,b);
        for (int i = 1; i < uis.size(); i++) {
            ((TextUI) (uis.elementAt(i))).viewToModel(a,b);
        }
        return returnValue;
!!!9610779.java!!!	viewToModel(inout a : JTextComponent, inout b : Point, inout c : Bias) : int
        int returnValue = 
            ((TextUI) (uis.elementAt(0))).viewToModel(a,b,c);
        for (int i = 1; i < uis.size(); i++) {
            ((TextUI) (uis.elementAt(i))).viewToModel(a,b,c);
        }
        return returnValue;
!!!9610907.java!!!	getNextVisualPositionFrom(inout a : JTextComponent, in b : int, inout c : Bias, in d : int, inout e : Bias) : int
        int returnValue = 
            ((TextUI) (uis.elementAt(0))).getNextVisualPositionFrom(a,b,c,d,e);
        for (int i = 1; i < uis.size(); i++) {
            ((TextUI) (uis.elementAt(i))).getNextVisualPositionFrom(a,b,c,d,e);
        }
        return returnValue;
!!!9611035.java!!!	damageRange(inout a : JTextComponent, in b : int, in c : int) : void
        for (int i = 0; i < uis.size(); i++) {
            ((TextUI) (uis.elementAt(i))).damageRange(a,b,c);
        }
!!!9611163.java!!!	damageRange(inout a : JTextComponent, in b : int, in c : int, inout d : Bias, inout e : Bias) : void
        for (int i = 0; i < uis.size(); i++) {
            ((TextUI) (uis.elementAt(i))).damageRange(a,b,c,d,e);
        }
!!!9611291.java!!!	getEditorKit(inout a : JTextComponent) : EditorKit
        EditorKit returnValue = 
            ((TextUI) (uis.elementAt(0))).getEditorKit(a);
        for (int i = 1; i < uis.size(); i++) {
            ((TextUI) (uis.elementAt(i))).getEditorKit(a);
        }
        return returnValue;
!!!9611419.java!!!	getRootView(inout a : JTextComponent) : View
        View returnValue = 
            ((TextUI) (uis.elementAt(0))).getRootView(a);
        for (int i = 1; i < uis.size(); i++) {
            ((TextUI) (uis.elementAt(i))).getRootView(a);
        }
        return returnValue;
!!!9611547.java!!!	contains(inout a : JComponent, in b : int, in c : int) : boolean
        boolean returnValue = 
            ((ComponentUI) (uis.elementAt(0))).contains(a,b,c);
        for (int i = 1; i < uis.size(); i++) {
            ((ComponentUI) (uis.elementAt(i))).contains(a,b,c);
        }
        return returnValue;
!!!9611675.java!!!	update(inout a : Graphics, inout b : JComponent) : void
        for (int i = 0; i < uis.size(); i++) {
            ((ComponentUI) (uis.elementAt(i))).update(a,b);
        }
!!!9611803.java!!!	createUI(inout a : JComponent) : ComponentUI
        ComponentUI mui = new MultiTextUI();
        return MultiLookAndFeel.createUIs(mui,
                                          ((MultiTextUI) mui).uis,
                                          a);
!!!9611931.java!!!	installUI(inout a : JComponent) : void
        for (int i = 0; i < uis.size(); i++) {
            ((ComponentUI) (uis.elementAt(i))).installUI(a);
        }
!!!9612059.java!!!	uninstallUI(inout a : JComponent) : void
        for (int i = 0; i < uis.size(); i++) {
            ((ComponentUI) (uis.elementAt(i))).uninstallUI(a);
        }
!!!9612187.java!!!	paint(inout a : Graphics, inout b : JComponent) : void
        for (int i = 0; i < uis.size(); i++) {
            ((ComponentUI) (uis.elementAt(i))).paint(a,b);
        }
!!!9612315.java!!!	getPreferredSize(inout a : JComponent) : Dimension
        Dimension returnValue = 
            ((ComponentUI) (uis.elementAt(0))).getPreferredSize(a);
        for (int i = 1; i < uis.size(); i++) {
            ((ComponentUI) (uis.elementAt(i))).getPreferredSize(a);
        }
        return returnValue;
!!!9612443.java!!!	getMinimumSize(inout a : JComponent) : Dimension
        Dimension returnValue = 
            ((ComponentUI) (uis.elementAt(0))).getMinimumSize(a);
        for (int i = 1; i < uis.size(); i++) {
            ((ComponentUI) (uis.elementAt(i))).getMinimumSize(a);
        }
        return returnValue;
!!!9612571.java!!!	getMaximumSize(inout a : JComponent) : Dimension
        Dimension returnValue = 
            ((ComponentUI) (uis.elementAt(0))).getMaximumSize(a);
        for (int i = 1; i < uis.size(); i++) {
            ((ComponentUI) (uis.elementAt(i))).getMaximumSize(a);
        }
        return returnValue;
!!!9612699.java!!!	getAccessibleChildrenCount(inout a : JComponent) : int
        int returnValue = 
            ((ComponentUI) (uis.elementAt(0))).getAccessibleChildrenCount(a);
        for (int i = 1; i < uis.size(); i++) {
            ((ComponentUI) (uis.elementAt(i))).getAccessibleChildrenCount(a);
        }
        return returnValue;
!!!9612827.java!!!	getAccessibleChild(inout a : JComponent, in b : int) : Accessible
        Accessible returnValue = 
            ((ComponentUI) (uis.elementAt(0))).getAccessibleChild(a,b);
        for (int i = 1; i < uis.size(); i++) {
            ((ComponentUI) (uis.elementAt(i))).getAccessibleChild(a,b);
        }
        return returnValue;
