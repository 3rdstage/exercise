class WindowsMenuUI
!!!2986907.java!!!	createUI(inout x : JComponent) : ComponentUI
	return new WindowsMenuUI();
!!!2987035.java!!!	installDefaults() : void
	super.installDefaults();
	if (!WindowsLookAndFeel.isClassicWindows()) {
	    menuItem.setRolloverEnabled(true);
	}
!!!2987163.java!!!	paintBackground(inout g : Graphics, inout menuItem : JMenuItem, inout bgColor : Color) : void
        if (WindowsMenuItemUI.isVistaPainting()) {
            WindowsMenuItemUI.paintBackground(accessor, g, menuItem, bgColor);
            return;
        } 
        
	JMenu menu = (JMenu)menuItem;
	ButtonModel model = menu.getModel();

	// Use superclass method for the old Windows LAF,
        // for submenus, and for XP toplevel if selected or pressed
	if (WindowsLookAndFeel.isClassicWindows() ||
	    !menu.isTopLevelMenu() ||
	    (XPStyle.getXP() != null && (model.isArmed() || model.isSelected()))) {

	    super.paintBackground(g, menu, bgColor);
	    return;
	}

	Color oldColor = g.getColor();
        int menuWidth = menu.getWidth();
        int menuHeight = menu.getHeight();

	UIDefaults table = UIManager.getLookAndFeelDefaults();
	Color highlight = table.getColor("controlLtHighlight");
	Color shadow = table.getColor("controlShadow");

	g.setColor(menu.getBackground());
	g.fillRect(0,0, menuWidth, menuHeight);

        if (menu.isOpaque()) {
            if (model.isArmed() || model.isSelected()) {
		// Draw a lowered bevel border
		g.setColor(shadow);
		g.drawLine(0,0, menuWidth - 1,0);
		g.drawLine(0,0, 0,menuHeight - 2);

		g.setColor(highlight);
		g.drawLine(menuWidth - 1,0, menuWidth - 1,menuHeight - 2);
		g.drawLine(0,menuHeight - 2, menuWidth - 1,menuHeight - 2);
            } else if (model.isRollover() && model.isEnabled()) {
		// Only paint rollover if no other menu on menubar is selected
		boolean otherMenuSelected = false;
		MenuElement[] menus = ((JMenuBar)menu.getParent()).getSubElements();
		for (int i = 0; i < menus.length; i++) {
		    if (((JMenuItem)menus[i]).isSelected()) {
			otherMenuSelected = true;
			break;
		    }
		}
		if (!otherMenuSelected) {
		    if (XPStyle.getXP() != null) {
			g.setColor(selectionBackground); // Uses protected field.
			g.fillRect(0, 0, menuWidth, menuHeight);
		    } else {
			// Draw a raised bevel border
			g.setColor(highlight);
			g.drawLine(0,0, menuWidth - 1,0);
			g.drawLine(0,0, 0,menuHeight - 2);

			g.setColor(shadow);
			g.drawLine(menuWidth - 1,0, menuWidth - 1,menuHeight - 2);
			g.drawLine(0,menuHeight - 2, menuWidth - 1,menuHeight - 2);
		    }
		}
            }
        }
	g.setColor(oldColor);
!!!2987291.java!!!	paintText(inout g : Graphics, inout menuItem : JMenuItem, inout textRect : Rectangle, in text : String) : void
        if (WindowsMenuItemUI.isVistaPainting()) {
            WindowsMenuItemUI.paintText(accessor, g, menuItem, textRect, text);
            return;
        }
	JMenu menu = (JMenu)menuItem;
	ButtonModel model = menuItem.getModel();
        Color oldColor = g.getColor();

	// Only paint rollover if no other menu on menubar is selected
	boolean paintRollover = model.isRollover();
	if (paintRollover && menu.isTopLevelMenu()) {
	    MenuElement[] menus = ((JMenuBar)menu.getParent()).getSubElements();
	    for (int i = 0; i < menus.length; i++) {
		if (((JMenuItem)menus[i]).isSelected()) {
		    paintRollover = false;
		    break;
		}
	    }
	}

	if ((model.isSelected() && (WindowsLookAndFeel.isClassicWindows() ||
				    !menu.isTopLevelMenu())) ||
	    (XPStyle.getXP() != null && (paintRollover ||
					 model.isArmed() ||
					 model.isSelected()))) {
	    g.setColor(selectionForeground); // Uses protected field.
	}

        WindowsGraphicsUtils.paintText(g, menuItem, textRect, text, 0);
 
        g.setColor(oldColor);
!!!2987419.java!!!	createMouseInputListener(inout c : JComponent) : MouseInputListener
        return new WindowsMouseInputHandler();
