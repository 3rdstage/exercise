JAVA PROFILE 1.0.1, created Mon Jul 14 17:53:19 2008

Header for -agentlib:hprof (or -Xrunhprof) ASCII Output (J2SE 1.5 JVMTI based)

@(#)jvm.hprof.txt	1.3 04/02/09

 Copyright (c) 2004 Sun Microsystems, Inc. All  Rights Reserved.

WARNING!  This file format is under development, and is subject to
change without notice.

This file contains the following types of records:

THREAD START
THREAD END      mark the lifetime of Java threads

TRACE           represents a Java stack trace.  Each trace consists
                of a series of stack frames.  Other records refer to
                TRACEs to identify (1) where object allocations have
                taken place, (2) the frames in which GC roots were
                found, and (3) frequently executed methods.

HEAP DUMP       is a complete snapshot of all live objects in the Java
                heap.  Following distinctions are made:

                ROOT    root set as determined by GC
                CLS     classes 
                OBJ     instances
                ARR     arrays

SITES           is a sorted list of allocation sites.  This identifies
                the most heavily allocated object types, and the TRACE
                at which those allocations occurred.

CPU SAMPLES     is a statistical profile of program execution.  The VM
                periodically samples all running threads, and assigns
                a quantum to active TRACEs in those threads.  Entries
                in this record are TRACEs ranked by the percentage of
                total quanta they consumed; top-ranked TRACEs are
                typically hot spots in the program.

CPU TIME        is a profile of program execution obtained by measuring
                the time spent in individual methods (excluding the time
                spent in callees), as well as by counting the number of
                times each method is called. Entries in this record are
                TRACEs ranked by the percentage of total CPU time. The
                "count" field indicates the number of times each TRACE 
                is invoked.

MONITOR TIME    is a profile of monitor contention obtained by measuring
                the time spent by a thread waiting to enter a monitor.
                Entries in this record are TRACEs ranked by the percentage
                of total monitor contention time and a brief description
                of the monitor.  The "count" field indicates the number of 
                times the monitor was contended at that TRACE.

MONITOR DUMP    is a complete snapshot of all the monitors and threads in 
                the System.

HEAP DUMP, SITES, CPU SAMPLES|TIME and MONITOR DUMP|TIME records are generated 
at program exit.  They can also be obtained during program execution by typing 
Ctrl-\ (on Solaris) or by typing Ctrl-Break (on Win32).

--------

THREAD START (obj=50000125, id = 200001, name="main", group="main")
THREAD START (obj=50000126, id = 200004, name="Signal Dispatcher", group="system")
THREAD END (id = 200001)
THREAD START (obj=5000017f, id = 200007, name="DestroyJavaVM", group="main")
THREAD END (id = 200007)
THREAD END (id = 200002)
TRACE 300010: (thread=200001)
	java.util.zip.ZipFile.open(ZipFile.java:Unknown line)
	java.util.zip.ZipFile.<init>(ZipFile.java:203)
	java.util.jar.JarFile.<init>(JarFile.java:132)
	java.util.jar.JarFile.<init>(JarFile.java:70)
TRACE 300075: (thread=200001)
	java.util.regex.Pattern.compile(Pattern.java:1414)
	java.util.regex.Pattern.<init>(Pattern.java:1124)
	java.util.regex.Pattern.compile(Pattern.java:817)
	sun.misc.FloatingDecimal.<clinit>(FloatingDecimal.java:1852)
TRACE 300079: (thread=200001)
	sun.misc.FDBigInt.mult(FloatingDecimal.java:2566)
	sun.misc.FloatingDecimal.dtoa(FloatingDecimal.java:837)
	sun.misc.FloatingDecimal.<init>(FloatingDecimal.java:442)
	java.lang.StringBuffer.append(StringBuffer.java:365)
TRACE 300083: (thread=200001)
	sun.misc.FDBigInt.add(FloatingDecimal.java:2658)
	sun.misc.FloatingDecimal.dtoa(FloatingDecimal.java:840)
	sun.misc.FloatingDecimal.<init>(FloatingDecimal.java:442)
	java.lang.StringBuffer.append(StringBuffer.java:365)
TRACE 300038: (thread=200001)
	java.lang.StringBuffer.append(StringBuffer.java:365)
	thirdstage.exercise.tuning.profile.ProfileTest.main(ProfileTest.java:37)
TRACE 300082: (thread=200001)
	java.lang.Double.doubleToLongBits(Double.java:Unknown line)
	java.lang.Double.hashCode(Double.java:665)
	java.util.Hashtable.put(Hashtable.java:401)
	thirdstage.exercise.tuning.profile.ProfileTest.main(ProfileTest.java:38)
TRACE 300089: (thread=200001)
	sun.misc.FDBigInt.quoRemIteration(FloatingDecimal.java:2785)
	sun.misc.FloatingDecimal.dtoa(FloatingDecimal.java:836)
	sun.misc.FloatingDecimal.<init>(FloatingDecimal.java:442)
	java.lang.StringBuffer.append(StringBuffer.java:365)
TRACE 300086: (thread=200001)
	sun.misc.FloatingDecimal.roundup(FloatingDecimal.java:368)
	sun.misc.FloatingDecimal.dtoa(FloatingDecimal.java:865)
	sun.misc.FloatingDecimal.<init>(FloatingDecimal.java:442)
	java.lang.StringBuffer.append(StringBuffer.java:365)
TRACE 300087: (thread=200001)
	java.lang.Double.doubleToLongBits(Double.java:Unknown line)
	java.lang.Double.equals(Double.java:708)
	java.util.Hashtable.put(Hashtable.java:404)
	thirdstage.exercise.tuning.profile.ProfileTest.main(ProfileTest.java:38)
TRACE 300081: (thread=200001)
	java.lang.System.arraycopy(System.java:Unknown line)
	java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:519)
	java.lang.StringBuffer.append(StringBuffer.java:307)
	sun.misc.FloatingDecimal.appendTo(FloatingDecimal.java:977)
TRACE 300090: (thread=200001)
	java.lang.StringBuffer.setLength(StringBuffer.java:154)
	thirdstage.exercise.tuning.profile.ProfileTest.main(ProfileTest.java:34)
TRACE 300011: (thread=200001)
	java.io.WinNTFileSystem.getLastModifiedTime(WinNTFileSystem.java:Unknown line)
	java.io.File.lastModified(File.java:795)
	java.util.zip.ZipFile.<init>(ZipFile.java:203)
	java.util.jar.JarFile.<init>(JarFile.java:132)
TRACE 300080: (thread=200001)
	sun.misc.FDBigInt.add(FloatingDecimal.java:2657)
	sun.misc.FloatingDecimal.dtoa(FloatingDecimal.java:840)
	sun.misc.FloatingDecimal.<init>(FloatingDecimal.java:442)
	java.lang.StringBuffer.append(StringBuffer.java:365)
TRACE 300091: (thread=200001)
	java.lang.StrictMath.floor(StrictMath.java:Unknown line)
	java.lang.Math.floor(Math.java:407)
	sun.misc.FloatingDecimal.dtoa(FloatingDecimal.java:603)
	sun.misc.FloatingDecimal.<init>(FloatingDecimal.java:442)
TRACE 300088: (thread=200001)
	java.lang.Double.doubleToLongBits(Double.java:Unknown line)
	sun.misc.FloatingDecimal.<init>(FloatingDecimal.java:390)
	java.lang.StringBuffer.append(StringBuffer.java:365)
	thirdstage.exercise.tuning.profile.ProfileTest.main(ProfileTest.java:37)
TRACE 300092: (thread=200001)
	java.lang.StringBuffer.setLength(StringBuffer.java:154)
	thirdstage.exercise.tuning.profile.ProfileTest.main(ProfileTest.java:34)
TRACE 300045: (thread=200001)
	java.util.regex.Pattern.sequence(Pattern.java:1727)
	java.util.regex.Pattern.expr(Pattern.java:1687)
	java.util.regex.Pattern.group0(Pattern.java:2457)
	java.util.regex.Pattern.sequence(Pattern.java:1715)
TRACE 300093: (thread=200001)
	java.util.Hashtable.put(Hashtable.java:403)
	thirdstage.exercise.tuning.profile.ProfileTest.main(ProfileTest.java:43)
TRACE 300022: (thread=200001)
	sun.misc.URLClassPath$FileLoader$1.getInputStream(URLClassPath.java:899)
	sun.misc.Resource.cachedInputStream(Resource.java:58)
	sun.misc.Resource.getByteBuffer(Resource.java:113)
	java.net.URLClassLoader.defineClass(URLClassLoader.java:249)
CPU SAMPLES BEGIN (total = 40) Mon Jul 14 17:53:21 2008
rank   self  accum   count trace method
   1 30.00% 30.00%      12 300010 java.util.zip.ZipFile.open
   2 10.00% 40.00%       4 300075 java.util.regex.Pattern.compile
   3  7.50% 47.50%       3 300079 sun.misc.FDBigInt.mult
   4  7.50% 55.00%       3 300083 sun.misc.FDBigInt.add
   5  7.50% 62.50%       3 300038 java.lang.StringBuffer.append
   6  5.00% 67.50%       2 300082 java.lang.Double.doubleToLongBits
   7  2.50% 70.00%       1 300089 sun.misc.FDBigInt.quoRemIteration
   8  2.50% 72.50%       1 300086 sun.misc.FloatingDecimal.roundup
   9  2.50% 75.00%       1 300087 java.lang.Double.doubleToLongBits
  10  2.50% 77.50%       1 300081 java.lang.System.arraycopy
  11  2.50% 80.00%       1 300090 java.lang.StringBuffer.setLength
  12  2.50% 82.50%       1 300011 java.io.WinNTFileSystem.getLastModifiedTime
  13  2.50% 85.00%       1 300080 sun.misc.FDBigInt.add
  14  2.50% 87.50%       1 300091 java.lang.StrictMath.floor
  15  2.50% 90.00%       1 300088 java.lang.Double.doubleToLongBits
  16  2.50% 92.50%       1 300092 java.lang.StringBuffer.setLength
  17  2.50% 95.00%       1 300045 java.util.regex.Pattern.sequence
  18  2.50% 97.50%       1 300093 java.util.Hashtable.put
  19  2.50% 100.00%       1 300022 sun.misc.URLClassPath$FileLoader$1.getInputStream
CPU SAMPLES END
