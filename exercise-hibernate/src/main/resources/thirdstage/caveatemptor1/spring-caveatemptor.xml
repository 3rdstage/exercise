<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.0.xsd">

   
	<bean id="defaultDataSource"
		class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<description>
		Default java DataSource for CaveatEmptor application 
		</description>
		<property name="driverClassName" value="com.mysql.jdbc.Driver"/>
		<property name="url" value="jdbc:mysql://127.0.0.1:3306/caveatemptor1?useUnicode=true&amp;characterEncoding=UTF-8"/>
		<property name="username" value="caveatemptor"/>
		<property name="password" value="caveatemptor"/>
		<property name="defaultAutoCommit" value="false"/>
		<property name="maxActive" value="10"/>
		<property name="maxIdle" value="10"/>
		<property name="minIdle" value="0"/>
		<property name="initialSize" value="10"/>		
	</bean>

	<!-- 
	IMPORTANT Lazy connection datasource with Hibernate
	Using lazy connection datasource proxy is recommended in API documentation of
	AbstractSessionFactoryBean.setDataSource method which says the following :
	
	"If using HibernateTransactionManager as transaction strategy, 
	consider proxying your target DataSource with a LazyConnectionDataSourceProxy. 
	This defers fetching of an actual JDBC Connection until 
	the first JDBC Statement gets executed, even within JDBC transactions 
	(as performed by HibernateTransactionManager). 
	Such lazy fetching is particularly beneficial for read-only operations, 
	in particular if the chances of resolving the result in the second-level 
	cache are high."
	-->
	<bean id="lazyConnectionDataSource"
		class="org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy">
		<description>Lazy connection proxy for default datasource</description>
		<property name="targetDataSource" ref="defaultDataSource"/>
	</bean>

	<bean id="defaultHibernateSessionFactory"
	   class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="lazyConnectionDataSource"/>
		<property name="configLocation" value="classpath:thirdstage/caveatemptor1/hibernate-caveatemptor.cfg.xml"/>
	</bean>
	
	<bean id="defaultTransactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="defaultHibernateSessionFactory"/>
		
	</bean>

<!--	<tx:annotation-driven -->
<!--		transaction-manager="defaultTransactionManager"-->
<!--		mode="proxy"-->
<!--		proxy-target-class="false"-->
<!--	/>-->
	
</beans>
